// --------------------------------------------------------------------------------------------------------------------
// <copyright company="Aspose" file="PdfApi.cs">
//   Copyright (c) 2018 Aspose.Pdf for Cloud
// </copyright>
// <summary>
//   Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
// 
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
// 
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
// </summary>
// --------------------------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Aspose.Pdf.Cloud.Sdk.Client;
using Aspose.Pdf.Cloud.Sdk.Model;

namespace Aspose.Pdf.Cloud.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPdfApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete document field by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fieldName">The field name/</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse DeleteField (string name, string fieldName, string storage = null, string folder = null);

        /// <summary>
        /// Delete document field by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fieldName">The field name/</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> DeleteFieldWithHttpInfo (string name, string fieldName, string storage = null, string folder = null);
        /// <summary>
        /// Delete document page by its number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse DeletePage (string name, int? pageNumber, string storage = null, string folder = null);

        /// <summary>
        /// Delete document page by its number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> DeletePageWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null);
        /// <summary>
        /// Delete custom document properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse DeleteProperties (string name, string storage = null, string folder = null);

        /// <summary>
        /// Delete custom document properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> DeletePropertiesWithHttpInfo (string name, string storage = null, string folder = null);
        /// <summary>
        /// Delete document property.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="propertyName"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse DeleteProperty (string name, string propertyName, string storage = null, string folder = null);

        /// <summary>
        /// Delete document property.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="propertyName"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> DeletePropertyWithHttpInfo (string name, string propertyName, string storage = null, string folder = null);
        /// <summary>
        /// Read common document info or convert to some format if the format specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="format">The format to convert. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="outPath">Path to save result (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetDocument (string name, string format = null, string storage = null, string folder = null, string outPath = null);

        /// <summary>
        /// Read common document info or convert to some format if the format specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="format">The format to convert. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="outPath">Path to save result (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetDocumentWithHttpInfo (string name, string format = null, string storage = null, string folder = null, string outPath = null);
        /// <summary>
        /// Read document attachment info by its index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="attachmentIndex">The attachment index.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AttachmentResponse</returns>
        AttachmentResponse GetDocumentAttachmentByIndex (string name, int? attachmentIndex, string storage = null, string folder = null);

        /// <summary>
        /// Read document attachment info by its index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="attachmentIndex">The attachment index.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AttachmentResponse</returns>
        ApiResponse<AttachmentResponse> GetDocumentAttachmentByIndexWithHttpInfo (string name, int? attachmentIndex, string storage = null, string folder = null);
        /// <summary>
        /// Read document attachments info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AttachmentsResponse</returns>
        AttachmentsResponse GetDocumentAttachments (string name, string storage = null, string folder = null);

        /// <summary>
        /// Read document attachments info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AttachmentsResponse</returns>
        ApiResponse<AttachmentsResponse> GetDocumentAttachmentsWithHttpInfo (string name, string storage = null, string folder = null);
        /// <summary>
        /// Read document bookmark/bookmarks (including children).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="bookmarkPath">The bookmark path. Leave it empty if you want to get all the bookmarks in the document. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetDocumentBookmarks (string name, string bookmarkPath = null, string storage = null, string folder = null);

        /// <summary>
        /// Read document bookmark/bookmarks (including children).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="bookmarkPath">The bookmark path. Leave it empty if you want to get all the bookmarks in the document. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetDocumentBookmarksWithHttpInfo (string name, string bookmarkPath = null, string storage = null, string folder = null);
        /// <summary>
        /// Read document properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>DocumentPropertiesResponse</returns>
        DocumentPropertiesResponse GetDocumentProperties (string name, string storage = null, string folder = null);

        /// <summary>
        /// Read document properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of DocumentPropertiesResponse</returns>
        ApiResponse<DocumentPropertiesResponse> GetDocumentPropertiesWithHttpInfo (string name, string storage = null, string folder = null);
        /// <summary>
        /// Read document property by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="propertyName"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>DocumentPropertyResponse</returns>
        DocumentPropertyResponse GetDocumentProperty (string name, string propertyName, string storage = null, string folder = null);

        /// <summary>
        /// Read document property by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="propertyName"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of DocumentPropertyResponse</returns>
        ApiResponse<DocumentPropertyResponse> GetDocumentPropertyWithHttpInfo (string name, string propertyName, string storage = null, string folder = null);
        /// <summary>
        /// Download a specific file 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path of the file including the file name and extension e.g. /file.ext</param>
        /// <param name="versionId">File&#39;s version (optional)</param>
        /// <param name="storage">User&#39;s storage name (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetDownload (string path, string versionId = null, string storage = null);

        /// <summary>
        /// Download a specific file 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path of the file including the file name and extension e.g. /file.ext</param>
        /// <param name="versionId">File&#39;s version (optional)</param>
        /// <param name="storage">User&#39;s storage name (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetDownloadWithHttpInfo (string path, string versionId = null, string storage = null);
        /// <summary>
        /// Download document attachment content by its index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="attachmentIndex">The attachment index.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetDownloadDocumentAttachmentByIndex (string name, int? attachmentIndex, string storage = null, string folder = null);

        /// <summary>
        /// Download document attachment content by its index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="attachmentIndex">The attachment index.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetDownloadDocumentAttachmentByIndexWithHttpInfo (string name, int? attachmentIndex, string storage = null, string folder = null);
        /// <summary>
        /// Convert EPUB file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.epub)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetEpubInStorageToPdf (string srcPath);

        /// <summary>
        /// Convert EPUB file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.epub)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetEpubInStorageToPdfWithHttpInfo (string srcPath);
        /// <summary>
        /// Get document field by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fieldName">The field name/</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>FieldResponse</returns>
        FieldResponse GetField (string name, string fieldName, string storage = null, string folder = null);

        /// <summary>
        /// Get document field by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fieldName">The field name/</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of FieldResponse</returns>
        ApiResponse<FieldResponse> GetFieldWithHttpInfo (string name, string fieldName, string storage = null, string folder = null);
        /// <summary>
        /// Get document fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>FieldsResponse</returns>
        FieldsResponse GetFields (string name, string storage = null, string folder = null);

        /// <summary>
        /// Get document fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of FieldsResponse</returns>
        ApiResponse<FieldsResponse> GetFieldsWithHttpInfo (string name, string storage = null, string folder = null);
        /// <summary>
        /// Read page fragment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="fragmentNumber"></param>
        /// <param name="withEmpty"> (optional)</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>TextItemsResponse</returns>
        TextItemsResponse GetFragment (string name, int? pageNumber, int? fragmentNumber, string withEmpty = null, string storage = null, string folder = null);

        /// <summary>
        /// Read page fragment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="fragmentNumber"></param>
        /// <param name="withEmpty"> (optional)</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of TextItemsResponse</returns>
        ApiResponse<TextItemsResponse> GetFragmentWithHttpInfo (string name, int? pageNumber, int? fragmentNumber, string withEmpty = null, string storage = null, string folder = null);
        /// <summary>
        /// Read page fragment text format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="fragmentNumber"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>TextFormatResponse</returns>
        TextFormatResponse GetFragmentTextFormat (string name, int? pageNumber, int? fragmentNumber, string storage = null, string folder = null);

        /// <summary>
        /// Read page fragment text format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="fragmentNumber"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of TextFormatResponse</returns>
        ApiResponse<TextFormatResponse> GetFragmentTextFormatWithHttpInfo (string name, int? pageNumber, int? fragmentNumber, string storage = null, string folder = null);
        /// <summary>
        /// Read page fragments.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="withEmpty"> (optional)</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>TextItemsResponse</returns>
        TextItemsResponse GetFragments (string name, int? pageNumber, string withEmpty = null, string storage = null, string folder = null);

        /// <summary>
        /// Read page fragments.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="withEmpty"> (optional)</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of TextItemsResponse</returns>
        ApiResponse<TextItemsResponse> GetFragmentsWithHttpInfo (string name, int? pageNumber, string withEmpty = null, string storage = null, string folder = null);
        /// <summary>
        /// Convert HTML file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.zip)</param>
        /// <param name="htmlFileName">Name of HTML file in ZIP.</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetHtmlInStorageToPdf (string srcPath, string htmlFileName, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null);

        /// <summary>
        /// Convert HTML file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.zip)</param>
        /// <param name="htmlFileName">Name of HTML file in ZIP.</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetHtmlInStorageToPdfWithHttpInfo (string srcPath, string htmlFileName, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null);
        /// <summary>
        /// Extract document image in format specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="imageNumber">The image format.</param>
        /// <param name="format">Image format to convert, if not specified the common image data is read. (optional)</param>
        /// <param name="width">The converted image width. (optional, default to 0)</param>
        /// <param name="height">The converted image height. (optional, default to 0)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetImage (string name, int? pageNumber, int? imageNumber, string format = null, int? width = null, int? height = null, string storage = null, string folder = null);

        /// <summary>
        /// Extract document image in format specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="imageNumber">The image format.</param>
        /// <param name="format">Image format to convert, if not specified the common image data is read. (optional)</param>
        /// <param name="width">The converted image width. (optional, default to 0)</param>
        /// <param name="height">The converted image height. (optional, default to 0)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetImageWithHttpInfo (string name, int? pageNumber, int? imageNumber, string format = null, int? width = null, int? height = null, string storage = null, string folder = null);
        /// <summary>
        /// Read document images.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ImagesResponse</returns>
        ImagesResponse GetImages (string name, int? pageNumber, string storage = null, string folder = null);

        /// <summary>
        /// Read document images.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of ImagesResponse</returns>
        ApiResponse<ImagesResponse> GetImagesWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null);
        /// <summary>
        /// Convert LaTeX file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.tex)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetLaTeXInStorageToPdf (string srcPath);

        /// <summary>
        /// Convert LaTeX file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.tex)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetLaTeXInStorageToPdfWithHttpInfo (string srcPath);
        /// <summary>
        /// Convert MHT file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.mht)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetMhtInStorageToPdf (string srcPath);

        /// <summary>
        /// Convert MHT file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.mht)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetMhtInStorageToPdfWithHttpInfo (string srcPath);
        /// <summary>
        /// Convert document page to format specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="format">The format to convert if specified. (optional)</param>
        /// <param name="width">The converted image width. (optional, default to 0)</param>
        /// <param name="height">The converted image height. (optional, default to 0)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetPage (string name, int? pageNumber, string format = null, int? width = null, int? height = null, string storage = null, string folder = null);

        /// <summary>
        /// Convert document page to format specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="format">The format to convert if specified. (optional)</param>
        /// <param name="width">The converted image width. (optional, default to 0)</param>
        /// <param name="height">The converted image height. (optional, default to 0)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetPageWithHttpInfo (string name, int? pageNumber, string format = null, int? width = null, int? height = null, string storage = null, string folder = null);
        /// <summary>
        /// Read document page annotation by its number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotationNumber">The annotation number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AnnotationResponse</returns>
        AnnotationResponse GetPageAnnotation (string name, int? pageNumber, int? annotationNumber, string storage = null, string folder = null);

        /// <summary>
        /// Read document page annotation by its number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotationNumber">The annotation number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AnnotationResponse</returns>
        ApiResponse<AnnotationResponse> GetPageAnnotationWithHttpInfo (string name, int? pageNumber, int? annotationNumber, string storage = null, string folder = null);
        /// <summary>
        /// Read documant page annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AnnotationsResponse</returns>
        AnnotationsResponse GetPageAnnotations (string name, int? pageNumber, string storage = null, string folder = null);

        /// <summary>
        /// Read documant page annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AnnotationsResponse</returns>
        ApiResponse<AnnotationsResponse> GetPageAnnotationsWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null);
        /// <summary>
        /// Convert document page to Bmp image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetPageConvertToBmp (string name, int? pageNumber, int? width = null, int? height = null, string folder = null);

        /// <summary>
        /// Convert document page to Bmp image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetPageConvertToBmpWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null);
        /// <summary>
        /// Convert document page to Emf image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetPageConvertToEmf (string name, int? pageNumber, int? width = null, int? height = null, string folder = null);

        /// <summary>
        /// Convert document page to Emf image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetPageConvertToEmfWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null);
        /// <summary>
        /// Convert document page to Gif image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetPageConvertToGif (string name, int? pageNumber, int? width = null, int? height = null, string folder = null);

        /// <summary>
        /// Convert document page to Gif image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetPageConvertToGifWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null);
        /// <summary>
        /// Convert document page to Jpeg image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetPageConvertToJpeg (string name, int? pageNumber, int? width = null, int? height = null, string folder = null);

        /// <summary>
        /// Convert document page to Jpeg image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetPageConvertToJpegWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null);
        /// <summary>
        /// Convert document page to Png image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetPageConvertToPng (string name, int? pageNumber, int? width = null, int? height = null, string folder = null);

        /// <summary>
        /// Convert document page to Png image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetPageConvertToPngWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null);
        /// <summary>
        /// Convert document page to Tiff image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetPageConvertToTiff (string name, int? pageNumber, int? width = null, int? height = null, string folder = null);

        /// <summary>
        /// Convert document page to Tiff image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetPageConvertToTiffWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null);
        /// <summary>
        /// Read document page link annotation by its index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="linkIndex">The link index.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>LinkAnnotationResponse</returns>
        LinkAnnotationResponse GetPageLinkAnnotationByIndex (string name, int? pageNumber, int? linkIndex, string storage = null, string folder = null);

        /// <summary>
        /// Read document page link annotation by its index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="linkIndex">The link index.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of LinkAnnotationResponse</returns>
        ApiResponse<LinkAnnotationResponse> GetPageLinkAnnotationByIndexWithHttpInfo (string name, int? pageNumber, int? linkIndex, string storage = null, string folder = null);
        /// <summary>
        /// Read document page link annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>LinkAnnotationsResponse</returns>
        LinkAnnotationsResponse GetPageLinkAnnotations (string name, int? pageNumber, string storage = null, string folder = null);

        /// <summary>
        /// Read document page link annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of LinkAnnotationsResponse</returns>
        ApiResponse<LinkAnnotationsResponse> GetPageLinkAnnotationsWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null);
        /// <summary>
        /// Read page text items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">Number of page (starting from 1).</param>
        /// <param name="X"></param>
        /// <param name="Y"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="format">List of formats for search. (optional)</param>
        /// <param name="regex">Formats are specified as a regular expression. (optional)</param>
        /// <param name="splitRects">Split result fragments (default is true). (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>TextRectsResponse</returns>
        TextRectsResponse GetPageText (string name, int? pageNumber, int? X, int? Y, int? width, int? height, List<string> format = null, string regex = null, bool? splitRects = null, string folder = null);

        /// <summary>
        /// Read page text items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">Number of page (starting from 1).</param>
        /// <param name="X"></param>
        /// <param name="Y"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="format">List of formats for search. (optional)</param>
        /// <param name="regex">Formats are specified as a regular expression. (optional)</param>
        /// <param name="splitRects">Split result fragments (default is true). (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of TextRectsResponse</returns>
        ApiResponse<TextRectsResponse> GetPageTextWithHttpInfo (string name, int? pageNumber, int? X, int? Y, int? width, int? height, List<string> format = null, string regex = null, bool? splitRects = null, string folder = null);
        /// <summary>
        /// Read page text items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="withEmpty"> (optional)</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>TextItemsResponse</returns>
        TextItemsResponse GetPageTextItems (string name, int? pageNumber, string withEmpty = null, string storage = null, string folder = null);

        /// <summary>
        /// Read page text items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="withEmpty"> (optional)</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of TextItemsResponse</returns>
        ApiResponse<TextItemsResponse> GetPageTextItemsWithHttpInfo (string name, int? pageNumber, string withEmpty = null, string storage = null, string folder = null);
        /// <summary>
        /// Read document pages info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>DocumentPagesResponse</returns>
        DocumentPagesResponse GetPages (string name, string storage = null, string folder = null);

        /// <summary>
        /// Read document pages info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of DocumentPagesResponse</returns>
        ApiResponse<DocumentPagesResponse> GetPagesWithHttpInfo (string name, string storage = null, string folder = null);
        /// <summary>
        /// Convert PCL file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.pcl)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetPclInStorageToPdf (string srcPath);

        /// <summary>
        /// Convert PCL file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.pcl)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetPclInStorageToPdfWithHttpInfo (string srcPath);
        /// <summary>
        /// Converts PDF document (located on storage) to DOC format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="addReturnToLineEnd">Add return to line end. (optional)</param>
        /// <param name="format">Allows to specify .doc or .docx file format. (optional)</param>
        /// <param name="imageResolutionX">Image resolution X. (optional)</param>
        /// <param name="imageResolutionY">Image resolution Y. (optional)</param>
        /// <param name="maxDistanceBetweenTextLines">Max distance between text lines. (optional)</param>
        /// <param name="mode">Allows to control how a PDF document is converted into a word processing document. (optional)</param>
        /// <param name="recognizeBullets">Recognize bullets. (optional)</param>
        /// <param name="relativeHorizontalProximity">Relative horizontal proximity. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetPdfInStorageToDoc (string name, bool? addReturnToLineEnd = null, string format = null, int? imageResolutionX = null, int? imageResolutionY = null, int? maxDistanceBetweenTextLines = null, string mode = null, bool? recognizeBullets = null, double? relativeHorizontalProximity = null, string folder = null);

        /// <summary>
        /// Converts PDF document (located on storage) to DOC format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="addReturnToLineEnd">Add return to line end. (optional)</param>
        /// <param name="format">Allows to specify .doc or .docx file format. (optional)</param>
        /// <param name="imageResolutionX">Image resolution X. (optional)</param>
        /// <param name="imageResolutionY">Image resolution Y. (optional)</param>
        /// <param name="maxDistanceBetweenTextLines">Max distance between text lines. (optional)</param>
        /// <param name="mode">Allows to control how a PDF document is converted into a word processing document. (optional)</param>
        /// <param name="recognizeBullets">Recognize bullets. (optional)</param>
        /// <param name="relativeHorizontalProximity">Relative horizontal proximity. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetPdfInStorageToDocWithHttpInfo (string name, bool? addReturnToLineEnd = null, string format = null, int? imageResolutionX = null, int? imageResolutionY = null, int? maxDistanceBetweenTextLines = null, string mode = null, bool? recognizeBullets = null, double? relativeHorizontalProximity = null, string folder = null);
        /// <summary>
        /// Converts PDF document (located on storage) to EPUB format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="contentRecognitionMode">Рroperty tunes conversion for this or that desirable method of recognition of content. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetPdfInStorageToEpub (string name, string contentRecognitionMode = null, string folder = null);

        /// <summary>
        /// Converts PDF document (located on storage) to EPUB format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="contentRecognitionMode">Рroperty tunes conversion for this or that desirable method of recognition of content. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetPdfInStorageToEpubWithHttpInfo (string name, string contentRecognitionMode = null, string folder = null);
        /// <summary>
        /// Converts PDF document (located on storage) to Html format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="additionalMarginWidthInPoints">Defines width of margin that will be forcibly left around that output HTML-areas. (optional)</param>
        /// <param name="compressSvgGraphicsIfAny">The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)</param>
        /// <param name="convertMarkedContentToLayers">If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)</param>
        /// <param name="defaultFontName">Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)</param>
        /// <param name="documentType">Result document type. (optional)</param>
        /// <param name="fixedLayout">The value indicating whether that HTML is created as fixed layout. (optional)</param>
        /// <param name="imageResolution">Resolution for image rendering. (optional)</param>
        /// <param name="minimalLineWidth">This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)</param>
        /// <param name="preventGlyphsGrouping">This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)</param>
        /// <param name="splitCssIntoPages">When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)</param>
        /// <param name="splitIntoPages">The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)</param>
        /// <param name="useZOrder">If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)</param>
        /// <param name="antialiasingProcessing">The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)</param>
        /// <param name="cssClassNamesPrefix">When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)</param>
        /// <param name="explicitListOfSavedPages">With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)</param>
        /// <param name="fontEncodingStrategy">Defines encoding special rule to tune PDF decoding for current document. (optional)</param>
        /// <param name="fontSavingMode">Defines font saving mode that will be used during saving of PDF to desirable format. (optional)</param>
        /// <param name="htmlMarkupGenerationMode">Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)</param>
        /// <param name="lettersPositioningMethod">The mode of positioning of letters in words in result HTML. (optional)</param>
        /// <param name="pagesFlowTypeDependsOnViewersScreenSize">If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)</param>
        /// <param name="partsEmbeddingMode">It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)</param>
        /// <param name="rasterImagesSavingMode">Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)</param>
        /// <param name="removeEmptyAreasOnTopAndBottom">Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)</param>
        /// <param name="saveShadowedTextsAsTransparentTexts">Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)</param>
        /// <param name="saveTransparentTexts">Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)</param>
        /// <param name="specialFolderForAllImages">The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="specialFolderForSvgImages">The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="trySaveTextUnderliningAndStrikeoutingInCss">PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetPdfInStorageToHtml (string name, int? additionalMarginWidthInPoints = null, bool? compressSvgGraphicsIfAny = null, bool? convertMarkedContentToLayers = null, string defaultFontName = null, string documentType = null, bool? fixedLayout = null, int? imageResolution = null, int? minimalLineWidth = null, bool? preventGlyphsGrouping = null, bool? splitCssIntoPages = null, bool? splitIntoPages = null, bool? useZOrder = null, string antialiasingProcessing = null, string cssClassNamesPrefix = null, List<int?> explicitListOfSavedPages = null, string fontEncodingStrategy = null, string fontSavingMode = null, string htmlMarkupGenerationMode = null, string lettersPositioningMethod = null, bool? pagesFlowTypeDependsOnViewersScreenSize = null, string partsEmbeddingMode = null, string rasterImagesSavingMode = null, bool? removeEmptyAreasOnTopAndBottom = null, bool? saveShadowedTextsAsTransparentTexts = null, bool? saveTransparentTexts = null, string specialFolderForAllImages = null, string specialFolderForSvgImages = null, bool? trySaveTextUnderliningAndStrikeoutingInCss = null, string folder = null);

        /// <summary>
        /// Converts PDF document (located on storage) to Html format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="additionalMarginWidthInPoints">Defines width of margin that will be forcibly left around that output HTML-areas. (optional)</param>
        /// <param name="compressSvgGraphicsIfAny">The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)</param>
        /// <param name="convertMarkedContentToLayers">If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)</param>
        /// <param name="defaultFontName">Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)</param>
        /// <param name="documentType">Result document type. (optional)</param>
        /// <param name="fixedLayout">The value indicating whether that HTML is created as fixed layout. (optional)</param>
        /// <param name="imageResolution">Resolution for image rendering. (optional)</param>
        /// <param name="minimalLineWidth">This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)</param>
        /// <param name="preventGlyphsGrouping">This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)</param>
        /// <param name="splitCssIntoPages">When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)</param>
        /// <param name="splitIntoPages">The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)</param>
        /// <param name="useZOrder">If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)</param>
        /// <param name="antialiasingProcessing">The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)</param>
        /// <param name="cssClassNamesPrefix">When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)</param>
        /// <param name="explicitListOfSavedPages">With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)</param>
        /// <param name="fontEncodingStrategy">Defines encoding special rule to tune PDF decoding for current document. (optional)</param>
        /// <param name="fontSavingMode">Defines font saving mode that will be used during saving of PDF to desirable format. (optional)</param>
        /// <param name="htmlMarkupGenerationMode">Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)</param>
        /// <param name="lettersPositioningMethod">The mode of positioning of letters in words in result HTML. (optional)</param>
        /// <param name="pagesFlowTypeDependsOnViewersScreenSize">If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)</param>
        /// <param name="partsEmbeddingMode">It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)</param>
        /// <param name="rasterImagesSavingMode">Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)</param>
        /// <param name="removeEmptyAreasOnTopAndBottom">Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)</param>
        /// <param name="saveShadowedTextsAsTransparentTexts">Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)</param>
        /// <param name="saveTransparentTexts">Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)</param>
        /// <param name="specialFolderForAllImages">The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="specialFolderForSvgImages">The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="trySaveTextUnderliningAndStrikeoutingInCss">PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetPdfInStorageToHtmlWithHttpInfo (string name, int? additionalMarginWidthInPoints = null, bool? compressSvgGraphicsIfAny = null, bool? convertMarkedContentToLayers = null, string defaultFontName = null, string documentType = null, bool? fixedLayout = null, int? imageResolution = null, int? minimalLineWidth = null, bool? preventGlyphsGrouping = null, bool? splitCssIntoPages = null, bool? splitIntoPages = null, bool? useZOrder = null, string antialiasingProcessing = null, string cssClassNamesPrefix = null, List<int?> explicitListOfSavedPages = null, string fontEncodingStrategy = null, string fontSavingMode = null, string htmlMarkupGenerationMode = null, string lettersPositioningMethod = null, bool? pagesFlowTypeDependsOnViewersScreenSize = null, string partsEmbeddingMode = null, string rasterImagesSavingMode = null, bool? removeEmptyAreasOnTopAndBottom = null, bool? saveShadowedTextsAsTransparentTexts = null, bool? saveTransparentTexts = null, string specialFolderForAllImages = null, string specialFolderForSvgImages = null, bool? trySaveTextUnderliningAndStrikeoutingInCss = null, string folder = null);
        /// <summary>
        /// Converts PDF document (located on storage) to LaTeX format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pagesCount">Pages count. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetPdfInStorageToLaTeX (string name, int? pagesCount = null, string folder = null);

        /// <summary>
        /// Converts PDF document (located on storage) to LaTeX format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pagesCount">Pages count. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetPdfInStorageToLaTeXWithHttpInfo (string name, int? pagesCount = null, string folder = null);
        /// <summary>
        /// Converts PDF document (located on storage) to MOBIXML format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetPdfInStorageToMobiXml (string name, string folder = null);

        /// <summary>
        /// Converts PDF document (located on storage) to MOBIXML format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetPdfInStorageToMobiXmlWithHttpInfo (string name, string folder = null);
        /// <summary>
        /// Converts PDF document (located on storage) to PdfA format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="type">Type of PdfA format.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetPdfInStorageToPdfA (string name, string type, string folder = null);

        /// <summary>
        /// Converts PDF document (located on storage) to PdfA format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="type">Type of PdfA format.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetPdfInStorageToPdfAWithHttpInfo (string name, string type, string folder = null);
        /// <summary>
        /// Converts PDF document (located on storage) to PPTX format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="separateImages">Separate images. (optional)</param>
        /// <param name="slidesAsImages">Slides as images. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetPdfInStorageToPptx (string name, bool? separateImages = null, bool? slidesAsImages = null, string folder = null);

        /// <summary>
        /// Converts PDF document (located on storage) to PPTX format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="separateImages">Separate images. (optional)</param>
        /// <param name="slidesAsImages">Slides as images. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetPdfInStorageToPptxWithHttpInfo (string name, bool? separateImages = null, bool? slidesAsImages = null, string folder = null);
        /// <summary>
        /// Converts PDF document (located on storage) to SVG format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="compressOutputToZipArchive">Specifies whether output will be created as one zip-archive. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetPdfInStorageToSvg (string name, bool? compressOutputToZipArchive = null, string folder = null);

        /// <summary>
        /// Converts PDF document (located on storage) to SVG format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="compressOutputToZipArchive">Specifies whether output will be created as one zip-archive. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetPdfInStorageToSvgWithHttpInfo (string name, bool? compressOutputToZipArchive = null, string folder = null);
        /// <summary>
        /// Converts PDF document (located on storage) to TIFF format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="brightness">Image brightness. (optional)</param>
        /// <param name="compression">Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)</param>
        /// <param name="colorDepth">Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)</param>
        /// <param name="leftMargin">Left image margin. (optional)</param>
        /// <param name="rightMargin">Right image margin. (optional)</param>
        /// <param name="topMargin">Top image margin. (optional)</param>
        /// <param name="bottomMargin">Bottom image margin. (optional)</param>
        /// <param name="orientation">Image orientation. Possible values are: None, Landscape, Portait. (optional)</param>
        /// <param name="skipBlankPages">Skip blank pages flag. (optional)</param>
        /// <param name="width">Image width. (optional)</param>
        /// <param name="height">Image height. (optional)</param>
        /// <param name="xResolution">Horizontal resolution. (optional)</param>
        /// <param name="yResolution">Vertical resolution. (optional)</param>
        /// <param name="pageIndex">Start page to export. (optional)</param>
        /// <param name="pageCount">Number of pages to export. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetPdfInStorageToTiff (string name, double? brightness = null, string compression = null, string colorDepth = null, int? leftMargin = null, int? rightMargin = null, int? topMargin = null, int? bottomMargin = null, string orientation = null, bool? skipBlankPages = null, int? width = null, int? height = null, int? xResolution = null, int? yResolution = null, int? pageIndex = null, int? pageCount = null, string folder = null);

        /// <summary>
        /// Converts PDF document (located on storage) to TIFF format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="brightness">Image brightness. (optional)</param>
        /// <param name="compression">Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)</param>
        /// <param name="colorDepth">Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)</param>
        /// <param name="leftMargin">Left image margin. (optional)</param>
        /// <param name="rightMargin">Right image margin. (optional)</param>
        /// <param name="topMargin">Top image margin. (optional)</param>
        /// <param name="bottomMargin">Bottom image margin. (optional)</param>
        /// <param name="orientation">Image orientation. Possible values are: None, Landscape, Portait. (optional)</param>
        /// <param name="skipBlankPages">Skip blank pages flag. (optional)</param>
        /// <param name="width">Image width. (optional)</param>
        /// <param name="height">Image height. (optional)</param>
        /// <param name="xResolution">Horizontal resolution. (optional)</param>
        /// <param name="yResolution">Vertical resolution. (optional)</param>
        /// <param name="pageIndex">Start page to export. (optional)</param>
        /// <param name="pageCount">Number of pages to export. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetPdfInStorageToTiffWithHttpInfo (string name, double? brightness = null, string compression = null, string colorDepth = null, int? leftMargin = null, int? rightMargin = null, int? topMargin = null, int? bottomMargin = null, string orientation = null, bool? skipBlankPages = null, int? width = null, int? height = null, int? xResolution = null, int? yResolution = null, int? pageIndex = null, int? pageCount = null, string folder = null);
        /// <summary>
        /// Converts PDF document (located on storage) to XLS format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="insertBlankColumnAtFirst">Insert blank column at first (optional)</param>
        /// <param name="minimizeTheNumberOfWorksheets">Minimize the number of worksheets (optional)</param>
        /// <param name="scaleFactor">Scale factor (optional)</param>
        /// <param name="uniformWorksheets">Uniform worksheets (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetPdfInStorageToXls (string name, bool? insertBlankColumnAtFirst = null, bool? minimizeTheNumberOfWorksheets = null, double? scaleFactor = null, bool? uniformWorksheets = null, string folder = null);

        /// <summary>
        /// Converts PDF document (located on storage) to XLS format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="insertBlankColumnAtFirst">Insert blank column at first (optional)</param>
        /// <param name="minimizeTheNumberOfWorksheets">Minimize the number of worksheets (optional)</param>
        /// <param name="scaleFactor">Scale factor (optional)</param>
        /// <param name="uniformWorksheets">Uniform worksheets (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetPdfInStorageToXlsWithHttpInfo (string name, bool? insertBlankColumnAtFirst = null, bool? minimizeTheNumberOfWorksheets = null, double? scaleFactor = null, bool? uniformWorksheets = null, string folder = null);
        /// <summary>
        /// Converts PDF document (located on storage) to XML format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetPdfInStorageToXml (string name, string folder = null);

        /// <summary>
        /// Converts PDF document (located on storage) to XML format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetPdfInStorageToXmlWithHttpInfo (string name, string folder = null);
        /// <summary>
        /// Converts PDF document (located on storage) to XPS format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetPdfInStorageToXps (string name, string folder = null);

        /// <summary>
        /// Converts PDF document (located on storage) to XPS format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetPdfInStorageToXpsWithHttpInfo (string name, string folder = null);
        /// <summary>
        /// Convert PS file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.ps)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetPsInStorageToPdf (string srcPath);

        /// <summary>
        /// Convert PS file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.ps)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetPsInStorageToPdfWithHttpInfo (string srcPath);
        /// <summary>
        /// Read segment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="fragmentNumber"></param>
        /// <param name="segmentNumber"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>TextItemResponse</returns>
        TextItemResponse GetSegment (string name, int? pageNumber, int? fragmentNumber, int? segmentNumber, string storage = null, string folder = null);

        /// <summary>
        /// Read segment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="fragmentNumber"></param>
        /// <param name="segmentNumber"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of TextItemResponse</returns>
        ApiResponse<TextItemResponse> GetSegmentWithHttpInfo (string name, int? pageNumber, int? fragmentNumber, int? segmentNumber, string storage = null, string folder = null);
        /// <summary>
        /// Read segment text format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="fragmentNumber"></param>
        /// <param name="segmentNumber"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>TextFormatResponse</returns>
        TextFormatResponse GetSegmentTextFormat (string name, int? pageNumber, int? fragmentNumber, int? segmentNumber, string storage = null, string folder = null);

        /// <summary>
        /// Read segment text format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="fragmentNumber"></param>
        /// <param name="segmentNumber"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of TextFormatResponse</returns>
        ApiResponse<TextFormatResponse> GetSegmentTextFormatWithHttpInfo (string name, int? pageNumber, int? fragmentNumber, int? segmentNumber, string storage = null, string folder = null);
        /// <summary>
        /// Read fragment segments.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="fragmentNumber"></param>
        /// <param name="withEmpty"> (optional)</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>TextItemsResponse</returns>
        TextItemsResponse GetSegments (string name, int? pageNumber, int? fragmentNumber, string withEmpty = null, string storage = null, string folder = null);

        /// <summary>
        /// Read fragment segments.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="fragmentNumber"></param>
        /// <param name="withEmpty"> (optional)</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of TextItemsResponse</returns>
        ApiResponse<TextItemsResponse> GetSegmentsWithHttpInfo (string name, int? pageNumber, int? fragmentNumber, string withEmpty = null, string storage = null, string folder = null);
        /// <summary>
        /// Convert SVG file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.svg)</param>
        /// <param name="adjustPageSize">Adjust page size (optional)</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetSvgInStorageToPdf (string srcPath, bool? adjustPageSize = null, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null);

        /// <summary>
        /// Convert SVG file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.svg)</param>
        /// <param name="adjustPageSize">Adjust page size (optional)</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetSvgInStorageToPdfWithHttpInfo (string srcPath, bool? adjustPageSize = null, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null);
        /// <summary>
        /// Read document text.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="X"></param>
        /// <param name="Y"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="format">List of formats for search. (optional)</param>
        /// <param name="regex">Formats are specified as a regular expression. (optional)</param>
        /// <param name="splitRects">Split result fragments (default is true). (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>TextRectsResponse</returns>
        TextRectsResponse GetText (string name, int? X, int? Y, int? width, int? height, List<string> format = null, string regex = null, bool? splitRects = null, string folder = null);

        /// <summary>
        /// Read document text.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="X"></param>
        /// <param name="Y"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="format">List of formats for search. (optional)</param>
        /// <param name="regex">Formats are specified as a regular expression. (optional)</param>
        /// <param name="splitRects">Split result fragments (default is true). (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of TextRectsResponse</returns>
        ApiResponse<TextRectsResponse> GetTextWithHttpInfo (string name, int? X, int? Y, int? width, int? height, List<string> format = null, string regex = null, bool? splitRects = null, string folder = null);
        /// <summary>
        /// Read document text items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="withEmpty"> (optional)</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>TextItemsResponse</returns>
        TextItemsResponse GetTextItems (string name, string withEmpty = null, string storage = null, string folder = null);

        /// <summary>
        /// Read document text items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="withEmpty"> (optional)</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of TextItemsResponse</returns>
        ApiResponse<TextItemsResponse> GetTextItemsWithHttpInfo (string name, string withEmpty = null, string storage = null, string folder = null);
        /// <summary>
        /// Verify signature document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="signName">Sign name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SignatureVerifyResponse</returns>
        SignatureVerifyResponse GetVerifySignature (string name, string signName, string folder = null);

        /// <summary>
        /// Verify signature document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="signName">Sign name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SignatureVerifyResponse</returns>
        ApiResponse<SignatureVerifyResponse> GetVerifySignatureWithHttpInfo (string name, string signName, string folder = null);
        /// <summary>
        /// Convert web page to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">Source url</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetWebInStorageToPdf (string url, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null);

        /// <summary>
        /// Convert web page to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">Source url</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetWebInStorageToPdfWithHttpInfo (string url, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null);
        /// <summary>
        /// Get number of words per document page.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>WordCountResponse</returns>
        WordCountResponse GetWordsPerPage (string name, string storage = null, string folder = null);

        /// <summary>
        /// Get number of words per document page.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of WordCountResponse</returns>
        ApiResponse<WordCountResponse> GetWordsPerPageWithHttpInfo (string name, string storage = null, string folder = null);
        /// <summary>
        /// Converts PDF document which contatins XFA form (located on storage) to PDF with AcroForm and returns resulting file response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetXfaPdfInStorageToAcroForm (string name, string folder = null);

        /// <summary>
        /// Converts PDF document which contatins XFA form (located on storage) to PDF with AcroForm and returns resulting file response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetXfaPdfInStorageToAcroFormWithHttpInfo (string name, string folder = null);
        /// <summary>
        /// Convert XML file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xml)</param>
        /// <param name="xslFilePath">Full XSL source filename (ex. /folder1/folder2/template.xsl) (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetXmlInStorageToPdf (string srcPath, string xslFilePath = null);

        /// <summary>
        /// Convert XML file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xml)</param>
        /// <param name="xslFilePath">Full XSL source filename (ex. /folder1/folder2/template.xsl) (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetXmlInStorageToPdfWithHttpInfo (string srcPath, string xslFilePath = null);
        /// <summary>
        /// Convert XPS file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xps)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetXpsInStorageToPdf (string srcPath);

        /// <summary>
        /// Convert XPS file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xps)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetXpsInStorageToPdfWithHttpInfo (string srcPath);
        /// <summary>
        /// Convert XslFo file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xslfo)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetXslFoInStorageToPdf (string srcPath);

        /// <summary>
        /// Convert XslFo file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xslfo)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetXslFoInStorageToPdfWithHttpInfo (string srcPath);
        /// <summary>
        /// Append document to existing one.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The original document name.</param>
        /// <param name="appendDocument">with the append document data. (optional)</param>
        /// <param name="appendFile">Append file server path. (optional)</param>
        /// <param name="startPage">Appending start page. (optional, default to 0)</param>
        /// <param name="endPage">Appending end page. (optional, default to 0)</param>
        /// <param name="storage">The documents storage. (optional)</param>
        /// <param name="folder">The original document folder. (optional)</param>
        /// <returns>DocumentResponse</returns>
        DocumentResponse PostAppendDocument (string name, AppendDocument appendDocument = null, string appendFile = null, int? startPage = null, int? endPage = null, string storage = null, string folder = null);

        /// <summary>
        /// Append document to existing one.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The original document name.</param>
        /// <param name="appendDocument">with the append document data. (optional)</param>
        /// <param name="appendFile">Append file server path. (optional)</param>
        /// <param name="startPage">Appending start page. (optional, default to 0)</param>
        /// <param name="endPage">Appending end page. (optional, default to 0)</param>
        /// <param name="storage">The documents storage. (optional)</param>
        /// <param name="folder">The original document folder. (optional)</param>
        /// <returns>ApiResponse of DocumentResponse</returns>
        ApiResponse<DocumentResponse> PostAppendDocumentWithHttpInfo (string name, AppendDocument appendDocument = null, string appendFile = null, int? startPage = null, int? endPage = null, string storage = null, string folder = null);
        /// <summary>
        /// Create field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="page">Document page number.</param>
        /// <param name="field">with the field data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PostCreateField (string name, int? page, Field field = null, string storage = null, string folder = null);

        /// <summary>
        /// Create field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="page">Document page number.</param>
        /// <param name="field">with the field data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PostCreateFieldWithHttpInfo (string name, int? page, Field field = null, string storage = null, string folder = null);
        /// <summary>
        /// Document&#39;s replace text method. Deprecated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="textReplace"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>DocumentTextReplaceResponse</returns>
        DocumentTextReplaceResponse PostDocumentReplaceText (string name, TextReplaceRequest textReplace, string storage = null, string folder = null);

        /// <summary>
        /// Document&#39;s replace text method. Deprecated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="textReplace"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of DocumentTextReplaceResponse</returns>
        ApiResponse<DocumentTextReplaceResponse> PostDocumentReplaceTextWithHttpInfo (string name, TextReplaceRequest textReplace, string storage = null, string folder = null);
        /// <summary>
        /// Document&#39;s replace text method. Deprecated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="textReplaceListRequest"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>DocumentTextReplaceResponse</returns>
        DocumentTextReplaceResponse PostDocumentReplaceTextList (string name, TextReplaceListRequest textReplaceListRequest, string storage = null, string folder = null);

        /// <summary>
        /// Document&#39;s replace text method. Deprecated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="textReplaceListRequest"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of DocumentTextReplaceResponse</returns>
        ApiResponse<DocumentTextReplaceResponse> PostDocumentReplaceTextListWithHttpInfo (string name, TextReplaceListRequest textReplaceListRequest, string storage = null, string folder = null);
        /// <summary>
        /// Document&#39;s replace text method.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="textReplace"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>TextReplaceResponse</returns>
        TextReplaceResponse PostDocumentTextReplace (string name, TextReplaceListRequest textReplace, string storage = null, string folder = null);

        /// <summary>
        /// Document&#39;s replace text method.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="textReplace"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of TextReplaceResponse</returns>
        ApiResponse<TextReplaceResponse> PostDocumentTextReplaceWithHttpInfo (string name, TextReplaceListRequest textReplace, string storage = null, string folder = null);
        /// <summary>
        /// Move page to new position.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="newIndex">The new page position/index.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PostMovePage (string name, int? pageNumber, int? newIndex, string storage = null, string folder = null);

        /// <summary>
        /// Move page to new position.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="newIndex">The new page position/index.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PostMovePageWithHttpInfo (string name, int? pageNumber, int? newIndex, string storage = null, string folder = null);
        /// <summary>
        /// Optimize document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="options">The optimization options. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PostOptimizeDocument (string name, OptimizeOptions options = null, string storage = null, string folder = null);

        /// <summary>
        /// Optimize document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="options">The optimization options. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PostOptimizeDocumentWithHttpInfo (string name, OptimizeOptions options = null, string storage = null, string folder = null);
        /// <summary>
        /// Page&#39;s replace text method. Deprecated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="textReplace"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>PageTextReplaceResponse</returns>
        PageTextReplaceResponse PostPageReplaceText (string name, int? pageNumber, TextReplaceRequest textReplace, string storage = null, string folder = null);

        /// <summary>
        /// Page&#39;s replace text method. Deprecated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="textReplace"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of PageTextReplaceResponse</returns>
        ApiResponse<PageTextReplaceResponse> PostPageReplaceTextWithHttpInfo (string name, int? pageNumber, TextReplaceRequest textReplace, string storage = null, string folder = null);
        /// <summary>
        /// Page&#39;s replace text method. Deprecated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="textReplaceListRequest"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>PageTextReplaceResponse</returns>
        PageTextReplaceResponse PostPageReplaceTextList (string name, int? pageNumber, TextReplaceListRequest textReplaceListRequest, string storage = null, string folder = null);

        /// <summary>
        /// Page&#39;s replace text method. Deprecated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="textReplaceListRequest"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of PageTextReplaceResponse</returns>
        ApiResponse<PageTextReplaceResponse> PostPageReplaceTextListWithHttpInfo (string name, int? pageNumber, TextReplaceListRequest textReplaceListRequest, string storage = null, string folder = null);
        /// <summary>
        /// Page&#39;s replace text method.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="textReplaceListRequest"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>TextReplaceResponse</returns>
        TextReplaceResponse PostPageTextReplace (string name, int? pageNumber, TextReplaceListRequest textReplaceListRequest, string storage = null, string folder = null);

        /// <summary>
        /// Page&#39;s replace text method.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="textReplaceListRequest"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of TextReplaceResponse</returns>
        ApiResponse<TextReplaceResponse> PostPageTextReplaceWithHttpInfo (string name, int? pageNumber, TextReplaceListRequest textReplaceListRequest, string storage = null, string folder = null);
        /// <summary>
        /// Replace document image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="imageNumber">The image number.</param>
        /// <param name="imageFile">Path to image file if specified. Request content is used otherwise. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="image">Image file. (optional)</param>
        /// <returns>ImageResponse</returns>
        ImageResponse PostReplaceImage (string name, int? pageNumber, int? imageNumber, string imageFile = null, string storage = null, string folder = null, System.IO.Stream image = null);

        /// <summary>
        /// Replace document image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="imageNumber">The image number.</param>
        /// <param name="imageFile">Path to image file if specified. Request content is used otherwise. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="image">Image file. (optional)</param>
        /// <returns>ApiResponse of ImageResponse</returns>
        ApiResponse<ImageResponse> PostReplaceImageWithHttpInfo (string name, int? pageNumber, int? imageNumber, string imageFile = null, string storage = null, string folder = null, System.IO.Stream image = null);
        /// <summary>
        /// Sign document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="signature">Signature object containing signature data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PostSignDocument (string name, Signature signature = null, string storage = null, string folder = null);

        /// <summary>
        /// Sign document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="signature">Signature object containing signature data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PostSignDocumentWithHttpInfo (string name, Signature signature = null, string storage = null, string folder = null);
        /// <summary>
        /// Sign page.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="signature">Signature object containing signature data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PostSignPage (string name, int? pageNumber, Signature signature = null, string storage = null, string folder = null);

        /// <summary>
        /// Sign page.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="signature">Signature object containing signature data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PostSignPageWithHttpInfo (string name, int? pageNumber, Signature signature = null, string storage = null, string folder = null);
        /// <summary>
        /// Split document to parts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="format">Resulting documents format. (optional)</param>
        /// <param name="from">Start page if defined. (optional)</param>
        /// <param name="to">End page if defined. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SplitResultResponse</returns>
        SplitResultResponse PostSplitDocument (string name, string format = null, int? from = null, int? to = null, string storage = null, string folder = null);

        /// <summary>
        /// Split document to parts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="format">Resulting documents format. (optional)</param>
        /// <param name="from">Start page if defined. (optional)</param>
        /// <param name="to">End page if defined. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SplitResultResponse</returns>
        ApiResponse<SplitResultResponse> PostSplitDocumentWithHttpInfo (string name, string format = null, int? from = null, int? to = null, string storage = null, string folder = null);
        /// <summary>
        /// Add new page to end of the document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>DocumentPagesResponse</returns>
        DocumentPagesResponse PutAddNewPage (string name, string storage = null, string folder = null);

        /// <summary>
        /// Add new page to end of the document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of DocumentPagesResponse</returns>
        ApiResponse<DocumentPagesResponse> PutAddNewPageWithHttpInfo (string name, string storage = null, string folder = null);
        /// <summary>
        /// Add text to PDF document page. Deprecated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the document to which text should be added.</param>
        /// <param name="pageNumber">Number of page (starting with 1) to which text should be added.</param>
        /// <param name="paragraph">Paragraph data. (optional)</param>
        /// <param name="storage">File storage to be used. (optional)</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PutAddParagraph (string name, int? pageNumber, Paragraph paragraph = null, string storage = null, string folder = null);

        /// <summary>
        /// Add text to PDF document page. Deprecated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the document to which text should be added.</param>
        /// <param name="pageNumber">Number of page (starting with 1) to which text should be added.</param>
        /// <param name="paragraph">Paragraph data. (optional)</param>
        /// <param name="storage">File storage to be used. (optional)</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PutAddParagraphWithHttpInfo (string name, int? pageNumber, Paragraph paragraph = null, string storage = null, string folder = null);
        /// <summary>
        /// Add text to PDF document page.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">Number of page (starting from 1).</param>
        /// <param name="paragraph">Paragraph data. (optional)</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PutAddText (string name, int? pageNumber, Paragraph paragraph = null, string folder = null);

        /// <summary>
        /// Add text to PDF document page.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">Number of page (starting from 1).</param>
        /// <param name="paragraph">Paragraph data. (optional)</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PutAddTextWithHttpInfo (string name, int? pageNumber, Paragraph paragraph = null, string folder = null);
        /// <summary>
        /// Convert document from request content to format specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">The format to convert. (optional)</param>
        /// <param name="url"> (optional)</param>
        /// <param name="outPath">Path to save result (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream PutConvertDocument (string format = null, string url = null, string outPath = null, System.IO.Stream file = null);

        /// <summary>
        /// Convert document from request content to format specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">The format to convert. (optional)</param>
        /// <param name="url"> (optional)</param>
        /// <param name="outPath">Path to save result (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> PutConvertDocumentWithHttpInfo (string format = null, string url = null, string outPath = null, System.IO.Stream file = null);
        /// <summary>
        /// Upload a specific file 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext</param>
        /// <param name="file">File to upload</param>
        /// <param name="versionId">Source file&#39;s version (optional)</param>
        /// <param name="storage">User&#39;s storage name (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PutCreate (string path, System.IO.Stream file, string versionId = null, string storage = null);

        /// <summary>
        /// Upload a specific file 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext</param>
        /// <param name="file">File to upload</param>
        /// <param name="versionId">Source file&#39;s version (optional)</param>
        /// <param name="storage">User&#39;s storage name (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PutCreateWithHttpInfo (string path, System.IO.Stream file, string versionId = null, string storage = null);
        /// <summary>
        /// Create new document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new document name.</param>
        /// <param name="templateFile">The template file server path if defined. (optional)</param>
        /// <param name="dataFile">The data file path (for xml template only). (optional)</param>
        /// <param name="templateType">The template type, can be xml, html, bmp, jpg, png, tiff, emf, cgm, tex. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The new document folder. (optional)</param>
        /// <param name="url">The url of web page if defined. (optional)</param>
        /// <param name="fitSize">Draw a margin around content in resulting pdf. (optional, default to false)</param>
        /// <returns>DocumentResponse</returns>
        DocumentResponse PutCreateDocument (string name, string templateFile = null, string dataFile = null, string templateType = null, string storage = null, string folder = null, string url = null, bool? fitSize = null);

        /// <summary>
        /// Create new document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new document name.</param>
        /// <param name="templateFile">The template file server path if defined. (optional)</param>
        /// <param name="dataFile">The data file path (for xml template only). (optional)</param>
        /// <param name="templateType">The template type, can be xml, html, bmp, jpg, png, tiff, emf, cgm, tex. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The new document folder. (optional)</param>
        /// <param name="url">The url of web page if defined. (optional)</param>
        /// <param name="fitSize">Draw a margin around content in resulting pdf. (optional, default to false)</param>
        /// <returns>ApiResponse of DocumentResponse</returns>
        ApiResponse<DocumentResponse> PutCreateDocumentWithHttpInfo (string name, string templateFile = null, string dataFile = null, string templateType = null, string storage = null, string folder = null, string url = null, bool? fitSize = null);
        /// <summary>
        /// Create new document from images.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new document name.</param>
        /// <param name="images">The images file paths set.   (optional)</param>
        /// <param name="ocr">To create OCR layer for image or not. (optional, default to false)</param>
        /// <param name="ocrLang">The language which is defined for OCR engine. Default is eng. (optional, default to eng)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The new document folder. (optional)</param>
        /// <returns>DocumentResponse</returns>
        DocumentResponse PutCreateDocumentFromImages (string name, ImagesListRequest images = null, bool? ocr = null, string ocrLang = null, string storage = null, string folder = null);

        /// <summary>
        /// Create new document from images.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new document name.</param>
        /// <param name="images">The images file paths set.   (optional)</param>
        /// <param name="ocr">To create OCR layer for image or not. (optional, default to false)</param>
        /// <param name="ocrLang">The language which is defined for OCR engine. Default is eng. (optional, default to eng)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The new document folder. (optional)</param>
        /// <returns>ApiResponse of DocumentResponse</returns>
        ApiResponse<DocumentResponse> PutCreateDocumentFromImagesWithHttpInfo (string name, ImagesListRequest images = null, bool? ocr = null, string ocrLang = null, string storage = null, string folder = null);
        /// <summary>
        /// Save document as Tiff image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="exportOptions">with tiff export options. (optional)</param>
        /// <param name="resultFile">The resulting file. (optional)</param>
        /// <param name="brightness">The image brightness. (optional)</param>
        /// <param name="compression">Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)</param>
        /// <param name="colorDepth">Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)</param>
        /// <param name="leftMargin">Left image margin. (optional)</param>
        /// <param name="rightMargin">Right image margin. (optional)</param>
        /// <param name="topMargin">Top image margin. (optional)</param>
        /// <param name="bottomMargin">Bottom image margin. (optional)</param>
        /// <param name="orientation">Image orientation. Possible values are: None, Landscape, Portait. (optional)</param>
        /// <param name="skipBlankPages">Skip blank pages flag. (optional)</param>
        /// <param name="width">Image width. (optional)</param>
        /// <param name="height">Image height. (optional)</param>
        /// <param name="xResolution">Horizontal resolution. (optional)</param>
        /// <param name="yResolution">Vertical resolution. (optional)</param>
        /// <param name="pageIndex">Start page to export. (optional)</param>
        /// <param name="pageCount">Number of pages to export. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PutDocumentSaveAsTiff (string name, TiffExportOptions exportOptions = null, string resultFile = null, double? brightness = null, string compression = null, string colorDepth = null, int? leftMargin = null, int? rightMargin = null, int? topMargin = null, int? bottomMargin = null, string orientation = null, bool? skipBlankPages = null, int? width = null, int? height = null, int? xResolution = null, int? yResolution = null, int? pageIndex = null, int? pageCount = null, string storage = null, string folder = null);

        /// <summary>
        /// Save document as Tiff image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="exportOptions">with tiff export options. (optional)</param>
        /// <param name="resultFile">The resulting file. (optional)</param>
        /// <param name="brightness">The image brightness. (optional)</param>
        /// <param name="compression">Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)</param>
        /// <param name="colorDepth">Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)</param>
        /// <param name="leftMargin">Left image margin. (optional)</param>
        /// <param name="rightMargin">Right image margin. (optional)</param>
        /// <param name="topMargin">Top image margin. (optional)</param>
        /// <param name="bottomMargin">Bottom image margin. (optional)</param>
        /// <param name="orientation">Image orientation. Possible values are: None, Landscape, Portait. (optional)</param>
        /// <param name="skipBlankPages">Skip blank pages flag. (optional)</param>
        /// <param name="width">Image width. (optional)</param>
        /// <param name="height">Image height. (optional)</param>
        /// <param name="xResolution">Horizontal resolution. (optional)</param>
        /// <param name="yResolution">Vertical resolution. (optional)</param>
        /// <param name="pageIndex">Start page to export. (optional)</param>
        /// <param name="pageCount">Number of pages to export. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PutDocumentSaveAsTiffWithHttpInfo (string name, TiffExportOptions exportOptions = null, string resultFile = null, double? brightness = null, string compression = null, string colorDepth = null, int? leftMargin = null, int? rightMargin = null, int? topMargin = null, int? bottomMargin = null, string orientation = null, bool? skipBlankPages = null, int? width = null, int? height = null, int? xResolution = null, int? yResolution = null, int? pageIndex = null, int? pageCount = null, string storage = null, string folder = null);
        /// <summary>
        /// Convert EPUB file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.epub)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PutEpubInStorageToPdf (string name, string srcPath, string dstFolder = null);

        /// <summary>
        /// Convert EPUB file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.epub)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PutEpubInStorageToPdfWithHttpInfo (string name, string srcPath, string dstFolder = null);
        /// <summary>
        /// Flatten form fields in document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PutFieldsFlatten (string name, string storage = null, string folder = null);

        /// <summary>
        /// Flatten form fields in document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PutFieldsFlattenWithHttpInfo (string name, string storage = null, string folder = null);
        /// <summary>
        /// Convert HTML file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.zip)</param>
        /// <param name="htmlFileName">Name of HTML file in ZIP.</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PutHtmlInStorageToPdf (string name, string srcPath, string htmlFileName, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string dstFolder = null);

        /// <summary>
        /// Convert HTML file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.zip)</param>
        /// <param name="htmlFileName">Name of HTML file in ZIP.</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PutHtmlInStorageToPdfWithHttpInfo (string name, string srcPath, string htmlFileName, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string dstFolder = null);
        /// <summary>
        /// Convert image file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageTemplates">Image templates</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PutImageInStorageToPdf (string name, ImageTemplatesRequest imageTemplates, string dstFolder = null);

        /// <summary>
        /// Convert image file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageTemplates">Image templates</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PutImageInStorageToPdfWithHttpInfo (string name, ImageTemplatesRequest imageTemplates, string dstFolder = null);
        /// <summary>
        /// Extract document images in format specified to folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PutImagesExtractAsGif (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string destFolder = null);

        /// <summary>
        /// Extract document images in format specified to folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PutImagesExtractAsGifWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string destFolder = null);
        /// <summary>
        /// Extract document images in format specified to folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PutImagesExtractAsJpeg (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string destFolder = null);

        /// <summary>
        /// Extract document images in format specified to folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PutImagesExtractAsJpegWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string destFolder = null);
        /// <summary>
        /// Extract document images in format specified to folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PutImagesExtractAsPng (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string destFolder = null);

        /// <summary>
        /// Extract document images in format specified to folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PutImagesExtractAsPngWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string destFolder = null);
        /// <summary>
        /// Extract document images in format specified to folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PutImagesExtractAsTiff (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string destFolder = null);

        /// <summary>
        /// Extract document images in format specified to folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PutImagesExtractAsTiffWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string destFolder = null);
        /// <summary>
        /// Convert LaTeX file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.tex)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PutLaTeXInStorageToPdf (string name, string srcPath, string dstFolder = null);

        /// <summary>
        /// Convert LaTeX file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.tex)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PutLaTeXInStorageToPdfWithHttpInfo (string name, string srcPath, string dstFolder = null);
        /// <summary>
        /// Merge a list of documents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Resulting documen name.</param>
        /// <param name="mergeDocuments">with a list of documents. (optional)</param>
        /// <param name="storage">Resulting document storage. (optional)</param>
        /// <param name="folder">Resulting document folder. (optional)</param>
        /// <returns>DocumentResponse</returns>
        DocumentResponse PutMergeDocuments (string name, MergeDocuments mergeDocuments = null, string storage = null, string folder = null);

        /// <summary>
        /// Merge a list of documents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Resulting documen name.</param>
        /// <param name="mergeDocuments">with a list of documents. (optional)</param>
        /// <param name="storage">Resulting document storage. (optional)</param>
        /// <param name="folder">Resulting document folder. (optional)</param>
        /// <returns>ApiResponse of DocumentResponse</returns>
        ApiResponse<DocumentResponse> PutMergeDocumentsWithHttpInfo (string name, MergeDocuments mergeDocuments = null, string storage = null, string folder = null);
        /// <summary>
        /// Convert MHT file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.mht)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PutMhtInStorageToPdf (string name, string srcPath, string dstFolder = null);

        /// <summary>
        /// Convert MHT file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.mht)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PutMhtInStorageToPdfWithHttpInfo (string name, string srcPath, string dstFolder = null);
        /// <summary>
        /// Add page stamp.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="stamp">with data.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PutPageAddStamp (string name, int? pageNumber, Stamp stamp, string storage = null, string folder = null);

        /// <summary>
        /// Add page stamp.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="stamp">with data.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PutPageAddStampWithHttpInfo (string name, int? pageNumber, Stamp stamp, string storage = null, string folder = null);
        /// <summary>
        /// Convert document page to bmp image and save in storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PutPageConvertToBmp (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null);

        /// <summary>
        /// Convert document page to bmp image and save in storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PutPageConvertToBmpWithHttpInfo (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null);
        /// <summary>
        /// Convert document page to emf image and save in storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PutPageConvertToEmf (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null);

        /// <summary>
        /// Convert document page to emf image and save in storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PutPageConvertToEmfWithHttpInfo (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null);
        /// <summary>
        /// Convert document page to gif image and save in storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PutPageConvertToGif (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null);

        /// <summary>
        /// Convert document page to gif image and save in storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PutPageConvertToGifWithHttpInfo (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null);
        /// <summary>
        /// Convert document page to Jpeg image and save in storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PutPageConvertToJpeg (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null);

        /// <summary>
        /// Convert document page to Jpeg image and save in storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PutPageConvertToJpegWithHttpInfo (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null);
        /// <summary>
        /// Convert document page to png image and save in storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PutPageConvertToPng (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null);

        /// <summary>
        /// Convert document page to png image and save in storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PutPageConvertToPngWithHttpInfo (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null);
        /// <summary>
        /// Convert document page to Tiff image and save in storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PutPageConvertToTiff (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null);

        /// <summary>
        /// Convert document page to Tiff image and save in storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PutPageConvertToTiffWithHttpInfo (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null);
        /// <summary>
        /// Convert PCL file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.pcl)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PutPclInStorageToPdf (string name, string srcPath, string dstFolder = null);

        /// <summary>
        /// Convert PCL file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.pcl)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PutPclInStorageToPdfWithHttpInfo (string name, string srcPath, string dstFolder = null);
        /// <summary>
        /// Converts PDF document (in request content) to DOC format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.doc)</param>
        /// <param name="addReturnToLineEnd">Add return to line end. (optional)</param>
        /// <param name="format">Allows to specify .doc or .docx file format. (optional)</param>
        /// <param name="imageResolutionX">Image resolution X. (optional)</param>
        /// <param name="imageResolutionY">Image resolution Y. (optional)</param>
        /// <param name="maxDistanceBetweenTextLines">Max distance between text lines. (optional)</param>
        /// <param name="mode">Allows to control how a PDF document is converted into a word processing document. (optional)</param>
        /// <param name="recognizeBullets">Recognize bullets. (optional)</param>
        /// <param name="relativeHorizontalProximity">Relative horizontal proximity. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PutPdfInRequestToDoc (string outPath, bool? addReturnToLineEnd = null, string format = null, int? imageResolutionX = null, int? imageResolutionY = null, int? maxDistanceBetweenTextLines = null, string mode = null, bool? recognizeBullets = null, double? relativeHorizontalProximity = null, System.IO.Stream file = null);

        /// <summary>
        /// Converts PDF document (in request content) to DOC format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.doc)</param>
        /// <param name="addReturnToLineEnd">Add return to line end. (optional)</param>
        /// <param name="format">Allows to specify .doc or .docx file format. (optional)</param>
        /// <param name="imageResolutionX">Image resolution X. (optional)</param>
        /// <param name="imageResolutionY">Image resolution Y. (optional)</param>
        /// <param name="maxDistanceBetweenTextLines">Max distance between text lines. (optional)</param>
        /// <param name="mode">Allows to control how a PDF document is converted into a word processing document. (optional)</param>
        /// <param name="recognizeBullets">Recognize bullets. (optional)</param>
        /// <param name="relativeHorizontalProximity">Relative horizontal proximity. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PutPdfInRequestToDocWithHttpInfo (string outPath, bool? addReturnToLineEnd = null, string format = null, int? imageResolutionX = null, int? imageResolutionY = null, int? maxDistanceBetweenTextLines = null, string mode = null, bool? recognizeBullets = null, double? relativeHorizontalProximity = null, System.IO.Stream file = null);
        /// <summary>
        /// Converts PDF document (in request content) to EPUB format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.epub)</param>
        /// <param name="contentRecognitionMode">Рroperty tunes conversion for this or that desirable method of recognition of content. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PutPdfInRequestToEpub (string outPath, string contentRecognitionMode = null, System.IO.Stream file = null);

        /// <summary>
        /// Converts PDF document (in request content) to EPUB format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.epub)</param>
        /// <param name="contentRecognitionMode">Рroperty tunes conversion for this or that desirable method of recognition of content. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PutPdfInRequestToEpubWithHttpInfo (string outPath, string contentRecognitionMode = null, System.IO.Stream file = null);
        /// <summary>
        /// Converts PDF document (in request content) to Html format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.html)</param>
        /// <param name="additionalMarginWidthInPoints">Defines width of margin that will be forcibly left around that output HTML-areas. (optional)</param>
        /// <param name="compressSvgGraphicsIfAny">The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)</param>
        /// <param name="convertMarkedContentToLayers">If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)</param>
        /// <param name="defaultFontName">Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)</param>
        /// <param name="documentType">Result document type. (optional)</param>
        /// <param name="fixedLayout">The value indicating whether that HTML is created as fixed layout. (optional)</param>
        /// <param name="imageResolution">Resolution for image rendering. (optional)</param>
        /// <param name="minimalLineWidth">This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)</param>
        /// <param name="preventGlyphsGrouping">This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)</param>
        /// <param name="splitCssIntoPages">When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)</param>
        /// <param name="splitIntoPages">The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)</param>
        /// <param name="useZOrder">If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)</param>
        /// <param name="antialiasingProcessing">The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)</param>
        /// <param name="cssClassNamesPrefix">When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)</param>
        /// <param name="explicitListOfSavedPages">With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)</param>
        /// <param name="fontEncodingStrategy">Defines encoding special rule to tune PDF decoding for current document. (optional)</param>
        /// <param name="fontSavingMode">Defines font saving mode that will be used during saving of PDF to desirable format. (optional)</param>
        /// <param name="htmlMarkupGenerationMode">Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)</param>
        /// <param name="lettersPositioningMethod">The mode of positioning of letters in words in result HTML. (optional)</param>
        /// <param name="pagesFlowTypeDependsOnViewersScreenSize">If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)</param>
        /// <param name="partsEmbeddingMode">It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)</param>
        /// <param name="rasterImagesSavingMode">Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)</param>
        /// <param name="removeEmptyAreasOnTopAndBottom">Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)</param>
        /// <param name="saveShadowedTextsAsTransparentTexts">Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)</param>
        /// <param name="saveTransparentTexts">Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)</param>
        /// <param name="specialFolderForAllImages">The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="specialFolderForSvgImages">The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="trySaveTextUnderliningAndStrikeoutingInCss">PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PutPdfInRequestToHtml (string outPath, int? additionalMarginWidthInPoints = null, bool? compressSvgGraphicsIfAny = null, bool? convertMarkedContentToLayers = null, string defaultFontName = null, string documentType = null, bool? fixedLayout = null, int? imageResolution = null, int? minimalLineWidth = null, bool? preventGlyphsGrouping = null, bool? splitCssIntoPages = null, bool? splitIntoPages = null, bool? useZOrder = null, string antialiasingProcessing = null, string cssClassNamesPrefix = null, List<int?> explicitListOfSavedPages = null, string fontEncodingStrategy = null, string fontSavingMode = null, string htmlMarkupGenerationMode = null, string lettersPositioningMethod = null, bool? pagesFlowTypeDependsOnViewersScreenSize = null, string partsEmbeddingMode = null, string rasterImagesSavingMode = null, bool? removeEmptyAreasOnTopAndBottom = null, bool? saveShadowedTextsAsTransparentTexts = null, bool? saveTransparentTexts = null, string specialFolderForAllImages = null, string specialFolderForSvgImages = null, bool? trySaveTextUnderliningAndStrikeoutingInCss = null, System.IO.Stream file = null);

        /// <summary>
        /// Converts PDF document (in request content) to Html format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.html)</param>
        /// <param name="additionalMarginWidthInPoints">Defines width of margin that will be forcibly left around that output HTML-areas. (optional)</param>
        /// <param name="compressSvgGraphicsIfAny">The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)</param>
        /// <param name="convertMarkedContentToLayers">If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)</param>
        /// <param name="defaultFontName">Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)</param>
        /// <param name="documentType">Result document type. (optional)</param>
        /// <param name="fixedLayout">The value indicating whether that HTML is created as fixed layout. (optional)</param>
        /// <param name="imageResolution">Resolution for image rendering. (optional)</param>
        /// <param name="minimalLineWidth">This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)</param>
        /// <param name="preventGlyphsGrouping">This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)</param>
        /// <param name="splitCssIntoPages">When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)</param>
        /// <param name="splitIntoPages">The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)</param>
        /// <param name="useZOrder">If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)</param>
        /// <param name="antialiasingProcessing">The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)</param>
        /// <param name="cssClassNamesPrefix">When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)</param>
        /// <param name="explicitListOfSavedPages">With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)</param>
        /// <param name="fontEncodingStrategy">Defines encoding special rule to tune PDF decoding for current document. (optional)</param>
        /// <param name="fontSavingMode">Defines font saving mode that will be used during saving of PDF to desirable format. (optional)</param>
        /// <param name="htmlMarkupGenerationMode">Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)</param>
        /// <param name="lettersPositioningMethod">The mode of positioning of letters in words in result HTML. (optional)</param>
        /// <param name="pagesFlowTypeDependsOnViewersScreenSize">If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)</param>
        /// <param name="partsEmbeddingMode">It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)</param>
        /// <param name="rasterImagesSavingMode">Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)</param>
        /// <param name="removeEmptyAreasOnTopAndBottom">Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)</param>
        /// <param name="saveShadowedTextsAsTransparentTexts">Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)</param>
        /// <param name="saveTransparentTexts">Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)</param>
        /// <param name="specialFolderForAllImages">The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="specialFolderForSvgImages">The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="trySaveTextUnderliningAndStrikeoutingInCss">PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PutPdfInRequestToHtmlWithHttpInfo (string outPath, int? additionalMarginWidthInPoints = null, bool? compressSvgGraphicsIfAny = null, bool? convertMarkedContentToLayers = null, string defaultFontName = null, string documentType = null, bool? fixedLayout = null, int? imageResolution = null, int? minimalLineWidth = null, bool? preventGlyphsGrouping = null, bool? splitCssIntoPages = null, bool? splitIntoPages = null, bool? useZOrder = null, string antialiasingProcessing = null, string cssClassNamesPrefix = null, List<int?> explicitListOfSavedPages = null, string fontEncodingStrategy = null, string fontSavingMode = null, string htmlMarkupGenerationMode = null, string lettersPositioningMethod = null, bool? pagesFlowTypeDependsOnViewersScreenSize = null, string partsEmbeddingMode = null, string rasterImagesSavingMode = null, bool? removeEmptyAreasOnTopAndBottom = null, bool? saveShadowedTextsAsTransparentTexts = null, bool? saveTransparentTexts = null, string specialFolderForAllImages = null, string specialFolderForSvgImages = null, bool? trySaveTextUnderliningAndStrikeoutingInCss = null, System.IO.Stream file = null);
        /// <summary>
        /// Converts PDF document (in request content) to LaTeX format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tex)</param>
        /// <param name="pagesCount">Pages count. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PutPdfInRequestToLaTeX (string outPath, int? pagesCount = null, System.IO.Stream file = null);

        /// <summary>
        /// Converts PDF document (in request content) to LaTeX format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tex)</param>
        /// <param name="pagesCount">Pages count. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PutPdfInRequestToLaTeXWithHttpInfo (string outPath, int? pagesCount = null, System.IO.Stream file = null);
        /// <summary>
        /// Converts PDF document (in request content) to MOBIXML format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.mobixml)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PutPdfInRequestToMobiXml (string outPath, System.IO.Stream file = null);

        /// <summary>
        /// Converts PDF document (in request content) to MOBIXML format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.mobixml)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PutPdfInRequestToMobiXmlWithHttpInfo (string outPath, System.IO.Stream file = null);
        /// <summary>
        /// Converts PDF document (in request content) to PdfA format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="type">Type of PdfA format.</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PutPdfInRequestToPdfA (string outPath, string type, System.IO.Stream file = null);

        /// <summary>
        /// Converts PDF document (in request content) to PdfA format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="type">Type of PdfA format.</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PutPdfInRequestToPdfAWithHttpInfo (string outPath, string type, System.IO.Stream file = null);
        /// <summary>
        /// Converts PDF document (in request content) to PPTX format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pptx)</param>
        /// <param name="separateImages">Separate images. (optional)</param>
        /// <param name="slidesAsImages">Slides as images. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PutPdfInRequestToPptx (string outPath, bool? separateImages = null, bool? slidesAsImages = null, System.IO.Stream file = null);

        /// <summary>
        /// Converts PDF document (in request content) to PPTX format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pptx)</param>
        /// <param name="separateImages">Separate images. (optional)</param>
        /// <param name="slidesAsImages">Slides as images. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PutPdfInRequestToPptxWithHttpInfo (string outPath, bool? separateImages = null, bool? slidesAsImages = null, System.IO.Stream file = null);
        /// <summary>
        /// Converts PDF document (in request content) to SVG format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.svg)</param>
        /// <param name="compressOutputToZipArchive">Specifies whether output will be created as one zip-archive. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PutPdfInRequestToSvg (string outPath, bool? compressOutputToZipArchive = null, System.IO.Stream file = null);

        /// <summary>
        /// Converts PDF document (in request content) to SVG format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.svg)</param>
        /// <param name="compressOutputToZipArchive">Specifies whether output will be created as one zip-archive. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PutPdfInRequestToSvgWithHttpInfo (string outPath, bool? compressOutputToZipArchive = null, System.IO.Stream file = null);
        /// <summary>
        /// Converts PDF document (in request content) to TIFF format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tiff)</param>
        /// <param name="brightness">Image brightness. (optional)</param>
        /// <param name="compression">Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)</param>
        /// <param name="colorDepth">Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)</param>
        /// <param name="leftMargin">Left image margin. (optional)</param>
        /// <param name="rightMargin">Right image margin. (optional)</param>
        /// <param name="topMargin">Top image margin. (optional)</param>
        /// <param name="bottomMargin">Bottom image margin. (optional)</param>
        /// <param name="orientation">Image orientation. Possible values are: None, Landscape, Portait. (optional)</param>
        /// <param name="skipBlankPages">Skip blank pages flag. (optional)</param>
        /// <param name="width">Image width. (optional)</param>
        /// <param name="height">Image height. (optional)</param>
        /// <param name="xResolution">Horizontal resolution. (optional)</param>
        /// <param name="yResolution">Vertical resolution. (optional)</param>
        /// <param name="pageIndex">Start page to export. (optional)</param>
        /// <param name="pageCount">Number of pages to export. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PutPdfInRequestToTiff (string outPath, double? brightness = null, string compression = null, string colorDepth = null, int? leftMargin = null, int? rightMargin = null, int? topMargin = null, int? bottomMargin = null, string orientation = null, bool? skipBlankPages = null, int? width = null, int? height = null, int? xResolution = null, int? yResolution = null, int? pageIndex = null, int? pageCount = null, System.IO.Stream file = null);

        /// <summary>
        /// Converts PDF document (in request content) to TIFF format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tiff)</param>
        /// <param name="brightness">Image brightness. (optional)</param>
        /// <param name="compression">Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)</param>
        /// <param name="colorDepth">Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)</param>
        /// <param name="leftMargin">Left image margin. (optional)</param>
        /// <param name="rightMargin">Right image margin. (optional)</param>
        /// <param name="topMargin">Top image margin. (optional)</param>
        /// <param name="bottomMargin">Bottom image margin. (optional)</param>
        /// <param name="orientation">Image orientation. Possible values are: None, Landscape, Portait. (optional)</param>
        /// <param name="skipBlankPages">Skip blank pages flag. (optional)</param>
        /// <param name="width">Image width. (optional)</param>
        /// <param name="height">Image height. (optional)</param>
        /// <param name="xResolution">Horizontal resolution. (optional)</param>
        /// <param name="yResolution">Vertical resolution. (optional)</param>
        /// <param name="pageIndex">Start page to export. (optional)</param>
        /// <param name="pageCount">Number of pages to export. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PutPdfInRequestToTiffWithHttpInfo (string outPath, double? brightness = null, string compression = null, string colorDepth = null, int? leftMargin = null, int? rightMargin = null, int? topMargin = null, int? bottomMargin = null, string orientation = null, bool? skipBlankPages = null, int? width = null, int? height = null, int? xResolution = null, int? yResolution = null, int? pageIndex = null, int? pageCount = null, System.IO.Stream file = null);
        /// <summary>
        /// Converts PDF document (in request content) to XLS format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xls)</param>
        /// <param name="insertBlankColumnAtFirst">Insert blank column at first (optional)</param>
        /// <param name="minimizeTheNumberOfWorksheets">Minimize the number of worksheets (optional)</param>
        /// <param name="scaleFactor">Scale factor (optional)</param>
        /// <param name="uniformWorksheets">Uniform worksheets (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PutPdfInRequestToXls (string outPath, bool? insertBlankColumnAtFirst = null, bool? minimizeTheNumberOfWorksheets = null, double? scaleFactor = null, bool? uniformWorksheets = null, System.IO.Stream file = null);

        /// <summary>
        /// Converts PDF document (in request content) to XLS format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xls)</param>
        /// <param name="insertBlankColumnAtFirst">Insert blank column at first (optional)</param>
        /// <param name="minimizeTheNumberOfWorksheets">Minimize the number of worksheets (optional)</param>
        /// <param name="scaleFactor">Scale factor (optional)</param>
        /// <param name="uniformWorksheets">Uniform worksheets (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PutPdfInRequestToXlsWithHttpInfo (string outPath, bool? insertBlankColumnAtFirst = null, bool? minimizeTheNumberOfWorksheets = null, double? scaleFactor = null, bool? uniformWorksheets = null, System.IO.Stream file = null);
        /// <summary>
        /// Converts PDF document (in request content) to XML format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xml)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PutPdfInRequestToXml (string outPath, System.IO.Stream file = null);

        /// <summary>
        /// Converts PDF document (in request content) to XML format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xml)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PutPdfInRequestToXmlWithHttpInfo (string outPath, System.IO.Stream file = null);
        /// <summary>
        /// Converts PDF document (in request content) to XPS format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xps)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PutPdfInRequestToXps (string outPath, System.IO.Stream file = null);

        /// <summary>
        /// Converts PDF document (in request content) to XPS format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xps)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PutPdfInRequestToXpsWithHttpInfo (string outPath, System.IO.Stream file = null);
        /// <summary>
        /// Converts PDF document (located on storage) to DOC format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.doc)</param>
        /// <param name="addReturnToLineEnd">Add return to line end. (optional)</param>
        /// <param name="format">Allows to specify .doc or .docx file format. (optional)</param>
        /// <param name="imageResolutionX">Image resolution X. (optional)</param>
        /// <param name="imageResolutionY">Image resolution Y. (optional)</param>
        /// <param name="maxDistanceBetweenTextLines">Max distance between text lines. (optional)</param>
        /// <param name="mode">Allows to control how a PDF document is converted into a word processing document. (optional)</param>
        /// <param name="recognizeBullets">Recognize bullets. (optional)</param>
        /// <param name="relativeHorizontalProximity">Relative horizontal proximity. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PutPdfInStorageToDoc (string name, string outPath, bool? addReturnToLineEnd = null, string format = null, int? imageResolutionX = null, int? imageResolutionY = null, int? maxDistanceBetweenTextLines = null, string mode = null, bool? recognizeBullets = null, double? relativeHorizontalProximity = null, string folder = null);

        /// <summary>
        /// Converts PDF document (located on storage) to DOC format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.doc)</param>
        /// <param name="addReturnToLineEnd">Add return to line end. (optional)</param>
        /// <param name="format">Allows to specify .doc or .docx file format. (optional)</param>
        /// <param name="imageResolutionX">Image resolution X. (optional)</param>
        /// <param name="imageResolutionY">Image resolution Y. (optional)</param>
        /// <param name="maxDistanceBetweenTextLines">Max distance between text lines. (optional)</param>
        /// <param name="mode">Allows to control how a PDF document is converted into a word processing document. (optional)</param>
        /// <param name="recognizeBullets">Recognize bullets. (optional)</param>
        /// <param name="relativeHorizontalProximity">Relative horizontal proximity. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PutPdfInStorageToDocWithHttpInfo (string name, string outPath, bool? addReturnToLineEnd = null, string format = null, int? imageResolutionX = null, int? imageResolutionY = null, int? maxDistanceBetweenTextLines = null, string mode = null, bool? recognizeBullets = null, double? relativeHorizontalProximity = null, string folder = null);
        /// <summary>
        /// Converts PDF document (located on storage) to EPUB format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.epub)</param>
        /// <param name="contentRecognitionMode">Рroperty tunes conversion for this or that desirable method of recognition of content. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PutPdfInStorageToEpub (string name, string outPath, string contentRecognitionMode = null, string folder = null);

        /// <summary>
        /// Converts PDF document (located on storage) to EPUB format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.epub)</param>
        /// <param name="contentRecognitionMode">Рroperty tunes conversion for this or that desirable method of recognition of content. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PutPdfInStorageToEpubWithHttpInfo (string name, string outPath, string contentRecognitionMode = null, string folder = null);
        /// <summary>
        /// Converts PDF document (located on storage) to Html format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.html)</param>
        /// <param name="additionalMarginWidthInPoints">Defines width of margin that will be forcibly left around that output HTML-areas. (optional)</param>
        /// <param name="compressSvgGraphicsIfAny">The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)</param>
        /// <param name="convertMarkedContentToLayers">If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)</param>
        /// <param name="defaultFontName">Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)</param>
        /// <param name="documentType">Result document type. (optional)</param>
        /// <param name="fixedLayout">The value indicating whether that HTML is created as fixed layout. (optional)</param>
        /// <param name="imageResolution">Resolution for image rendering. (optional)</param>
        /// <param name="minimalLineWidth">This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)</param>
        /// <param name="preventGlyphsGrouping">This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)</param>
        /// <param name="splitCssIntoPages">When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)</param>
        /// <param name="splitIntoPages">The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)</param>
        /// <param name="useZOrder">If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)</param>
        /// <param name="antialiasingProcessing">The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)</param>
        /// <param name="cssClassNamesPrefix">When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)</param>
        /// <param name="explicitListOfSavedPages">With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)</param>
        /// <param name="fontEncodingStrategy">Defines encoding special rule to tune PDF decoding for current document. (optional)</param>
        /// <param name="fontSavingMode">Defines font saving mode that will be used during saving of PDF to desirable format. (optional)</param>
        /// <param name="htmlMarkupGenerationMode">Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)</param>
        /// <param name="lettersPositioningMethod">The mode of positioning of letters in words in result HTML. (optional)</param>
        /// <param name="pagesFlowTypeDependsOnViewersScreenSize">If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)</param>
        /// <param name="partsEmbeddingMode">It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)</param>
        /// <param name="rasterImagesSavingMode">Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)</param>
        /// <param name="removeEmptyAreasOnTopAndBottom">Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)</param>
        /// <param name="saveShadowedTextsAsTransparentTexts">Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)</param>
        /// <param name="saveTransparentTexts">Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)</param>
        /// <param name="specialFolderForAllImages">The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="specialFolderForSvgImages">The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="trySaveTextUnderliningAndStrikeoutingInCss">PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PutPdfInStorageToHtml (string name, string outPath, int? additionalMarginWidthInPoints = null, bool? compressSvgGraphicsIfAny = null, bool? convertMarkedContentToLayers = null, string defaultFontName = null, string documentType = null, bool? fixedLayout = null, int? imageResolution = null, int? minimalLineWidth = null, bool? preventGlyphsGrouping = null, bool? splitCssIntoPages = null, bool? splitIntoPages = null, bool? useZOrder = null, string antialiasingProcessing = null, string cssClassNamesPrefix = null, List<int?> explicitListOfSavedPages = null, string fontEncodingStrategy = null, string fontSavingMode = null, string htmlMarkupGenerationMode = null, string lettersPositioningMethod = null, bool? pagesFlowTypeDependsOnViewersScreenSize = null, string partsEmbeddingMode = null, string rasterImagesSavingMode = null, bool? removeEmptyAreasOnTopAndBottom = null, bool? saveShadowedTextsAsTransparentTexts = null, bool? saveTransparentTexts = null, string specialFolderForAllImages = null, string specialFolderForSvgImages = null, bool? trySaveTextUnderliningAndStrikeoutingInCss = null, string folder = null);

        /// <summary>
        /// Converts PDF document (located on storage) to Html format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.html)</param>
        /// <param name="additionalMarginWidthInPoints">Defines width of margin that will be forcibly left around that output HTML-areas. (optional)</param>
        /// <param name="compressSvgGraphicsIfAny">The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)</param>
        /// <param name="convertMarkedContentToLayers">If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)</param>
        /// <param name="defaultFontName">Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)</param>
        /// <param name="documentType">Result document type. (optional)</param>
        /// <param name="fixedLayout">The value indicating whether that HTML is created as fixed layout. (optional)</param>
        /// <param name="imageResolution">Resolution for image rendering. (optional)</param>
        /// <param name="minimalLineWidth">This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)</param>
        /// <param name="preventGlyphsGrouping">This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)</param>
        /// <param name="splitCssIntoPages">When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)</param>
        /// <param name="splitIntoPages">The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)</param>
        /// <param name="useZOrder">If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)</param>
        /// <param name="antialiasingProcessing">The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)</param>
        /// <param name="cssClassNamesPrefix">When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)</param>
        /// <param name="explicitListOfSavedPages">With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)</param>
        /// <param name="fontEncodingStrategy">Defines encoding special rule to tune PDF decoding for current document. (optional)</param>
        /// <param name="fontSavingMode">Defines font saving mode that will be used during saving of PDF to desirable format. (optional)</param>
        /// <param name="htmlMarkupGenerationMode">Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)</param>
        /// <param name="lettersPositioningMethod">The mode of positioning of letters in words in result HTML. (optional)</param>
        /// <param name="pagesFlowTypeDependsOnViewersScreenSize">If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)</param>
        /// <param name="partsEmbeddingMode">It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)</param>
        /// <param name="rasterImagesSavingMode">Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)</param>
        /// <param name="removeEmptyAreasOnTopAndBottom">Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)</param>
        /// <param name="saveShadowedTextsAsTransparentTexts">Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)</param>
        /// <param name="saveTransparentTexts">Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)</param>
        /// <param name="specialFolderForAllImages">The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="specialFolderForSvgImages">The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="trySaveTextUnderliningAndStrikeoutingInCss">PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PutPdfInStorageToHtmlWithHttpInfo (string name, string outPath, int? additionalMarginWidthInPoints = null, bool? compressSvgGraphicsIfAny = null, bool? convertMarkedContentToLayers = null, string defaultFontName = null, string documentType = null, bool? fixedLayout = null, int? imageResolution = null, int? minimalLineWidth = null, bool? preventGlyphsGrouping = null, bool? splitCssIntoPages = null, bool? splitIntoPages = null, bool? useZOrder = null, string antialiasingProcessing = null, string cssClassNamesPrefix = null, List<int?> explicitListOfSavedPages = null, string fontEncodingStrategy = null, string fontSavingMode = null, string htmlMarkupGenerationMode = null, string lettersPositioningMethod = null, bool? pagesFlowTypeDependsOnViewersScreenSize = null, string partsEmbeddingMode = null, string rasterImagesSavingMode = null, bool? removeEmptyAreasOnTopAndBottom = null, bool? saveShadowedTextsAsTransparentTexts = null, bool? saveTransparentTexts = null, string specialFolderForAllImages = null, string specialFolderForSvgImages = null, bool? trySaveTextUnderliningAndStrikeoutingInCss = null, string folder = null);
        /// <summary>
        /// Converts PDF document (located on storage) to LaTeX format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tex)</param>
        /// <param name="pagesCount">Pages count. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PutPdfInStorageToLaTeX (string name, string outPath, int? pagesCount = null, string folder = null);

        /// <summary>
        /// Converts PDF document (located on storage) to LaTeX format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tex)</param>
        /// <param name="pagesCount">Pages count. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PutPdfInStorageToLaTeXWithHttpInfo (string name, string outPath, int? pagesCount = null, string folder = null);
        /// <summary>
        /// Converts PDF document (located on storage) to MOBIXML format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.mobixml)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PutPdfInStorageToMobiXml (string name, string outPath, string folder = null);

        /// <summary>
        /// Converts PDF document (located on storage) to MOBIXML format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.mobixml)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PutPdfInStorageToMobiXmlWithHttpInfo (string name, string outPath, string folder = null);
        /// <summary>
        /// Converts PDF document (located on storage) to PdfA format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="type">Type of PdfA format.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PutPdfInStorageToPdfA (string name, string outPath, string type, string folder = null);

        /// <summary>
        /// Converts PDF document (located on storage) to PdfA format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="type">Type of PdfA format.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PutPdfInStorageToPdfAWithHttpInfo (string name, string outPath, string type, string folder = null);
        /// <summary>
        /// Converts PDF document (located on storage) to PPTX format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pptx)</param>
        /// <param name="separateImages">Separate images. (optional)</param>
        /// <param name="slidesAsImages">Slides as images. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PutPdfInStorageToPptx (string name, string outPath, bool? separateImages = null, bool? slidesAsImages = null, string folder = null);

        /// <summary>
        /// Converts PDF document (located on storage) to PPTX format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pptx)</param>
        /// <param name="separateImages">Separate images. (optional)</param>
        /// <param name="slidesAsImages">Slides as images. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PutPdfInStorageToPptxWithHttpInfo (string name, string outPath, bool? separateImages = null, bool? slidesAsImages = null, string folder = null);
        /// <summary>
        /// Converts PDF document (located on storage) to SVG format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.svg)</param>
        /// <param name="compressOutputToZipArchive">Specifies whether output will be created as one zip-archive. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PutPdfInStorageToSvg (string name, string outPath, bool? compressOutputToZipArchive = null, string folder = null);

        /// <summary>
        /// Converts PDF document (located on storage) to SVG format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.svg)</param>
        /// <param name="compressOutputToZipArchive">Specifies whether output will be created as one zip-archive. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PutPdfInStorageToSvgWithHttpInfo (string name, string outPath, bool? compressOutputToZipArchive = null, string folder = null);
        /// <summary>
        /// Converts PDF document (located on storage) to TIFF format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tiff)</param>
        /// <param name="brightness">Image brightness. (optional)</param>
        /// <param name="compression">Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)</param>
        /// <param name="colorDepth">Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)</param>
        /// <param name="leftMargin">Left image margin. (optional)</param>
        /// <param name="rightMargin">Right image margin. (optional)</param>
        /// <param name="topMargin">Top image margin. (optional)</param>
        /// <param name="bottomMargin">Bottom image margin. (optional)</param>
        /// <param name="orientation">Image orientation. Possible values are: None, Landscape, Portait. (optional)</param>
        /// <param name="skipBlankPages">Skip blank pages flag. (optional)</param>
        /// <param name="width">Image width. (optional)</param>
        /// <param name="height">Image height. (optional)</param>
        /// <param name="xResolution">Horizontal resolution. (optional)</param>
        /// <param name="yResolution">Vertical resolution. (optional)</param>
        /// <param name="pageIndex">Start page to export. (optional)</param>
        /// <param name="pageCount">Number of pages to export. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PutPdfInStorageToTiff (string name, string outPath, double? brightness = null, string compression = null, string colorDepth = null, int? leftMargin = null, int? rightMargin = null, int? topMargin = null, int? bottomMargin = null, string orientation = null, bool? skipBlankPages = null, int? width = null, int? height = null, int? xResolution = null, int? yResolution = null, int? pageIndex = null, int? pageCount = null, string folder = null);

        /// <summary>
        /// Converts PDF document (located on storage) to TIFF format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tiff)</param>
        /// <param name="brightness">Image brightness. (optional)</param>
        /// <param name="compression">Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)</param>
        /// <param name="colorDepth">Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)</param>
        /// <param name="leftMargin">Left image margin. (optional)</param>
        /// <param name="rightMargin">Right image margin. (optional)</param>
        /// <param name="topMargin">Top image margin. (optional)</param>
        /// <param name="bottomMargin">Bottom image margin. (optional)</param>
        /// <param name="orientation">Image orientation. Possible values are: None, Landscape, Portait. (optional)</param>
        /// <param name="skipBlankPages">Skip blank pages flag. (optional)</param>
        /// <param name="width">Image width. (optional)</param>
        /// <param name="height">Image height. (optional)</param>
        /// <param name="xResolution">Horizontal resolution. (optional)</param>
        /// <param name="yResolution">Vertical resolution. (optional)</param>
        /// <param name="pageIndex">Start page to export. (optional)</param>
        /// <param name="pageCount">Number of pages to export. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PutPdfInStorageToTiffWithHttpInfo (string name, string outPath, double? brightness = null, string compression = null, string colorDepth = null, int? leftMargin = null, int? rightMargin = null, int? topMargin = null, int? bottomMargin = null, string orientation = null, bool? skipBlankPages = null, int? width = null, int? height = null, int? xResolution = null, int? yResolution = null, int? pageIndex = null, int? pageCount = null, string folder = null);
        /// <summary>
        /// Converts PDF document (located on storage) to XLS format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xls)</param>
        /// <param name="insertBlankColumnAtFirst">Insert blank column at first (optional)</param>
        /// <param name="minimizeTheNumberOfWorksheets">Minimize the number of worksheets (optional)</param>
        /// <param name="scaleFactor">Scale factor (optional)</param>
        /// <param name="uniformWorksheets">Uniform worksheets (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PutPdfInStorageToXls (string name, string outPath, bool? insertBlankColumnAtFirst = null, bool? minimizeTheNumberOfWorksheets = null, double? scaleFactor = null, bool? uniformWorksheets = null, string folder = null);

        /// <summary>
        /// Converts PDF document (located on storage) to XLS format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xls)</param>
        /// <param name="insertBlankColumnAtFirst">Insert blank column at first (optional)</param>
        /// <param name="minimizeTheNumberOfWorksheets">Minimize the number of worksheets (optional)</param>
        /// <param name="scaleFactor">Scale factor (optional)</param>
        /// <param name="uniformWorksheets">Uniform worksheets (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PutPdfInStorageToXlsWithHttpInfo (string name, string outPath, bool? insertBlankColumnAtFirst = null, bool? minimizeTheNumberOfWorksheets = null, double? scaleFactor = null, bool? uniformWorksheets = null, string folder = null);
        /// <summary>
        /// Converts PDF document (located on storage) to XML format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xml)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PutPdfInStorageToXml (string name, string outPath, string folder = null);

        /// <summary>
        /// Converts PDF document (located on storage) to XML format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xml)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PutPdfInStorageToXmlWithHttpInfo (string name, string outPath, string folder = null);
        /// <summary>
        /// Converts PDF document (located on storage) to XPS format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xps)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PutPdfInStorageToXps (string name, string outPath, string folder = null);

        /// <summary>
        /// Converts PDF document (located on storage) to XPS format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xps)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PutPdfInStorageToXpsWithHttpInfo (string name, string outPath, string folder = null);
        /// <summary>
        /// Update privilege document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="privileges">Document privileges.  (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PutPrivileges (string name, DocumentPrivilege privileges = null, string folder = null);

        /// <summary>
        /// Update privilege document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="privileges">Document privileges.  (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PutPrivilegesWithHttpInfo (string name, DocumentPrivilege privileges = null, string folder = null);
        /// <summary>
        /// Convert PS file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.ps)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PutPsInStorageToPdf (string name, string srcPath, string dstFolder = null);

        /// <summary>
        /// Convert PS file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.ps)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PutPsInStorageToPdfWithHttpInfo (string name, string srcPath, string dstFolder = null);
        /// <summary>
        /// Create searchable PDF document. Generate OCR layer for images in input PDF document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="lang">language for OCR engine. Possible values: eng, ara, bel, ben, bul, ces, dan, deu, ell, fin, fra, heb, hin, ind, isl, ita, jpn, kor, nld, nor, pol, por, ron, rus, spa, swe, tha, tur, ukr, vie, chi_sim, chi_tra or thier combination e.g. eng,rus  (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PutSearchableDocument (string name, string storage = null, string folder = null, string lang = null);

        /// <summary>
        /// Create searchable PDF document. Generate OCR layer for images in input PDF document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="lang">language for OCR engine. Possible values: eng, ara, bel, ben, bul, ces, dan, deu, ell, fin, fra, heb, hin, ind, isl, ita, jpn, kor, nld, nor, pol, por, ron, rus, spa, swe, tha, tur, ukr, vie, chi_sim, chi_tra or thier combination e.g. eng,rus  (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PutSearchableDocumentWithHttpInfo (string name, string storage = null, string folder = null, string lang = null);
        /// <summary>
        /// Add/update document property.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="propertyName"></param>
        /// <param name="property"> (optional)</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>DocumentPropertyResponse</returns>
        DocumentPropertyResponse PutSetProperty (string name, string propertyName, DocumentProperty property = null, string storage = null, string folder = null);

        /// <summary>
        /// Add/update document property.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="propertyName"></param>
        /// <param name="property"> (optional)</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of DocumentPropertyResponse</returns>
        ApiResponse<DocumentPropertyResponse> PutSetPropertyWithHttpInfo (string name, string propertyName, DocumentProperty property = null, string storage = null, string folder = null);
        /// <summary>
        /// Convert SVG file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.svg)</param>
        /// <param name="adjustPageSize">Adjust page size (optional)</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PutSvgInStorageToPdf (string name, string srcPath, bool? adjustPageSize = null, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string dstFolder = null);

        /// <summary>
        /// Convert SVG file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.svg)</param>
        /// <param name="adjustPageSize">Adjust page size (optional)</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PutSvgInStorageToPdfWithHttpInfo (string name, string srcPath, bool? adjustPageSize = null, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string dstFolder = null);
        /// <summary>
        /// Update field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fieldName">The name of a field to be updated.</param>
        /// <param name="field">with the field data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>FieldResponse</returns>
        FieldResponse PutUpdateField (string name, string fieldName, Field field = null, string storage = null, string folder = null);

        /// <summary>
        /// Update field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fieldName">The name of a field to be updated.</param>
        /// <param name="field">with the field data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of FieldResponse</returns>
        ApiResponse<FieldResponse> PutUpdateFieldWithHttpInfo (string name, string fieldName, Field field = null, string storage = null, string folder = null);
        /// <summary>
        /// Update fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fields">with the fields data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>FieldsResponse</returns>
        FieldsResponse PutUpdateFields (string name, Fields fields = null, string storage = null, string folder = null);

        /// <summary>
        /// Update fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fields">with the fields data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of FieldsResponse</returns>
        ApiResponse<FieldsResponse> PutUpdateFieldsWithHttpInfo (string name, Fields fields = null, string storage = null, string folder = null);
        /// <summary>
        /// Convert web page to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="url">Source url</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PutWebInStorageToPdf (string name, string url, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string dstFolder = null);

        /// <summary>
        /// Convert web page to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="url">Source url</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PutWebInStorageToPdfWithHttpInfo (string name, string url, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string dstFolder = null);
        /// <summary>
        /// Converts PDF document which contatins XFA form (in request content) to PDF with AcroForm and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PutXfaPdfInRequestToAcroForm (string outPath, System.IO.Stream file = null);

        /// <summary>
        /// Converts PDF document which contatins XFA form (in request content) to PDF with AcroForm and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PutXfaPdfInRequestToAcroFormWithHttpInfo (string outPath, System.IO.Stream file = null);
        /// <summary>
        /// Converts PDF document which contatins XFA form (located on storage) to PDF with AcroForm and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PutXfaPdfInStorageToAcroForm (string name, string outPath, string folder = null);

        /// <summary>
        /// Converts PDF document which contatins XFA form (located on storage) to PDF with AcroForm and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PutXfaPdfInStorageToAcroFormWithHttpInfo (string name, string outPath, string folder = null);
        /// <summary>
        /// Convert XML file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xml)</param>
        /// <param name="xslFilePath">Full XSL source filename (ex. /folder1/folder2/template.xsl) (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PutXmlInStorageToPdf (string name, string srcPath, string xslFilePath = null, string dstFolder = null);

        /// <summary>
        /// Convert XML file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xml)</param>
        /// <param name="xslFilePath">Full XSL source filename (ex. /folder1/folder2/template.xsl) (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PutXmlInStorageToPdfWithHttpInfo (string name, string srcPath, string xslFilePath = null, string dstFolder = null);
        /// <summary>
        /// Convert XPS file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xps)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PutXpsInStorageToPdf (string name, string srcPath, string dstFolder = null);

        /// <summary>
        /// Convert XPS file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xps)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PutXpsInStorageToPdfWithHttpInfo (string name, string srcPath, string dstFolder = null);
        /// <summary>
        /// Convert XslFo file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xpsfo)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse PutXslFoInStorageToPdf (string name, string srcPath, string dstFolder = null);

        /// <summary>
        /// Convert XslFo file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xpsfo)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> PutXslFoInStorageToPdfWithHttpInfo (string name, string srcPath, string dstFolder = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete document field by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fieldName">The field name/</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> DeleteFieldAsync (string name, string fieldName, string storage = null, string folder = null);

        /// <summary>
        /// Delete document field by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fieldName">The field name/</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> DeleteFieldAsyncWithHttpInfo (string name, string fieldName, string storage = null, string folder = null);
        /// <summary>
        /// Delete document page by its number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> DeletePageAsync (string name, int? pageNumber, string storage = null, string folder = null);

        /// <summary>
        /// Delete document page by its number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> DeletePageAsyncWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null);
        /// <summary>
        /// Delete custom document properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> DeletePropertiesAsync (string name, string storage = null, string folder = null);

        /// <summary>
        /// Delete custom document properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> DeletePropertiesAsyncWithHttpInfo (string name, string storage = null, string folder = null);
        /// <summary>
        /// Delete document property.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="propertyName"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> DeletePropertyAsync (string name, string propertyName, string storage = null, string folder = null);

        /// <summary>
        /// Delete document property.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="propertyName"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> DeletePropertyAsyncWithHttpInfo (string name, string propertyName, string storage = null, string folder = null);
        /// <summary>
        /// Read common document info or convert to some format if the format specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="format">The format to convert. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="outPath">Path to save result (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetDocumentAsync (string name, string format = null, string storage = null, string folder = null, string outPath = null);

        /// <summary>
        /// Read common document info or convert to some format if the format specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="format">The format to convert. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="outPath">Path to save result (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetDocumentAsyncWithHttpInfo (string name, string format = null, string storage = null, string folder = null, string outPath = null);
        /// <summary>
        /// Read document attachment info by its index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="attachmentIndex">The attachment index.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AttachmentResponse</returns>
        System.Threading.Tasks.Task<AttachmentResponse> GetDocumentAttachmentByIndexAsync (string name, int? attachmentIndex, string storage = null, string folder = null);

        /// <summary>
        /// Read document attachment info by its index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="attachmentIndex">The attachment index.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AttachmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttachmentResponse>> GetDocumentAttachmentByIndexAsyncWithHttpInfo (string name, int? attachmentIndex, string storage = null, string folder = null);
        /// <summary>
        /// Read document attachments info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AttachmentsResponse</returns>
        System.Threading.Tasks.Task<AttachmentsResponse> GetDocumentAttachmentsAsync (string name, string storage = null, string folder = null);

        /// <summary>
        /// Read document attachments info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AttachmentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttachmentsResponse>> GetDocumentAttachmentsAsyncWithHttpInfo (string name, string storage = null, string folder = null);
        /// <summary>
        /// Read document bookmark/bookmarks (including children).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="bookmarkPath">The bookmark path. Leave it empty if you want to get all the bookmarks in the document. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetDocumentBookmarksAsync (string name, string bookmarkPath = null, string storage = null, string folder = null);

        /// <summary>
        /// Read document bookmark/bookmarks (including children).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="bookmarkPath">The bookmark path. Leave it empty if you want to get all the bookmarks in the document. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetDocumentBookmarksAsyncWithHttpInfo (string name, string bookmarkPath = null, string storage = null, string folder = null);
        /// <summary>
        /// Read document properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of DocumentPropertiesResponse</returns>
        System.Threading.Tasks.Task<DocumentPropertiesResponse> GetDocumentPropertiesAsync (string name, string storage = null, string folder = null);

        /// <summary>
        /// Read document properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (DocumentPropertiesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentPropertiesResponse>> GetDocumentPropertiesAsyncWithHttpInfo (string name, string storage = null, string folder = null);
        /// <summary>
        /// Read document property by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="propertyName"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of DocumentPropertyResponse</returns>
        System.Threading.Tasks.Task<DocumentPropertyResponse> GetDocumentPropertyAsync (string name, string propertyName, string storage = null, string folder = null);

        /// <summary>
        /// Read document property by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="propertyName"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (DocumentPropertyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentPropertyResponse>> GetDocumentPropertyAsyncWithHttpInfo (string name, string propertyName, string storage = null, string folder = null);
        /// <summary>
        /// Download a specific file 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path of the file including the file name and extension e.g. /file.ext</param>
        /// <param name="versionId">File&#39;s version (optional)</param>
        /// <param name="storage">User&#39;s storage name (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetDownloadAsync (string path, string versionId = null, string storage = null);

        /// <summary>
        /// Download a specific file 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path of the file including the file name and extension e.g. /file.ext</param>
        /// <param name="versionId">File&#39;s version (optional)</param>
        /// <param name="storage">User&#39;s storage name (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetDownloadAsyncWithHttpInfo (string path, string versionId = null, string storage = null);
        /// <summary>
        /// Download document attachment content by its index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="attachmentIndex">The attachment index.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetDownloadDocumentAttachmentByIndexAsync (string name, int? attachmentIndex, string storage = null, string folder = null);

        /// <summary>
        /// Download document attachment content by its index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="attachmentIndex">The attachment index.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetDownloadDocumentAttachmentByIndexAsyncWithHttpInfo (string name, int? attachmentIndex, string storage = null, string folder = null);
        /// <summary>
        /// Convert EPUB file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.epub)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetEpubInStorageToPdfAsync (string srcPath);

        /// <summary>
        /// Convert EPUB file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.epub)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetEpubInStorageToPdfAsyncWithHttpInfo (string srcPath);
        /// <summary>
        /// Get document field by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fieldName">The field name/</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of FieldResponse</returns>
        System.Threading.Tasks.Task<FieldResponse> GetFieldAsync (string name, string fieldName, string storage = null, string folder = null);

        /// <summary>
        /// Get document field by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fieldName">The field name/</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (FieldResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FieldResponse>> GetFieldAsyncWithHttpInfo (string name, string fieldName, string storage = null, string folder = null);
        /// <summary>
        /// Get document fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of FieldsResponse</returns>
        System.Threading.Tasks.Task<FieldsResponse> GetFieldsAsync (string name, string storage = null, string folder = null);

        /// <summary>
        /// Get document fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (FieldsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FieldsResponse>> GetFieldsAsyncWithHttpInfo (string name, string storage = null, string folder = null);
        /// <summary>
        /// Read page fragment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="fragmentNumber"></param>
        /// <param name="withEmpty"> (optional)</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of TextItemsResponse</returns>
        System.Threading.Tasks.Task<TextItemsResponse> GetFragmentAsync (string name, int? pageNumber, int? fragmentNumber, string withEmpty = null, string storage = null, string folder = null);

        /// <summary>
        /// Read page fragment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="fragmentNumber"></param>
        /// <param name="withEmpty"> (optional)</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (TextItemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TextItemsResponse>> GetFragmentAsyncWithHttpInfo (string name, int? pageNumber, int? fragmentNumber, string withEmpty = null, string storage = null, string folder = null);
        /// <summary>
        /// Read page fragment text format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="fragmentNumber"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of TextFormatResponse</returns>
        System.Threading.Tasks.Task<TextFormatResponse> GetFragmentTextFormatAsync (string name, int? pageNumber, int? fragmentNumber, string storage = null, string folder = null);

        /// <summary>
        /// Read page fragment text format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="fragmentNumber"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (TextFormatResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TextFormatResponse>> GetFragmentTextFormatAsyncWithHttpInfo (string name, int? pageNumber, int? fragmentNumber, string storage = null, string folder = null);
        /// <summary>
        /// Read page fragments.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="withEmpty"> (optional)</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of TextItemsResponse</returns>
        System.Threading.Tasks.Task<TextItemsResponse> GetFragmentsAsync (string name, int? pageNumber, string withEmpty = null, string storage = null, string folder = null);

        /// <summary>
        /// Read page fragments.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="withEmpty"> (optional)</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (TextItemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TextItemsResponse>> GetFragmentsAsyncWithHttpInfo (string name, int? pageNumber, string withEmpty = null, string storage = null, string folder = null);
        /// <summary>
        /// Convert HTML file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.zip)</param>
        /// <param name="htmlFileName">Name of HTML file in ZIP.</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetHtmlInStorageToPdfAsync (string srcPath, string htmlFileName, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null);

        /// <summary>
        /// Convert HTML file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.zip)</param>
        /// <param name="htmlFileName">Name of HTML file in ZIP.</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetHtmlInStorageToPdfAsyncWithHttpInfo (string srcPath, string htmlFileName, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null);
        /// <summary>
        /// Extract document image in format specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="imageNumber">The image format.</param>
        /// <param name="format">Image format to convert, if not specified the common image data is read. (optional)</param>
        /// <param name="width">The converted image width. (optional, default to 0)</param>
        /// <param name="height">The converted image height. (optional, default to 0)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetImageAsync (string name, int? pageNumber, int? imageNumber, string format = null, int? width = null, int? height = null, string storage = null, string folder = null);

        /// <summary>
        /// Extract document image in format specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="imageNumber">The image format.</param>
        /// <param name="format">Image format to convert, if not specified the common image data is read. (optional)</param>
        /// <param name="width">The converted image width. (optional, default to 0)</param>
        /// <param name="height">The converted image height. (optional, default to 0)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetImageAsyncWithHttpInfo (string name, int? pageNumber, int? imageNumber, string format = null, int? width = null, int? height = null, string storage = null, string folder = null);
        /// <summary>
        /// Read document images.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ImagesResponse</returns>
        System.Threading.Tasks.Task<ImagesResponse> GetImagesAsync (string name, int? pageNumber, string storage = null, string folder = null);

        /// <summary>
        /// Read document images.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (ImagesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImagesResponse>> GetImagesAsyncWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null);
        /// <summary>
        /// Convert LaTeX file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.tex)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetLaTeXInStorageToPdfAsync (string srcPath);

        /// <summary>
        /// Convert LaTeX file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.tex)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetLaTeXInStorageToPdfAsyncWithHttpInfo (string srcPath);
        /// <summary>
        /// Convert MHT file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.mht)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetMhtInStorageToPdfAsync (string srcPath);

        /// <summary>
        /// Convert MHT file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.mht)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetMhtInStorageToPdfAsyncWithHttpInfo (string srcPath);
        /// <summary>
        /// Convert document page to format specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="format">The format to convert if specified. (optional)</param>
        /// <param name="width">The converted image width. (optional, default to 0)</param>
        /// <param name="height">The converted image height. (optional, default to 0)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetPageAsync (string name, int? pageNumber, string format = null, int? width = null, int? height = null, string storage = null, string folder = null);

        /// <summary>
        /// Convert document page to format specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="format">The format to convert if specified. (optional)</param>
        /// <param name="width">The converted image width. (optional, default to 0)</param>
        /// <param name="height">The converted image height. (optional, default to 0)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPageAsyncWithHttpInfo (string name, int? pageNumber, string format = null, int? width = null, int? height = null, string storage = null, string folder = null);
        /// <summary>
        /// Read document page annotation by its number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotationNumber">The annotation number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AnnotationResponse</returns>
        System.Threading.Tasks.Task<AnnotationResponse> GetPageAnnotationAsync (string name, int? pageNumber, int? annotationNumber, string storage = null, string folder = null);

        /// <summary>
        /// Read document page annotation by its number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotationNumber">The annotation number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AnnotationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnnotationResponse>> GetPageAnnotationAsyncWithHttpInfo (string name, int? pageNumber, int? annotationNumber, string storage = null, string folder = null);
        /// <summary>
        /// Read documant page annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AnnotationsResponse</returns>
        System.Threading.Tasks.Task<AnnotationsResponse> GetPageAnnotationsAsync (string name, int? pageNumber, string storage = null, string folder = null);

        /// <summary>
        /// Read documant page annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AnnotationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnnotationsResponse>> GetPageAnnotationsAsyncWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null);
        /// <summary>
        /// Convert document page to Bmp image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetPageConvertToBmpAsync (string name, int? pageNumber, int? width = null, int? height = null, string folder = null);

        /// <summary>
        /// Convert document page to Bmp image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPageConvertToBmpAsyncWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null);
        /// <summary>
        /// Convert document page to Emf image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetPageConvertToEmfAsync (string name, int? pageNumber, int? width = null, int? height = null, string folder = null);

        /// <summary>
        /// Convert document page to Emf image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPageConvertToEmfAsyncWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null);
        /// <summary>
        /// Convert document page to Gif image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetPageConvertToGifAsync (string name, int? pageNumber, int? width = null, int? height = null, string folder = null);

        /// <summary>
        /// Convert document page to Gif image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPageConvertToGifAsyncWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null);
        /// <summary>
        /// Convert document page to Jpeg image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetPageConvertToJpegAsync (string name, int? pageNumber, int? width = null, int? height = null, string folder = null);

        /// <summary>
        /// Convert document page to Jpeg image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPageConvertToJpegAsyncWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null);
        /// <summary>
        /// Convert document page to Png image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetPageConvertToPngAsync (string name, int? pageNumber, int? width = null, int? height = null, string folder = null);

        /// <summary>
        /// Convert document page to Png image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPageConvertToPngAsyncWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null);
        /// <summary>
        /// Convert document page to Tiff image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetPageConvertToTiffAsync (string name, int? pageNumber, int? width = null, int? height = null, string folder = null);

        /// <summary>
        /// Convert document page to Tiff image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPageConvertToTiffAsyncWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null);
        /// <summary>
        /// Read document page link annotation by its index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="linkIndex">The link index.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of LinkAnnotationResponse</returns>
        System.Threading.Tasks.Task<LinkAnnotationResponse> GetPageLinkAnnotationByIndexAsync (string name, int? pageNumber, int? linkIndex, string storage = null, string folder = null);

        /// <summary>
        /// Read document page link annotation by its index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="linkIndex">The link index.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (LinkAnnotationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LinkAnnotationResponse>> GetPageLinkAnnotationByIndexAsyncWithHttpInfo (string name, int? pageNumber, int? linkIndex, string storage = null, string folder = null);
        /// <summary>
        /// Read document page link annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of LinkAnnotationsResponse</returns>
        System.Threading.Tasks.Task<LinkAnnotationsResponse> GetPageLinkAnnotationsAsync (string name, int? pageNumber, string storage = null, string folder = null);

        /// <summary>
        /// Read document page link annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (LinkAnnotationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LinkAnnotationsResponse>> GetPageLinkAnnotationsAsyncWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null);
        /// <summary>
        /// Read page text items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">Number of page (starting from 1).</param>
        /// <param name="X"></param>
        /// <param name="Y"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="format">List of formats for search. (optional)</param>
        /// <param name="regex">Formats are specified as a regular expression. (optional)</param>
        /// <param name="splitRects">Split result fragments (default is true). (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of TextRectsResponse</returns>
        System.Threading.Tasks.Task<TextRectsResponse> GetPageTextAsync (string name, int? pageNumber, int? X, int? Y, int? width, int? height, List<string> format = null, string regex = null, bool? splitRects = null, string folder = null);

        /// <summary>
        /// Read page text items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">Number of page (starting from 1).</param>
        /// <param name="X"></param>
        /// <param name="Y"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="format">List of formats for search. (optional)</param>
        /// <param name="regex">Formats are specified as a regular expression. (optional)</param>
        /// <param name="splitRects">Split result fragments (default is true). (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (TextRectsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TextRectsResponse>> GetPageTextAsyncWithHttpInfo (string name, int? pageNumber, int? X, int? Y, int? width, int? height, List<string> format = null, string regex = null, bool? splitRects = null, string folder = null);
        /// <summary>
        /// Read page text items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="withEmpty"> (optional)</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of TextItemsResponse</returns>
        System.Threading.Tasks.Task<TextItemsResponse> GetPageTextItemsAsync (string name, int? pageNumber, string withEmpty = null, string storage = null, string folder = null);

        /// <summary>
        /// Read page text items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="withEmpty"> (optional)</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (TextItemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TextItemsResponse>> GetPageTextItemsAsyncWithHttpInfo (string name, int? pageNumber, string withEmpty = null, string storage = null, string folder = null);
        /// <summary>
        /// Read document pages info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of DocumentPagesResponse</returns>
        System.Threading.Tasks.Task<DocumentPagesResponse> GetPagesAsync (string name, string storage = null, string folder = null);

        /// <summary>
        /// Read document pages info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (DocumentPagesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentPagesResponse>> GetPagesAsyncWithHttpInfo (string name, string storage = null, string folder = null);
        /// <summary>
        /// Convert PCL file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.pcl)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetPclInStorageToPdfAsync (string srcPath);

        /// <summary>
        /// Convert PCL file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.pcl)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPclInStorageToPdfAsyncWithHttpInfo (string srcPath);
        /// <summary>
        /// Converts PDF document (located on storage) to DOC format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="addReturnToLineEnd">Add return to line end. (optional)</param>
        /// <param name="format">Allows to specify .doc or .docx file format. (optional)</param>
        /// <param name="imageResolutionX">Image resolution X. (optional)</param>
        /// <param name="imageResolutionY">Image resolution Y. (optional)</param>
        /// <param name="maxDistanceBetweenTextLines">Max distance between text lines. (optional)</param>
        /// <param name="mode">Allows to control how a PDF document is converted into a word processing document. (optional)</param>
        /// <param name="recognizeBullets">Recognize bullets. (optional)</param>
        /// <param name="relativeHorizontalProximity">Relative horizontal proximity. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetPdfInStorageToDocAsync (string name, bool? addReturnToLineEnd = null, string format = null, int? imageResolutionX = null, int? imageResolutionY = null, int? maxDistanceBetweenTextLines = null, string mode = null, bool? recognizeBullets = null, double? relativeHorizontalProximity = null, string folder = null);

        /// <summary>
        /// Converts PDF document (located on storage) to DOC format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="addReturnToLineEnd">Add return to line end. (optional)</param>
        /// <param name="format">Allows to specify .doc or .docx file format. (optional)</param>
        /// <param name="imageResolutionX">Image resolution X. (optional)</param>
        /// <param name="imageResolutionY">Image resolution Y. (optional)</param>
        /// <param name="maxDistanceBetweenTextLines">Max distance between text lines. (optional)</param>
        /// <param name="mode">Allows to control how a PDF document is converted into a word processing document. (optional)</param>
        /// <param name="recognizeBullets">Recognize bullets. (optional)</param>
        /// <param name="relativeHorizontalProximity">Relative horizontal proximity. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPdfInStorageToDocAsyncWithHttpInfo (string name, bool? addReturnToLineEnd = null, string format = null, int? imageResolutionX = null, int? imageResolutionY = null, int? maxDistanceBetweenTextLines = null, string mode = null, bool? recognizeBullets = null, double? relativeHorizontalProximity = null, string folder = null);
        /// <summary>
        /// Converts PDF document (located on storage) to EPUB format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="contentRecognitionMode">Рroperty tunes conversion for this or that desirable method of recognition of content. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetPdfInStorageToEpubAsync (string name, string contentRecognitionMode = null, string folder = null);

        /// <summary>
        /// Converts PDF document (located on storage) to EPUB format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="contentRecognitionMode">Рroperty tunes conversion for this or that desirable method of recognition of content. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPdfInStorageToEpubAsyncWithHttpInfo (string name, string contentRecognitionMode = null, string folder = null);
        /// <summary>
        /// Converts PDF document (located on storage) to Html format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="additionalMarginWidthInPoints">Defines width of margin that will be forcibly left around that output HTML-areas. (optional)</param>
        /// <param name="compressSvgGraphicsIfAny">The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)</param>
        /// <param name="convertMarkedContentToLayers">If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)</param>
        /// <param name="defaultFontName">Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)</param>
        /// <param name="documentType">Result document type. (optional)</param>
        /// <param name="fixedLayout">The value indicating whether that HTML is created as fixed layout. (optional)</param>
        /// <param name="imageResolution">Resolution for image rendering. (optional)</param>
        /// <param name="minimalLineWidth">This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)</param>
        /// <param name="preventGlyphsGrouping">This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)</param>
        /// <param name="splitCssIntoPages">When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)</param>
        /// <param name="splitIntoPages">The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)</param>
        /// <param name="useZOrder">If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)</param>
        /// <param name="antialiasingProcessing">The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)</param>
        /// <param name="cssClassNamesPrefix">When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)</param>
        /// <param name="explicitListOfSavedPages">With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)</param>
        /// <param name="fontEncodingStrategy">Defines encoding special rule to tune PDF decoding for current document. (optional)</param>
        /// <param name="fontSavingMode">Defines font saving mode that will be used during saving of PDF to desirable format. (optional)</param>
        /// <param name="htmlMarkupGenerationMode">Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)</param>
        /// <param name="lettersPositioningMethod">The mode of positioning of letters in words in result HTML. (optional)</param>
        /// <param name="pagesFlowTypeDependsOnViewersScreenSize">If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)</param>
        /// <param name="partsEmbeddingMode">It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)</param>
        /// <param name="rasterImagesSavingMode">Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)</param>
        /// <param name="removeEmptyAreasOnTopAndBottom">Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)</param>
        /// <param name="saveShadowedTextsAsTransparentTexts">Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)</param>
        /// <param name="saveTransparentTexts">Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)</param>
        /// <param name="specialFolderForAllImages">The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="specialFolderForSvgImages">The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="trySaveTextUnderliningAndStrikeoutingInCss">PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetPdfInStorageToHtmlAsync (string name, int? additionalMarginWidthInPoints = null, bool? compressSvgGraphicsIfAny = null, bool? convertMarkedContentToLayers = null, string defaultFontName = null, string documentType = null, bool? fixedLayout = null, int? imageResolution = null, int? minimalLineWidth = null, bool? preventGlyphsGrouping = null, bool? splitCssIntoPages = null, bool? splitIntoPages = null, bool? useZOrder = null, string antialiasingProcessing = null, string cssClassNamesPrefix = null, List<int?> explicitListOfSavedPages = null, string fontEncodingStrategy = null, string fontSavingMode = null, string htmlMarkupGenerationMode = null, string lettersPositioningMethod = null, bool? pagesFlowTypeDependsOnViewersScreenSize = null, string partsEmbeddingMode = null, string rasterImagesSavingMode = null, bool? removeEmptyAreasOnTopAndBottom = null, bool? saveShadowedTextsAsTransparentTexts = null, bool? saveTransparentTexts = null, string specialFolderForAllImages = null, string specialFolderForSvgImages = null, bool? trySaveTextUnderliningAndStrikeoutingInCss = null, string folder = null);

        /// <summary>
        /// Converts PDF document (located on storage) to Html format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="additionalMarginWidthInPoints">Defines width of margin that will be forcibly left around that output HTML-areas. (optional)</param>
        /// <param name="compressSvgGraphicsIfAny">The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)</param>
        /// <param name="convertMarkedContentToLayers">If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)</param>
        /// <param name="defaultFontName">Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)</param>
        /// <param name="documentType">Result document type. (optional)</param>
        /// <param name="fixedLayout">The value indicating whether that HTML is created as fixed layout. (optional)</param>
        /// <param name="imageResolution">Resolution for image rendering. (optional)</param>
        /// <param name="minimalLineWidth">This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)</param>
        /// <param name="preventGlyphsGrouping">This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)</param>
        /// <param name="splitCssIntoPages">When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)</param>
        /// <param name="splitIntoPages">The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)</param>
        /// <param name="useZOrder">If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)</param>
        /// <param name="antialiasingProcessing">The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)</param>
        /// <param name="cssClassNamesPrefix">When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)</param>
        /// <param name="explicitListOfSavedPages">With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)</param>
        /// <param name="fontEncodingStrategy">Defines encoding special rule to tune PDF decoding for current document. (optional)</param>
        /// <param name="fontSavingMode">Defines font saving mode that will be used during saving of PDF to desirable format. (optional)</param>
        /// <param name="htmlMarkupGenerationMode">Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)</param>
        /// <param name="lettersPositioningMethod">The mode of positioning of letters in words in result HTML. (optional)</param>
        /// <param name="pagesFlowTypeDependsOnViewersScreenSize">If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)</param>
        /// <param name="partsEmbeddingMode">It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)</param>
        /// <param name="rasterImagesSavingMode">Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)</param>
        /// <param name="removeEmptyAreasOnTopAndBottom">Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)</param>
        /// <param name="saveShadowedTextsAsTransparentTexts">Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)</param>
        /// <param name="saveTransparentTexts">Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)</param>
        /// <param name="specialFolderForAllImages">The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="specialFolderForSvgImages">The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="trySaveTextUnderliningAndStrikeoutingInCss">PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPdfInStorageToHtmlAsyncWithHttpInfo (string name, int? additionalMarginWidthInPoints = null, bool? compressSvgGraphicsIfAny = null, bool? convertMarkedContentToLayers = null, string defaultFontName = null, string documentType = null, bool? fixedLayout = null, int? imageResolution = null, int? minimalLineWidth = null, bool? preventGlyphsGrouping = null, bool? splitCssIntoPages = null, bool? splitIntoPages = null, bool? useZOrder = null, string antialiasingProcessing = null, string cssClassNamesPrefix = null, List<int?> explicitListOfSavedPages = null, string fontEncodingStrategy = null, string fontSavingMode = null, string htmlMarkupGenerationMode = null, string lettersPositioningMethod = null, bool? pagesFlowTypeDependsOnViewersScreenSize = null, string partsEmbeddingMode = null, string rasterImagesSavingMode = null, bool? removeEmptyAreasOnTopAndBottom = null, bool? saveShadowedTextsAsTransparentTexts = null, bool? saveTransparentTexts = null, string specialFolderForAllImages = null, string specialFolderForSvgImages = null, bool? trySaveTextUnderliningAndStrikeoutingInCss = null, string folder = null);
        /// <summary>
        /// Converts PDF document (located on storage) to LaTeX format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pagesCount">Pages count. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetPdfInStorageToLaTeXAsync (string name, int? pagesCount = null, string folder = null);

        /// <summary>
        /// Converts PDF document (located on storage) to LaTeX format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pagesCount">Pages count. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPdfInStorageToLaTeXAsyncWithHttpInfo (string name, int? pagesCount = null, string folder = null);
        /// <summary>
        /// Converts PDF document (located on storage) to MOBIXML format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetPdfInStorageToMobiXmlAsync (string name, string folder = null);

        /// <summary>
        /// Converts PDF document (located on storage) to MOBIXML format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPdfInStorageToMobiXmlAsyncWithHttpInfo (string name, string folder = null);
        /// <summary>
        /// Converts PDF document (located on storage) to PdfA format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="type">Type of PdfA format.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetPdfInStorageToPdfAAsync (string name, string type, string folder = null);

        /// <summary>
        /// Converts PDF document (located on storage) to PdfA format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="type">Type of PdfA format.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPdfInStorageToPdfAAsyncWithHttpInfo (string name, string type, string folder = null);
        /// <summary>
        /// Converts PDF document (located on storage) to PPTX format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="separateImages">Separate images. (optional)</param>
        /// <param name="slidesAsImages">Slides as images. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetPdfInStorageToPptxAsync (string name, bool? separateImages = null, bool? slidesAsImages = null, string folder = null);

        /// <summary>
        /// Converts PDF document (located on storage) to PPTX format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="separateImages">Separate images. (optional)</param>
        /// <param name="slidesAsImages">Slides as images. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPdfInStorageToPptxAsyncWithHttpInfo (string name, bool? separateImages = null, bool? slidesAsImages = null, string folder = null);
        /// <summary>
        /// Converts PDF document (located on storage) to SVG format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="compressOutputToZipArchive">Specifies whether output will be created as one zip-archive. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetPdfInStorageToSvgAsync (string name, bool? compressOutputToZipArchive = null, string folder = null);

        /// <summary>
        /// Converts PDF document (located on storage) to SVG format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="compressOutputToZipArchive">Specifies whether output will be created as one zip-archive. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPdfInStorageToSvgAsyncWithHttpInfo (string name, bool? compressOutputToZipArchive = null, string folder = null);
        /// <summary>
        /// Converts PDF document (located on storage) to TIFF format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="brightness">Image brightness. (optional)</param>
        /// <param name="compression">Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)</param>
        /// <param name="colorDepth">Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)</param>
        /// <param name="leftMargin">Left image margin. (optional)</param>
        /// <param name="rightMargin">Right image margin. (optional)</param>
        /// <param name="topMargin">Top image margin. (optional)</param>
        /// <param name="bottomMargin">Bottom image margin. (optional)</param>
        /// <param name="orientation">Image orientation. Possible values are: None, Landscape, Portait. (optional)</param>
        /// <param name="skipBlankPages">Skip blank pages flag. (optional)</param>
        /// <param name="width">Image width. (optional)</param>
        /// <param name="height">Image height. (optional)</param>
        /// <param name="xResolution">Horizontal resolution. (optional)</param>
        /// <param name="yResolution">Vertical resolution. (optional)</param>
        /// <param name="pageIndex">Start page to export. (optional)</param>
        /// <param name="pageCount">Number of pages to export. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetPdfInStorageToTiffAsync (string name, double? brightness = null, string compression = null, string colorDepth = null, int? leftMargin = null, int? rightMargin = null, int? topMargin = null, int? bottomMargin = null, string orientation = null, bool? skipBlankPages = null, int? width = null, int? height = null, int? xResolution = null, int? yResolution = null, int? pageIndex = null, int? pageCount = null, string folder = null);

        /// <summary>
        /// Converts PDF document (located on storage) to TIFF format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="brightness">Image brightness. (optional)</param>
        /// <param name="compression">Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)</param>
        /// <param name="colorDepth">Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)</param>
        /// <param name="leftMargin">Left image margin. (optional)</param>
        /// <param name="rightMargin">Right image margin. (optional)</param>
        /// <param name="topMargin">Top image margin. (optional)</param>
        /// <param name="bottomMargin">Bottom image margin. (optional)</param>
        /// <param name="orientation">Image orientation. Possible values are: None, Landscape, Portait. (optional)</param>
        /// <param name="skipBlankPages">Skip blank pages flag. (optional)</param>
        /// <param name="width">Image width. (optional)</param>
        /// <param name="height">Image height. (optional)</param>
        /// <param name="xResolution">Horizontal resolution. (optional)</param>
        /// <param name="yResolution">Vertical resolution. (optional)</param>
        /// <param name="pageIndex">Start page to export. (optional)</param>
        /// <param name="pageCount">Number of pages to export. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPdfInStorageToTiffAsyncWithHttpInfo (string name, double? brightness = null, string compression = null, string colorDepth = null, int? leftMargin = null, int? rightMargin = null, int? topMargin = null, int? bottomMargin = null, string orientation = null, bool? skipBlankPages = null, int? width = null, int? height = null, int? xResolution = null, int? yResolution = null, int? pageIndex = null, int? pageCount = null, string folder = null);
        /// <summary>
        /// Converts PDF document (located on storage) to XLS format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="insertBlankColumnAtFirst">Insert blank column at first (optional)</param>
        /// <param name="minimizeTheNumberOfWorksheets">Minimize the number of worksheets (optional)</param>
        /// <param name="scaleFactor">Scale factor (optional)</param>
        /// <param name="uniformWorksheets">Uniform worksheets (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetPdfInStorageToXlsAsync (string name, bool? insertBlankColumnAtFirst = null, bool? minimizeTheNumberOfWorksheets = null, double? scaleFactor = null, bool? uniformWorksheets = null, string folder = null);

        /// <summary>
        /// Converts PDF document (located on storage) to XLS format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="insertBlankColumnAtFirst">Insert blank column at first (optional)</param>
        /// <param name="minimizeTheNumberOfWorksheets">Minimize the number of worksheets (optional)</param>
        /// <param name="scaleFactor">Scale factor (optional)</param>
        /// <param name="uniformWorksheets">Uniform worksheets (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPdfInStorageToXlsAsyncWithHttpInfo (string name, bool? insertBlankColumnAtFirst = null, bool? minimizeTheNumberOfWorksheets = null, double? scaleFactor = null, bool? uniformWorksheets = null, string folder = null);
        /// <summary>
        /// Converts PDF document (located on storage) to XML format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetPdfInStorageToXmlAsync (string name, string folder = null);

        /// <summary>
        /// Converts PDF document (located on storage) to XML format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPdfInStorageToXmlAsyncWithHttpInfo (string name, string folder = null);
        /// <summary>
        /// Converts PDF document (located on storage) to XPS format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetPdfInStorageToXpsAsync (string name, string folder = null);

        /// <summary>
        /// Converts PDF document (located on storage) to XPS format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPdfInStorageToXpsAsyncWithHttpInfo (string name, string folder = null);
        /// <summary>
        /// Convert PS file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.ps)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetPsInStorageToPdfAsync (string srcPath);

        /// <summary>
        /// Convert PS file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.ps)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPsInStorageToPdfAsyncWithHttpInfo (string srcPath);
        /// <summary>
        /// Read segment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="fragmentNumber"></param>
        /// <param name="segmentNumber"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of TextItemResponse</returns>
        System.Threading.Tasks.Task<TextItemResponse> GetSegmentAsync (string name, int? pageNumber, int? fragmentNumber, int? segmentNumber, string storage = null, string folder = null);

        /// <summary>
        /// Read segment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="fragmentNumber"></param>
        /// <param name="segmentNumber"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (TextItemResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TextItemResponse>> GetSegmentAsyncWithHttpInfo (string name, int? pageNumber, int? fragmentNumber, int? segmentNumber, string storage = null, string folder = null);
        /// <summary>
        /// Read segment text format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="fragmentNumber"></param>
        /// <param name="segmentNumber"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of TextFormatResponse</returns>
        System.Threading.Tasks.Task<TextFormatResponse> GetSegmentTextFormatAsync (string name, int? pageNumber, int? fragmentNumber, int? segmentNumber, string storage = null, string folder = null);

        /// <summary>
        /// Read segment text format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="fragmentNumber"></param>
        /// <param name="segmentNumber"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (TextFormatResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TextFormatResponse>> GetSegmentTextFormatAsyncWithHttpInfo (string name, int? pageNumber, int? fragmentNumber, int? segmentNumber, string storage = null, string folder = null);
        /// <summary>
        /// Read fragment segments.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="fragmentNumber"></param>
        /// <param name="withEmpty"> (optional)</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of TextItemsResponse</returns>
        System.Threading.Tasks.Task<TextItemsResponse> GetSegmentsAsync (string name, int? pageNumber, int? fragmentNumber, string withEmpty = null, string storage = null, string folder = null);

        /// <summary>
        /// Read fragment segments.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="fragmentNumber"></param>
        /// <param name="withEmpty"> (optional)</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (TextItemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TextItemsResponse>> GetSegmentsAsyncWithHttpInfo (string name, int? pageNumber, int? fragmentNumber, string withEmpty = null, string storage = null, string folder = null);
        /// <summary>
        /// Convert SVG file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.svg)</param>
        /// <param name="adjustPageSize">Adjust page size (optional)</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetSvgInStorageToPdfAsync (string srcPath, bool? adjustPageSize = null, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null);

        /// <summary>
        /// Convert SVG file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.svg)</param>
        /// <param name="adjustPageSize">Adjust page size (optional)</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetSvgInStorageToPdfAsyncWithHttpInfo (string srcPath, bool? adjustPageSize = null, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null);
        /// <summary>
        /// Read document text.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="X"></param>
        /// <param name="Y"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="format">List of formats for search. (optional)</param>
        /// <param name="regex">Formats are specified as a regular expression. (optional)</param>
        /// <param name="splitRects">Split result fragments (default is true). (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of TextRectsResponse</returns>
        System.Threading.Tasks.Task<TextRectsResponse> GetTextAsync (string name, int? X, int? Y, int? width, int? height, List<string> format = null, string regex = null, bool? splitRects = null, string folder = null);

        /// <summary>
        /// Read document text.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="X"></param>
        /// <param name="Y"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="format">List of formats for search. (optional)</param>
        /// <param name="regex">Formats are specified as a regular expression. (optional)</param>
        /// <param name="splitRects">Split result fragments (default is true). (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (TextRectsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TextRectsResponse>> GetTextAsyncWithHttpInfo (string name, int? X, int? Y, int? width, int? height, List<string> format = null, string regex = null, bool? splitRects = null, string folder = null);
        /// <summary>
        /// Read document text items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="withEmpty"> (optional)</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of TextItemsResponse</returns>
        System.Threading.Tasks.Task<TextItemsResponse> GetTextItemsAsync (string name, string withEmpty = null, string storage = null, string folder = null);

        /// <summary>
        /// Read document text items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="withEmpty"> (optional)</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (TextItemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TextItemsResponse>> GetTextItemsAsyncWithHttpInfo (string name, string withEmpty = null, string storage = null, string folder = null);
        /// <summary>
        /// Verify signature document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="signName">Sign name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SignatureVerifyResponse</returns>
        System.Threading.Tasks.Task<SignatureVerifyResponse> GetVerifySignatureAsync (string name, string signName, string folder = null);

        /// <summary>
        /// Verify signature document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="signName">Sign name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SignatureVerifyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SignatureVerifyResponse>> GetVerifySignatureAsyncWithHttpInfo (string name, string signName, string folder = null);
        /// <summary>
        /// Convert web page to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">Source url</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetWebInStorageToPdfAsync (string url, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null);

        /// <summary>
        /// Convert web page to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">Source url</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetWebInStorageToPdfAsyncWithHttpInfo (string url, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null);
        /// <summary>
        /// Get number of words per document page.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of WordCountResponse</returns>
        System.Threading.Tasks.Task<WordCountResponse> GetWordsPerPageAsync (string name, string storage = null, string folder = null);

        /// <summary>
        /// Get number of words per document page.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (WordCountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WordCountResponse>> GetWordsPerPageAsyncWithHttpInfo (string name, string storage = null, string folder = null);
        /// <summary>
        /// Converts PDF document which contatins XFA form (located on storage) to PDF with AcroForm and returns resulting file response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetXfaPdfInStorageToAcroFormAsync (string name, string folder = null);

        /// <summary>
        /// Converts PDF document which contatins XFA form (located on storage) to PDF with AcroForm and returns resulting file response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetXfaPdfInStorageToAcroFormAsyncWithHttpInfo (string name, string folder = null);
        /// <summary>
        /// Convert XML file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xml)</param>
        /// <param name="xslFilePath">Full XSL source filename (ex. /folder1/folder2/template.xsl) (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetXmlInStorageToPdfAsync (string srcPath, string xslFilePath = null);

        /// <summary>
        /// Convert XML file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xml)</param>
        /// <param name="xslFilePath">Full XSL source filename (ex. /folder1/folder2/template.xsl) (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetXmlInStorageToPdfAsyncWithHttpInfo (string srcPath, string xslFilePath = null);
        /// <summary>
        /// Convert XPS file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xps)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetXpsInStorageToPdfAsync (string srcPath);

        /// <summary>
        /// Convert XPS file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xps)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetXpsInStorageToPdfAsyncWithHttpInfo (string srcPath);
        /// <summary>
        /// Convert XslFo file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xslfo)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetXslFoInStorageToPdfAsync (string srcPath);

        /// <summary>
        /// Convert XslFo file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xslfo)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetXslFoInStorageToPdfAsyncWithHttpInfo (string srcPath);
        /// <summary>
        /// Append document to existing one.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The original document name.</param>
        /// <param name="appendDocument">with the append document data. (optional)</param>
        /// <param name="appendFile">Append file server path. (optional)</param>
        /// <param name="startPage">Appending start page. (optional, default to 0)</param>
        /// <param name="endPage">Appending end page. (optional, default to 0)</param>
        /// <param name="storage">The documents storage. (optional)</param>
        /// <param name="folder">The original document folder. (optional)</param>
        /// <returns>Task of DocumentResponse</returns>
        System.Threading.Tasks.Task<DocumentResponse> PostAppendDocumentAsync (string name, AppendDocument appendDocument = null, string appendFile = null, int? startPage = null, int? endPage = null, string storage = null, string folder = null);

        /// <summary>
        /// Append document to existing one.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The original document name.</param>
        /// <param name="appendDocument">with the append document data. (optional)</param>
        /// <param name="appendFile">Append file server path. (optional)</param>
        /// <param name="startPage">Appending start page. (optional, default to 0)</param>
        /// <param name="endPage">Appending end page. (optional, default to 0)</param>
        /// <param name="storage">The documents storage. (optional)</param>
        /// <param name="folder">The original document folder. (optional)</param>
        /// <returns>Task of ApiResponse (DocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentResponse>> PostAppendDocumentAsyncWithHttpInfo (string name, AppendDocument appendDocument = null, string appendFile = null, int? startPage = null, int? endPage = null, string storage = null, string folder = null);
        /// <summary>
        /// Create field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="page">Document page number.</param>
        /// <param name="field">with the field data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PostCreateFieldAsync (string name, int? page, Field field = null, string storage = null, string folder = null);

        /// <summary>
        /// Create field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="page">Document page number.</param>
        /// <param name="field">with the field data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PostCreateFieldAsyncWithHttpInfo (string name, int? page, Field field = null, string storage = null, string folder = null);
        /// <summary>
        /// Document&#39;s replace text method. Deprecated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="textReplace"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of DocumentTextReplaceResponse</returns>
        System.Threading.Tasks.Task<DocumentTextReplaceResponse> PostDocumentReplaceTextAsync (string name, TextReplaceRequest textReplace, string storage = null, string folder = null);

        /// <summary>
        /// Document&#39;s replace text method. Deprecated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="textReplace"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (DocumentTextReplaceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentTextReplaceResponse>> PostDocumentReplaceTextAsyncWithHttpInfo (string name, TextReplaceRequest textReplace, string storage = null, string folder = null);
        /// <summary>
        /// Document&#39;s replace text method. Deprecated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="textReplaceListRequest"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of DocumentTextReplaceResponse</returns>
        System.Threading.Tasks.Task<DocumentTextReplaceResponse> PostDocumentReplaceTextListAsync (string name, TextReplaceListRequest textReplaceListRequest, string storage = null, string folder = null);

        /// <summary>
        /// Document&#39;s replace text method. Deprecated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="textReplaceListRequest"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (DocumentTextReplaceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentTextReplaceResponse>> PostDocumentReplaceTextListAsyncWithHttpInfo (string name, TextReplaceListRequest textReplaceListRequest, string storage = null, string folder = null);
        /// <summary>
        /// Document&#39;s replace text method.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="textReplace"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of TextReplaceResponse</returns>
        System.Threading.Tasks.Task<TextReplaceResponse> PostDocumentTextReplaceAsync (string name, TextReplaceListRequest textReplace, string storage = null, string folder = null);

        /// <summary>
        /// Document&#39;s replace text method.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="textReplace"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (TextReplaceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TextReplaceResponse>> PostDocumentTextReplaceAsyncWithHttpInfo (string name, TextReplaceListRequest textReplace, string storage = null, string folder = null);
        /// <summary>
        /// Move page to new position.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="newIndex">The new page position/index.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PostMovePageAsync (string name, int? pageNumber, int? newIndex, string storage = null, string folder = null);

        /// <summary>
        /// Move page to new position.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="newIndex">The new page position/index.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PostMovePageAsyncWithHttpInfo (string name, int? pageNumber, int? newIndex, string storage = null, string folder = null);
        /// <summary>
        /// Optimize document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="options">The optimization options. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PostOptimizeDocumentAsync (string name, OptimizeOptions options = null, string storage = null, string folder = null);

        /// <summary>
        /// Optimize document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="options">The optimization options. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PostOptimizeDocumentAsyncWithHttpInfo (string name, OptimizeOptions options = null, string storage = null, string folder = null);
        /// <summary>
        /// Page&#39;s replace text method. Deprecated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="textReplace"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of PageTextReplaceResponse</returns>
        System.Threading.Tasks.Task<PageTextReplaceResponse> PostPageReplaceTextAsync (string name, int? pageNumber, TextReplaceRequest textReplace, string storage = null, string folder = null);

        /// <summary>
        /// Page&#39;s replace text method. Deprecated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="textReplace"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (PageTextReplaceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageTextReplaceResponse>> PostPageReplaceTextAsyncWithHttpInfo (string name, int? pageNumber, TextReplaceRequest textReplace, string storage = null, string folder = null);
        /// <summary>
        /// Page&#39;s replace text method. Deprecated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="textReplaceListRequest"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of PageTextReplaceResponse</returns>
        System.Threading.Tasks.Task<PageTextReplaceResponse> PostPageReplaceTextListAsync (string name, int? pageNumber, TextReplaceListRequest textReplaceListRequest, string storage = null, string folder = null);

        /// <summary>
        /// Page&#39;s replace text method. Deprecated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="textReplaceListRequest"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (PageTextReplaceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageTextReplaceResponse>> PostPageReplaceTextListAsyncWithHttpInfo (string name, int? pageNumber, TextReplaceListRequest textReplaceListRequest, string storage = null, string folder = null);
        /// <summary>
        /// Page&#39;s replace text method.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="textReplaceListRequest"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of TextReplaceResponse</returns>
        System.Threading.Tasks.Task<TextReplaceResponse> PostPageTextReplaceAsync (string name, int? pageNumber, TextReplaceListRequest textReplaceListRequest, string storage = null, string folder = null);

        /// <summary>
        /// Page&#39;s replace text method.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="textReplaceListRequest"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (TextReplaceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TextReplaceResponse>> PostPageTextReplaceAsyncWithHttpInfo (string name, int? pageNumber, TextReplaceListRequest textReplaceListRequest, string storage = null, string folder = null);
        /// <summary>
        /// Replace document image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="imageNumber">The image number.</param>
        /// <param name="imageFile">Path to image file if specified. Request content is used otherwise. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="image">Image file. (optional)</param>
        /// <returns>Task of ImageResponse</returns>
        System.Threading.Tasks.Task<ImageResponse> PostReplaceImageAsync (string name, int? pageNumber, int? imageNumber, string imageFile = null, string storage = null, string folder = null, System.IO.Stream image = null);

        /// <summary>
        /// Replace document image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="imageNumber">The image number.</param>
        /// <param name="imageFile">Path to image file if specified. Request content is used otherwise. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="image">Image file. (optional)</param>
        /// <returns>Task of ApiResponse (ImageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImageResponse>> PostReplaceImageAsyncWithHttpInfo (string name, int? pageNumber, int? imageNumber, string imageFile = null, string storage = null, string folder = null, System.IO.Stream image = null);
        /// <summary>
        /// Sign document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="signature">Signature object containing signature data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PostSignDocumentAsync (string name, Signature signature = null, string storage = null, string folder = null);

        /// <summary>
        /// Sign document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="signature">Signature object containing signature data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PostSignDocumentAsyncWithHttpInfo (string name, Signature signature = null, string storage = null, string folder = null);
        /// <summary>
        /// Sign page.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="signature">Signature object containing signature data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PostSignPageAsync (string name, int? pageNumber, Signature signature = null, string storage = null, string folder = null);

        /// <summary>
        /// Sign page.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="signature">Signature object containing signature data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PostSignPageAsyncWithHttpInfo (string name, int? pageNumber, Signature signature = null, string storage = null, string folder = null);
        /// <summary>
        /// Split document to parts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="format">Resulting documents format. (optional)</param>
        /// <param name="from">Start page if defined. (optional)</param>
        /// <param name="to">End page if defined. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SplitResultResponse</returns>
        System.Threading.Tasks.Task<SplitResultResponse> PostSplitDocumentAsync (string name, string format = null, int? from = null, int? to = null, string storage = null, string folder = null);

        /// <summary>
        /// Split document to parts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="format">Resulting documents format. (optional)</param>
        /// <param name="from">Start page if defined. (optional)</param>
        /// <param name="to">End page if defined. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SplitResultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SplitResultResponse>> PostSplitDocumentAsyncWithHttpInfo (string name, string format = null, int? from = null, int? to = null, string storage = null, string folder = null);
        /// <summary>
        /// Add new page to end of the document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of DocumentPagesResponse</returns>
        System.Threading.Tasks.Task<DocumentPagesResponse> PutAddNewPageAsync (string name, string storage = null, string folder = null);

        /// <summary>
        /// Add new page to end of the document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (DocumentPagesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentPagesResponse>> PutAddNewPageAsyncWithHttpInfo (string name, string storage = null, string folder = null);
        /// <summary>
        /// Add text to PDF document page. Deprecated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the document to which text should be added.</param>
        /// <param name="pageNumber">Number of page (starting with 1) to which text should be added.</param>
        /// <param name="paragraph">Paragraph data. (optional)</param>
        /// <param name="storage">File storage to be used. (optional)</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PutAddParagraphAsync (string name, int? pageNumber, Paragraph paragraph = null, string storage = null, string folder = null);

        /// <summary>
        /// Add text to PDF document page. Deprecated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the document to which text should be added.</param>
        /// <param name="pageNumber">Number of page (starting with 1) to which text should be added.</param>
        /// <param name="paragraph">Paragraph data. (optional)</param>
        /// <param name="storage">File storage to be used. (optional)</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutAddParagraphAsyncWithHttpInfo (string name, int? pageNumber, Paragraph paragraph = null, string storage = null, string folder = null);
        /// <summary>
        /// Add text to PDF document page.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">Number of page (starting from 1).</param>
        /// <param name="paragraph">Paragraph data. (optional)</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PutAddTextAsync (string name, int? pageNumber, Paragraph paragraph = null, string folder = null);

        /// <summary>
        /// Add text to PDF document page.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">Number of page (starting from 1).</param>
        /// <param name="paragraph">Paragraph data. (optional)</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutAddTextAsyncWithHttpInfo (string name, int? pageNumber, Paragraph paragraph = null, string folder = null);
        /// <summary>
        /// Convert document from request content to format specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">The format to convert. (optional)</param>
        /// <param name="url"> (optional)</param>
        /// <param name="outPath">Path to save result (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> PutConvertDocumentAsync (string format = null, string url = null, string outPath = null, System.IO.Stream file = null);

        /// <summary>
        /// Convert document from request content to format specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">The format to convert. (optional)</param>
        /// <param name="url"> (optional)</param>
        /// <param name="outPath">Path to save result (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> PutConvertDocumentAsyncWithHttpInfo (string format = null, string url = null, string outPath = null, System.IO.Stream file = null);
        /// <summary>
        /// Upload a specific file 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext</param>
        /// <param name="file">File to upload</param>
        /// <param name="versionId">Source file&#39;s version (optional)</param>
        /// <param name="storage">User&#39;s storage name (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PutCreateAsync (string path, System.IO.Stream file, string versionId = null, string storage = null);

        /// <summary>
        /// Upload a specific file 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext</param>
        /// <param name="file">File to upload</param>
        /// <param name="versionId">Source file&#39;s version (optional)</param>
        /// <param name="storage">User&#39;s storage name (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutCreateAsyncWithHttpInfo (string path, System.IO.Stream file, string versionId = null, string storage = null);
        /// <summary>
        /// Create new document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new document name.</param>
        /// <param name="templateFile">The template file server path if defined. (optional)</param>
        /// <param name="dataFile">The data file path (for xml template only). (optional)</param>
        /// <param name="templateType">The template type, can be xml, html, bmp, jpg, png, tiff, emf, cgm, tex. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The new document folder. (optional)</param>
        /// <param name="url">The url of web page if defined. (optional)</param>
        /// <param name="fitSize">Draw a margin around content in resulting pdf. (optional, default to false)</param>
        /// <returns>Task of DocumentResponse</returns>
        System.Threading.Tasks.Task<DocumentResponse> PutCreateDocumentAsync (string name, string templateFile = null, string dataFile = null, string templateType = null, string storage = null, string folder = null, string url = null, bool? fitSize = null);

        /// <summary>
        /// Create new document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new document name.</param>
        /// <param name="templateFile">The template file server path if defined. (optional)</param>
        /// <param name="dataFile">The data file path (for xml template only). (optional)</param>
        /// <param name="templateType">The template type, can be xml, html, bmp, jpg, png, tiff, emf, cgm, tex. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The new document folder. (optional)</param>
        /// <param name="url">The url of web page if defined. (optional)</param>
        /// <param name="fitSize">Draw a margin around content in resulting pdf. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (DocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentResponse>> PutCreateDocumentAsyncWithHttpInfo (string name, string templateFile = null, string dataFile = null, string templateType = null, string storage = null, string folder = null, string url = null, bool? fitSize = null);
        /// <summary>
        /// Create new document from images.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new document name.</param>
        /// <param name="images">The images file paths set.   (optional)</param>
        /// <param name="ocr">To create OCR layer for image or not. (optional, default to false)</param>
        /// <param name="ocrLang">The language which is defined for OCR engine. Default is eng. (optional, default to eng)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The new document folder. (optional)</param>
        /// <returns>Task of DocumentResponse</returns>
        System.Threading.Tasks.Task<DocumentResponse> PutCreateDocumentFromImagesAsync (string name, ImagesListRequest images = null, bool? ocr = null, string ocrLang = null, string storage = null, string folder = null);

        /// <summary>
        /// Create new document from images.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new document name.</param>
        /// <param name="images">The images file paths set.   (optional)</param>
        /// <param name="ocr">To create OCR layer for image or not. (optional, default to false)</param>
        /// <param name="ocrLang">The language which is defined for OCR engine. Default is eng. (optional, default to eng)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The new document folder. (optional)</param>
        /// <returns>Task of ApiResponse (DocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentResponse>> PutCreateDocumentFromImagesAsyncWithHttpInfo (string name, ImagesListRequest images = null, bool? ocr = null, string ocrLang = null, string storage = null, string folder = null);
        /// <summary>
        /// Save document as Tiff image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="exportOptions">with tiff export options. (optional)</param>
        /// <param name="resultFile">The resulting file. (optional)</param>
        /// <param name="brightness">The image brightness. (optional)</param>
        /// <param name="compression">Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)</param>
        /// <param name="colorDepth">Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)</param>
        /// <param name="leftMargin">Left image margin. (optional)</param>
        /// <param name="rightMargin">Right image margin. (optional)</param>
        /// <param name="topMargin">Top image margin. (optional)</param>
        /// <param name="bottomMargin">Bottom image margin. (optional)</param>
        /// <param name="orientation">Image orientation. Possible values are: None, Landscape, Portait. (optional)</param>
        /// <param name="skipBlankPages">Skip blank pages flag. (optional)</param>
        /// <param name="width">Image width. (optional)</param>
        /// <param name="height">Image height. (optional)</param>
        /// <param name="xResolution">Horizontal resolution. (optional)</param>
        /// <param name="yResolution">Vertical resolution. (optional)</param>
        /// <param name="pageIndex">Start page to export. (optional)</param>
        /// <param name="pageCount">Number of pages to export. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PutDocumentSaveAsTiffAsync (string name, TiffExportOptions exportOptions = null, string resultFile = null, double? brightness = null, string compression = null, string colorDepth = null, int? leftMargin = null, int? rightMargin = null, int? topMargin = null, int? bottomMargin = null, string orientation = null, bool? skipBlankPages = null, int? width = null, int? height = null, int? xResolution = null, int? yResolution = null, int? pageIndex = null, int? pageCount = null, string storage = null, string folder = null);

        /// <summary>
        /// Save document as Tiff image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="exportOptions">with tiff export options. (optional)</param>
        /// <param name="resultFile">The resulting file. (optional)</param>
        /// <param name="brightness">The image brightness. (optional)</param>
        /// <param name="compression">Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)</param>
        /// <param name="colorDepth">Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)</param>
        /// <param name="leftMargin">Left image margin. (optional)</param>
        /// <param name="rightMargin">Right image margin. (optional)</param>
        /// <param name="topMargin">Top image margin. (optional)</param>
        /// <param name="bottomMargin">Bottom image margin. (optional)</param>
        /// <param name="orientation">Image orientation. Possible values are: None, Landscape, Portait. (optional)</param>
        /// <param name="skipBlankPages">Skip blank pages flag. (optional)</param>
        /// <param name="width">Image width. (optional)</param>
        /// <param name="height">Image height. (optional)</param>
        /// <param name="xResolution">Horizontal resolution. (optional)</param>
        /// <param name="yResolution">Vertical resolution. (optional)</param>
        /// <param name="pageIndex">Start page to export. (optional)</param>
        /// <param name="pageCount">Number of pages to export. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutDocumentSaveAsTiffAsyncWithHttpInfo (string name, TiffExportOptions exportOptions = null, string resultFile = null, double? brightness = null, string compression = null, string colorDepth = null, int? leftMargin = null, int? rightMargin = null, int? topMargin = null, int? bottomMargin = null, string orientation = null, bool? skipBlankPages = null, int? width = null, int? height = null, int? xResolution = null, int? yResolution = null, int? pageIndex = null, int? pageCount = null, string storage = null, string folder = null);
        /// <summary>
        /// Convert EPUB file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.epub)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PutEpubInStorageToPdfAsync (string name, string srcPath, string dstFolder = null);

        /// <summary>
        /// Convert EPUB file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.epub)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutEpubInStorageToPdfAsyncWithHttpInfo (string name, string srcPath, string dstFolder = null);
        /// <summary>
        /// Flatten form fields in document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PutFieldsFlattenAsync (string name, string storage = null, string folder = null);

        /// <summary>
        /// Flatten form fields in document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutFieldsFlattenAsyncWithHttpInfo (string name, string storage = null, string folder = null);
        /// <summary>
        /// Convert HTML file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.zip)</param>
        /// <param name="htmlFileName">Name of HTML file in ZIP.</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PutHtmlInStorageToPdfAsync (string name, string srcPath, string htmlFileName, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string dstFolder = null);

        /// <summary>
        /// Convert HTML file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.zip)</param>
        /// <param name="htmlFileName">Name of HTML file in ZIP.</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutHtmlInStorageToPdfAsyncWithHttpInfo (string name, string srcPath, string htmlFileName, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string dstFolder = null);
        /// <summary>
        /// Convert image file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageTemplates">Image templates</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PutImageInStorageToPdfAsync (string name, ImageTemplatesRequest imageTemplates, string dstFolder = null);

        /// <summary>
        /// Convert image file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageTemplates">Image templates</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutImageInStorageToPdfAsyncWithHttpInfo (string name, ImageTemplatesRequest imageTemplates, string dstFolder = null);
        /// <summary>
        /// Extract document images in format specified to folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PutImagesExtractAsGifAsync (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string destFolder = null);

        /// <summary>
        /// Extract document images in format specified to folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutImagesExtractAsGifAsyncWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string destFolder = null);
        /// <summary>
        /// Extract document images in format specified to folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PutImagesExtractAsJpegAsync (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string destFolder = null);

        /// <summary>
        /// Extract document images in format specified to folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutImagesExtractAsJpegAsyncWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string destFolder = null);
        /// <summary>
        /// Extract document images in format specified to folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PutImagesExtractAsPngAsync (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string destFolder = null);

        /// <summary>
        /// Extract document images in format specified to folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutImagesExtractAsPngAsyncWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string destFolder = null);
        /// <summary>
        /// Extract document images in format specified to folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PutImagesExtractAsTiffAsync (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string destFolder = null);

        /// <summary>
        /// Extract document images in format specified to folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutImagesExtractAsTiffAsyncWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string destFolder = null);
        /// <summary>
        /// Convert LaTeX file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.tex)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PutLaTeXInStorageToPdfAsync (string name, string srcPath, string dstFolder = null);

        /// <summary>
        /// Convert LaTeX file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.tex)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutLaTeXInStorageToPdfAsyncWithHttpInfo (string name, string srcPath, string dstFolder = null);
        /// <summary>
        /// Merge a list of documents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Resulting documen name.</param>
        /// <param name="mergeDocuments">with a list of documents. (optional)</param>
        /// <param name="storage">Resulting document storage. (optional)</param>
        /// <param name="folder">Resulting document folder. (optional)</param>
        /// <returns>Task of DocumentResponse</returns>
        System.Threading.Tasks.Task<DocumentResponse> PutMergeDocumentsAsync (string name, MergeDocuments mergeDocuments = null, string storage = null, string folder = null);

        /// <summary>
        /// Merge a list of documents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Resulting documen name.</param>
        /// <param name="mergeDocuments">with a list of documents. (optional)</param>
        /// <param name="storage">Resulting document storage. (optional)</param>
        /// <param name="folder">Resulting document folder. (optional)</param>
        /// <returns>Task of ApiResponse (DocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentResponse>> PutMergeDocumentsAsyncWithHttpInfo (string name, MergeDocuments mergeDocuments = null, string storage = null, string folder = null);
        /// <summary>
        /// Convert MHT file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.mht)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PutMhtInStorageToPdfAsync (string name, string srcPath, string dstFolder = null);

        /// <summary>
        /// Convert MHT file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.mht)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutMhtInStorageToPdfAsyncWithHttpInfo (string name, string srcPath, string dstFolder = null);
        /// <summary>
        /// Add page stamp.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="stamp">with data.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PutPageAddStampAsync (string name, int? pageNumber, Stamp stamp, string storage = null, string folder = null);

        /// <summary>
        /// Add page stamp.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="stamp">with data.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPageAddStampAsyncWithHttpInfo (string name, int? pageNumber, Stamp stamp, string storage = null, string folder = null);
        /// <summary>
        /// Convert document page to bmp image and save in storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PutPageConvertToBmpAsync (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null);

        /// <summary>
        /// Convert document page to bmp image and save in storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPageConvertToBmpAsyncWithHttpInfo (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null);
        /// <summary>
        /// Convert document page to emf image and save in storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PutPageConvertToEmfAsync (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null);

        /// <summary>
        /// Convert document page to emf image and save in storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPageConvertToEmfAsyncWithHttpInfo (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null);
        /// <summary>
        /// Convert document page to gif image and save in storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PutPageConvertToGifAsync (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null);

        /// <summary>
        /// Convert document page to gif image and save in storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPageConvertToGifAsyncWithHttpInfo (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null);
        /// <summary>
        /// Convert document page to Jpeg image and save in storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PutPageConvertToJpegAsync (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null);

        /// <summary>
        /// Convert document page to Jpeg image and save in storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPageConvertToJpegAsyncWithHttpInfo (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null);
        /// <summary>
        /// Convert document page to png image and save in storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PutPageConvertToPngAsync (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null);

        /// <summary>
        /// Convert document page to png image and save in storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPageConvertToPngAsyncWithHttpInfo (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null);
        /// <summary>
        /// Convert document page to Tiff image and save in storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PutPageConvertToTiffAsync (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null);

        /// <summary>
        /// Convert document page to Tiff image and save in storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPageConvertToTiffAsyncWithHttpInfo (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null);
        /// <summary>
        /// Convert PCL file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.pcl)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PutPclInStorageToPdfAsync (string name, string srcPath, string dstFolder = null);

        /// <summary>
        /// Convert PCL file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.pcl)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPclInStorageToPdfAsyncWithHttpInfo (string name, string srcPath, string dstFolder = null);
        /// <summary>
        /// Converts PDF document (in request content) to DOC format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.doc)</param>
        /// <param name="addReturnToLineEnd">Add return to line end. (optional)</param>
        /// <param name="format">Allows to specify .doc or .docx file format. (optional)</param>
        /// <param name="imageResolutionX">Image resolution X. (optional)</param>
        /// <param name="imageResolutionY">Image resolution Y. (optional)</param>
        /// <param name="maxDistanceBetweenTextLines">Max distance between text lines. (optional)</param>
        /// <param name="mode">Allows to control how a PDF document is converted into a word processing document. (optional)</param>
        /// <param name="recognizeBullets">Recognize bullets. (optional)</param>
        /// <param name="relativeHorizontalProximity">Relative horizontal proximity. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PutPdfInRequestToDocAsync (string outPath, bool? addReturnToLineEnd = null, string format = null, int? imageResolutionX = null, int? imageResolutionY = null, int? maxDistanceBetweenTextLines = null, string mode = null, bool? recognizeBullets = null, double? relativeHorizontalProximity = null, System.IO.Stream file = null);

        /// <summary>
        /// Converts PDF document (in request content) to DOC format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.doc)</param>
        /// <param name="addReturnToLineEnd">Add return to line end. (optional)</param>
        /// <param name="format">Allows to specify .doc or .docx file format. (optional)</param>
        /// <param name="imageResolutionX">Image resolution X. (optional)</param>
        /// <param name="imageResolutionY">Image resolution Y. (optional)</param>
        /// <param name="maxDistanceBetweenTextLines">Max distance between text lines. (optional)</param>
        /// <param name="mode">Allows to control how a PDF document is converted into a word processing document. (optional)</param>
        /// <param name="recognizeBullets">Recognize bullets. (optional)</param>
        /// <param name="relativeHorizontalProximity">Relative horizontal proximity. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPdfInRequestToDocAsyncWithHttpInfo (string outPath, bool? addReturnToLineEnd = null, string format = null, int? imageResolutionX = null, int? imageResolutionY = null, int? maxDistanceBetweenTextLines = null, string mode = null, bool? recognizeBullets = null, double? relativeHorizontalProximity = null, System.IO.Stream file = null);
        /// <summary>
        /// Converts PDF document (in request content) to EPUB format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.epub)</param>
        /// <param name="contentRecognitionMode">Рroperty tunes conversion for this or that desirable method of recognition of content. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PutPdfInRequestToEpubAsync (string outPath, string contentRecognitionMode = null, System.IO.Stream file = null);

        /// <summary>
        /// Converts PDF document (in request content) to EPUB format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.epub)</param>
        /// <param name="contentRecognitionMode">Рroperty tunes conversion for this or that desirable method of recognition of content. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPdfInRequestToEpubAsyncWithHttpInfo (string outPath, string contentRecognitionMode = null, System.IO.Stream file = null);
        /// <summary>
        /// Converts PDF document (in request content) to Html format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.html)</param>
        /// <param name="additionalMarginWidthInPoints">Defines width of margin that will be forcibly left around that output HTML-areas. (optional)</param>
        /// <param name="compressSvgGraphicsIfAny">The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)</param>
        /// <param name="convertMarkedContentToLayers">If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)</param>
        /// <param name="defaultFontName">Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)</param>
        /// <param name="documentType">Result document type. (optional)</param>
        /// <param name="fixedLayout">The value indicating whether that HTML is created as fixed layout. (optional)</param>
        /// <param name="imageResolution">Resolution for image rendering. (optional)</param>
        /// <param name="minimalLineWidth">This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)</param>
        /// <param name="preventGlyphsGrouping">This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)</param>
        /// <param name="splitCssIntoPages">When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)</param>
        /// <param name="splitIntoPages">The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)</param>
        /// <param name="useZOrder">If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)</param>
        /// <param name="antialiasingProcessing">The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)</param>
        /// <param name="cssClassNamesPrefix">When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)</param>
        /// <param name="explicitListOfSavedPages">With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)</param>
        /// <param name="fontEncodingStrategy">Defines encoding special rule to tune PDF decoding for current document. (optional)</param>
        /// <param name="fontSavingMode">Defines font saving mode that will be used during saving of PDF to desirable format. (optional)</param>
        /// <param name="htmlMarkupGenerationMode">Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)</param>
        /// <param name="lettersPositioningMethod">The mode of positioning of letters in words in result HTML. (optional)</param>
        /// <param name="pagesFlowTypeDependsOnViewersScreenSize">If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)</param>
        /// <param name="partsEmbeddingMode">It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)</param>
        /// <param name="rasterImagesSavingMode">Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)</param>
        /// <param name="removeEmptyAreasOnTopAndBottom">Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)</param>
        /// <param name="saveShadowedTextsAsTransparentTexts">Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)</param>
        /// <param name="saveTransparentTexts">Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)</param>
        /// <param name="specialFolderForAllImages">The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="specialFolderForSvgImages">The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="trySaveTextUnderliningAndStrikeoutingInCss">PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PutPdfInRequestToHtmlAsync (string outPath, int? additionalMarginWidthInPoints = null, bool? compressSvgGraphicsIfAny = null, bool? convertMarkedContentToLayers = null, string defaultFontName = null, string documentType = null, bool? fixedLayout = null, int? imageResolution = null, int? minimalLineWidth = null, bool? preventGlyphsGrouping = null, bool? splitCssIntoPages = null, bool? splitIntoPages = null, bool? useZOrder = null, string antialiasingProcessing = null, string cssClassNamesPrefix = null, List<int?> explicitListOfSavedPages = null, string fontEncodingStrategy = null, string fontSavingMode = null, string htmlMarkupGenerationMode = null, string lettersPositioningMethod = null, bool? pagesFlowTypeDependsOnViewersScreenSize = null, string partsEmbeddingMode = null, string rasterImagesSavingMode = null, bool? removeEmptyAreasOnTopAndBottom = null, bool? saveShadowedTextsAsTransparentTexts = null, bool? saveTransparentTexts = null, string specialFolderForAllImages = null, string specialFolderForSvgImages = null, bool? trySaveTextUnderliningAndStrikeoutingInCss = null, System.IO.Stream file = null);

        /// <summary>
        /// Converts PDF document (in request content) to Html format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.html)</param>
        /// <param name="additionalMarginWidthInPoints">Defines width of margin that will be forcibly left around that output HTML-areas. (optional)</param>
        /// <param name="compressSvgGraphicsIfAny">The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)</param>
        /// <param name="convertMarkedContentToLayers">If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)</param>
        /// <param name="defaultFontName">Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)</param>
        /// <param name="documentType">Result document type. (optional)</param>
        /// <param name="fixedLayout">The value indicating whether that HTML is created as fixed layout. (optional)</param>
        /// <param name="imageResolution">Resolution for image rendering. (optional)</param>
        /// <param name="minimalLineWidth">This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)</param>
        /// <param name="preventGlyphsGrouping">This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)</param>
        /// <param name="splitCssIntoPages">When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)</param>
        /// <param name="splitIntoPages">The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)</param>
        /// <param name="useZOrder">If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)</param>
        /// <param name="antialiasingProcessing">The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)</param>
        /// <param name="cssClassNamesPrefix">When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)</param>
        /// <param name="explicitListOfSavedPages">With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)</param>
        /// <param name="fontEncodingStrategy">Defines encoding special rule to tune PDF decoding for current document. (optional)</param>
        /// <param name="fontSavingMode">Defines font saving mode that will be used during saving of PDF to desirable format. (optional)</param>
        /// <param name="htmlMarkupGenerationMode">Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)</param>
        /// <param name="lettersPositioningMethod">The mode of positioning of letters in words in result HTML. (optional)</param>
        /// <param name="pagesFlowTypeDependsOnViewersScreenSize">If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)</param>
        /// <param name="partsEmbeddingMode">It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)</param>
        /// <param name="rasterImagesSavingMode">Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)</param>
        /// <param name="removeEmptyAreasOnTopAndBottom">Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)</param>
        /// <param name="saveShadowedTextsAsTransparentTexts">Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)</param>
        /// <param name="saveTransparentTexts">Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)</param>
        /// <param name="specialFolderForAllImages">The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="specialFolderForSvgImages">The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="trySaveTextUnderliningAndStrikeoutingInCss">PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPdfInRequestToHtmlAsyncWithHttpInfo (string outPath, int? additionalMarginWidthInPoints = null, bool? compressSvgGraphicsIfAny = null, bool? convertMarkedContentToLayers = null, string defaultFontName = null, string documentType = null, bool? fixedLayout = null, int? imageResolution = null, int? minimalLineWidth = null, bool? preventGlyphsGrouping = null, bool? splitCssIntoPages = null, bool? splitIntoPages = null, bool? useZOrder = null, string antialiasingProcessing = null, string cssClassNamesPrefix = null, List<int?> explicitListOfSavedPages = null, string fontEncodingStrategy = null, string fontSavingMode = null, string htmlMarkupGenerationMode = null, string lettersPositioningMethod = null, bool? pagesFlowTypeDependsOnViewersScreenSize = null, string partsEmbeddingMode = null, string rasterImagesSavingMode = null, bool? removeEmptyAreasOnTopAndBottom = null, bool? saveShadowedTextsAsTransparentTexts = null, bool? saveTransparentTexts = null, string specialFolderForAllImages = null, string specialFolderForSvgImages = null, bool? trySaveTextUnderliningAndStrikeoutingInCss = null, System.IO.Stream file = null);
        /// <summary>
        /// Converts PDF document (in request content) to LaTeX format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tex)</param>
        /// <param name="pagesCount">Pages count. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PutPdfInRequestToLaTeXAsync (string outPath, int? pagesCount = null, System.IO.Stream file = null);

        /// <summary>
        /// Converts PDF document (in request content) to LaTeX format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tex)</param>
        /// <param name="pagesCount">Pages count. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPdfInRequestToLaTeXAsyncWithHttpInfo (string outPath, int? pagesCount = null, System.IO.Stream file = null);
        /// <summary>
        /// Converts PDF document (in request content) to MOBIXML format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.mobixml)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PutPdfInRequestToMobiXmlAsync (string outPath, System.IO.Stream file = null);

        /// <summary>
        /// Converts PDF document (in request content) to MOBIXML format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.mobixml)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPdfInRequestToMobiXmlAsyncWithHttpInfo (string outPath, System.IO.Stream file = null);
        /// <summary>
        /// Converts PDF document (in request content) to PdfA format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="type">Type of PdfA format.</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PutPdfInRequestToPdfAAsync (string outPath, string type, System.IO.Stream file = null);

        /// <summary>
        /// Converts PDF document (in request content) to PdfA format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="type">Type of PdfA format.</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPdfInRequestToPdfAAsyncWithHttpInfo (string outPath, string type, System.IO.Stream file = null);
        /// <summary>
        /// Converts PDF document (in request content) to PPTX format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pptx)</param>
        /// <param name="separateImages">Separate images. (optional)</param>
        /// <param name="slidesAsImages">Slides as images. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PutPdfInRequestToPptxAsync (string outPath, bool? separateImages = null, bool? slidesAsImages = null, System.IO.Stream file = null);

        /// <summary>
        /// Converts PDF document (in request content) to PPTX format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pptx)</param>
        /// <param name="separateImages">Separate images. (optional)</param>
        /// <param name="slidesAsImages">Slides as images. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPdfInRequestToPptxAsyncWithHttpInfo (string outPath, bool? separateImages = null, bool? slidesAsImages = null, System.IO.Stream file = null);
        /// <summary>
        /// Converts PDF document (in request content) to SVG format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.svg)</param>
        /// <param name="compressOutputToZipArchive">Specifies whether output will be created as one zip-archive. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PutPdfInRequestToSvgAsync (string outPath, bool? compressOutputToZipArchive = null, System.IO.Stream file = null);

        /// <summary>
        /// Converts PDF document (in request content) to SVG format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.svg)</param>
        /// <param name="compressOutputToZipArchive">Specifies whether output will be created as one zip-archive. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPdfInRequestToSvgAsyncWithHttpInfo (string outPath, bool? compressOutputToZipArchive = null, System.IO.Stream file = null);
        /// <summary>
        /// Converts PDF document (in request content) to TIFF format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tiff)</param>
        /// <param name="brightness">Image brightness. (optional)</param>
        /// <param name="compression">Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)</param>
        /// <param name="colorDepth">Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)</param>
        /// <param name="leftMargin">Left image margin. (optional)</param>
        /// <param name="rightMargin">Right image margin. (optional)</param>
        /// <param name="topMargin">Top image margin. (optional)</param>
        /// <param name="bottomMargin">Bottom image margin. (optional)</param>
        /// <param name="orientation">Image orientation. Possible values are: None, Landscape, Portait. (optional)</param>
        /// <param name="skipBlankPages">Skip blank pages flag. (optional)</param>
        /// <param name="width">Image width. (optional)</param>
        /// <param name="height">Image height. (optional)</param>
        /// <param name="xResolution">Horizontal resolution. (optional)</param>
        /// <param name="yResolution">Vertical resolution. (optional)</param>
        /// <param name="pageIndex">Start page to export. (optional)</param>
        /// <param name="pageCount">Number of pages to export. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PutPdfInRequestToTiffAsync (string outPath, double? brightness = null, string compression = null, string colorDepth = null, int? leftMargin = null, int? rightMargin = null, int? topMargin = null, int? bottomMargin = null, string orientation = null, bool? skipBlankPages = null, int? width = null, int? height = null, int? xResolution = null, int? yResolution = null, int? pageIndex = null, int? pageCount = null, System.IO.Stream file = null);

        /// <summary>
        /// Converts PDF document (in request content) to TIFF format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tiff)</param>
        /// <param name="brightness">Image brightness. (optional)</param>
        /// <param name="compression">Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)</param>
        /// <param name="colorDepth">Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)</param>
        /// <param name="leftMargin">Left image margin. (optional)</param>
        /// <param name="rightMargin">Right image margin. (optional)</param>
        /// <param name="topMargin">Top image margin. (optional)</param>
        /// <param name="bottomMargin">Bottom image margin. (optional)</param>
        /// <param name="orientation">Image orientation. Possible values are: None, Landscape, Portait. (optional)</param>
        /// <param name="skipBlankPages">Skip blank pages flag. (optional)</param>
        /// <param name="width">Image width. (optional)</param>
        /// <param name="height">Image height. (optional)</param>
        /// <param name="xResolution">Horizontal resolution. (optional)</param>
        /// <param name="yResolution">Vertical resolution. (optional)</param>
        /// <param name="pageIndex">Start page to export. (optional)</param>
        /// <param name="pageCount">Number of pages to export. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPdfInRequestToTiffAsyncWithHttpInfo (string outPath, double? brightness = null, string compression = null, string colorDepth = null, int? leftMargin = null, int? rightMargin = null, int? topMargin = null, int? bottomMargin = null, string orientation = null, bool? skipBlankPages = null, int? width = null, int? height = null, int? xResolution = null, int? yResolution = null, int? pageIndex = null, int? pageCount = null, System.IO.Stream file = null);
        /// <summary>
        /// Converts PDF document (in request content) to XLS format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xls)</param>
        /// <param name="insertBlankColumnAtFirst">Insert blank column at first (optional)</param>
        /// <param name="minimizeTheNumberOfWorksheets">Minimize the number of worksheets (optional)</param>
        /// <param name="scaleFactor">Scale factor (optional)</param>
        /// <param name="uniformWorksheets">Uniform worksheets (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PutPdfInRequestToXlsAsync (string outPath, bool? insertBlankColumnAtFirst = null, bool? minimizeTheNumberOfWorksheets = null, double? scaleFactor = null, bool? uniformWorksheets = null, System.IO.Stream file = null);

        /// <summary>
        /// Converts PDF document (in request content) to XLS format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xls)</param>
        /// <param name="insertBlankColumnAtFirst">Insert blank column at first (optional)</param>
        /// <param name="minimizeTheNumberOfWorksheets">Minimize the number of worksheets (optional)</param>
        /// <param name="scaleFactor">Scale factor (optional)</param>
        /// <param name="uniformWorksheets">Uniform worksheets (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPdfInRequestToXlsAsyncWithHttpInfo (string outPath, bool? insertBlankColumnAtFirst = null, bool? minimizeTheNumberOfWorksheets = null, double? scaleFactor = null, bool? uniformWorksheets = null, System.IO.Stream file = null);
        /// <summary>
        /// Converts PDF document (in request content) to XML format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xml)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PutPdfInRequestToXmlAsync (string outPath, System.IO.Stream file = null);

        /// <summary>
        /// Converts PDF document (in request content) to XML format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xml)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPdfInRequestToXmlAsyncWithHttpInfo (string outPath, System.IO.Stream file = null);
        /// <summary>
        /// Converts PDF document (in request content) to XPS format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xps)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PutPdfInRequestToXpsAsync (string outPath, System.IO.Stream file = null);

        /// <summary>
        /// Converts PDF document (in request content) to XPS format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xps)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPdfInRequestToXpsAsyncWithHttpInfo (string outPath, System.IO.Stream file = null);
        /// <summary>
        /// Converts PDF document (located on storage) to DOC format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.doc)</param>
        /// <param name="addReturnToLineEnd">Add return to line end. (optional)</param>
        /// <param name="format">Allows to specify .doc or .docx file format. (optional)</param>
        /// <param name="imageResolutionX">Image resolution X. (optional)</param>
        /// <param name="imageResolutionY">Image resolution Y. (optional)</param>
        /// <param name="maxDistanceBetweenTextLines">Max distance between text lines. (optional)</param>
        /// <param name="mode">Allows to control how a PDF document is converted into a word processing document. (optional)</param>
        /// <param name="recognizeBullets">Recognize bullets. (optional)</param>
        /// <param name="relativeHorizontalProximity">Relative horizontal proximity. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PutPdfInStorageToDocAsync (string name, string outPath, bool? addReturnToLineEnd = null, string format = null, int? imageResolutionX = null, int? imageResolutionY = null, int? maxDistanceBetweenTextLines = null, string mode = null, bool? recognizeBullets = null, double? relativeHorizontalProximity = null, string folder = null);

        /// <summary>
        /// Converts PDF document (located on storage) to DOC format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.doc)</param>
        /// <param name="addReturnToLineEnd">Add return to line end. (optional)</param>
        /// <param name="format">Allows to specify .doc or .docx file format. (optional)</param>
        /// <param name="imageResolutionX">Image resolution X. (optional)</param>
        /// <param name="imageResolutionY">Image resolution Y. (optional)</param>
        /// <param name="maxDistanceBetweenTextLines">Max distance between text lines. (optional)</param>
        /// <param name="mode">Allows to control how a PDF document is converted into a word processing document. (optional)</param>
        /// <param name="recognizeBullets">Recognize bullets. (optional)</param>
        /// <param name="relativeHorizontalProximity">Relative horizontal proximity. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPdfInStorageToDocAsyncWithHttpInfo (string name, string outPath, bool? addReturnToLineEnd = null, string format = null, int? imageResolutionX = null, int? imageResolutionY = null, int? maxDistanceBetweenTextLines = null, string mode = null, bool? recognizeBullets = null, double? relativeHorizontalProximity = null, string folder = null);
        /// <summary>
        /// Converts PDF document (located on storage) to EPUB format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.epub)</param>
        /// <param name="contentRecognitionMode">Рroperty tunes conversion for this or that desirable method of recognition of content. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PutPdfInStorageToEpubAsync (string name, string outPath, string contentRecognitionMode = null, string folder = null);

        /// <summary>
        /// Converts PDF document (located on storage) to EPUB format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.epub)</param>
        /// <param name="contentRecognitionMode">Рroperty tunes conversion for this or that desirable method of recognition of content. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPdfInStorageToEpubAsyncWithHttpInfo (string name, string outPath, string contentRecognitionMode = null, string folder = null);
        /// <summary>
        /// Converts PDF document (located on storage) to Html format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.html)</param>
        /// <param name="additionalMarginWidthInPoints">Defines width of margin that will be forcibly left around that output HTML-areas. (optional)</param>
        /// <param name="compressSvgGraphicsIfAny">The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)</param>
        /// <param name="convertMarkedContentToLayers">If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)</param>
        /// <param name="defaultFontName">Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)</param>
        /// <param name="documentType">Result document type. (optional)</param>
        /// <param name="fixedLayout">The value indicating whether that HTML is created as fixed layout. (optional)</param>
        /// <param name="imageResolution">Resolution for image rendering. (optional)</param>
        /// <param name="minimalLineWidth">This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)</param>
        /// <param name="preventGlyphsGrouping">This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)</param>
        /// <param name="splitCssIntoPages">When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)</param>
        /// <param name="splitIntoPages">The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)</param>
        /// <param name="useZOrder">If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)</param>
        /// <param name="antialiasingProcessing">The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)</param>
        /// <param name="cssClassNamesPrefix">When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)</param>
        /// <param name="explicitListOfSavedPages">With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)</param>
        /// <param name="fontEncodingStrategy">Defines encoding special rule to tune PDF decoding for current document. (optional)</param>
        /// <param name="fontSavingMode">Defines font saving mode that will be used during saving of PDF to desirable format. (optional)</param>
        /// <param name="htmlMarkupGenerationMode">Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)</param>
        /// <param name="lettersPositioningMethod">The mode of positioning of letters in words in result HTML. (optional)</param>
        /// <param name="pagesFlowTypeDependsOnViewersScreenSize">If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)</param>
        /// <param name="partsEmbeddingMode">It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)</param>
        /// <param name="rasterImagesSavingMode">Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)</param>
        /// <param name="removeEmptyAreasOnTopAndBottom">Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)</param>
        /// <param name="saveShadowedTextsAsTransparentTexts">Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)</param>
        /// <param name="saveTransparentTexts">Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)</param>
        /// <param name="specialFolderForAllImages">The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="specialFolderForSvgImages">The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="trySaveTextUnderliningAndStrikeoutingInCss">PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PutPdfInStorageToHtmlAsync (string name, string outPath, int? additionalMarginWidthInPoints = null, bool? compressSvgGraphicsIfAny = null, bool? convertMarkedContentToLayers = null, string defaultFontName = null, string documentType = null, bool? fixedLayout = null, int? imageResolution = null, int? minimalLineWidth = null, bool? preventGlyphsGrouping = null, bool? splitCssIntoPages = null, bool? splitIntoPages = null, bool? useZOrder = null, string antialiasingProcessing = null, string cssClassNamesPrefix = null, List<int?> explicitListOfSavedPages = null, string fontEncodingStrategy = null, string fontSavingMode = null, string htmlMarkupGenerationMode = null, string lettersPositioningMethod = null, bool? pagesFlowTypeDependsOnViewersScreenSize = null, string partsEmbeddingMode = null, string rasterImagesSavingMode = null, bool? removeEmptyAreasOnTopAndBottom = null, bool? saveShadowedTextsAsTransparentTexts = null, bool? saveTransparentTexts = null, string specialFolderForAllImages = null, string specialFolderForSvgImages = null, bool? trySaveTextUnderliningAndStrikeoutingInCss = null, string folder = null);

        /// <summary>
        /// Converts PDF document (located on storage) to Html format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.html)</param>
        /// <param name="additionalMarginWidthInPoints">Defines width of margin that will be forcibly left around that output HTML-areas. (optional)</param>
        /// <param name="compressSvgGraphicsIfAny">The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)</param>
        /// <param name="convertMarkedContentToLayers">If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)</param>
        /// <param name="defaultFontName">Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)</param>
        /// <param name="documentType">Result document type. (optional)</param>
        /// <param name="fixedLayout">The value indicating whether that HTML is created as fixed layout. (optional)</param>
        /// <param name="imageResolution">Resolution for image rendering. (optional)</param>
        /// <param name="minimalLineWidth">This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)</param>
        /// <param name="preventGlyphsGrouping">This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)</param>
        /// <param name="splitCssIntoPages">When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)</param>
        /// <param name="splitIntoPages">The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)</param>
        /// <param name="useZOrder">If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)</param>
        /// <param name="antialiasingProcessing">The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)</param>
        /// <param name="cssClassNamesPrefix">When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)</param>
        /// <param name="explicitListOfSavedPages">With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)</param>
        /// <param name="fontEncodingStrategy">Defines encoding special rule to tune PDF decoding for current document. (optional)</param>
        /// <param name="fontSavingMode">Defines font saving mode that will be used during saving of PDF to desirable format. (optional)</param>
        /// <param name="htmlMarkupGenerationMode">Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)</param>
        /// <param name="lettersPositioningMethod">The mode of positioning of letters in words in result HTML. (optional)</param>
        /// <param name="pagesFlowTypeDependsOnViewersScreenSize">If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)</param>
        /// <param name="partsEmbeddingMode">It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)</param>
        /// <param name="rasterImagesSavingMode">Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)</param>
        /// <param name="removeEmptyAreasOnTopAndBottom">Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)</param>
        /// <param name="saveShadowedTextsAsTransparentTexts">Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)</param>
        /// <param name="saveTransparentTexts">Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)</param>
        /// <param name="specialFolderForAllImages">The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="specialFolderForSvgImages">The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="trySaveTextUnderliningAndStrikeoutingInCss">PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPdfInStorageToHtmlAsyncWithHttpInfo (string name, string outPath, int? additionalMarginWidthInPoints = null, bool? compressSvgGraphicsIfAny = null, bool? convertMarkedContentToLayers = null, string defaultFontName = null, string documentType = null, bool? fixedLayout = null, int? imageResolution = null, int? minimalLineWidth = null, bool? preventGlyphsGrouping = null, bool? splitCssIntoPages = null, bool? splitIntoPages = null, bool? useZOrder = null, string antialiasingProcessing = null, string cssClassNamesPrefix = null, List<int?> explicitListOfSavedPages = null, string fontEncodingStrategy = null, string fontSavingMode = null, string htmlMarkupGenerationMode = null, string lettersPositioningMethod = null, bool? pagesFlowTypeDependsOnViewersScreenSize = null, string partsEmbeddingMode = null, string rasterImagesSavingMode = null, bool? removeEmptyAreasOnTopAndBottom = null, bool? saveShadowedTextsAsTransparentTexts = null, bool? saveTransparentTexts = null, string specialFolderForAllImages = null, string specialFolderForSvgImages = null, bool? trySaveTextUnderliningAndStrikeoutingInCss = null, string folder = null);
        /// <summary>
        /// Converts PDF document (located on storage) to LaTeX format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tex)</param>
        /// <param name="pagesCount">Pages count. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PutPdfInStorageToLaTeXAsync (string name, string outPath, int? pagesCount = null, string folder = null);

        /// <summary>
        /// Converts PDF document (located on storage) to LaTeX format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tex)</param>
        /// <param name="pagesCount">Pages count. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPdfInStorageToLaTeXAsyncWithHttpInfo (string name, string outPath, int? pagesCount = null, string folder = null);
        /// <summary>
        /// Converts PDF document (located on storage) to MOBIXML format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.mobixml)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PutPdfInStorageToMobiXmlAsync (string name, string outPath, string folder = null);

        /// <summary>
        /// Converts PDF document (located on storage) to MOBIXML format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.mobixml)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPdfInStorageToMobiXmlAsyncWithHttpInfo (string name, string outPath, string folder = null);
        /// <summary>
        /// Converts PDF document (located on storage) to PdfA format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="type">Type of PdfA format.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PutPdfInStorageToPdfAAsync (string name, string outPath, string type, string folder = null);

        /// <summary>
        /// Converts PDF document (located on storage) to PdfA format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="type">Type of PdfA format.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPdfInStorageToPdfAAsyncWithHttpInfo (string name, string outPath, string type, string folder = null);
        /// <summary>
        /// Converts PDF document (located on storage) to PPTX format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pptx)</param>
        /// <param name="separateImages">Separate images. (optional)</param>
        /// <param name="slidesAsImages">Slides as images. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PutPdfInStorageToPptxAsync (string name, string outPath, bool? separateImages = null, bool? slidesAsImages = null, string folder = null);

        /// <summary>
        /// Converts PDF document (located on storage) to PPTX format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pptx)</param>
        /// <param name="separateImages">Separate images. (optional)</param>
        /// <param name="slidesAsImages">Slides as images. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPdfInStorageToPptxAsyncWithHttpInfo (string name, string outPath, bool? separateImages = null, bool? slidesAsImages = null, string folder = null);
        /// <summary>
        /// Converts PDF document (located on storage) to SVG format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.svg)</param>
        /// <param name="compressOutputToZipArchive">Specifies whether output will be created as one zip-archive. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PutPdfInStorageToSvgAsync (string name, string outPath, bool? compressOutputToZipArchive = null, string folder = null);

        /// <summary>
        /// Converts PDF document (located on storage) to SVG format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.svg)</param>
        /// <param name="compressOutputToZipArchive">Specifies whether output will be created as one zip-archive. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPdfInStorageToSvgAsyncWithHttpInfo (string name, string outPath, bool? compressOutputToZipArchive = null, string folder = null);
        /// <summary>
        /// Converts PDF document (located on storage) to TIFF format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tiff)</param>
        /// <param name="brightness">Image brightness. (optional)</param>
        /// <param name="compression">Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)</param>
        /// <param name="colorDepth">Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)</param>
        /// <param name="leftMargin">Left image margin. (optional)</param>
        /// <param name="rightMargin">Right image margin. (optional)</param>
        /// <param name="topMargin">Top image margin. (optional)</param>
        /// <param name="bottomMargin">Bottom image margin. (optional)</param>
        /// <param name="orientation">Image orientation. Possible values are: None, Landscape, Portait. (optional)</param>
        /// <param name="skipBlankPages">Skip blank pages flag. (optional)</param>
        /// <param name="width">Image width. (optional)</param>
        /// <param name="height">Image height. (optional)</param>
        /// <param name="xResolution">Horizontal resolution. (optional)</param>
        /// <param name="yResolution">Vertical resolution. (optional)</param>
        /// <param name="pageIndex">Start page to export. (optional)</param>
        /// <param name="pageCount">Number of pages to export. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PutPdfInStorageToTiffAsync (string name, string outPath, double? brightness = null, string compression = null, string colorDepth = null, int? leftMargin = null, int? rightMargin = null, int? topMargin = null, int? bottomMargin = null, string orientation = null, bool? skipBlankPages = null, int? width = null, int? height = null, int? xResolution = null, int? yResolution = null, int? pageIndex = null, int? pageCount = null, string folder = null);

        /// <summary>
        /// Converts PDF document (located on storage) to TIFF format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tiff)</param>
        /// <param name="brightness">Image brightness. (optional)</param>
        /// <param name="compression">Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)</param>
        /// <param name="colorDepth">Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)</param>
        /// <param name="leftMargin">Left image margin. (optional)</param>
        /// <param name="rightMargin">Right image margin. (optional)</param>
        /// <param name="topMargin">Top image margin. (optional)</param>
        /// <param name="bottomMargin">Bottom image margin. (optional)</param>
        /// <param name="orientation">Image orientation. Possible values are: None, Landscape, Portait. (optional)</param>
        /// <param name="skipBlankPages">Skip blank pages flag. (optional)</param>
        /// <param name="width">Image width. (optional)</param>
        /// <param name="height">Image height. (optional)</param>
        /// <param name="xResolution">Horizontal resolution. (optional)</param>
        /// <param name="yResolution">Vertical resolution. (optional)</param>
        /// <param name="pageIndex">Start page to export. (optional)</param>
        /// <param name="pageCount">Number of pages to export. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPdfInStorageToTiffAsyncWithHttpInfo (string name, string outPath, double? brightness = null, string compression = null, string colorDepth = null, int? leftMargin = null, int? rightMargin = null, int? topMargin = null, int? bottomMargin = null, string orientation = null, bool? skipBlankPages = null, int? width = null, int? height = null, int? xResolution = null, int? yResolution = null, int? pageIndex = null, int? pageCount = null, string folder = null);
        /// <summary>
        /// Converts PDF document (located on storage) to XLS format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xls)</param>
        /// <param name="insertBlankColumnAtFirst">Insert blank column at first (optional)</param>
        /// <param name="minimizeTheNumberOfWorksheets">Minimize the number of worksheets (optional)</param>
        /// <param name="scaleFactor">Scale factor (optional)</param>
        /// <param name="uniformWorksheets">Uniform worksheets (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PutPdfInStorageToXlsAsync (string name, string outPath, bool? insertBlankColumnAtFirst = null, bool? minimizeTheNumberOfWorksheets = null, double? scaleFactor = null, bool? uniformWorksheets = null, string folder = null);

        /// <summary>
        /// Converts PDF document (located on storage) to XLS format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xls)</param>
        /// <param name="insertBlankColumnAtFirst">Insert blank column at first (optional)</param>
        /// <param name="minimizeTheNumberOfWorksheets">Minimize the number of worksheets (optional)</param>
        /// <param name="scaleFactor">Scale factor (optional)</param>
        /// <param name="uniformWorksheets">Uniform worksheets (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPdfInStorageToXlsAsyncWithHttpInfo (string name, string outPath, bool? insertBlankColumnAtFirst = null, bool? minimizeTheNumberOfWorksheets = null, double? scaleFactor = null, bool? uniformWorksheets = null, string folder = null);
        /// <summary>
        /// Converts PDF document (located on storage) to XML format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xml)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PutPdfInStorageToXmlAsync (string name, string outPath, string folder = null);

        /// <summary>
        /// Converts PDF document (located on storage) to XML format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xml)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPdfInStorageToXmlAsyncWithHttpInfo (string name, string outPath, string folder = null);
        /// <summary>
        /// Converts PDF document (located on storage) to XPS format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xps)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PutPdfInStorageToXpsAsync (string name, string outPath, string folder = null);

        /// <summary>
        /// Converts PDF document (located on storage) to XPS format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xps)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPdfInStorageToXpsAsyncWithHttpInfo (string name, string outPath, string folder = null);
        /// <summary>
        /// Update privilege document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="privileges">Document privileges.  (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PutPrivilegesAsync (string name, DocumentPrivilege privileges = null, string folder = null);

        /// <summary>
        /// Update privilege document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="privileges">Document privileges.  (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPrivilegesAsyncWithHttpInfo (string name, DocumentPrivilege privileges = null, string folder = null);
        /// <summary>
        /// Convert PS file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.ps)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PutPsInStorageToPdfAsync (string name, string srcPath, string dstFolder = null);

        /// <summary>
        /// Convert PS file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.ps)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPsInStorageToPdfAsyncWithHttpInfo (string name, string srcPath, string dstFolder = null);
        /// <summary>
        /// Create searchable PDF document. Generate OCR layer for images in input PDF document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="lang">language for OCR engine. Possible values: eng, ara, bel, ben, bul, ces, dan, deu, ell, fin, fra, heb, hin, ind, isl, ita, jpn, kor, nld, nor, pol, por, ron, rus, spa, swe, tha, tur, ukr, vie, chi_sim, chi_tra or thier combination e.g. eng,rus  (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PutSearchableDocumentAsync (string name, string storage = null, string folder = null, string lang = null);

        /// <summary>
        /// Create searchable PDF document. Generate OCR layer for images in input PDF document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="lang">language for OCR engine. Possible values: eng, ara, bel, ben, bul, ces, dan, deu, ell, fin, fra, heb, hin, ind, isl, ita, jpn, kor, nld, nor, pol, por, ron, rus, spa, swe, tha, tur, ukr, vie, chi_sim, chi_tra or thier combination e.g. eng,rus  (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutSearchableDocumentAsyncWithHttpInfo (string name, string storage = null, string folder = null, string lang = null);
        /// <summary>
        /// Add/update document property.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="propertyName"></param>
        /// <param name="property"> (optional)</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of DocumentPropertyResponse</returns>
        System.Threading.Tasks.Task<DocumentPropertyResponse> PutSetPropertyAsync (string name, string propertyName, DocumentProperty property = null, string storage = null, string folder = null);

        /// <summary>
        /// Add/update document property.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="propertyName"></param>
        /// <param name="property"> (optional)</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (DocumentPropertyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentPropertyResponse>> PutSetPropertyAsyncWithHttpInfo (string name, string propertyName, DocumentProperty property = null, string storage = null, string folder = null);
        /// <summary>
        /// Convert SVG file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.svg)</param>
        /// <param name="adjustPageSize">Adjust page size (optional)</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PutSvgInStorageToPdfAsync (string name, string srcPath, bool? adjustPageSize = null, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string dstFolder = null);

        /// <summary>
        /// Convert SVG file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.svg)</param>
        /// <param name="adjustPageSize">Adjust page size (optional)</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutSvgInStorageToPdfAsyncWithHttpInfo (string name, string srcPath, bool? adjustPageSize = null, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string dstFolder = null);
        /// <summary>
        /// Update field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fieldName">The name of a field to be updated.</param>
        /// <param name="field">with the field data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of FieldResponse</returns>
        System.Threading.Tasks.Task<FieldResponse> PutUpdateFieldAsync (string name, string fieldName, Field field = null, string storage = null, string folder = null);

        /// <summary>
        /// Update field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fieldName">The name of a field to be updated.</param>
        /// <param name="field">with the field data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (FieldResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FieldResponse>> PutUpdateFieldAsyncWithHttpInfo (string name, string fieldName, Field field = null, string storage = null, string folder = null);
        /// <summary>
        /// Update fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fields">with the fields data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of FieldsResponse</returns>
        System.Threading.Tasks.Task<FieldsResponse> PutUpdateFieldsAsync (string name, Fields fields = null, string storage = null, string folder = null);

        /// <summary>
        /// Update fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fields">with the fields data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (FieldsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FieldsResponse>> PutUpdateFieldsAsyncWithHttpInfo (string name, Fields fields = null, string storage = null, string folder = null);
        /// <summary>
        /// Convert web page to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="url">Source url</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PutWebInStorageToPdfAsync (string name, string url, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string dstFolder = null);

        /// <summary>
        /// Convert web page to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="url">Source url</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutWebInStorageToPdfAsyncWithHttpInfo (string name, string url, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string dstFolder = null);
        /// <summary>
        /// Converts PDF document which contatins XFA form (in request content) to PDF with AcroForm and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PutXfaPdfInRequestToAcroFormAsync (string outPath, System.IO.Stream file = null);

        /// <summary>
        /// Converts PDF document which contatins XFA form (in request content) to PDF with AcroForm and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutXfaPdfInRequestToAcroFormAsyncWithHttpInfo (string outPath, System.IO.Stream file = null);
        /// <summary>
        /// Converts PDF document which contatins XFA form (located on storage) to PDF with AcroForm and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PutXfaPdfInStorageToAcroFormAsync (string name, string outPath, string folder = null);

        /// <summary>
        /// Converts PDF document which contatins XFA form (located on storage) to PDF with AcroForm and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutXfaPdfInStorageToAcroFormAsyncWithHttpInfo (string name, string outPath, string folder = null);
        /// <summary>
        /// Convert XML file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xml)</param>
        /// <param name="xslFilePath">Full XSL source filename (ex. /folder1/folder2/template.xsl) (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PutXmlInStorageToPdfAsync (string name, string srcPath, string xslFilePath = null, string dstFolder = null);

        /// <summary>
        /// Convert XML file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xml)</param>
        /// <param name="xslFilePath">Full XSL source filename (ex. /folder1/folder2/template.xsl) (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutXmlInStorageToPdfAsyncWithHttpInfo (string name, string srcPath, string xslFilePath = null, string dstFolder = null);
        /// <summary>
        /// Convert XPS file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xps)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PutXpsInStorageToPdfAsync (string name, string srcPath, string dstFolder = null);

        /// <summary>
        /// Convert XPS file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xps)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutXpsInStorageToPdfAsyncWithHttpInfo (string name, string srcPath, string dstFolder = null);
        /// <summary>
        /// Convert XslFo file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xpsfo)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> PutXslFoInStorageToPdfAsync (string name, string srcPath, string dstFolder = null);

        /// <summary>
        /// Convert XslFo file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xpsfo)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutXslFoInStorageToPdfAsyncWithHttpInfo (string name, string srcPath, string dstFolder = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PdfApi : IPdfApi
    {
        private Aspose.Pdf.Cloud.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PdfApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PdfApi(string apiKey, string appSid)
            : this(new Configuration(apiKey, appSid ))
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PdfApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PdfApi(Configuration configuration)
        {
            if (configuration == null)
            {
                throw new ArgumentNullException("configuration");
            }
            
            Configuration = configuration;
            ApiClient = new ApiClient(Configuration);           
            ExceptionFactory = Aspose.Pdf.Cloud.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ApiClient ApiClient {get; set;}

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Aspose.Pdf.Cloud.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete document field by name. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fieldName">The field name/</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse DeleteField (string name, string fieldName, string storage = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = DeleteFieldWithHttpInfo(name, fieldName, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete document field by name. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fieldName">The field name/</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > DeleteFieldWithHttpInfo (string name, string fieldName, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->DeleteField");
            // verify the required parameter 'fieldName' is set
            if (fieldName == null)
                throw new ApiException(400, "Missing required parameter 'fieldName' when calling PdfApi->DeleteField");

            var localVarPath = "/pdf/{name}/fields/{fieldName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (fieldName != null) localVarPathParams.Add("fieldName", ApiClient.ParameterToString(fieldName)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Delete document field by name. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fieldName">The field name/</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> DeleteFieldAsync (string name, string fieldName, string storage = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await DeleteFieldAsyncWithHttpInfo(name, fieldName, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete document field by name. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fieldName">The field name/</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> DeleteFieldAsyncWithHttpInfo (string name, string fieldName, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->DeleteField");
            // verify the required parameter 'fieldName' is set
            if (fieldName == null)
                throw new ApiException(400, "Missing required parameter 'fieldName' when calling PdfApi->DeleteField");

            var localVarPath = "/pdf/{name}/fields/{fieldName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (fieldName != null) localVarPathParams.Add("fieldName", ApiClient.ParameterToString(fieldName)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Delete document page by its number. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse DeletePage (string name, int? pageNumber, string storage = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = DeletePageWithHttpInfo(name, pageNumber, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete document page by its number. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > DeletePageWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->DeletePage");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->DeletePage");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Delete document page by its number. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> DeletePageAsync (string name, int? pageNumber, string storage = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await DeletePageAsyncWithHttpInfo(name, pageNumber, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete document page by its number. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> DeletePageAsyncWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->DeletePage");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->DeletePage");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Delete custom document properties. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse DeleteProperties (string name, string storage = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = DeletePropertiesWithHttpInfo(name, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete custom document properties. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > DeletePropertiesWithHttpInfo (string name, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->DeleteProperties");

            var localVarPath = "/pdf/{name}/documentproperties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Delete custom document properties. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> DeletePropertiesAsync (string name, string storage = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await DeletePropertiesAsyncWithHttpInfo(name, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete custom document properties. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> DeletePropertiesAsyncWithHttpInfo (string name, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->DeleteProperties");

            var localVarPath = "/pdf/{name}/documentproperties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Delete document property. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="propertyName"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse DeleteProperty (string name, string propertyName, string storage = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = DeletePropertyWithHttpInfo(name, propertyName, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete document property. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="propertyName"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > DeletePropertyWithHttpInfo (string name, string propertyName, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->DeleteProperty");
            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
                throw new ApiException(400, "Missing required parameter 'propertyName' when calling PdfApi->DeleteProperty");

            var localVarPath = "/pdf/{name}/documentproperties/{propertyName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (propertyName != null) localVarPathParams.Add("propertyName", ApiClient.ParameterToString(propertyName)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProperty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Delete document property. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="propertyName"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> DeletePropertyAsync (string name, string propertyName, string storage = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await DeletePropertyAsyncWithHttpInfo(name, propertyName, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete document property. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="propertyName"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> DeletePropertyAsyncWithHttpInfo (string name, string propertyName, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->DeleteProperty");
            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
                throw new ApiException(400, "Missing required parameter 'propertyName' when calling PdfApi->DeleteProperty");

            var localVarPath = "/pdf/{name}/documentproperties/{propertyName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (propertyName != null) localVarPathParams.Add("propertyName", ApiClient.ParameterToString(propertyName)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProperty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Read common document info or convert to some format if the format specified. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="format">The format to convert. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="outPath">Path to save result (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetDocument (string name, string format = null, string storage = null, string folder = null, string outPath = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetDocumentWithHttpInfo(name, format, storage, folder, outPath);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read common document info or convert to some format if the format specified. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="format">The format to convert. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="outPath">Path to save result (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetDocumentWithHttpInfo (string name, string format = null, string storage = null, string folder = null, string outPath = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetDocument");

            var localVarPath = "/pdf/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (format != null) localVarQueryParams.Add("format", ApiClient.ParameterToString(format)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Read common document info or convert to some format if the format specified. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="format">The format to convert. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="outPath">Path to save result (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetDocumentAsync (string name, string format = null, string storage = null, string folder = null, string outPath = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetDocumentAsyncWithHttpInfo(name, format, storage, folder, outPath);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read common document info or convert to some format if the format specified. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="format">The format to convert. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="outPath">Path to save result (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetDocumentAsyncWithHttpInfo (string name, string format = null, string storage = null, string folder = null, string outPath = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetDocument");

            var localVarPath = "/pdf/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (format != null) localVarQueryParams.Add("format", ApiClient.ParameterToString(format)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Read document attachment info by its index. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="attachmentIndex">The attachment index.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AttachmentResponse</returns>
        public AttachmentResponse GetDocumentAttachmentByIndex (string name, int? attachmentIndex, string storage = null, string folder = null)
        {
             ApiResponse<AttachmentResponse> localVarResponse = GetDocumentAttachmentByIndexWithHttpInfo(name, attachmentIndex, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document attachment info by its index. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="attachmentIndex">The attachment index.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AttachmentResponse</returns>
        public ApiResponse< AttachmentResponse > GetDocumentAttachmentByIndexWithHttpInfo (string name, int? attachmentIndex, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetDocumentAttachmentByIndex");
            // verify the required parameter 'attachmentIndex' is set
            if (attachmentIndex == null)
                throw new ApiException(400, "Missing required parameter 'attachmentIndex' when calling PdfApi->GetDocumentAttachmentByIndex");

            var localVarPath = "/pdf/{name}/attachments/{attachmentIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (attachmentIndex != null) localVarPathParams.Add("attachmentIndex", ApiClient.ParameterToString(attachmentIndex)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentAttachmentByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AttachmentResponse) ApiClient.Deserialize(localVarResponse, typeof(AttachmentResponse)));
        }

        /// <summary>
        /// Read document attachment info by its index. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="attachmentIndex">The attachment index.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AttachmentResponse</returns>
        public async System.Threading.Tasks.Task<AttachmentResponse> GetDocumentAttachmentByIndexAsync (string name, int? attachmentIndex, string storage = null, string folder = null)
        {
             ApiResponse<AttachmentResponse> localVarResponse = await GetDocumentAttachmentByIndexAsyncWithHttpInfo(name, attachmentIndex, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document attachment info by its index. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="attachmentIndex">The attachment index.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AttachmentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AttachmentResponse>> GetDocumentAttachmentByIndexAsyncWithHttpInfo (string name, int? attachmentIndex, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetDocumentAttachmentByIndex");
            // verify the required parameter 'attachmentIndex' is set
            if (attachmentIndex == null)
                throw new ApiException(400, "Missing required parameter 'attachmentIndex' when calling PdfApi->GetDocumentAttachmentByIndex");

            var localVarPath = "/pdf/{name}/attachments/{attachmentIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (attachmentIndex != null) localVarPathParams.Add("attachmentIndex", ApiClient.ParameterToString(attachmentIndex)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentAttachmentByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AttachmentResponse) ApiClient.Deserialize(localVarResponse, typeof(AttachmentResponse)));
        }

        /// <summary>
        /// Read document attachments info. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AttachmentsResponse</returns>
        public AttachmentsResponse GetDocumentAttachments (string name, string storage = null, string folder = null)
        {
             ApiResponse<AttachmentsResponse> localVarResponse = GetDocumentAttachmentsWithHttpInfo(name, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document attachments info. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AttachmentsResponse</returns>
        public ApiResponse< AttachmentsResponse > GetDocumentAttachmentsWithHttpInfo (string name, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetDocumentAttachments");

            var localVarPath = "/pdf/{name}/attachments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentAttachments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AttachmentsResponse) ApiClient.Deserialize(localVarResponse, typeof(AttachmentsResponse)));
        }

        /// <summary>
        /// Read document attachments info. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AttachmentsResponse</returns>
        public async System.Threading.Tasks.Task<AttachmentsResponse> GetDocumentAttachmentsAsync (string name, string storage = null, string folder = null)
        {
             ApiResponse<AttachmentsResponse> localVarResponse = await GetDocumentAttachmentsAsyncWithHttpInfo(name, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document attachments info. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AttachmentsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AttachmentsResponse>> GetDocumentAttachmentsAsyncWithHttpInfo (string name, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetDocumentAttachments");

            var localVarPath = "/pdf/{name}/attachments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentAttachments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AttachmentsResponse) ApiClient.Deserialize(localVarResponse, typeof(AttachmentsResponse)));
        }

        /// <summary>
        /// Read document bookmark/bookmarks (including children). 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="bookmarkPath">The bookmark path. Leave it empty if you want to get all the bookmarks in the document. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetDocumentBookmarks (string name, string bookmarkPath = null, string storage = null, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetDocumentBookmarksWithHttpInfo(name, bookmarkPath, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document bookmark/bookmarks (including children). 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="bookmarkPath">The bookmark path. Leave it empty if you want to get all the bookmarks in the document. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetDocumentBookmarksWithHttpInfo (string name, string bookmarkPath = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetDocumentBookmarks");

            var localVarPath = "/pdf/{name}/bookmarks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (bookmarkPath != null) localVarQueryParams.Add("bookmarkPath", ApiClient.ParameterToString(bookmarkPath)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentBookmarks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Read document bookmark/bookmarks (including children). 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="bookmarkPath">The bookmark path. Leave it empty if you want to get all the bookmarks in the document. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetDocumentBookmarksAsync (string name, string bookmarkPath = null, string storage = null, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetDocumentBookmarksAsyncWithHttpInfo(name, bookmarkPath, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document bookmark/bookmarks (including children). 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="bookmarkPath">The bookmark path. Leave it empty if you want to get all the bookmarks in the document. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetDocumentBookmarksAsyncWithHttpInfo (string name, string bookmarkPath = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetDocumentBookmarks");

            var localVarPath = "/pdf/{name}/bookmarks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (bookmarkPath != null) localVarQueryParams.Add("bookmarkPath", ApiClient.ParameterToString(bookmarkPath)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentBookmarks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Read document properties. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>DocumentPropertiesResponse</returns>
        public DocumentPropertiesResponse GetDocumentProperties (string name, string storage = null, string folder = null)
        {
             ApiResponse<DocumentPropertiesResponse> localVarResponse = GetDocumentPropertiesWithHttpInfo(name, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document properties. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of DocumentPropertiesResponse</returns>
        public ApiResponse< DocumentPropertiesResponse > GetDocumentPropertiesWithHttpInfo (string name, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetDocumentProperties");

            var localVarPath = "/pdf/{name}/documentproperties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentPropertiesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentPropertiesResponse) ApiClient.Deserialize(localVarResponse, typeof(DocumentPropertiesResponse)));
        }

        /// <summary>
        /// Read document properties. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of DocumentPropertiesResponse</returns>
        public async System.Threading.Tasks.Task<DocumentPropertiesResponse> GetDocumentPropertiesAsync (string name, string storage = null, string folder = null)
        {
             ApiResponse<DocumentPropertiesResponse> localVarResponse = await GetDocumentPropertiesAsyncWithHttpInfo(name, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document properties. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (DocumentPropertiesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentPropertiesResponse>> GetDocumentPropertiesAsyncWithHttpInfo (string name, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetDocumentProperties");

            var localVarPath = "/pdf/{name}/documentproperties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentPropertiesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentPropertiesResponse) ApiClient.Deserialize(localVarResponse, typeof(DocumentPropertiesResponse)));
        }

        /// <summary>
        /// Read document property by name. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="propertyName"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>DocumentPropertyResponse</returns>
        public DocumentPropertyResponse GetDocumentProperty (string name, string propertyName, string storage = null, string folder = null)
        {
             ApiResponse<DocumentPropertyResponse> localVarResponse = GetDocumentPropertyWithHttpInfo(name, propertyName, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document property by name. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="propertyName"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of DocumentPropertyResponse</returns>
        public ApiResponse< DocumentPropertyResponse > GetDocumentPropertyWithHttpInfo (string name, string propertyName, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetDocumentProperty");
            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
                throw new ApiException(400, "Missing required parameter 'propertyName' when calling PdfApi->GetDocumentProperty");

            var localVarPath = "/pdf/{name}/documentproperties/{propertyName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (propertyName != null) localVarPathParams.Add("propertyName", ApiClient.ParameterToString(propertyName)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentProperty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentPropertyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentPropertyResponse) ApiClient.Deserialize(localVarResponse, typeof(DocumentPropertyResponse)));
        }

        /// <summary>
        /// Read document property by name. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="propertyName"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of DocumentPropertyResponse</returns>
        public async System.Threading.Tasks.Task<DocumentPropertyResponse> GetDocumentPropertyAsync (string name, string propertyName, string storage = null, string folder = null)
        {
             ApiResponse<DocumentPropertyResponse> localVarResponse = await GetDocumentPropertyAsyncWithHttpInfo(name, propertyName, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document property by name. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="propertyName"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (DocumentPropertyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentPropertyResponse>> GetDocumentPropertyAsyncWithHttpInfo (string name, string propertyName, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetDocumentProperty");
            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
                throw new ApiException(400, "Missing required parameter 'propertyName' when calling PdfApi->GetDocumentProperty");

            var localVarPath = "/pdf/{name}/documentproperties/{propertyName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (propertyName != null) localVarPathParams.Add("propertyName", ApiClient.ParameterToString(propertyName)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentProperty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentPropertyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentPropertyResponse) ApiClient.Deserialize(localVarResponse, typeof(DocumentPropertyResponse)));
        }

        /// <summary>
        /// Download a specific file  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path of the file including the file name and extension e.g. /file.ext</param>
        /// <param name="versionId">File&#39;s version (optional)</param>
        /// <param name="storage">User&#39;s storage name (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetDownload (string path, string versionId = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetDownloadWithHttpInfo(path, versionId, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Download a specific file  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path of the file including the file name and extension e.g. /file.ext</param>
        /// <param name="versionId">File&#39;s version (optional)</param>
        /// <param name="storage">User&#39;s storage name (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetDownloadWithHttpInfo (string path, string versionId = null, string storage = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling PdfApi->GetDownload");

            var localVarPath = "/storage/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarQueryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            if (versionId != null) localVarQueryParams.Add("versionId", ApiClient.ParameterToString(versionId)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDownload", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Download a specific file  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path of the file including the file name and extension e.g. /file.ext</param>
        /// <param name="versionId">File&#39;s version (optional)</param>
        /// <param name="storage">User&#39;s storage name (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetDownloadAsync (string path, string versionId = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetDownloadAsyncWithHttpInfo(path, versionId, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Download a specific file  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path of the file including the file name and extension e.g. /file.ext</param>
        /// <param name="versionId">File&#39;s version (optional)</param>
        /// <param name="storage">User&#39;s storage name (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetDownloadAsyncWithHttpInfo (string path, string versionId = null, string storage = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling PdfApi->GetDownload");

            var localVarPath = "/storage/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarQueryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            if (versionId != null) localVarQueryParams.Add("versionId", ApiClient.ParameterToString(versionId)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDownload", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Download document attachment content by its index. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="attachmentIndex">The attachment index.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetDownloadDocumentAttachmentByIndex (string name, int? attachmentIndex, string storage = null, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetDownloadDocumentAttachmentByIndexWithHttpInfo(name, attachmentIndex, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Download document attachment content by its index. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="attachmentIndex">The attachment index.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetDownloadDocumentAttachmentByIndexWithHttpInfo (string name, int? attachmentIndex, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetDownloadDocumentAttachmentByIndex");
            // verify the required parameter 'attachmentIndex' is set
            if (attachmentIndex == null)
                throw new ApiException(400, "Missing required parameter 'attachmentIndex' when calling PdfApi->GetDownloadDocumentAttachmentByIndex");

            var localVarPath = "/pdf/{name}/attachments/{attachmentIndex}/download";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (attachmentIndex != null) localVarPathParams.Add("attachmentIndex", ApiClient.ParameterToString(attachmentIndex)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDownloadDocumentAttachmentByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Download document attachment content by its index. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="attachmentIndex">The attachment index.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetDownloadDocumentAttachmentByIndexAsync (string name, int? attachmentIndex, string storage = null, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetDownloadDocumentAttachmentByIndexAsyncWithHttpInfo(name, attachmentIndex, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Download document attachment content by its index. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="attachmentIndex">The attachment index.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetDownloadDocumentAttachmentByIndexAsyncWithHttpInfo (string name, int? attachmentIndex, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetDownloadDocumentAttachmentByIndex");
            // verify the required parameter 'attachmentIndex' is set
            if (attachmentIndex == null)
                throw new ApiException(400, "Missing required parameter 'attachmentIndex' when calling PdfApi->GetDownloadDocumentAttachmentByIndex");

            var localVarPath = "/pdf/{name}/attachments/{attachmentIndex}/download";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (attachmentIndex != null) localVarPathParams.Add("attachmentIndex", ApiClient.ParameterToString(attachmentIndex)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDownloadDocumentAttachmentByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert EPUB file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.epub)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetEpubInStorageToPdf (string srcPath)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetEpubInStorageToPdfWithHttpInfo(srcPath);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert EPUB file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.epub)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetEpubInStorageToPdfWithHttpInfo (string srcPath)
        {
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->GetEpubInStorageToPdf");

            var localVarPath = "/pdf/create/epub";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEpubInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert EPUB file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.epub)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetEpubInStorageToPdfAsync (string srcPath)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetEpubInStorageToPdfAsyncWithHttpInfo(srcPath);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert EPUB file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.epub)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetEpubInStorageToPdfAsyncWithHttpInfo (string srcPath)
        {
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->GetEpubInStorageToPdf");

            var localVarPath = "/pdf/create/epub";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEpubInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get document field by name. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fieldName">The field name/</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>FieldResponse</returns>
        public FieldResponse GetField (string name, string fieldName, string storage = null, string folder = null)
        {
             ApiResponse<FieldResponse> localVarResponse = GetFieldWithHttpInfo(name, fieldName, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get document field by name. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fieldName">The field name/</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of FieldResponse</returns>
        public ApiResponse< FieldResponse > GetFieldWithHttpInfo (string name, string fieldName, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetField");
            // verify the required parameter 'fieldName' is set
            if (fieldName == null)
                throw new ApiException(400, "Missing required parameter 'fieldName' when calling PdfApi->GetField");

            var localVarPath = "/pdf/{name}/fields/{fieldName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (fieldName != null) localVarPathParams.Add("fieldName", ApiClient.ParameterToString(fieldName)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldResponse) ApiClient.Deserialize(localVarResponse, typeof(FieldResponse)));
        }

        /// <summary>
        /// Get document field by name. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fieldName">The field name/</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of FieldResponse</returns>
        public async System.Threading.Tasks.Task<FieldResponse> GetFieldAsync (string name, string fieldName, string storage = null, string folder = null)
        {
             ApiResponse<FieldResponse> localVarResponse = await GetFieldAsyncWithHttpInfo(name, fieldName, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get document field by name. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fieldName">The field name/</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (FieldResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FieldResponse>> GetFieldAsyncWithHttpInfo (string name, string fieldName, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetField");
            // verify the required parameter 'fieldName' is set
            if (fieldName == null)
                throw new ApiException(400, "Missing required parameter 'fieldName' when calling PdfApi->GetField");

            var localVarPath = "/pdf/{name}/fields/{fieldName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (fieldName != null) localVarPathParams.Add("fieldName", ApiClient.ParameterToString(fieldName)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldResponse) ApiClient.Deserialize(localVarResponse, typeof(FieldResponse)));
        }

        /// <summary>
        /// Get document fields. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>FieldsResponse</returns>
        public FieldsResponse GetFields (string name, string storage = null, string folder = null)
        {
             ApiResponse<FieldsResponse> localVarResponse = GetFieldsWithHttpInfo(name, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get document fields. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of FieldsResponse</returns>
        public ApiResponse< FieldsResponse > GetFieldsWithHttpInfo (string name, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetFields");

            var localVarPath = "/pdf/{name}/fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldsResponse) ApiClient.Deserialize(localVarResponse, typeof(FieldsResponse)));
        }

        /// <summary>
        /// Get document fields. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of FieldsResponse</returns>
        public async System.Threading.Tasks.Task<FieldsResponse> GetFieldsAsync (string name, string storage = null, string folder = null)
        {
             ApiResponse<FieldsResponse> localVarResponse = await GetFieldsAsyncWithHttpInfo(name, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get document fields. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (FieldsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FieldsResponse>> GetFieldsAsyncWithHttpInfo (string name, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetFields");

            var localVarPath = "/pdf/{name}/fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldsResponse) ApiClient.Deserialize(localVarResponse, typeof(FieldsResponse)));
        }

        /// <summary>
        /// Read page fragment. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="fragmentNumber"></param>
        /// <param name="withEmpty"> (optional)</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>TextItemsResponse</returns>
        public TextItemsResponse GetFragment (string name, int? pageNumber, int? fragmentNumber, string withEmpty = null, string storage = null, string folder = null)
        {
             ApiResponse<TextItemsResponse> localVarResponse = GetFragmentWithHttpInfo(name, pageNumber, fragmentNumber, withEmpty, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read page fragment. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="fragmentNumber"></param>
        /// <param name="withEmpty"> (optional)</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of TextItemsResponse</returns>
        public ApiResponse< TextItemsResponse > GetFragmentWithHttpInfo (string name, int? pageNumber, int? fragmentNumber, string withEmpty = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetFragment");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetFragment");
            // verify the required parameter 'fragmentNumber' is set
            if (fragmentNumber == null)
                throw new ApiException(400, "Missing required parameter 'fragmentNumber' when calling PdfApi->GetFragment");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/fragments/{fragmentNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (fragmentNumber != null) localVarPathParams.Add("fragmentNumber", ApiClient.ParameterToString(fragmentNumber)); // path parameter
            if (withEmpty != null) localVarQueryParams.Add("withEmpty", ApiClient.ParameterToString(withEmpty)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFragment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TextItemsResponse) ApiClient.Deserialize(localVarResponse, typeof(TextItemsResponse)));
        }

        /// <summary>
        /// Read page fragment. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="fragmentNumber"></param>
        /// <param name="withEmpty"> (optional)</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of TextItemsResponse</returns>
        public async System.Threading.Tasks.Task<TextItemsResponse> GetFragmentAsync (string name, int? pageNumber, int? fragmentNumber, string withEmpty = null, string storage = null, string folder = null)
        {
             ApiResponse<TextItemsResponse> localVarResponse = await GetFragmentAsyncWithHttpInfo(name, pageNumber, fragmentNumber, withEmpty, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read page fragment. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="fragmentNumber"></param>
        /// <param name="withEmpty"> (optional)</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (TextItemsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TextItemsResponse>> GetFragmentAsyncWithHttpInfo (string name, int? pageNumber, int? fragmentNumber, string withEmpty = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetFragment");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetFragment");
            // verify the required parameter 'fragmentNumber' is set
            if (fragmentNumber == null)
                throw new ApiException(400, "Missing required parameter 'fragmentNumber' when calling PdfApi->GetFragment");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/fragments/{fragmentNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (fragmentNumber != null) localVarPathParams.Add("fragmentNumber", ApiClient.ParameterToString(fragmentNumber)); // path parameter
            if (withEmpty != null) localVarQueryParams.Add("withEmpty", ApiClient.ParameterToString(withEmpty)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFragment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TextItemsResponse) ApiClient.Deserialize(localVarResponse, typeof(TextItemsResponse)));
        }

        /// <summary>
        /// Read page fragment text format. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="fragmentNumber"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>TextFormatResponse</returns>
        public TextFormatResponse GetFragmentTextFormat (string name, int? pageNumber, int? fragmentNumber, string storage = null, string folder = null)
        {
             ApiResponse<TextFormatResponse> localVarResponse = GetFragmentTextFormatWithHttpInfo(name, pageNumber, fragmentNumber, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read page fragment text format. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="fragmentNumber"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of TextFormatResponse</returns>
        public ApiResponse< TextFormatResponse > GetFragmentTextFormatWithHttpInfo (string name, int? pageNumber, int? fragmentNumber, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetFragmentTextFormat");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetFragmentTextFormat");
            // verify the required parameter 'fragmentNumber' is set
            if (fragmentNumber == null)
                throw new ApiException(400, "Missing required parameter 'fragmentNumber' when calling PdfApi->GetFragmentTextFormat");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/fragments/{fragmentNumber}/textFormat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (fragmentNumber != null) localVarPathParams.Add("fragmentNumber", ApiClient.ParameterToString(fragmentNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFragmentTextFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextFormatResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TextFormatResponse) ApiClient.Deserialize(localVarResponse, typeof(TextFormatResponse)));
        }

        /// <summary>
        /// Read page fragment text format. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="fragmentNumber"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of TextFormatResponse</returns>
        public async System.Threading.Tasks.Task<TextFormatResponse> GetFragmentTextFormatAsync (string name, int? pageNumber, int? fragmentNumber, string storage = null, string folder = null)
        {
             ApiResponse<TextFormatResponse> localVarResponse = await GetFragmentTextFormatAsyncWithHttpInfo(name, pageNumber, fragmentNumber, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read page fragment text format. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="fragmentNumber"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (TextFormatResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TextFormatResponse>> GetFragmentTextFormatAsyncWithHttpInfo (string name, int? pageNumber, int? fragmentNumber, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetFragmentTextFormat");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetFragmentTextFormat");
            // verify the required parameter 'fragmentNumber' is set
            if (fragmentNumber == null)
                throw new ApiException(400, "Missing required parameter 'fragmentNumber' when calling PdfApi->GetFragmentTextFormat");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/fragments/{fragmentNumber}/textFormat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (fragmentNumber != null) localVarPathParams.Add("fragmentNumber", ApiClient.ParameterToString(fragmentNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFragmentTextFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextFormatResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TextFormatResponse) ApiClient.Deserialize(localVarResponse, typeof(TextFormatResponse)));
        }

        /// <summary>
        /// Read page fragments. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="withEmpty"> (optional)</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>TextItemsResponse</returns>
        public TextItemsResponse GetFragments (string name, int? pageNumber, string withEmpty = null, string storage = null, string folder = null)
        {
             ApiResponse<TextItemsResponse> localVarResponse = GetFragmentsWithHttpInfo(name, pageNumber, withEmpty, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read page fragments. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="withEmpty"> (optional)</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of TextItemsResponse</returns>
        public ApiResponse< TextItemsResponse > GetFragmentsWithHttpInfo (string name, int? pageNumber, string withEmpty = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetFragments");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetFragments");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/fragments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (withEmpty != null) localVarQueryParams.Add("withEmpty", ApiClient.ParameterToString(withEmpty)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFragments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TextItemsResponse) ApiClient.Deserialize(localVarResponse, typeof(TextItemsResponse)));
        }

        /// <summary>
        /// Read page fragments. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="withEmpty"> (optional)</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of TextItemsResponse</returns>
        public async System.Threading.Tasks.Task<TextItemsResponse> GetFragmentsAsync (string name, int? pageNumber, string withEmpty = null, string storage = null, string folder = null)
        {
             ApiResponse<TextItemsResponse> localVarResponse = await GetFragmentsAsyncWithHttpInfo(name, pageNumber, withEmpty, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read page fragments. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="withEmpty"> (optional)</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (TextItemsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TextItemsResponse>> GetFragmentsAsyncWithHttpInfo (string name, int? pageNumber, string withEmpty = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetFragments");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetFragments");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/fragments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (withEmpty != null) localVarQueryParams.Add("withEmpty", ApiClient.ParameterToString(withEmpty)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFragments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TextItemsResponse) ApiClient.Deserialize(localVarResponse, typeof(TextItemsResponse)));
        }

        /// <summary>
        /// Convert HTML file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.zip)</param>
        /// <param name="htmlFileName">Name of HTML file in ZIP.</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetHtmlInStorageToPdf (string srcPath, string htmlFileName, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetHtmlInStorageToPdfWithHttpInfo(srcPath, htmlFileName, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert HTML file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.zip)</param>
        /// <param name="htmlFileName">Name of HTML file in ZIP.</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetHtmlInStorageToPdfWithHttpInfo (string srcPath, string htmlFileName, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null)
        {
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->GetHtmlInStorageToPdf");
            // verify the required parameter 'htmlFileName' is set
            if (htmlFileName == null)
                throw new ApiException(400, "Missing required parameter 'htmlFileName' when calling PdfApi->GetHtmlInStorageToPdf");

            var localVarPath = "/pdf/create/html";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (htmlFileName != null) localVarQueryParams.Add("htmlFileName", ApiClient.ParameterToString(htmlFileName)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (isLandscape != null) localVarQueryParams.Add("isLandscape", ApiClient.ParameterToString(isLandscape)); // query parameter
            if (marginLeft != null) localVarQueryParams.Add("marginLeft", ApiClient.ParameterToString(marginLeft)); // query parameter
            if (marginBottom != null) localVarQueryParams.Add("marginBottom", ApiClient.ParameterToString(marginBottom)); // query parameter
            if (marginRight != null) localVarQueryParams.Add("marginRight", ApiClient.ParameterToString(marginRight)); // query parameter
            if (marginTop != null) localVarQueryParams.Add("marginTop", ApiClient.ParameterToString(marginTop)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHtmlInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert HTML file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.zip)</param>
        /// <param name="htmlFileName">Name of HTML file in ZIP.</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetHtmlInStorageToPdfAsync (string srcPath, string htmlFileName, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetHtmlInStorageToPdfAsyncWithHttpInfo(srcPath, htmlFileName, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert HTML file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.zip)</param>
        /// <param name="htmlFileName">Name of HTML file in ZIP.</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetHtmlInStorageToPdfAsyncWithHttpInfo (string srcPath, string htmlFileName, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null)
        {
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->GetHtmlInStorageToPdf");
            // verify the required parameter 'htmlFileName' is set
            if (htmlFileName == null)
                throw new ApiException(400, "Missing required parameter 'htmlFileName' when calling PdfApi->GetHtmlInStorageToPdf");

            var localVarPath = "/pdf/create/html";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (htmlFileName != null) localVarQueryParams.Add("htmlFileName", ApiClient.ParameterToString(htmlFileName)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (isLandscape != null) localVarQueryParams.Add("isLandscape", ApiClient.ParameterToString(isLandscape)); // query parameter
            if (marginLeft != null) localVarQueryParams.Add("marginLeft", ApiClient.ParameterToString(marginLeft)); // query parameter
            if (marginBottom != null) localVarQueryParams.Add("marginBottom", ApiClient.ParameterToString(marginBottom)); // query parameter
            if (marginRight != null) localVarQueryParams.Add("marginRight", ApiClient.ParameterToString(marginRight)); // query parameter
            if (marginTop != null) localVarQueryParams.Add("marginTop", ApiClient.ParameterToString(marginTop)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHtmlInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Extract document image in format specified. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="imageNumber">The image format.</param>
        /// <param name="format">Image format to convert, if not specified the common image data is read. (optional)</param>
        /// <param name="width">The converted image width. (optional, default to 0)</param>
        /// <param name="height">The converted image height. (optional, default to 0)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetImage (string name, int? pageNumber, int? imageNumber, string format = null, int? width = null, int? height = null, string storage = null, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetImageWithHttpInfo(name, pageNumber, imageNumber, format, width, height, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Extract document image in format specified. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="imageNumber">The image format.</param>
        /// <param name="format">Image format to convert, if not specified the common image data is read. (optional)</param>
        /// <param name="width">The converted image width. (optional, default to 0)</param>
        /// <param name="height">The converted image height. (optional, default to 0)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetImageWithHttpInfo (string name, int? pageNumber, int? imageNumber, string format = null, int? width = null, int? height = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetImage");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetImage");
            // verify the required parameter 'imageNumber' is set
            if (imageNumber == null)
                throw new ApiException(400, "Missing required parameter 'imageNumber' when calling PdfApi->GetImage");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/images/{imageNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (imageNumber != null) localVarPathParams.Add("imageNumber", ApiClient.ParameterToString(imageNumber)); // path parameter
            if (format != null) localVarQueryParams.Add("format", ApiClient.ParameterToString(format)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Extract document image in format specified. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="imageNumber">The image format.</param>
        /// <param name="format">Image format to convert, if not specified the common image data is read. (optional)</param>
        /// <param name="width">The converted image width. (optional, default to 0)</param>
        /// <param name="height">The converted image height. (optional, default to 0)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetImageAsync (string name, int? pageNumber, int? imageNumber, string format = null, int? width = null, int? height = null, string storage = null, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetImageAsyncWithHttpInfo(name, pageNumber, imageNumber, format, width, height, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Extract document image in format specified. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="imageNumber">The image format.</param>
        /// <param name="format">Image format to convert, if not specified the common image data is read. (optional)</param>
        /// <param name="width">The converted image width. (optional, default to 0)</param>
        /// <param name="height">The converted image height. (optional, default to 0)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetImageAsyncWithHttpInfo (string name, int? pageNumber, int? imageNumber, string format = null, int? width = null, int? height = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetImage");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetImage");
            // verify the required parameter 'imageNumber' is set
            if (imageNumber == null)
                throw new ApiException(400, "Missing required parameter 'imageNumber' when calling PdfApi->GetImage");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/images/{imageNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (imageNumber != null) localVarPathParams.Add("imageNumber", ApiClient.ParameterToString(imageNumber)); // path parameter
            if (format != null) localVarQueryParams.Add("format", ApiClient.ParameterToString(format)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Read document images. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ImagesResponse</returns>
        public ImagesResponse GetImages (string name, int? pageNumber, string storage = null, string folder = null)
        {
             ApiResponse<ImagesResponse> localVarResponse = GetImagesWithHttpInfo(name, pageNumber, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document images. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of ImagesResponse</returns>
        public ApiResponse< ImagesResponse > GetImagesWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetImages");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetImages");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/images";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetImages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ImagesResponse) ApiClient.Deserialize(localVarResponse, typeof(ImagesResponse)));
        }

        /// <summary>
        /// Read document images. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ImagesResponse</returns>
        public async System.Threading.Tasks.Task<ImagesResponse> GetImagesAsync (string name, int? pageNumber, string storage = null, string folder = null)
        {
             ApiResponse<ImagesResponse> localVarResponse = await GetImagesAsyncWithHttpInfo(name, pageNumber, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document images. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (ImagesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ImagesResponse>> GetImagesAsyncWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetImages");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetImages");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/images";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetImages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ImagesResponse) ApiClient.Deserialize(localVarResponse, typeof(ImagesResponse)));
        }

        /// <summary>
        /// Convert LaTeX file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.tex)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetLaTeXInStorageToPdf (string srcPath)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetLaTeXInStorageToPdfWithHttpInfo(srcPath);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert LaTeX file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.tex)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetLaTeXInStorageToPdfWithHttpInfo (string srcPath)
        {
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->GetLaTeXInStorageToPdf");

            var localVarPath = "/pdf/create/latex";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLaTeXInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert LaTeX file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.tex)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetLaTeXInStorageToPdfAsync (string srcPath)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetLaTeXInStorageToPdfAsyncWithHttpInfo(srcPath);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert LaTeX file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.tex)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetLaTeXInStorageToPdfAsyncWithHttpInfo (string srcPath)
        {
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->GetLaTeXInStorageToPdf");

            var localVarPath = "/pdf/create/latex";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLaTeXInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert MHT file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.mht)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetMhtInStorageToPdf (string srcPath)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetMhtInStorageToPdfWithHttpInfo(srcPath);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert MHT file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.mht)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetMhtInStorageToPdfWithHttpInfo (string srcPath)
        {
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->GetMhtInStorageToPdf");

            var localVarPath = "/pdf/create/mht";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMhtInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert MHT file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.mht)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetMhtInStorageToPdfAsync (string srcPath)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetMhtInStorageToPdfAsyncWithHttpInfo(srcPath);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert MHT file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.mht)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetMhtInStorageToPdfAsyncWithHttpInfo (string srcPath)
        {
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->GetMhtInStorageToPdf");

            var localVarPath = "/pdf/create/mht";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMhtInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert document page to format specified. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="format">The format to convert if specified. (optional)</param>
        /// <param name="width">The converted image width. (optional, default to 0)</param>
        /// <param name="height">The converted image height. (optional, default to 0)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetPage (string name, int? pageNumber, string format = null, int? width = null, int? height = null, string storage = null, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetPageWithHttpInfo(name, pageNumber, format, width, height, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert document page to format specified. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="format">The format to convert if specified. (optional)</param>
        /// <param name="width">The converted image width. (optional, default to 0)</param>
        /// <param name="height">The converted image height. (optional, default to 0)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetPageWithHttpInfo (string name, int? pageNumber, string format = null, int? width = null, int? height = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPage");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPage");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (format != null) localVarQueryParams.Add("format", ApiClient.ParameterToString(format)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert document page to format specified. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="format">The format to convert if specified. (optional)</param>
        /// <param name="width">The converted image width. (optional, default to 0)</param>
        /// <param name="height">The converted image height. (optional, default to 0)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetPageAsync (string name, int? pageNumber, string format = null, int? width = null, int? height = null, string storage = null, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetPageAsyncWithHttpInfo(name, pageNumber, format, width, height, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert document page to format specified. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="format">The format to convert if specified. (optional)</param>
        /// <param name="width">The converted image width. (optional, default to 0)</param>
        /// <param name="height">The converted image height. (optional, default to 0)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPageAsyncWithHttpInfo (string name, int? pageNumber, string format = null, int? width = null, int? height = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPage");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPage");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (format != null) localVarQueryParams.Add("format", ApiClient.ParameterToString(format)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Read document page annotation by its number. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotationNumber">The annotation number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AnnotationResponse</returns>
        public AnnotationResponse GetPageAnnotation (string name, int? pageNumber, int? annotationNumber, string storage = null, string folder = null)
        {
             ApiResponse<AnnotationResponse> localVarResponse = GetPageAnnotationWithHttpInfo(name, pageNumber, annotationNumber, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document page annotation by its number. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotationNumber">The annotation number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AnnotationResponse</returns>
        public ApiResponse< AnnotationResponse > GetPageAnnotationWithHttpInfo (string name, int? pageNumber, int? annotationNumber, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPageAnnotation");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPageAnnotation");
            // verify the required parameter 'annotationNumber' is set
            if (annotationNumber == null)
                throw new ApiException(400, "Missing required parameter 'annotationNumber' when calling PdfApi->GetPageAnnotation");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/{annotationNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (annotationNumber != null) localVarPathParams.Add("annotationNumber", ApiClient.ParameterToString(annotationNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnnotationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnnotationResponse) ApiClient.Deserialize(localVarResponse, typeof(AnnotationResponse)));
        }

        /// <summary>
        /// Read document page annotation by its number. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotationNumber">The annotation number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AnnotationResponse</returns>
        public async System.Threading.Tasks.Task<AnnotationResponse> GetPageAnnotationAsync (string name, int? pageNumber, int? annotationNumber, string storage = null, string folder = null)
        {
             ApiResponse<AnnotationResponse> localVarResponse = await GetPageAnnotationAsyncWithHttpInfo(name, pageNumber, annotationNumber, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document page annotation by its number. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotationNumber">The annotation number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AnnotationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AnnotationResponse>> GetPageAnnotationAsyncWithHttpInfo (string name, int? pageNumber, int? annotationNumber, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPageAnnotation");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPageAnnotation");
            // verify the required parameter 'annotationNumber' is set
            if (annotationNumber == null)
                throw new ApiException(400, "Missing required parameter 'annotationNumber' when calling PdfApi->GetPageAnnotation");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/{annotationNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (annotationNumber != null) localVarPathParams.Add("annotationNumber", ApiClient.ParameterToString(annotationNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnnotationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnnotationResponse) ApiClient.Deserialize(localVarResponse, typeof(AnnotationResponse)));
        }

        /// <summary>
        /// Read documant page annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AnnotationsResponse</returns>
        public AnnotationsResponse GetPageAnnotations (string name, int? pageNumber, string storage = null, string folder = null)
        {
             ApiResponse<AnnotationsResponse> localVarResponse = GetPageAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read documant page annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AnnotationsResponse</returns>
        public ApiResponse< AnnotationsResponse > GetPageAnnotationsWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPageAnnotations");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPageAnnotations");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnnotationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnnotationsResponse) ApiClient.Deserialize(localVarResponse, typeof(AnnotationsResponse)));
        }

        /// <summary>
        /// Read documant page annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AnnotationsResponse</returns>
        public async System.Threading.Tasks.Task<AnnotationsResponse> GetPageAnnotationsAsync (string name, int? pageNumber, string storage = null, string folder = null)
        {
             ApiResponse<AnnotationsResponse> localVarResponse = await GetPageAnnotationsAsyncWithHttpInfo(name, pageNumber, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read documant page annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AnnotationsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AnnotationsResponse>> GetPageAnnotationsAsyncWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPageAnnotations");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPageAnnotations");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnnotationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnnotationsResponse) ApiClient.Deserialize(localVarResponse, typeof(AnnotationsResponse)));
        }

        /// <summary>
        /// Convert document page to Bmp image. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetPageConvertToBmp (string name, int? pageNumber, int? width = null, int? height = null, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetPageConvertToBmpWithHttpInfo(name, pageNumber, width, height, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert document page to Bmp image. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetPageConvertToBmpWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPageConvertToBmp");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPageConvertToBmp");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/bmp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageConvertToBmp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert document page to Bmp image. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetPageConvertToBmpAsync (string name, int? pageNumber, int? width = null, int? height = null, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetPageConvertToBmpAsyncWithHttpInfo(name, pageNumber, width, height, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert document page to Bmp image. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPageConvertToBmpAsyncWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPageConvertToBmp");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPageConvertToBmp");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/bmp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageConvertToBmp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert document page to Emf image. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetPageConvertToEmf (string name, int? pageNumber, int? width = null, int? height = null, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetPageConvertToEmfWithHttpInfo(name, pageNumber, width, height, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert document page to Emf image. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetPageConvertToEmfWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPageConvertToEmf");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPageConvertToEmf");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/emf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageConvertToEmf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert document page to Emf image. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetPageConvertToEmfAsync (string name, int? pageNumber, int? width = null, int? height = null, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetPageConvertToEmfAsyncWithHttpInfo(name, pageNumber, width, height, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert document page to Emf image. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPageConvertToEmfAsyncWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPageConvertToEmf");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPageConvertToEmf");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/emf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageConvertToEmf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert document page to Gif image. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetPageConvertToGif (string name, int? pageNumber, int? width = null, int? height = null, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetPageConvertToGifWithHttpInfo(name, pageNumber, width, height, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert document page to Gif image. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetPageConvertToGifWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPageConvertToGif");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPageConvertToGif");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/gif";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageConvertToGif", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert document page to Gif image. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetPageConvertToGifAsync (string name, int? pageNumber, int? width = null, int? height = null, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetPageConvertToGifAsyncWithHttpInfo(name, pageNumber, width, height, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert document page to Gif image. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPageConvertToGifAsyncWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPageConvertToGif");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPageConvertToGif");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/gif";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageConvertToGif", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert document page to Jpeg image. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetPageConvertToJpeg (string name, int? pageNumber, int? width = null, int? height = null, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetPageConvertToJpegWithHttpInfo(name, pageNumber, width, height, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert document page to Jpeg image. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetPageConvertToJpegWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPageConvertToJpeg");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPageConvertToJpeg");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/jpeg";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageConvertToJpeg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert document page to Jpeg image. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetPageConvertToJpegAsync (string name, int? pageNumber, int? width = null, int? height = null, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetPageConvertToJpegAsyncWithHttpInfo(name, pageNumber, width, height, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert document page to Jpeg image. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPageConvertToJpegAsyncWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPageConvertToJpeg");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPageConvertToJpeg");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/jpeg";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageConvertToJpeg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert document page to Png image. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetPageConvertToPng (string name, int? pageNumber, int? width = null, int? height = null, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetPageConvertToPngWithHttpInfo(name, pageNumber, width, height, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert document page to Png image. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetPageConvertToPngWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPageConvertToPng");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPageConvertToPng");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/png";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageConvertToPng", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert document page to Png image. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetPageConvertToPngAsync (string name, int? pageNumber, int? width = null, int? height = null, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetPageConvertToPngAsyncWithHttpInfo(name, pageNumber, width, height, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert document page to Png image. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPageConvertToPngAsyncWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPageConvertToPng");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPageConvertToPng");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/png";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageConvertToPng", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert document page to Tiff image. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetPageConvertToTiff (string name, int? pageNumber, int? width = null, int? height = null, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetPageConvertToTiffWithHttpInfo(name, pageNumber, width, height, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert document page to Tiff image. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetPageConvertToTiffWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPageConvertToTiff");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPageConvertToTiff");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/tiff";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageConvertToTiff", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert document page to Tiff image. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetPageConvertToTiffAsync (string name, int? pageNumber, int? width = null, int? height = null, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetPageConvertToTiffAsyncWithHttpInfo(name, pageNumber, width, height, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert document page to Tiff image. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPageConvertToTiffAsyncWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPageConvertToTiff");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPageConvertToTiff");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/tiff";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageConvertToTiff", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Read document page link annotation by its index. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="linkIndex">The link index.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>LinkAnnotationResponse</returns>
        public LinkAnnotationResponse GetPageLinkAnnotationByIndex (string name, int? pageNumber, int? linkIndex, string storage = null, string folder = null)
        {
             ApiResponse<LinkAnnotationResponse> localVarResponse = GetPageLinkAnnotationByIndexWithHttpInfo(name, pageNumber, linkIndex, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document page link annotation by its index. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="linkIndex">The link index.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of LinkAnnotationResponse</returns>
        public ApiResponse< LinkAnnotationResponse > GetPageLinkAnnotationByIndexWithHttpInfo (string name, int? pageNumber, int? linkIndex, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPageLinkAnnotationByIndex");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPageLinkAnnotationByIndex");
            // verify the required parameter 'linkIndex' is set
            if (linkIndex == null)
                throw new ApiException(400, "Missing required parameter 'linkIndex' when calling PdfApi->GetPageLinkAnnotationByIndex");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/links/{linkIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (linkIndex != null) localVarPathParams.Add("linkIndex", ApiClient.ParameterToString(linkIndex)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageLinkAnnotationByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LinkAnnotationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LinkAnnotationResponse) ApiClient.Deserialize(localVarResponse, typeof(LinkAnnotationResponse)));
        }

        /// <summary>
        /// Read document page link annotation by its index. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="linkIndex">The link index.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of LinkAnnotationResponse</returns>
        public async System.Threading.Tasks.Task<LinkAnnotationResponse> GetPageLinkAnnotationByIndexAsync (string name, int? pageNumber, int? linkIndex, string storage = null, string folder = null)
        {
             ApiResponse<LinkAnnotationResponse> localVarResponse = await GetPageLinkAnnotationByIndexAsyncWithHttpInfo(name, pageNumber, linkIndex, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document page link annotation by its index. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="linkIndex">The link index.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (LinkAnnotationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LinkAnnotationResponse>> GetPageLinkAnnotationByIndexAsyncWithHttpInfo (string name, int? pageNumber, int? linkIndex, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPageLinkAnnotationByIndex");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPageLinkAnnotationByIndex");
            // verify the required parameter 'linkIndex' is set
            if (linkIndex == null)
                throw new ApiException(400, "Missing required parameter 'linkIndex' when calling PdfApi->GetPageLinkAnnotationByIndex");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/links/{linkIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (linkIndex != null) localVarPathParams.Add("linkIndex", ApiClient.ParameterToString(linkIndex)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageLinkAnnotationByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LinkAnnotationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LinkAnnotationResponse) ApiClient.Deserialize(localVarResponse, typeof(LinkAnnotationResponse)));
        }

        /// <summary>
        /// Read document page link annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>LinkAnnotationsResponse</returns>
        public LinkAnnotationsResponse GetPageLinkAnnotations (string name, int? pageNumber, string storage = null, string folder = null)
        {
             ApiResponse<LinkAnnotationsResponse> localVarResponse = GetPageLinkAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document page link annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of LinkAnnotationsResponse</returns>
        public ApiResponse< LinkAnnotationsResponse > GetPageLinkAnnotationsWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPageLinkAnnotations");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPageLinkAnnotations");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/links";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageLinkAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LinkAnnotationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LinkAnnotationsResponse) ApiClient.Deserialize(localVarResponse, typeof(LinkAnnotationsResponse)));
        }

        /// <summary>
        /// Read document page link annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of LinkAnnotationsResponse</returns>
        public async System.Threading.Tasks.Task<LinkAnnotationsResponse> GetPageLinkAnnotationsAsync (string name, int? pageNumber, string storage = null, string folder = null)
        {
             ApiResponse<LinkAnnotationsResponse> localVarResponse = await GetPageLinkAnnotationsAsyncWithHttpInfo(name, pageNumber, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document page link annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (LinkAnnotationsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LinkAnnotationsResponse>> GetPageLinkAnnotationsAsyncWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPageLinkAnnotations");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPageLinkAnnotations");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/links";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageLinkAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LinkAnnotationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LinkAnnotationsResponse) ApiClient.Deserialize(localVarResponse, typeof(LinkAnnotationsResponse)));
        }

        /// <summary>
        /// Read page text items. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">Number of page (starting from 1).</param>
        /// <param name="X"></param>
        /// <param name="Y"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="format">List of formats for search. (optional)</param>
        /// <param name="regex">Formats are specified as a regular expression. (optional)</param>
        /// <param name="splitRects">Split result fragments (default is true). (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>TextRectsResponse</returns>
        public TextRectsResponse GetPageText (string name, int? pageNumber, int? X, int? Y, int? width, int? height, List<string> format = null, string regex = null, bool? splitRects = null, string folder = null)
        {
             ApiResponse<TextRectsResponse> localVarResponse = GetPageTextWithHttpInfo(name, pageNumber, X, Y, width, height, format, regex, splitRects, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read page text items. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">Number of page (starting from 1).</param>
        /// <param name="X"></param>
        /// <param name="Y"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="format">List of formats for search. (optional)</param>
        /// <param name="regex">Formats are specified as a regular expression. (optional)</param>
        /// <param name="splitRects">Split result fragments (default is true). (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of TextRectsResponse</returns>
        public ApiResponse< TextRectsResponse > GetPageTextWithHttpInfo (string name, int? pageNumber, int? X, int? Y, int? width, int? height, List<string> format = null, string regex = null, bool? splitRects = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPageText");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPageText");
            // verify the required parameter 'X' is set
            if (X == null)
                throw new ApiException(400, "Missing required parameter 'X' when calling PdfApi->GetPageText");
            // verify the required parameter 'Y' is set
            if (Y == null)
                throw new ApiException(400, "Missing required parameter 'Y' when calling PdfApi->GetPageText");
            // verify the required parameter 'width' is set
            if (width == null)
                throw new ApiException(400, "Missing required parameter 'width' when calling PdfApi->GetPageText");
            // verify the required parameter 'height' is set
            if (height == null)
                throw new ApiException(400, "Missing required parameter 'height' when calling PdfApi->GetPageText");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/text";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (format != null) localVarQueryParams.Add("format", ApiClient.ParameterToString(format)); // query parameter
            if (regex != null) localVarQueryParams.Add("regex", ApiClient.ParameterToString(regex)); // query parameter
            if (X != null) localVarQueryParams.Add("X", ApiClient.ParameterToString(X)); // query parameter
            if (Y != null) localVarQueryParams.Add("Y", ApiClient.ParameterToString(Y)); // query parameter
            if (width != null) localVarQueryParams.Add("Width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("Height", ApiClient.ParameterToString(height)); // query parameter
            if (splitRects != null) localVarQueryParams.Add("splitRects", ApiClient.ParameterToString(splitRects)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageText", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextRectsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TextRectsResponse) ApiClient.Deserialize(localVarResponse, typeof(TextRectsResponse)));
        }

        /// <summary>
        /// Read page text items. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">Number of page (starting from 1).</param>
        /// <param name="X"></param>
        /// <param name="Y"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="format">List of formats for search. (optional)</param>
        /// <param name="regex">Formats are specified as a regular expression. (optional)</param>
        /// <param name="splitRects">Split result fragments (default is true). (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of TextRectsResponse</returns>
        public async System.Threading.Tasks.Task<TextRectsResponse> GetPageTextAsync (string name, int? pageNumber, int? X, int? Y, int? width, int? height, List<string> format = null, string regex = null, bool? splitRects = null, string folder = null)
        {
             ApiResponse<TextRectsResponse> localVarResponse = await GetPageTextAsyncWithHttpInfo(name, pageNumber, X, Y, width, height, format, regex, splitRects, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read page text items. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">Number of page (starting from 1).</param>
        /// <param name="X"></param>
        /// <param name="Y"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="format">List of formats for search. (optional)</param>
        /// <param name="regex">Formats are specified as a regular expression. (optional)</param>
        /// <param name="splitRects">Split result fragments (default is true). (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (TextRectsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TextRectsResponse>> GetPageTextAsyncWithHttpInfo (string name, int? pageNumber, int? X, int? Y, int? width, int? height, List<string> format = null, string regex = null, bool? splitRects = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPageText");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPageText");
            // verify the required parameter 'X' is set
            if (X == null)
                throw new ApiException(400, "Missing required parameter 'X' when calling PdfApi->GetPageText");
            // verify the required parameter 'Y' is set
            if (Y == null)
                throw new ApiException(400, "Missing required parameter 'Y' when calling PdfApi->GetPageText");
            // verify the required parameter 'width' is set
            if (width == null)
                throw new ApiException(400, "Missing required parameter 'width' when calling PdfApi->GetPageText");
            // verify the required parameter 'height' is set
            if (height == null)
                throw new ApiException(400, "Missing required parameter 'height' when calling PdfApi->GetPageText");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/text";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (format != null) localVarQueryParams.Add("format", ApiClient.ParameterToString(format)); // query parameter
            if (regex != null) localVarQueryParams.Add("regex", ApiClient.ParameterToString(regex)); // query parameter
            if (X != null) localVarQueryParams.Add("X", ApiClient.ParameterToString(X)); // query parameter
            if (Y != null) localVarQueryParams.Add("Y", ApiClient.ParameterToString(Y)); // query parameter
            if (width != null) localVarQueryParams.Add("Width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("Height", ApiClient.ParameterToString(height)); // query parameter
            if (splitRects != null) localVarQueryParams.Add("splitRects", ApiClient.ParameterToString(splitRects)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageText", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextRectsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TextRectsResponse) ApiClient.Deserialize(localVarResponse, typeof(TextRectsResponse)));
        }

        /// <summary>
        /// Read page text items. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="withEmpty"> (optional)</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>TextItemsResponse</returns>
        public TextItemsResponse GetPageTextItems (string name, int? pageNumber, string withEmpty = null, string storage = null, string folder = null)
        {
             ApiResponse<TextItemsResponse> localVarResponse = GetPageTextItemsWithHttpInfo(name, pageNumber, withEmpty, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read page text items. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="withEmpty"> (optional)</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of TextItemsResponse</returns>
        public ApiResponse< TextItemsResponse > GetPageTextItemsWithHttpInfo (string name, int? pageNumber, string withEmpty = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPageTextItems");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPageTextItems");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/textItems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (withEmpty != null) localVarQueryParams.Add("withEmpty", ApiClient.ParameterToString(withEmpty)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageTextItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TextItemsResponse) ApiClient.Deserialize(localVarResponse, typeof(TextItemsResponse)));
        }

        /// <summary>
        /// Read page text items. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="withEmpty"> (optional)</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of TextItemsResponse</returns>
        public async System.Threading.Tasks.Task<TextItemsResponse> GetPageTextItemsAsync (string name, int? pageNumber, string withEmpty = null, string storage = null, string folder = null)
        {
             ApiResponse<TextItemsResponse> localVarResponse = await GetPageTextItemsAsyncWithHttpInfo(name, pageNumber, withEmpty, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read page text items. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="withEmpty"> (optional)</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (TextItemsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TextItemsResponse>> GetPageTextItemsAsyncWithHttpInfo (string name, int? pageNumber, string withEmpty = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPageTextItems");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPageTextItems");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/textItems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (withEmpty != null) localVarQueryParams.Add("withEmpty", ApiClient.ParameterToString(withEmpty)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageTextItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TextItemsResponse) ApiClient.Deserialize(localVarResponse, typeof(TextItemsResponse)));
        }

        /// <summary>
        /// Read document pages info. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>DocumentPagesResponse</returns>
        public DocumentPagesResponse GetPages (string name, string storage = null, string folder = null)
        {
             ApiResponse<DocumentPagesResponse> localVarResponse = GetPagesWithHttpInfo(name, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document pages info. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of DocumentPagesResponse</returns>
        public ApiResponse< DocumentPagesResponse > GetPagesWithHttpInfo (string name, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPages");

            var localVarPath = "/pdf/{name}/pages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentPagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentPagesResponse) ApiClient.Deserialize(localVarResponse, typeof(DocumentPagesResponse)));
        }

        /// <summary>
        /// Read document pages info. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of DocumentPagesResponse</returns>
        public async System.Threading.Tasks.Task<DocumentPagesResponse> GetPagesAsync (string name, string storage = null, string folder = null)
        {
             ApiResponse<DocumentPagesResponse> localVarResponse = await GetPagesAsyncWithHttpInfo(name, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document pages info. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (DocumentPagesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentPagesResponse>> GetPagesAsyncWithHttpInfo (string name, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPages");

            var localVarPath = "/pdf/{name}/pages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentPagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentPagesResponse) ApiClient.Deserialize(localVarResponse, typeof(DocumentPagesResponse)));
        }

        /// <summary>
        /// Convert PCL file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.pcl)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetPclInStorageToPdf (string srcPath)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetPclInStorageToPdfWithHttpInfo(srcPath);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert PCL file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.pcl)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetPclInStorageToPdfWithHttpInfo (string srcPath)
        {
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->GetPclInStorageToPdf");

            var localVarPath = "/pdf/create/pcl";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPclInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert PCL file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.pcl)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetPclInStorageToPdfAsync (string srcPath)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetPclInStorageToPdfAsyncWithHttpInfo(srcPath);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert PCL file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.pcl)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPclInStorageToPdfAsyncWithHttpInfo (string srcPath)
        {
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->GetPclInStorageToPdf");

            var localVarPath = "/pdf/create/pcl";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPclInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to DOC format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="addReturnToLineEnd">Add return to line end. (optional)</param>
        /// <param name="format">Allows to specify .doc or .docx file format. (optional)</param>
        /// <param name="imageResolutionX">Image resolution X. (optional)</param>
        /// <param name="imageResolutionY">Image resolution Y. (optional)</param>
        /// <param name="maxDistanceBetweenTextLines">Max distance between text lines. (optional)</param>
        /// <param name="mode">Allows to control how a PDF document is converted into a word processing document. (optional)</param>
        /// <param name="recognizeBullets">Recognize bullets. (optional)</param>
        /// <param name="relativeHorizontalProximity">Relative horizontal proximity. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetPdfInStorageToDoc (string name, bool? addReturnToLineEnd = null, string format = null, int? imageResolutionX = null, int? imageResolutionY = null, int? maxDistanceBetweenTextLines = null, string mode = null, bool? recognizeBullets = null, double? relativeHorizontalProximity = null, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetPdfInStorageToDocWithHttpInfo(name, addReturnToLineEnd, format, imageResolutionX, imageResolutionY, maxDistanceBetweenTextLines, mode, recognizeBullets, relativeHorizontalProximity, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (located on storage) to DOC format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="addReturnToLineEnd">Add return to line end. (optional)</param>
        /// <param name="format">Allows to specify .doc or .docx file format. (optional)</param>
        /// <param name="imageResolutionX">Image resolution X. (optional)</param>
        /// <param name="imageResolutionY">Image resolution Y. (optional)</param>
        /// <param name="maxDistanceBetweenTextLines">Max distance between text lines. (optional)</param>
        /// <param name="mode">Allows to control how a PDF document is converted into a word processing document. (optional)</param>
        /// <param name="recognizeBullets">Recognize bullets. (optional)</param>
        /// <param name="relativeHorizontalProximity">Relative horizontal proximity. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetPdfInStorageToDocWithHttpInfo (string name, bool? addReturnToLineEnd = null, string format = null, int? imageResolutionX = null, int? imageResolutionY = null, int? maxDistanceBetweenTextLines = null, string mode = null, bool? recognizeBullets = null, double? relativeHorizontalProximity = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPdfInStorageToDoc");

            var localVarPath = "/pdf/{name}/convert/doc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (addReturnToLineEnd != null) localVarQueryParams.Add("addReturnToLineEnd", ApiClient.ParameterToString(addReturnToLineEnd)); // query parameter
            if (format != null) localVarQueryParams.Add("format", ApiClient.ParameterToString(format)); // query parameter
            if (imageResolutionX != null) localVarQueryParams.Add("imageResolutionX", ApiClient.ParameterToString(imageResolutionX)); // query parameter
            if (imageResolutionY != null) localVarQueryParams.Add("imageResolutionY", ApiClient.ParameterToString(imageResolutionY)); // query parameter
            if (maxDistanceBetweenTextLines != null) localVarQueryParams.Add("maxDistanceBetweenTextLines", ApiClient.ParameterToString(maxDistanceBetweenTextLines)); // query parameter
            if (mode != null) localVarQueryParams.Add("mode", ApiClient.ParameterToString(mode)); // query parameter
            if (recognizeBullets != null) localVarQueryParams.Add("recognizeBullets", ApiClient.ParameterToString(recognizeBullets)); // query parameter
            if (relativeHorizontalProximity != null) localVarQueryParams.Add("relativeHorizontalProximity", ApiClient.ParameterToString(relativeHorizontalProximity)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfInStorageToDoc", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to DOC format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="addReturnToLineEnd">Add return to line end. (optional)</param>
        /// <param name="format">Allows to specify .doc or .docx file format. (optional)</param>
        /// <param name="imageResolutionX">Image resolution X. (optional)</param>
        /// <param name="imageResolutionY">Image resolution Y. (optional)</param>
        /// <param name="maxDistanceBetweenTextLines">Max distance between text lines. (optional)</param>
        /// <param name="mode">Allows to control how a PDF document is converted into a word processing document. (optional)</param>
        /// <param name="recognizeBullets">Recognize bullets. (optional)</param>
        /// <param name="relativeHorizontalProximity">Relative horizontal proximity. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetPdfInStorageToDocAsync (string name, bool? addReturnToLineEnd = null, string format = null, int? imageResolutionX = null, int? imageResolutionY = null, int? maxDistanceBetweenTextLines = null, string mode = null, bool? recognizeBullets = null, double? relativeHorizontalProximity = null, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetPdfInStorageToDocAsyncWithHttpInfo(name, addReturnToLineEnd, format, imageResolutionX, imageResolutionY, maxDistanceBetweenTextLines, mode, recognizeBullets, relativeHorizontalProximity, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (located on storage) to DOC format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="addReturnToLineEnd">Add return to line end. (optional)</param>
        /// <param name="format">Allows to specify .doc or .docx file format. (optional)</param>
        /// <param name="imageResolutionX">Image resolution X. (optional)</param>
        /// <param name="imageResolutionY">Image resolution Y. (optional)</param>
        /// <param name="maxDistanceBetweenTextLines">Max distance between text lines. (optional)</param>
        /// <param name="mode">Allows to control how a PDF document is converted into a word processing document. (optional)</param>
        /// <param name="recognizeBullets">Recognize bullets. (optional)</param>
        /// <param name="relativeHorizontalProximity">Relative horizontal proximity. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPdfInStorageToDocAsyncWithHttpInfo (string name, bool? addReturnToLineEnd = null, string format = null, int? imageResolutionX = null, int? imageResolutionY = null, int? maxDistanceBetweenTextLines = null, string mode = null, bool? recognizeBullets = null, double? relativeHorizontalProximity = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPdfInStorageToDoc");

            var localVarPath = "/pdf/{name}/convert/doc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (addReturnToLineEnd != null) localVarQueryParams.Add("addReturnToLineEnd", ApiClient.ParameterToString(addReturnToLineEnd)); // query parameter
            if (format != null) localVarQueryParams.Add("format", ApiClient.ParameterToString(format)); // query parameter
            if (imageResolutionX != null) localVarQueryParams.Add("imageResolutionX", ApiClient.ParameterToString(imageResolutionX)); // query parameter
            if (imageResolutionY != null) localVarQueryParams.Add("imageResolutionY", ApiClient.ParameterToString(imageResolutionY)); // query parameter
            if (maxDistanceBetweenTextLines != null) localVarQueryParams.Add("maxDistanceBetweenTextLines", ApiClient.ParameterToString(maxDistanceBetweenTextLines)); // query parameter
            if (mode != null) localVarQueryParams.Add("mode", ApiClient.ParameterToString(mode)); // query parameter
            if (recognizeBullets != null) localVarQueryParams.Add("recognizeBullets", ApiClient.ParameterToString(recognizeBullets)); // query parameter
            if (relativeHorizontalProximity != null) localVarQueryParams.Add("relativeHorizontalProximity", ApiClient.ParameterToString(relativeHorizontalProximity)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfInStorageToDoc", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to EPUB format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="contentRecognitionMode">Рroperty tunes conversion for this or that desirable method of recognition of content. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetPdfInStorageToEpub (string name, string contentRecognitionMode = null, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetPdfInStorageToEpubWithHttpInfo(name, contentRecognitionMode, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (located on storage) to EPUB format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="contentRecognitionMode">Рroperty tunes conversion for this or that desirable method of recognition of content. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetPdfInStorageToEpubWithHttpInfo (string name, string contentRecognitionMode = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPdfInStorageToEpub");

            var localVarPath = "/pdf/{name}/convert/epub";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (contentRecognitionMode != null) localVarQueryParams.Add("contentRecognitionMode", ApiClient.ParameterToString(contentRecognitionMode)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfInStorageToEpub", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to EPUB format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="contentRecognitionMode">Рroperty tunes conversion for this or that desirable method of recognition of content. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetPdfInStorageToEpubAsync (string name, string contentRecognitionMode = null, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetPdfInStorageToEpubAsyncWithHttpInfo(name, contentRecognitionMode, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (located on storage) to EPUB format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="contentRecognitionMode">Рroperty tunes conversion for this or that desirable method of recognition of content. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPdfInStorageToEpubAsyncWithHttpInfo (string name, string contentRecognitionMode = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPdfInStorageToEpub");

            var localVarPath = "/pdf/{name}/convert/epub";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (contentRecognitionMode != null) localVarQueryParams.Add("contentRecognitionMode", ApiClient.ParameterToString(contentRecognitionMode)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfInStorageToEpub", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to Html format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="additionalMarginWidthInPoints">Defines width of margin that will be forcibly left around that output HTML-areas. (optional)</param>
        /// <param name="compressSvgGraphicsIfAny">The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)</param>
        /// <param name="convertMarkedContentToLayers">If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)</param>
        /// <param name="defaultFontName">Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)</param>
        /// <param name="documentType">Result document type. (optional)</param>
        /// <param name="fixedLayout">The value indicating whether that HTML is created as fixed layout. (optional)</param>
        /// <param name="imageResolution">Resolution for image rendering. (optional)</param>
        /// <param name="minimalLineWidth">This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)</param>
        /// <param name="preventGlyphsGrouping">This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)</param>
        /// <param name="splitCssIntoPages">When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)</param>
        /// <param name="splitIntoPages">The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)</param>
        /// <param name="useZOrder">If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)</param>
        /// <param name="antialiasingProcessing">The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)</param>
        /// <param name="cssClassNamesPrefix">When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)</param>
        /// <param name="explicitListOfSavedPages">With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)</param>
        /// <param name="fontEncodingStrategy">Defines encoding special rule to tune PDF decoding for current document. (optional)</param>
        /// <param name="fontSavingMode">Defines font saving mode that will be used during saving of PDF to desirable format. (optional)</param>
        /// <param name="htmlMarkupGenerationMode">Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)</param>
        /// <param name="lettersPositioningMethod">The mode of positioning of letters in words in result HTML. (optional)</param>
        /// <param name="pagesFlowTypeDependsOnViewersScreenSize">If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)</param>
        /// <param name="partsEmbeddingMode">It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)</param>
        /// <param name="rasterImagesSavingMode">Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)</param>
        /// <param name="removeEmptyAreasOnTopAndBottom">Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)</param>
        /// <param name="saveShadowedTextsAsTransparentTexts">Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)</param>
        /// <param name="saveTransparentTexts">Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)</param>
        /// <param name="specialFolderForAllImages">The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="specialFolderForSvgImages">The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="trySaveTextUnderliningAndStrikeoutingInCss">PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetPdfInStorageToHtml (string name, int? additionalMarginWidthInPoints = null, bool? compressSvgGraphicsIfAny = null, bool? convertMarkedContentToLayers = null, string defaultFontName = null, string documentType = null, bool? fixedLayout = null, int? imageResolution = null, int? minimalLineWidth = null, bool? preventGlyphsGrouping = null, bool? splitCssIntoPages = null, bool? splitIntoPages = null, bool? useZOrder = null, string antialiasingProcessing = null, string cssClassNamesPrefix = null, List<int?> explicitListOfSavedPages = null, string fontEncodingStrategy = null, string fontSavingMode = null, string htmlMarkupGenerationMode = null, string lettersPositioningMethod = null, bool? pagesFlowTypeDependsOnViewersScreenSize = null, string partsEmbeddingMode = null, string rasterImagesSavingMode = null, bool? removeEmptyAreasOnTopAndBottom = null, bool? saveShadowedTextsAsTransparentTexts = null, bool? saveTransparentTexts = null, string specialFolderForAllImages = null, string specialFolderForSvgImages = null, bool? trySaveTextUnderliningAndStrikeoutingInCss = null, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetPdfInStorageToHtmlWithHttpInfo(name, additionalMarginWidthInPoints, compressSvgGraphicsIfAny, convertMarkedContentToLayers, defaultFontName, documentType, fixedLayout, imageResolution, minimalLineWidth, preventGlyphsGrouping, splitCssIntoPages, splitIntoPages, useZOrder, antialiasingProcessing, cssClassNamesPrefix, explicitListOfSavedPages, fontEncodingStrategy, fontSavingMode, htmlMarkupGenerationMode, lettersPositioningMethod, pagesFlowTypeDependsOnViewersScreenSize, partsEmbeddingMode, rasterImagesSavingMode, removeEmptyAreasOnTopAndBottom, saveShadowedTextsAsTransparentTexts, saveTransparentTexts, specialFolderForAllImages, specialFolderForSvgImages, trySaveTextUnderliningAndStrikeoutingInCss, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (located on storage) to Html format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="additionalMarginWidthInPoints">Defines width of margin that will be forcibly left around that output HTML-areas. (optional)</param>
        /// <param name="compressSvgGraphicsIfAny">The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)</param>
        /// <param name="convertMarkedContentToLayers">If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)</param>
        /// <param name="defaultFontName">Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)</param>
        /// <param name="documentType">Result document type. (optional)</param>
        /// <param name="fixedLayout">The value indicating whether that HTML is created as fixed layout. (optional)</param>
        /// <param name="imageResolution">Resolution for image rendering. (optional)</param>
        /// <param name="minimalLineWidth">This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)</param>
        /// <param name="preventGlyphsGrouping">This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)</param>
        /// <param name="splitCssIntoPages">When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)</param>
        /// <param name="splitIntoPages">The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)</param>
        /// <param name="useZOrder">If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)</param>
        /// <param name="antialiasingProcessing">The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)</param>
        /// <param name="cssClassNamesPrefix">When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)</param>
        /// <param name="explicitListOfSavedPages">With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)</param>
        /// <param name="fontEncodingStrategy">Defines encoding special rule to tune PDF decoding for current document. (optional)</param>
        /// <param name="fontSavingMode">Defines font saving mode that will be used during saving of PDF to desirable format. (optional)</param>
        /// <param name="htmlMarkupGenerationMode">Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)</param>
        /// <param name="lettersPositioningMethod">The mode of positioning of letters in words in result HTML. (optional)</param>
        /// <param name="pagesFlowTypeDependsOnViewersScreenSize">If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)</param>
        /// <param name="partsEmbeddingMode">It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)</param>
        /// <param name="rasterImagesSavingMode">Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)</param>
        /// <param name="removeEmptyAreasOnTopAndBottom">Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)</param>
        /// <param name="saveShadowedTextsAsTransparentTexts">Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)</param>
        /// <param name="saveTransparentTexts">Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)</param>
        /// <param name="specialFolderForAllImages">The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="specialFolderForSvgImages">The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="trySaveTextUnderliningAndStrikeoutingInCss">PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetPdfInStorageToHtmlWithHttpInfo (string name, int? additionalMarginWidthInPoints = null, bool? compressSvgGraphicsIfAny = null, bool? convertMarkedContentToLayers = null, string defaultFontName = null, string documentType = null, bool? fixedLayout = null, int? imageResolution = null, int? minimalLineWidth = null, bool? preventGlyphsGrouping = null, bool? splitCssIntoPages = null, bool? splitIntoPages = null, bool? useZOrder = null, string antialiasingProcessing = null, string cssClassNamesPrefix = null, List<int?> explicitListOfSavedPages = null, string fontEncodingStrategy = null, string fontSavingMode = null, string htmlMarkupGenerationMode = null, string lettersPositioningMethod = null, bool? pagesFlowTypeDependsOnViewersScreenSize = null, string partsEmbeddingMode = null, string rasterImagesSavingMode = null, bool? removeEmptyAreasOnTopAndBottom = null, bool? saveShadowedTextsAsTransparentTexts = null, bool? saveTransparentTexts = null, string specialFolderForAllImages = null, string specialFolderForSvgImages = null, bool? trySaveTextUnderliningAndStrikeoutingInCss = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPdfInStorageToHtml");

            var localVarPath = "/pdf/{name}/convert/html";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (additionalMarginWidthInPoints != null) localVarQueryParams.Add("additionalMarginWidthInPoints", ApiClient.ParameterToString(additionalMarginWidthInPoints)); // query parameter
            if (compressSvgGraphicsIfAny != null) localVarQueryParams.Add("compressSvgGraphicsIfAny", ApiClient.ParameterToString(compressSvgGraphicsIfAny)); // query parameter
            if (convertMarkedContentToLayers != null) localVarQueryParams.Add("convertMarkedContentToLayers", ApiClient.ParameterToString(convertMarkedContentToLayers)); // query parameter
            if (defaultFontName != null) localVarQueryParams.Add("defaultFontName", ApiClient.ParameterToString(defaultFontName)); // query parameter
            if (documentType != null) localVarQueryParams.Add("documentType", ApiClient.ParameterToString(documentType)); // query parameter
            if (fixedLayout != null) localVarQueryParams.Add("fixedLayout", ApiClient.ParameterToString(fixedLayout)); // query parameter
            if (imageResolution != null) localVarQueryParams.Add("imageResolution", ApiClient.ParameterToString(imageResolution)); // query parameter
            if (minimalLineWidth != null) localVarQueryParams.Add("minimalLineWidth", ApiClient.ParameterToString(minimalLineWidth)); // query parameter
            if (preventGlyphsGrouping != null) localVarQueryParams.Add("preventGlyphsGrouping", ApiClient.ParameterToString(preventGlyphsGrouping)); // query parameter
            if (splitCssIntoPages != null) localVarQueryParams.Add("splitCssIntoPages", ApiClient.ParameterToString(splitCssIntoPages)); // query parameter
            if (splitIntoPages != null) localVarQueryParams.Add("splitIntoPages", ApiClient.ParameterToString(splitIntoPages)); // query parameter
            if (useZOrder != null) localVarQueryParams.Add("useZOrder", ApiClient.ParameterToString(useZOrder)); // query parameter
            if (antialiasingProcessing != null) localVarQueryParams.Add("antialiasingProcessing", ApiClient.ParameterToString(antialiasingProcessing)); // query parameter
            if (cssClassNamesPrefix != null) localVarQueryParams.Add("cssClassNamesPrefix", ApiClient.ParameterToString(cssClassNamesPrefix)); // query parameter
            if (explicitListOfSavedPages != null) localVarQueryParams.Add("explicitListOfSavedPages", ApiClient.ParameterToString(explicitListOfSavedPages)); // query parameter
            if (fontEncodingStrategy != null) localVarQueryParams.Add("fontEncodingStrategy", ApiClient.ParameterToString(fontEncodingStrategy)); // query parameter
            if (fontSavingMode != null) localVarQueryParams.Add("fontSavingMode", ApiClient.ParameterToString(fontSavingMode)); // query parameter
            if (htmlMarkupGenerationMode != null) localVarQueryParams.Add("htmlMarkupGenerationMode", ApiClient.ParameterToString(htmlMarkupGenerationMode)); // query parameter
            if (lettersPositioningMethod != null) localVarQueryParams.Add("lettersPositioningMethod", ApiClient.ParameterToString(lettersPositioningMethod)); // query parameter
            if (pagesFlowTypeDependsOnViewersScreenSize != null) localVarQueryParams.Add("pagesFlowTypeDependsOnViewersScreenSize", ApiClient.ParameterToString(pagesFlowTypeDependsOnViewersScreenSize)); // query parameter
            if (partsEmbeddingMode != null) localVarQueryParams.Add("partsEmbeddingMode", ApiClient.ParameterToString(partsEmbeddingMode)); // query parameter
            if (rasterImagesSavingMode != null) localVarQueryParams.Add("rasterImagesSavingMode", ApiClient.ParameterToString(rasterImagesSavingMode)); // query parameter
            if (removeEmptyAreasOnTopAndBottom != null) localVarQueryParams.Add("removeEmptyAreasOnTopAndBottom", ApiClient.ParameterToString(removeEmptyAreasOnTopAndBottom)); // query parameter
            if (saveShadowedTextsAsTransparentTexts != null) localVarQueryParams.Add("saveShadowedTextsAsTransparentTexts", ApiClient.ParameterToString(saveShadowedTextsAsTransparentTexts)); // query parameter
            if (saveTransparentTexts != null) localVarQueryParams.Add("saveTransparentTexts", ApiClient.ParameterToString(saveTransparentTexts)); // query parameter
            if (specialFolderForAllImages != null) localVarQueryParams.Add("specialFolderForAllImages", ApiClient.ParameterToString(specialFolderForAllImages)); // query parameter
            if (specialFolderForSvgImages != null) localVarQueryParams.Add("specialFolderForSvgImages", ApiClient.ParameterToString(specialFolderForSvgImages)); // query parameter
            if (trySaveTextUnderliningAndStrikeoutingInCss != null) localVarQueryParams.Add("trySaveTextUnderliningAndStrikeoutingInCss", ApiClient.ParameterToString(trySaveTextUnderliningAndStrikeoutingInCss)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfInStorageToHtml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to Html format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="additionalMarginWidthInPoints">Defines width of margin that will be forcibly left around that output HTML-areas. (optional)</param>
        /// <param name="compressSvgGraphicsIfAny">The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)</param>
        /// <param name="convertMarkedContentToLayers">If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)</param>
        /// <param name="defaultFontName">Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)</param>
        /// <param name="documentType">Result document type. (optional)</param>
        /// <param name="fixedLayout">The value indicating whether that HTML is created as fixed layout. (optional)</param>
        /// <param name="imageResolution">Resolution for image rendering. (optional)</param>
        /// <param name="minimalLineWidth">This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)</param>
        /// <param name="preventGlyphsGrouping">This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)</param>
        /// <param name="splitCssIntoPages">When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)</param>
        /// <param name="splitIntoPages">The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)</param>
        /// <param name="useZOrder">If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)</param>
        /// <param name="antialiasingProcessing">The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)</param>
        /// <param name="cssClassNamesPrefix">When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)</param>
        /// <param name="explicitListOfSavedPages">With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)</param>
        /// <param name="fontEncodingStrategy">Defines encoding special rule to tune PDF decoding for current document. (optional)</param>
        /// <param name="fontSavingMode">Defines font saving mode that will be used during saving of PDF to desirable format. (optional)</param>
        /// <param name="htmlMarkupGenerationMode">Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)</param>
        /// <param name="lettersPositioningMethod">The mode of positioning of letters in words in result HTML. (optional)</param>
        /// <param name="pagesFlowTypeDependsOnViewersScreenSize">If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)</param>
        /// <param name="partsEmbeddingMode">It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)</param>
        /// <param name="rasterImagesSavingMode">Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)</param>
        /// <param name="removeEmptyAreasOnTopAndBottom">Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)</param>
        /// <param name="saveShadowedTextsAsTransparentTexts">Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)</param>
        /// <param name="saveTransparentTexts">Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)</param>
        /// <param name="specialFolderForAllImages">The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="specialFolderForSvgImages">The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="trySaveTextUnderliningAndStrikeoutingInCss">PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetPdfInStorageToHtmlAsync (string name, int? additionalMarginWidthInPoints = null, bool? compressSvgGraphicsIfAny = null, bool? convertMarkedContentToLayers = null, string defaultFontName = null, string documentType = null, bool? fixedLayout = null, int? imageResolution = null, int? minimalLineWidth = null, bool? preventGlyphsGrouping = null, bool? splitCssIntoPages = null, bool? splitIntoPages = null, bool? useZOrder = null, string antialiasingProcessing = null, string cssClassNamesPrefix = null, List<int?> explicitListOfSavedPages = null, string fontEncodingStrategy = null, string fontSavingMode = null, string htmlMarkupGenerationMode = null, string lettersPositioningMethod = null, bool? pagesFlowTypeDependsOnViewersScreenSize = null, string partsEmbeddingMode = null, string rasterImagesSavingMode = null, bool? removeEmptyAreasOnTopAndBottom = null, bool? saveShadowedTextsAsTransparentTexts = null, bool? saveTransparentTexts = null, string specialFolderForAllImages = null, string specialFolderForSvgImages = null, bool? trySaveTextUnderliningAndStrikeoutingInCss = null, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetPdfInStorageToHtmlAsyncWithHttpInfo(name, additionalMarginWidthInPoints, compressSvgGraphicsIfAny, convertMarkedContentToLayers, defaultFontName, documentType, fixedLayout, imageResolution, minimalLineWidth, preventGlyphsGrouping, splitCssIntoPages, splitIntoPages, useZOrder, antialiasingProcessing, cssClassNamesPrefix, explicitListOfSavedPages, fontEncodingStrategy, fontSavingMode, htmlMarkupGenerationMode, lettersPositioningMethod, pagesFlowTypeDependsOnViewersScreenSize, partsEmbeddingMode, rasterImagesSavingMode, removeEmptyAreasOnTopAndBottom, saveShadowedTextsAsTransparentTexts, saveTransparentTexts, specialFolderForAllImages, specialFolderForSvgImages, trySaveTextUnderliningAndStrikeoutingInCss, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (located on storage) to Html format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="additionalMarginWidthInPoints">Defines width of margin that will be forcibly left around that output HTML-areas. (optional)</param>
        /// <param name="compressSvgGraphicsIfAny">The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)</param>
        /// <param name="convertMarkedContentToLayers">If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)</param>
        /// <param name="defaultFontName">Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)</param>
        /// <param name="documentType">Result document type. (optional)</param>
        /// <param name="fixedLayout">The value indicating whether that HTML is created as fixed layout. (optional)</param>
        /// <param name="imageResolution">Resolution for image rendering. (optional)</param>
        /// <param name="minimalLineWidth">This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)</param>
        /// <param name="preventGlyphsGrouping">This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)</param>
        /// <param name="splitCssIntoPages">When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)</param>
        /// <param name="splitIntoPages">The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)</param>
        /// <param name="useZOrder">If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)</param>
        /// <param name="antialiasingProcessing">The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)</param>
        /// <param name="cssClassNamesPrefix">When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)</param>
        /// <param name="explicitListOfSavedPages">With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)</param>
        /// <param name="fontEncodingStrategy">Defines encoding special rule to tune PDF decoding for current document. (optional)</param>
        /// <param name="fontSavingMode">Defines font saving mode that will be used during saving of PDF to desirable format. (optional)</param>
        /// <param name="htmlMarkupGenerationMode">Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)</param>
        /// <param name="lettersPositioningMethod">The mode of positioning of letters in words in result HTML. (optional)</param>
        /// <param name="pagesFlowTypeDependsOnViewersScreenSize">If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)</param>
        /// <param name="partsEmbeddingMode">It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)</param>
        /// <param name="rasterImagesSavingMode">Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)</param>
        /// <param name="removeEmptyAreasOnTopAndBottom">Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)</param>
        /// <param name="saveShadowedTextsAsTransparentTexts">Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)</param>
        /// <param name="saveTransparentTexts">Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)</param>
        /// <param name="specialFolderForAllImages">The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="specialFolderForSvgImages">The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="trySaveTextUnderliningAndStrikeoutingInCss">PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPdfInStorageToHtmlAsyncWithHttpInfo (string name, int? additionalMarginWidthInPoints = null, bool? compressSvgGraphicsIfAny = null, bool? convertMarkedContentToLayers = null, string defaultFontName = null, string documentType = null, bool? fixedLayout = null, int? imageResolution = null, int? minimalLineWidth = null, bool? preventGlyphsGrouping = null, bool? splitCssIntoPages = null, bool? splitIntoPages = null, bool? useZOrder = null, string antialiasingProcessing = null, string cssClassNamesPrefix = null, List<int?> explicitListOfSavedPages = null, string fontEncodingStrategy = null, string fontSavingMode = null, string htmlMarkupGenerationMode = null, string lettersPositioningMethod = null, bool? pagesFlowTypeDependsOnViewersScreenSize = null, string partsEmbeddingMode = null, string rasterImagesSavingMode = null, bool? removeEmptyAreasOnTopAndBottom = null, bool? saveShadowedTextsAsTransparentTexts = null, bool? saveTransparentTexts = null, string specialFolderForAllImages = null, string specialFolderForSvgImages = null, bool? trySaveTextUnderliningAndStrikeoutingInCss = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPdfInStorageToHtml");

            var localVarPath = "/pdf/{name}/convert/html";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (additionalMarginWidthInPoints != null) localVarQueryParams.Add("additionalMarginWidthInPoints", ApiClient.ParameterToString(additionalMarginWidthInPoints)); // query parameter
            if (compressSvgGraphicsIfAny != null) localVarQueryParams.Add("compressSvgGraphicsIfAny", ApiClient.ParameterToString(compressSvgGraphicsIfAny)); // query parameter
            if (convertMarkedContentToLayers != null) localVarQueryParams.Add("convertMarkedContentToLayers", ApiClient.ParameterToString(convertMarkedContentToLayers)); // query parameter
            if (defaultFontName != null) localVarQueryParams.Add("defaultFontName", ApiClient.ParameterToString(defaultFontName)); // query parameter
            if (documentType != null) localVarQueryParams.Add("documentType", ApiClient.ParameterToString(documentType)); // query parameter
            if (fixedLayout != null) localVarQueryParams.Add("fixedLayout", ApiClient.ParameterToString(fixedLayout)); // query parameter
            if (imageResolution != null) localVarQueryParams.Add("imageResolution", ApiClient.ParameterToString(imageResolution)); // query parameter
            if (minimalLineWidth != null) localVarQueryParams.Add("minimalLineWidth", ApiClient.ParameterToString(minimalLineWidth)); // query parameter
            if (preventGlyphsGrouping != null) localVarQueryParams.Add("preventGlyphsGrouping", ApiClient.ParameterToString(preventGlyphsGrouping)); // query parameter
            if (splitCssIntoPages != null) localVarQueryParams.Add("splitCssIntoPages", ApiClient.ParameterToString(splitCssIntoPages)); // query parameter
            if (splitIntoPages != null) localVarQueryParams.Add("splitIntoPages", ApiClient.ParameterToString(splitIntoPages)); // query parameter
            if (useZOrder != null) localVarQueryParams.Add("useZOrder", ApiClient.ParameterToString(useZOrder)); // query parameter
            if (antialiasingProcessing != null) localVarQueryParams.Add("antialiasingProcessing", ApiClient.ParameterToString(antialiasingProcessing)); // query parameter
            if (cssClassNamesPrefix != null) localVarQueryParams.Add("cssClassNamesPrefix", ApiClient.ParameterToString(cssClassNamesPrefix)); // query parameter
            if (explicitListOfSavedPages != null) localVarQueryParams.Add("explicitListOfSavedPages", ApiClient.ParameterToString(explicitListOfSavedPages)); // query parameter
            if (fontEncodingStrategy != null) localVarQueryParams.Add("fontEncodingStrategy", ApiClient.ParameterToString(fontEncodingStrategy)); // query parameter
            if (fontSavingMode != null) localVarQueryParams.Add("fontSavingMode", ApiClient.ParameterToString(fontSavingMode)); // query parameter
            if (htmlMarkupGenerationMode != null) localVarQueryParams.Add("htmlMarkupGenerationMode", ApiClient.ParameterToString(htmlMarkupGenerationMode)); // query parameter
            if (lettersPositioningMethod != null) localVarQueryParams.Add("lettersPositioningMethod", ApiClient.ParameterToString(lettersPositioningMethod)); // query parameter
            if (pagesFlowTypeDependsOnViewersScreenSize != null) localVarQueryParams.Add("pagesFlowTypeDependsOnViewersScreenSize", ApiClient.ParameterToString(pagesFlowTypeDependsOnViewersScreenSize)); // query parameter
            if (partsEmbeddingMode != null) localVarQueryParams.Add("partsEmbeddingMode", ApiClient.ParameterToString(partsEmbeddingMode)); // query parameter
            if (rasterImagesSavingMode != null) localVarQueryParams.Add("rasterImagesSavingMode", ApiClient.ParameterToString(rasterImagesSavingMode)); // query parameter
            if (removeEmptyAreasOnTopAndBottom != null) localVarQueryParams.Add("removeEmptyAreasOnTopAndBottom", ApiClient.ParameterToString(removeEmptyAreasOnTopAndBottom)); // query parameter
            if (saveShadowedTextsAsTransparentTexts != null) localVarQueryParams.Add("saveShadowedTextsAsTransparentTexts", ApiClient.ParameterToString(saveShadowedTextsAsTransparentTexts)); // query parameter
            if (saveTransparentTexts != null) localVarQueryParams.Add("saveTransparentTexts", ApiClient.ParameterToString(saveTransparentTexts)); // query parameter
            if (specialFolderForAllImages != null) localVarQueryParams.Add("specialFolderForAllImages", ApiClient.ParameterToString(specialFolderForAllImages)); // query parameter
            if (specialFolderForSvgImages != null) localVarQueryParams.Add("specialFolderForSvgImages", ApiClient.ParameterToString(specialFolderForSvgImages)); // query parameter
            if (trySaveTextUnderliningAndStrikeoutingInCss != null) localVarQueryParams.Add("trySaveTextUnderliningAndStrikeoutingInCss", ApiClient.ParameterToString(trySaveTextUnderliningAndStrikeoutingInCss)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfInStorageToHtml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to LaTeX format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pagesCount">Pages count. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetPdfInStorageToLaTeX (string name, int? pagesCount = null, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetPdfInStorageToLaTeXWithHttpInfo(name, pagesCount, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (located on storage) to LaTeX format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pagesCount">Pages count. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetPdfInStorageToLaTeXWithHttpInfo (string name, int? pagesCount = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPdfInStorageToLaTeX");

            var localVarPath = "/pdf/{name}/convert/latex";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pagesCount != null) localVarQueryParams.Add("pagesCount", ApiClient.ParameterToString(pagesCount)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfInStorageToLaTeX", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to LaTeX format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pagesCount">Pages count. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetPdfInStorageToLaTeXAsync (string name, int? pagesCount = null, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetPdfInStorageToLaTeXAsyncWithHttpInfo(name, pagesCount, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (located on storage) to LaTeX format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pagesCount">Pages count. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPdfInStorageToLaTeXAsyncWithHttpInfo (string name, int? pagesCount = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPdfInStorageToLaTeX");

            var localVarPath = "/pdf/{name}/convert/latex";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pagesCount != null) localVarQueryParams.Add("pagesCount", ApiClient.ParameterToString(pagesCount)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfInStorageToLaTeX", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to MOBIXML format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetPdfInStorageToMobiXml (string name, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetPdfInStorageToMobiXmlWithHttpInfo(name, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (located on storage) to MOBIXML format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetPdfInStorageToMobiXmlWithHttpInfo (string name, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPdfInStorageToMobiXml");

            var localVarPath = "/pdf/{name}/convert/mobixml";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfInStorageToMobiXml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to MOBIXML format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetPdfInStorageToMobiXmlAsync (string name, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetPdfInStorageToMobiXmlAsyncWithHttpInfo(name, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (located on storage) to MOBIXML format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPdfInStorageToMobiXmlAsyncWithHttpInfo (string name, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPdfInStorageToMobiXml");

            var localVarPath = "/pdf/{name}/convert/mobixml";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfInStorageToMobiXml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to PdfA format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="type">Type of PdfA format.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetPdfInStorageToPdfA (string name, string type, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetPdfInStorageToPdfAWithHttpInfo(name, type, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (located on storage) to PdfA format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="type">Type of PdfA format.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetPdfInStorageToPdfAWithHttpInfo (string name, string type, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPdfInStorageToPdfA");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling PdfApi->GetPdfInStorageToPdfA");

            var localVarPath = "/pdf/{name}/convert/pdfa";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (type != null) localVarQueryParams.Add("type", ApiClient.ParameterToString(type)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfInStorageToPdfA", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to PdfA format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="type">Type of PdfA format.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetPdfInStorageToPdfAAsync (string name, string type, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetPdfInStorageToPdfAAsyncWithHttpInfo(name, type, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (located on storage) to PdfA format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="type">Type of PdfA format.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPdfInStorageToPdfAAsyncWithHttpInfo (string name, string type, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPdfInStorageToPdfA");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling PdfApi->GetPdfInStorageToPdfA");

            var localVarPath = "/pdf/{name}/convert/pdfa";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (type != null) localVarQueryParams.Add("type", ApiClient.ParameterToString(type)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfInStorageToPdfA", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to PPTX format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="separateImages">Separate images. (optional)</param>
        /// <param name="slidesAsImages">Slides as images. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetPdfInStorageToPptx (string name, bool? separateImages = null, bool? slidesAsImages = null, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetPdfInStorageToPptxWithHttpInfo(name, separateImages, slidesAsImages, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (located on storage) to PPTX format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="separateImages">Separate images. (optional)</param>
        /// <param name="slidesAsImages">Slides as images. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetPdfInStorageToPptxWithHttpInfo (string name, bool? separateImages = null, bool? slidesAsImages = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPdfInStorageToPptx");

            var localVarPath = "/pdf/{name}/convert/pptx";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (separateImages != null) localVarQueryParams.Add("separateImages", ApiClient.ParameterToString(separateImages)); // query parameter
            if (slidesAsImages != null) localVarQueryParams.Add("slidesAsImages", ApiClient.ParameterToString(slidesAsImages)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfInStorageToPptx", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to PPTX format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="separateImages">Separate images. (optional)</param>
        /// <param name="slidesAsImages">Slides as images. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetPdfInStorageToPptxAsync (string name, bool? separateImages = null, bool? slidesAsImages = null, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetPdfInStorageToPptxAsyncWithHttpInfo(name, separateImages, slidesAsImages, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (located on storage) to PPTX format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="separateImages">Separate images. (optional)</param>
        /// <param name="slidesAsImages">Slides as images. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPdfInStorageToPptxAsyncWithHttpInfo (string name, bool? separateImages = null, bool? slidesAsImages = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPdfInStorageToPptx");

            var localVarPath = "/pdf/{name}/convert/pptx";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (separateImages != null) localVarQueryParams.Add("separateImages", ApiClient.ParameterToString(separateImages)); // query parameter
            if (slidesAsImages != null) localVarQueryParams.Add("slidesAsImages", ApiClient.ParameterToString(slidesAsImages)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfInStorageToPptx", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to SVG format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="compressOutputToZipArchive">Specifies whether output will be created as one zip-archive. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetPdfInStorageToSvg (string name, bool? compressOutputToZipArchive = null, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetPdfInStorageToSvgWithHttpInfo(name, compressOutputToZipArchive, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (located on storage) to SVG format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="compressOutputToZipArchive">Specifies whether output will be created as one zip-archive. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetPdfInStorageToSvgWithHttpInfo (string name, bool? compressOutputToZipArchive = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPdfInStorageToSvg");

            var localVarPath = "/pdf/{name}/convert/svg";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (compressOutputToZipArchive != null) localVarQueryParams.Add("compressOutputToZipArchive", ApiClient.ParameterToString(compressOutputToZipArchive)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfInStorageToSvg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to SVG format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="compressOutputToZipArchive">Specifies whether output will be created as one zip-archive. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetPdfInStorageToSvgAsync (string name, bool? compressOutputToZipArchive = null, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetPdfInStorageToSvgAsyncWithHttpInfo(name, compressOutputToZipArchive, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (located on storage) to SVG format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="compressOutputToZipArchive">Specifies whether output will be created as one zip-archive. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPdfInStorageToSvgAsyncWithHttpInfo (string name, bool? compressOutputToZipArchive = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPdfInStorageToSvg");

            var localVarPath = "/pdf/{name}/convert/svg";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (compressOutputToZipArchive != null) localVarQueryParams.Add("compressOutputToZipArchive", ApiClient.ParameterToString(compressOutputToZipArchive)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfInStorageToSvg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to TIFF format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="brightness">Image brightness. (optional)</param>
        /// <param name="compression">Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)</param>
        /// <param name="colorDepth">Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)</param>
        /// <param name="leftMargin">Left image margin. (optional)</param>
        /// <param name="rightMargin">Right image margin. (optional)</param>
        /// <param name="topMargin">Top image margin. (optional)</param>
        /// <param name="bottomMargin">Bottom image margin. (optional)</param>
        /// <param name="orientation">Image orientation. Possible values are: None, Landscape, Portait. (optional)</param>
        /// <param name="skipBlankPages">Skip blank pages flag. (optional)</param>
        /// <param name="width">Image width. (optional)</param>
        /// <param name="height">Image height. (optional)</param>
        /// <param name="xResolution">Horizontal resolution. (optional)</param>
        /// <param name="yResolution">Vertical resolution. (optional)</param>
        /// <param name="pageIndex">Start page to export. (optional)</param>
        /// <param name="pageCount">Number of pages to export. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetPdfInStorageToTiff (string name, double? brightness = null, string compression = null, string colorDepth = null, int? leftMargin = null, int? rightMargin = null, int? topMargin = null, int? bottomMargin = null, string orientation = null, bool? skipBlankPages = null, int? width = null, int? height = null, int? xResolution = null, int? yResolution = null, int? pageIndex = null, int? pageCount = null, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetPdfInStorageToTiffWithHttpInfo(name, brightness, compression, colorDepth, leftMargin, rightMargin, topMargin, bottomMargin, orientation, skipBlankPages, width, height, xResolution, yResolution, pageIndex, pageCount, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (located on storage) to TIFF format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="brightness">Image brightness. (optional)</param>
        /// <param name="compression">Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)</param>
        /// <param name="colorDepth">Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)</param>
        /// <param name="leftMargin">Left image margin. (optional)</param>
        /// <param name="rightMargin">Right image margin. (optional)</param>
        /// <param name="topMargin">Top image margin. (optional)</param>
        /// <param name="bottomMargin">Bottom image margin. (optional)</param>
        /// <param name="orientation">Image orientation. Possible values are: None, Landscape, Portait. (optional)</param>
        /// <param name="skipBlankPages">Skip blank pages flag. (optional)</param>
        /// <param name="width">Image width. (optional)</param>
        /// <param name="height">Image height. (optional)</param>
        /// <param name="xResolution">Horizontal resolution. (optional)</param>
        /// <param name="yResolution">Vertical resolution. (optional)</param>
        /// <param name="pageIndex">Start page to export. (optional)</param>
        /// <param name="pageCount">Number of pages to export. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetPdfInStorageToTiffWithHttpInfo (string name, double? brightness = null, string compression = null, string colorDepth = null, int? leftMargin = null, int? rightMargin = null, int? topMargin = null, int? bottomMargin = null, string orientation = null, bool? skipBlankPages = null, int? width = null, int? height = null, int? xResolution = null, int? yResolution = null, int? pageIndex = null, int? pageCount = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPdfInStorageToTiff");

            var localVarPath = "/pdf/{name}/convert/tiff";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (brightness != null) localVarQueryParams.Add("brightness", ApiClient.ParameterToString(brightness)); // query parameter
            if (compression != null) localVarQueryParams.Add("compression", ApiClient.ParameterToString(compression)); // query parameter
            if (colorDepth != null) localVarQueryParams.Add("colorDepth", ApiClient.ParameterToString(colorDepth)); // query parameter
            if (leftMargin != null) localVarQueryParams.Add("leftMargin", ApiClient.ParameterToString(leftMargin)); // query parameter
            if (rightMargin != null) localVarQueryParams.Add("rightMargin", ApiClient.ParameterToString(rightMargin)); // query parameter
            if (topMargin != null) localVarQueryParams.Add("topMargin", ApiClient.ParameterToString(topMargin)); // query parameter
            if (bottomMargin != null) localVarQueryParams.Add("bottomMargin", ApiClient.ParameterToString(bottomMargin)); // query parameter
            if (orientation != null) localVarQueryParams.Add("orientation", ApiClient.ParameterToString(orientation)); // query parameter
            if (skipBlankPages != null) localVarQueryParams.Add("skipBlankPages", ApiClient.ParameterToString(skipBlankPages)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (xResolution != null) localVarQueryParams.Add("xResolution", ApiClient.ParameterToString(xResolution)); // query parameter
            if (yResolution != null) localVarQueryParams.Add("yResolution", ApiClient.ParameterToString(yResolution)); // query parameter
            if (pageIndex != null) localVarQueryParams.Add("pageIndex", ApiClient.ParameterToString(pageIndex)); // query parameter
            if (pageCount != null) localVarQueryParams.Add("pageCount", ApiClient.ParameterToString(pageCount)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfInStorageToTiff", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to TIFF format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="brightness">Image brightness. (optional)</param>
        /// <param name="compression">Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)</param>
        /// <param name="colorDepth">Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)</param>
        /// <param name="leftMargin">Left image margin. (optional)</param>
        /// <param name="rightMargin">Right image margin. (optional)</param>
        /// <param name="topMargin">Top image margin. (optional)</param>
        /// <param name="bottomMargin">Bottom image margin. (optional)</param>
        /// <param name="orientation">Image orientation. Possible values are: None, Landscape, Portait. (optional)</param>
        /// <param name="skipBlankPages">Skip blank pages flag. (optional)</param>
        /// <param name="width">Image width. (optional)</param>
        /// <param name="height">Image height. (optional)</param>
        /// <param name="xResolution">Horizontal resolution. (optional)</param>
        /// <param name="yResolution">Vertical resolution. (optional)</param>
        /// <param name="pageIndex">Start page to export. (optional)</param>
        /// <param name="pageCount">Number of pages to export. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetPdfInStorageToTiffAsync (string name, double? brightness = null, string compression = null, string colorDepth = null, int? leftMargin = null, int? rightMargin = null, int? topMargin = null, int? bottomMargin = null, string orientation = null, bool? skipBlankPages = null, int? width = null, int? height = null, int? xResolution = null, int? yResolution = null, int? pageIndex = null, int? pageCount = null, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetPdfInStorageToTiffAsyncWithHttpInfo(name, brightness, compression, colorDepth, leftMargin, rightMargin, topMargin, bottomMargin, orientation, skipBlankPages, width, height, xResolution, yResolution, pageIndex, pageCount, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (located on storage) to TIFF format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="brightness">Image brightness. (optional)</param>
        /// <param name="compression">Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)</param>
        /// <param name="colorDepth">Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)</param>
        /// <param name="leftMargin">Left image margin. (optional)</param>
        /// <param name="rightMargin">Right image margin. (optional)</param>
        /// <param name="topMargin">Top image margin. (optional)</param>
        /// <param name="bottomMargin">Bottom image margin. (optional)</param>
        /// <param name="orientation">Image orientation. Possible values are: None, Landscape, Portait. (optional)</param>
        /// <param name="skipBlankPages">Skip blank pages flag. (optional)</param>
        /// <param name="width">Image width. (optional)</param>
        /// <param name="height">Image height. (optional)</param>
        /// <param name="xResolution">Horizontal resolution. (optional)</param>
        /// <param name="yResolution">Vertical resolution. (optional)</param>
        /// <param name="pageIndex">Start page to export. (optional)</param>
        /// <param name="pageCount">Number of pages to export. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPdfInStorageToTiffAsyncWithHttpInfo (string name, double? brightness = null, string compression = null, string colorDepth = null, int? leftMargin = null, int? rightMargin = null, int? topMargin = null, int? bottomMargin = null, string orientation = null, bool? skipBlankPages = null, int? width = null, int? height = null, int? xResolution = null, int? yResolution = null, int? pageIndex = null, int? pageCount = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPdfInStorageToTiff");

            var localVarPath = "/pdf/{name}/convert/tiff";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (brightness != null) localVarQueryParams.Add("brightness", ApiClient.ParameterToString(brightness)); // query parameter
            if (compression != null) localVarQueryParams.Add("compression", ApiClient.ParameterToString(compression)); // query parameter
            if (colorDepth != null) localVarQueryParams.Add("colorDepth", ApiClient.ParameterToString(colorDepth)); // query parameter
            if (leftMargin != null) localVarQueryParams.Add("leftMargin", ApiClient.ParameterToString(leftMargin)); // query parameter
            if (rightMargin != null) localVarQueryParams.Add("rightMargin", ApiClient.ParameterToString(rightMargin)); // query parameter
            if (topMargin != null) localVarQueryParams.Add("topMargin", ApiClient.ParameterToString(topMargin)); // query parameter
            if (bottomMargin != null) localVarQueryParams.Add("bottomMargin", ApiClient.ParameterToString(bottomMargin)); // query parameter
            if (orientation != null) localVarQueryParams.Add("orientation", ApiClient.ParameterToString(orientation)); // query parameter
            if (skipBlankPages != null) localVarQueryParams.Add("skipBlankPages", ApiClient.ParameterToString(skipBlankPages)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (xResolution != null) localVarQueryParams.Add("xResolution", ApiClient.ParameterToString(xResolution)); // query parameter
            if (yResolution != null) localVarQueryParams.Add("yResolution", ApiClient.ParameterToString(yResolution)); // query parameter
            if (pageIndex != null) localVarQueryParams.Add("pageIndex", ApiClient.ParameterToString(pageIndex)); // query parameter
            if (pageCount != null) localVarQueryParams.Add("pageCount", ApiClient.ParameterToString(pageCount)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfInStorageToTiff", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to XLS format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="insertBlankColumnAtFirst">Insert blank column at first (optional)</param>
        /// <param name="minimizeTheNumberOfWorksheets">Minimize the number of worksheets (optional)</param>
        /// <param name="scaleFactor">Scale factor (optional)</param>
        /// <param name="uniformWorksheets">Uniform worksheets (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetPdfInStorageToXls (string name, bool? insertBlankColumnAtFirst = null, bool? minimizeTheNumberOfWorksheets = null, double? scaleFactor = null, bool? uniformWorksheets = null, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetPdfInStorageToXlsWithHttpInfo(name, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (located on storage) to XLS format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="insertBlankColumnAtFirst">Insert blank column at first (optional)</param>
        /// <param name="minimizeTheNumberOfWorksheets">Minimize the number of worksheets (optional)</param>
        /// <param name="scaleFactor">Scale factor (optional)</param>
        /// <param name="uniformWorksheets">Uniform worksheets (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetPdfInStorageToXlsWithHttpInfo (string name, bool? insertBlankColumnAtFirst = null, bool? minimizeTheNumberOfWorksheets = null, double? scaleFactor = null, bool? uniformWorksheets = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPdfInStorageToXls");

            var localVarPath = "/pdf/{name}/convert/xls";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (insertBlankColumnAtFirst != null) localVarQueryParams.Add("insertBlankColumnAtFirst", ApiClient.ParameterToString(insertBlankColumnAtFirst)); // query parameter
            if (minimizeTheNumberOfWorksheets != null) localVarQueryParams.Add("minimizeTheNumberOfWorksheets", ApiClient.ParameterToString(minimizeTheNumberOfWorksheets)); // query parameter
            if (scaleFactor != null) localVarQueryParams.Add("scaleFactor", ApiClient.ParameterToString(scaleFactor)); // query parameter
            if (uniformWorksheets != null) localVarQueryParams.Add("uniformWorksheets", ApiClient.ParameterToString(uniformWorksheets)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfInStorageToXls", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to XLS format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="insertBlankColumnAtFirst">Insert blank column at first (optional)</param>
        /// <param name="minimizeTheNumberOfWorksheets">Minimize the number of worksheets (optional)</param>
        /// <param name="scaleFactor">Scale factor (optional)</param>
        /// <param name="uniformWorksheets">Uniform worksheets (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetPdfInStorageToXlsAsync (string name, bool? insertBlankColumnAtFirst = null, bool? minimizeTheNumberOfWorksheets = null, double? scaleFactor = null, bool? uniformWorksheets = null, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetPdfInStorageToXlsAsyncWithHttpInfo(name, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (located on storage) to XLS format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="insertBlankColumnAtFirst">Insert blank column at first (optional)</param>
        /// <param name="minimizeTheNumberOfWorksheets">Minimize the number of worksheets (optional)</param>
        /// <param name="scaleFactor">Scale factor (optional)</param>
        /// <param name="uniformWorksheets">Uniform worksheets (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPdfInStorageToXlsAsyncWithHttpInfo (string name, bool? insertBlankColumnAtFirst = null, bool? minimizeTheNumberOfWorksheets = null, double? scaleFactor = null, bool? uniformWorksheets = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPdfInStorageToXls");

            var localVarPath = "/pdf/{name}/convert/xls";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (insertBlankColumnAtFirst != null) localVarQueryParams.Add("insertBlankColumnAtFirst", ApiClient.ParameterToString(insertBlankColumnAtFirst)); // query parameter
            if (minimizeTheNumberOfWorksheets != null) localVarQueryParams.Add("minimizeTheNumberOfWorksheets", ApiClient.ParameterToString(minimizeTheNumberOfWorksheets)); // query parameter
            if (scaleFactor != null) localVarQueryParams.Add("scaleFactor", ApiClient.ParameterToString(scaleFactor)); // query parameter
            if (uniformWorksheets != null) localVarQueryParams.Add("uniformWorksheets", ApiClient.ParameterToString(uniformWorksheets)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfInStorageToXls", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to XML format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetPdfInStorageToXml (string name, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetPdfInStorageToXmlWithHttpInfo(name, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (located on storage) to XML format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetPdfInStorageToXmlWithHttpInfo (string name, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPdfInStorageToXml");

            var localVarPath = "/pdf/{name}/convert/xml";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfInStorageToXml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to XML format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetPdfInStorageToXmlAsync (string name, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetPdfInStorageToXmlAsyncWithHttpInfo(name, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (located on storage) to XML format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPdfInStorageToXmlAsyncWithHttpInfo (string name, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPdfInStorageToXml");

            var localVarPath = "/pdf/{name}/convert/xml";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfInStorageToXml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to XPS format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetPdfInStorageToXps (string name, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetPdfInStorageToXpsWithHttpInfo(name, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (located on storage) to XPS format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetPdfInStorageToXpsWithHttpInfo (string name, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPdfInStorageToXps");

            var localVarPath = "/pdf/{name}/convert/xps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfInStorageToXps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to XPS format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetPdfInStorageToXpsAsync (string name, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetPdfInStorageToXpsAsyncWithHttpInfo(name, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (located on storage) to XPS format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPdfInStorageToXpsAsyncWithHttpInfo (string name, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPdfInStorageToXps");

            var localVarPath = "/pdf/{name}/convert/xps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfInStorageToXps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert PS file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.ps)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetPsInStorageToPdf (string srcPath)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetPsInStorageToPdfWithHttpInfo(srcPath);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert PS file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.ps)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetPsInStorageToPdfWithHttpInfo (string srcPath)
        {
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->GetPsInStorageToPdf");

            var localVarPath = "/pdf/create/ps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPsInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert PS file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.ps)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetPsInStorageToPdfAsync (string srcPath)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetPsInStorageToPdfAsyncWithHttpInfo(srcPath);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert PS file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.ps)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPsInStorageToPdfAsyncWithHttpInfo (string srcPath)
        {
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->GetPsInStorageToPdf");

            var localVarPath = "/pdf/create/ps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPsInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Read segment. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="fragmentNumber"></param>
        /// <param name="segmentNumber"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>TextItemResponse</returns>
        public TextItemResponse GetSegment (string name, int? pageNumber, int? fragmentNumber, int? segmentNumber, string storage = null, string folder = null)
        {
             ApiResponse<TextItemResponse> localVarResponse = GetSegmentWithHttpInfo(name, pageNumber, fragmentNumber, segmentNumber, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read segment. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="fragmentNumber"></param>
        /// <param name="segmentNumber"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of TextItemResponse</returns>
        public ApiResponse< TextItemResponse > GetSegmentWithHttpInfo (string name, int? pageNumber, int? fragmentNumber, int? segmentNumber, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetSegment");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetSegment");
            // verify the required parameter 'fragmentNumber' is set
            if (fragmentNumber == null)
                throw new ApiException(400, "Missing required parameter 'fragmentNumber' when calling PdfApi->GetSegment");
            // verify the required parameter 'segmentNumber' is set
            if (segmentNumber == null)
                throw new ApiException(400, "Missing required parameter 'segmentNumber' when calling PdfApi->GetSegment");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/fragments/{fragmentNumber}/segments/{segmentNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (fragmentNumber != null) localVarPathParams.Add("fragmentNumber", ApiClient.ParameterToString(fragmentNumber)); // path parameter
            if (segmentNumber != null) localVarPathParams.Add("segmentNumber", ApiClient.ParameterToString(segmentNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSegment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextItemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TextItemResponse) ApiClient.Deserialize(localVarResponse, typeof(TextItemResponse)));
        }

        /// <summary>
        /// Read segment. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="fragmentNumber"></param>
        /// <param name="segmentNumber"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of TextItemResponse</returns>
        public async System.Threading.Tasks.Task<TextItemResponse> GetSegmentAsync (string name, int? pageNumber, int? fragmentNumber, int? segmentNumber, string storage = null, string folder = null)
        {
             ApiResponse<TextItemResponse> localVarResponse = await GetSegmentAsyncWithHttpInfo(name, pageNumber, fragmentNumber, segmentNumber, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read segment. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="fragmentNumber"></param>
        /// <param name="segmentNumber"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (TextItemResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TextItemResponse>> GetSegmentAsyncWithHttpInfo (string name, int? pageNumber, int? fragmentNumber, int? segmentNumber, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetSegment");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetSegment");
            // verify the required parameter 'fragmentNumber' is set
            if (fragmentNumber == null)
                throw new ApiException(400, "Missing required parameter 'fragmentNumber' when calling PdfApi->GetSegment");
            // verify the required parameter 'segmentNumber' is set
            if (segmentNumber == null)
                throw new ApiException(400, "Missing required parameter 'segmentNumber' when calling PdfApi->GetSegment");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/fragments/{fragmentNumber}/segments/{segmentNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (fragmentNumber != null) localVarPathParams.Add("fragmentNumber", ApiClient.ParameterToString(fragmentNumber)); // path parameter
            if (segmentNumber != null) localVarPathParams.Add("segmentNumber", ApiClient.ParameterToString(segmentNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSegment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextItemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TextItemResponse) ApiClient.Deserialize(localVarResponse, typeof(TextItemResponse)));
        }

        /// <summary>
        /// Read segment text format. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="fragmentNumber"></param>
        /// <param name="segmentNumber"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>TextFormatResponse</returns>
        public TextFormatResponse GetSegmentTextFormat (string name, int? pageNumber, int? fragmentNumber, int? segmentNumber, string storage = null, string folder = null)
        {
             ApiResponse<TextFormatResponse> localVarResponse = GetSegmentTextFormatWithHttpInfo(name, pageNumber, fragmentNumber, segmentNumber, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read segment text format. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="fragmentNumber"></param>
        /// <param name="segmentNumber"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of TextFormatResponse</returns>
        public ApiResponse< TextFormatResponse > GetSegmentTextFormatWithHttpInfo (string name, int? pageNumber, int? fragmentNumber, int? segmentNumber, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetSegmentTextFormat");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetSegmentTextFormat");
            // verify the required parameter 'fragmentNumber' is set
            if (fragmentNumber == null)
                throw new ApiException(400, "Missing required parameter 'fragmentNumber' when calling PdfApi->GetSegmentTextFormat");
            // verify the required parameter 'segmentNumber' is set
            if (segmentNumber == null)
                throw new ApiException(400, "Missing required parameter 'segmentNumber' when calling PdfApi->GetSegmentTextFormat");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/fragments/{fragmentNumber}/segments/{segmentNumber}/textformat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (fragmentNumber != null) localVarPathParams.Add("fragmentNumber", ApiClient.ParameterToString(fragmentNumber)); // path parameter
            if (segmentNumber != null) localVarPathParams.Add("segmentNumber", ApiClient.ParameterToString(segmentNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSegmentTextFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextFormatResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TextFormatResponse) ApiClient.Deserialize(localVarResponse, typeof(TextFormatResponse)));
        }

        /// <summary>
        /// Read segment text format. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="fragmentNumber"></param>
        /// <param name="segmentNumber"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of TextFormatResponse</returns>
        public async System.Threading.Tasks.Task<TextFormatResponse> GetSegmentTextFormatAsync (string name, int? pageNumber, int? fragmentNumber, int? segmentNumber, string storage = null, string folder = null)
        {
             ApiResponse<TextFormatResponse> localVarResponse = await GetSegmentTextFormatAsyncWithHttpInfo(name, pageNumber, fragmentNumber, segmentNumber, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read segment text format. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="fragmentNumber"></param>
        /// <param name="segmentNumber"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (TextFormatResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TextFormatResponse>> GetSegmentTextFormatAsyncWithHttpInfo (string name, int? pageNumber, int? fragmentNumber, int? segmentNumber, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetSegmentTextFormat");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetSegmentTextFormat");
            // verify the required parameter 'fragmentNumber' is set
            if (fragmentNumber == null)
                throw new ApiException(400, "Missing required parameter 'fragmentNumber' when calling PdfApi->GetSegmentTextFormat");
            // verify the required parameter 'segmentNumber' is set
            if (segmentNumber == null)
                throw new ApiException(400, "Missing required parameter 'segmentNumber' when calling PdfApi->GetSegmentTextFormat");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/fragments/{fragmentNumber}/segments/{segmentNumber}/textformat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (fragmentNumber != null) localVarPathParams.Add("fragmentNumber", ApiClient.ParameterToString(fragmentNumber)); // path parameter
            if (segmentNumber != null) localVarPathParams.Add("segmentNumber", ApiClient.ParameterToString(segmentNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSegmentTextFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextFormatResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TextFormatResponse) ApiClient.Deserialize(localVarResponse, typeof(TextFormatResponse)));
        }

        /// <summary>
        /// Read fragment segments. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="fragmentNumber"></param>
        /// <param name="withEmpty"> (optional)</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>TextItemsResponse</returns>
        public TextItemsResponse GetSegments (string name, int? pageNumber, int? fragmentNumber, string withEmpty = null, string storage = null, string folder = null)
        {
             ApiResponse<TextItemsResponse> localVarResponse = GetSegmentsWithHttpInfo(name, pageNumber, fragmentNumber, withEmpty, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read fragment segments. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="fragmentNumber"></param>
        /// <param name="withEmpty"> (optional)</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of TextItemsResponse</returns>
        public ApiResponse< TextItemsResponse > GetSegmentsWithHttpInfo (string name, int? pageNumber, int? fragmentNumber, string withEmpty = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetSegments");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetSegments");
            // verify the required parameter 'fragmentNumber' is set
            if (fragmentNumber == null)
                throw new ApiException(400, "Missing required parameter 'fragmentNumber' when calling PdfApi->GetSegments");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/fragments/{fragmentNumber}/segments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (fragmentNumber != null) localVarPathParams.Add("fragmentNumber", ApiClient.ParameterToString(fragmentNumber)); // path parameter
            if (withEmpty != null) localVarQueryParams.Add("withEmpty", ApiClient.ParameterToString(withEmpty)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSegments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TextItemsResponse) ApiClient.Deserialize(localVarResponse, typeof(TextItemsResponse)));
        }

        /// <summary>
        /// Read fragment segments. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="fragmentNumber"></param>
        /// <param name="withEmpty"> (optional)</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of TextItemsResponse</returns>
        public async System.Threading.Tasks.Task<TextItemsResponse> GetSegmentsAsync (string name, int? pageNumber, int? fragmentNumber, string withEmpty = null, string storage = null, string folder = null)
        {
             ApiResponse<TextItemsResponse> localVarResponse = await GetSegmentsAsyncWithHttpInfo(name, pageNumber, fragmentNumber, withEmpty, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read fragment segments. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="fragmentNumber"></param>
        /// <param name="withEmpty"> (optional)</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (TextItemsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TextItemsResponse>> GetSegmentsAsyncWithHttpInfo (string name, int? pageNumber, int? fragmentNumber, string withEmpty = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetSegments");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetSegments");
            // verify the required parameter 'fragmentNumber' is set
            if (fragmentNumber == null)
                throw new ApiException(400, "Missing required parameter 'fragmentNumber' when calling PdfApi->GetSegments");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/fragments/{fragmentNumber}/segments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (fragmentNumber != null) localVarPathParams.Add("fragmentNumber", ApiClient.ParameterToString(fragmentNumber)); // path parameter
            if (withEmpty != null) localVarQueryParams.Add("withEmpty", ApiClient.ParameterToString(withEmpty)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSegments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TextItemsResponse) ApiClient.Deserialize(localVarResponse, typeof(TextItemsResponse)));
        }

        /// <summary>
        /// Convert SVG file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.svg)</param>
        /// <param name="adjustPageSize">Adjust page size (optional)</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetSvgInStorageToPdf (string srcPath, bool? adjustPageSize = null, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetSvgInStorageToPdfWithHttpInfo(srcPath, adjustPageSize, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert SVG file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.svg)</param>
        /// <param name="adjustPageSize">Adjust page size (optional)</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetSvgInStorageToPdfWithHttpInfo (string srcPath, bool? adjustPageSize = null, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null)
        {
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->GetSvgInStorageToPdf");

            var localVarPath = "/pdf/create/svg";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (adjustPageSize != null) localVarQueryParams.Add("adjustPageSize", ApiClient.ParameterToString(adjustPageSize)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (isLandscape != null) localVarQueryParams.Add("isLandscape", ApiClient.ParameterToString(isLandscape)); // query parameter
            if (marginLeft != null) localVarQueryParams.Add("marginLeft", ApiClient.ParameterToString(marginLeft)); // query parameter
            if (marginBottom != null) localVarQueryParams.Add("marginBottom", ApiClient.ParameterToString(marginBottom)); // query parameter
            if (marginRight != null) localVarQueryParams.Add("marginRight", ApiClient.ParameterToString(marginRight)); // query parameter
            if (marginTop != null) localVarQueryParams.Add("marginTop", ApiClient.ParameterToString(marginTop)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSvgInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert SVG file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.svg)</param>
        /// <param name="adjustPageSize">Adjust page size (optional)</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetSvgInStorageToPdfAsync (string srcPath, bool? adjustPageSize = null, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetSvgInStorageToPdfAsyncWithHttpInfo(srcPath, adjustPageSize, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert SVG file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.svg)</param>
        /// <param name="adjustPageSize">Adjust page size (optional)</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetSvgInStorageToPdfAsyncWithHttpInfo (string srcPath, bool? adjustPageSize = null, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null)
        {
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->GetSvgInStorageToPdf");

            var localVarPath = "/pdf/create/svg";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (adjustPageSize != null) localVarQueryParams.Add("adjustPageSize", ApiClient.ParameterToString(adjustPageSize)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (isLandscape != null) localVarQueryParams.Add("isLandscape", ApiClient.ParameterToString(isLandscape)); // query parameter
            if (marginLeft != null) localVarQueryParams.Add("marginLeft", ApiClient.ParameterToString(marginLeft)); // query parameter
            if (marginBottom != null) localVarQueryParams.Add("marginBottom", ApiClient.ParameterToString(marginBottom)); // query parameter
            if (marginRight != null) localVarQueryParams.Add("marginRight", ApiClient.ParameterToString(marginRight)); // query parameter
            if (marginTop != null) localVarQueryParams.Add("marginTop", ApiClient.ParameterToString(marginTop)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSvgInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Read document text. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="X"></param>
        /// <param name="Y"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="format">List of formats for search. (optional)</param>
        /// <param name="regex">Formats are specified as a regular expression. (optional)</param>
        /// <param name="splitRects">Split result fragments (default is true). (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>TextRectsResponse</returns>
        public TextRectsResponse GetText (string name, int? X, int? Y, int? width, int? height, List<string> format = null, string regex = null, bool? splitRects = null, string folder = null)
        {
             ApiResponse<TextRectsResponse> localVarResponse = GetTextWithHttpInfo(name, X, Y, width, height, format, regex, splitRects, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document text. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="X"></param>
        /// <param name="Y"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="format">List of formats for search. (optional)</param>
        /// <param name="regex">Formats are specified as a regular expression. (optional)</param>
        /// <param name="splitRects">Split result fragments (default is true). (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of TextRectsResponse</returns>
        public ApiResponse< TextRectsResponse > GetTextWithHttpInfo (string name, int? X, int? Y, int? width, int? height, List<string> format = null, string regex = null, bool? splitRects = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetText");
            // verify the required parameter 'X' is set
            if (X == null)
                throw new ApiException(400, "Missing required parameter 'X' when calling PdfApi->GetText");
            // verify the required parameter 'Y' is set
            if (Y == null)
                throw new ApiException(400, "Missing required parameter 'Y' when calling PdfApi->GetText");
            // verify the required parameter 'width' is set
            if (width == null)
                throw new ApiException(400, "Missing required parameter 'width' when calling PdfApi->GetText");
            // verify the required parameter 'height' is set
            if (height == null)
                throw new ApiException(400, "Missing required parameter 'height' when calling PdfApi->GetText");

            var localVarPath = "/pdf/{name}/text";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (format != null) localVarQueryParams.Add("format", ApiClient.ParameterToString(format)); // query parameter
            if (regex != null) localVarQueryParams.Add("regex", ApiClient.ParameterToString(regex)); // query parameter
            if (X != null) localVarQueryParams.Add("X", ApiClient.ParameterToString(X)); // query parameter
            if (Y != null) localVarQueryParams.Add("Y", ApiClient.ParameterToString(Y)); // query parameter
            if (width != null) localVarQueryParams.Add("Width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("Height", ApiClient.ParameterToString(height)); // query parameter
            if (splitRects != null) localVarQueryParams.Add("splitRects", ApiClient.ParameterToString(splitRects)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetText", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextRectsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TextRectsResponse) ApiClient.Deserialize(localVarResponse, typeof(TextRectsResponse)));
        }

        /// <summary>
        /// Read document text. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="X"></param>
        /// <param name="Y"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="format">List of formats for search. (optional)</param>
        /// <param name="regex">Formats are specified as a regular expression. (optional)</param>
        /// <param name="splitRects">Split result fragments (default is true). (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of TextRectsResponse</returns>
        public async System.Threading.Tasks.Task<TextRectsResponse> GetTextAsync (string name, int? X, int? Y, int? width, int? height, List<string> format = null, string regex = null, bool? splitRects = null, string folder = null)
        {
             ApiResponse<TextRectsResponse> localVarResponse = await GetTextAsyncWithHttpInfo(name, X, Y, width, height, format, regex, splitRects, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document text. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="X"></param>
        /// <param name="Y"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="format">List of formats for search. (optional)</param>
        /// <param name="regex">Formats are specified as a regular expression. (optional)</param>
        /// <param name="splitRects">Split result fragments (default is true). (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (TextRectsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TextRectsResponse>> GetTextAsyncWithHttpInfo (string name, int? X, int? Y, int? width, int? height, List<string> format = null, string regex = null, bool? splitRects = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetText");
            // verify the required parameter 'X' is set
            if (X == null)
                throw new ApiException(400, "Missing required parameter 'X' when calling PdfApi->GetText");
            // verify the required parameter 'Y' is set
            if (Y == null)
                throw new ApiException(400, "Missing required parameter 'Y' when calling PdfApi->GetText");
            // verify the required parameter 'width' is set
            if (width == null)
                throw new ApiException(400, "Missing required parameter 'width' when calling PdfApi->GetText");
            // verify the required parameter 'height' is set
            if (height == null)
                throw new ApiException(400, "Missing required parameter 'height' when calling PdfApi->GetText");

            var localVarPath = "/pdf/{name}/text";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (format != null) localVarQueryParams.Add("format", ApiClient.ParameterToString(format)); // query parameter
            if (regex != null) localVarQueryParams.Add("regex", ApiClient.ParameterToString(regex)); // query parameter
            if (X != null) localVarQueryParams.Add("X", ApiClient.ParameterToString(X)); // query parameter
            if (Y != null) localVarQueryParams.Add("Y", ApiClient.ParameterToString(Y)); // query parameter
            if (width != null) localVarQueryParams.Add("Width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("Height", ApiClient.ParameterToString(height)); // query parameter
            if (splitRects != null) localVarQueryParams.Add("splitRects", ApiClient.ParameterToString(splitRects)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetText", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextRectsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TextRectsResponse) ApiClient.Deserialize(localVarResponse, typeof(TextRectsResponse)));
        }

        /// <summary>
        /// Read document text items. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="withEmpty"> (optional)</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>TextItemsResponse</returns>
        public TextItemsResponse GetTextItems (string name, string withEmpty = null, string storage = null, string folder = null)
        {
             ApiResponse<TextItemsResponse> localVarResponse = GetTextItemsWithHttpInfo(name, withEmpty, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document text items. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="withEmpty"> (optional)</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of TextItemsResponse</returns>
        public ApiResponse< TextItemsResponse > GetTextItemsWithHttpInfo (string name, string withEmpty = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetTextItems");

            var localVarPath = "/pdf/{name}/textItems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (withEmpty != null) localVarQueryParams.Add("withEmpty", ApiClient.ParameterToString(withEmpty)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTextItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TextItemsResponse) ApiClient.Deserialize(localVarResponse, typeof(TextItemsResponse)));
        }

        /// <summary>
        /// Read document text items. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="withEmpty"> (optional)</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of TextItemsResponse</returns>
        public async System.Threading.Tasks.Task<TextItemsResponse> GetTextItemsAsync (string name, string withEmpty = null, string storage = null, string folder = null)
        {
             ApiResponse<TextItemsResponse> localVarResponse = await GetTextItemsAsyncWithHttpInfo(name, withEmpty, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document text items. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="withEmpty"> (optional)</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (TextItemsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TextItemsResponse>> GetTextItemsAsyncWithHttpInfo (string name, string withEmpty = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetTextItems");

            var localVarPath = "/pdf/{name}/textItems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (withEmpty != null) localVarQueryParams.Add("withEmpty", ApiClient.ParameterToString(withEmpty)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTextItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TextItemsResponse) ApiClient.Deserialize(localVarResponse, typeof(TextItemsResponse)));
        }

        /// <summary>
        /// Verify signature document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="signName">Sign name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SignatureVerifyResponse</returns>
        public SignatureVerifyResponse GetVerifySignature (string name, string signName, string folder = null)
        {
             ApiResponse<SignatureVerifyResponse> localVarResponse = GetVerifySignatureWithHttpInfo(name, signName, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Verify signature document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="signName">Sign name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SignatureVerifyResponse</returns>
        public ApiResponse< SignatureVerifyResponse > GetVerifySignatureWithHttpInfo (string name, string signName, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetVerifySignature");
            // verify the required parameter 'signName' is set
            if (signName == null)
                throw new ApiException(400, "Missing required parameter 'signName' when calling PdfApi->GetVerifySignature");

            var localVarPath = "/pdf/{name}/verifySignature";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (signName != null) localVarQueryParams.Add("signName", ApiClient.ParameterToString(signName)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVerifySignature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SignatureVerifyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SignatureVerifyResponse) ApiClient.Deserialize(localVarResponse, typeof(SignatureVerifyResponse)));
        }

        /// <summary>
        /// Verify signature document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="signName">Sign name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SignatureVerifyResponse</returns>
        public async System.Threading.Tasks.Task<SignatureVerifyResponse> GetVerifySignatureAsync (string name, string signName, string folder = null)
        {
             ApiResponse<SignatureVerifyResponse> localVarResponse = await GetVerifySignatureAsyncWithHttpInfo(name, signName, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Verify signature document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="signName">Sign name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SignatureVerifyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SignatureVerifyResponse>> GetVerifySignatureAsyncWithHttpInfo (string name, string signName, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetVerifySignature");
            // verify the required parameter 'signName' is set
            if (signName == null)
                throw new ApiException(400, "Missing required parameter 'signName' when calling PdfApi->GetVerifySignature");

            var localVarPath = "/pdf/{name}/verifySignature";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (signName != null) localVarQueryParams.Add("signName", ApiClient.ParameterToString(signName)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVerifySignature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SignatureVerifyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SignatureVerifyResponse) ApiClient.Deserialize(localVarResponse, typeof(SignatureVerifyResponse)));
        }

        /// <summary>
        /// Convert web page to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">Source url</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetWebInStorageToPdf (string url, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetWebInStorageToPdfWithHttpInfo(url, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert web page to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">Source url</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetWebInStorageToPdfWithHttpInfo (string url, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null)
        {
            // verify the required parameter 'url' is set
            if (url == null)
                throw new ApiException(400, "Missing required parameter 'url' when calling PdfApi->GetWebInStorageToPdf");

            var localVarPath = "/pdf/create/web";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (url != null) localVarQueryParams.Add("url", ApiClient.ParameterToString(url)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (isLandscape != null) localVarQueryParams.Add("isLandscape", ApiClient.ParameterToString(isLandscape)); // query parameter
            if (marginLeft != null) localVarQueryParams.Add("marginLeft", ApiClient.ParameterToString(marginLeft)); // query parameter
            if (marginBottom != null) localVarQueryParams.Add("marginBottom", ApiClient.ParameterToString(marginBottom)); // query parameter
            if (marginRight != null) localVarQueryParams.Add("marginRight", ApiClient.ParameterToString(marginRight)); // query parameter
            if (marginTop != null) localVarQueryParams.Add("marginTop", ApiClient.ParameterToString(marginTop)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert web page to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">Source url</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetWebInStorageToPdfAsync (string url, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetWebInStorageToPdfAsyncWithHttpInfo(url, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert web page to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">Source url</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetWebInStorageToPdfAsyncWithHttpInfo (string url, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null)
        {
            // verify the required parameter 'url' is set
            if (url == null)
                throw new ApiException(400, "Missing required parameter 'url' when calling PdfApi->GetWebInStorageToPdf");

            var localVarPath = "/pdf/create/web";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (url != null) localVarQueryParams.Add("url", ApiClient.ParameterToString(url)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (isLandscape != null) localVarQueryParams.Add("isLandscape", ApiClient.ParameterToString(isLandscape)); // query parameter
            if (marginLeft != null) localVarQueryParams.Add("marginLeft", ApiClient.ParameterToString(marginLeft)); // query parameter
            if (marginBottom != null) localVarQueryParams.Add("marginBottom", ApiClient.ParameterToString(marginBottom)); // query parameter
            if (marginRight != null) localVarQueryParams.Add("marginRight", ApiClient.ParameterToString(marginRight)); // query parameter
            if (marginTop != null) localVarQueryParams.Add("marginTop", ApiClient.ParameterToString(marginTop)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get number of words per document page. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>WordCountResponse</returns>
        public WordCountResponse GetWordsPerPage (string name, string storage = null, string folder = null)
        {
             ApiResponse<WordCountResponse> localVarResponse = GetWordsPerPageWithHttpInfo(name, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get number of words per document page. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of WordCountResponse</returns>
        public ApiResponse< WordCountResponse > GetWordsPerPageWithHttpInfo (string name, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetWordsPerPage");

            var localVarPath = "/pdf/{name}/pages/wordCount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWordsPerPage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WordCountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WordCountResponse) ApiClient.Deserialize(localVarResponse, typeof(WordCountResponse)));
        }

        /// <summary>
        /// Get number of words per document page. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of WordCountResponse</returns>
        public async System.Threading.Tasks.Task<WordCountResponse> GetWordsPerPageAsync (string name, string storage = null, string folder = null)
        {
             ApiResponse<WordCountResponse> localVarResponse = await GetWordsPerPageAsyncWithHttpInfo(name, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get number of words per document page. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (WordCountResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WordCountResponse>> GetWordsPerPageAsyncWithHttpInfo (string name, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetWordsPerPage");

            var localVarPath = "/pdf/{name}/pages/wordCount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWordsPerPage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WordCountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WordCountResponse) ApiClient.Deserialize(localVarResponse, typeof(WordCountResponse)));
        }

        /// <summary>
        /// Converts PDF document which contatins XFA form (located on storage) to PDF with AcroForm and returns resulting file response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetXfaPdfInStorageToAcroForm (string name, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetXfaPdfInStorageToAcroFormWithHttpInfo(name, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document which contatins XFA form (located on storage) to PDF with AcroForm and returns resulting file response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetXfaPdfInStorageToAcroFormWithHttpInfo (string name, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetXfaPdfInStorageToAcroForm");

            var localVarPath = "/pdf/{name}/convert/xfatoacroform";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetXfaPdfInStorageToAcroForm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Converts PDF document which contatins XFA form (located on storage) to PDF with AcroForm and returns resulting file response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetXfaPdfInStorageToAcroFormAsync (string name, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetXfaPdfInStorageToAcroFormAsyncWithHttpInfo(name, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document which contatins XFA form (located on storage) to PDF with AcroForm and returns resulting file response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetXfaPdfInStorageToAcroFormAsyncWithHttpInfo (string name, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetXfaPdfInStorageToAcroForm");

            var localVarPath = "/pdf/{name}/convert/xfatoacroform";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetXfaPdfInStorageToAcroForm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert XML file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xml)</param>
        /// <param name="xslFilePath">Full XSL source filename (ex. /folder1/folder2/template.xsl) (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetXmlInStorageToPdf (string srcPath, string xslFilePath = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetXmlInStorageToPdfWithHttpInfo(srcPath, xslFilePath);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert XML file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xml)</param>
        /// <param name="xslFilePath">Full XSL source filename (ex. /folder1/folder2/template.xsl) (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetXmlInStorageToPdfWithHttpInfo (string srcPath, string xslFilePath = null)
        {
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->GetXmlInStorageToPdf");

            var localVarPath = "/pdf/create/xml";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (xslFilePath != null) localVarQueryParams.Add("xslFilePath", ApiClient.ParameterToString(xslFilePath)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetXmlInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert XML file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xml)</param>
        /// <param name="xslFilePath">Full XSL source filename (ex. /folder1/folder2/template.xsl) (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetXmlInStorageToPdfAsync (string srcPath, string xslFilePath = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetXmlInStorageToPdfAsyncWithHttpInfo(srcPath, xslFilePath);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert XML file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xml)</param>
        /// <param name="xslFilePath">Full XSL source filename (ex. /folder1/folder2/template.xsl) (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetXmlInStorageToPdfAsyncWithHttpInfo (string srcPath, string xslFilePath = null)
        {
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->GetXmlInStorageToPdf");

            var localVarPath = "/pdf/create/xml";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (xslFilePath != null) localVarQueryParams.Add("xslFilePath", ApiClient.ParameterToString(xslFilePath)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetXmlInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert XPS file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xps)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetXpsInStorageToPdf (string srcPath)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetXpsInStorageToPdfWithHttpInfo(srcPath);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert XPS file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xps)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetXpsInStorageToPdfWithHttpInfo (string srcPath)
        {
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->GetXpsInStorageToPdf");

            var localVarPath = "/pdf/create/xps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetXpsInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert XPS file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xps)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetXpsInStorageToPdfAsync (string srcPath)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetXpsInStorageToPdfAsyncWithHttpInfo(srcPath);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert XPS file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xps)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetXpsInStorageToPdfAsyncWithHttpInfo (string srcPath)
        {
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->GetXpsInStorageToPdf");

            var localVarPath = "/pdf/create/xps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetXpsInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert XslFo file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xslfo)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetXslFoInStorageToPdf (string srcPath)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetXslFoInStorageToPdfWithHttpInfo(srcPath);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert XslFo file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xslfo)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetXslFoInStorageToPdfWithHttpInfo (string srcPath)
        {
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->GetXslFoInStorageToPdf");

            var localVarPath = "/pdf/create/xslfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetXslFoInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert XslFo file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xslfo)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetXslFoInStorageToPdfAsync (string srcPath)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetXslFoInStorageToPdfAsyncWithHttpInfo(srcPath);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert XslFo file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xslfo)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetXslFoInStorageToPdfAsyncWithHttpInfo (string srcPath)
        {
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->GetXslFoInStorageToPdf");

            var localVarPath = "/pdf/create/xslfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetXslFoInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Append document to existing one. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The original document name.</param>
        /// <param name="appendDocument">with the append document data. (optional)</param>
        /// <param name="appendFile">Append file server path. (optional)</param>
        /// <param name="startPage">Appending start page. (optional, default to 0)</param>
        /// <param name="endPage">Appending end page. (optional, default to 0)</param>
        /// <param name="storage">The documents storage. (optional)</param>
        /// <param name="folder">The original document folder. (optional)</param>
        /// <returns>DocumentResponse</returns>
        public DocumentResponse PostAppendDocument (string name, AppendDocument appendDocument = null, string appendFile = null, int? startPage = null, int? endPage = null, string storage = null, string folder = null)
        {
             ApiResponse<DocumentResponse> localVarResponse = PostAppendDocumentWithHttpInfo(name, appendDocument, appendFile, startPage, endPage, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Append document to existing one. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The original document name.</param>
        /// <param name="appendDocument">with the append document data. (optional)</param>
        /// <param name="appendFile">Append file server path. (optional)</param>
        /// <param name="startPage">Appending start page. (optional, default to 0)</param>
        /// <param name="endPage">Appending end page. (optional, default to 0)</param>
        /// <param name="storage">The documents storage. (optional)</param>
        /// <param name="folder">The original document folder. (optional)</param>
        /// <returns>ApiResponse of DocumentResponse</returns>
        public ApiResponse< DocumentResponse > PostAppendDocumentWithHttpInfo (string name, AppendDocument appendDocument = null, string appendFile = null, int? startPage = null, int? endPage = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostAppendDocument");

            var localVarPath = "/pdf/{name}/appendDocument";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (appendFile != null) localVarQueryParams.Add("appendFile", ApiClient.ParameterToString(appendFile)); // query parameter
            if (startPage != null) localVarQueryParams.Add("startPage", ApiClient.ParameterToString(startPage)); // query parameter
            if (endPage != null) localVarQueryParams.Add("endPage", ApiClient.ParameterToString(endPage)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (appendDocument != null && appendDocument.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(appendDocument); // http body (model) parameter
            }
            else
            {
                localVarPostBody = appendDocument; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostAppendDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentResponse) ApiClient.Deserialize(localVarResponse, typeof(DocumentResponse)));
        }

        /// <summary>
        /// Append document to existing one. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The original document name.</param>
        /// <param name="appendDocument">with the append document data. (optional)</param>
        /// <param name="appendFile">Append file server path. (optional)</param>
        /// <param name="startPage">Appending start page. (optional, default to 0)</param>
        /// <param name="endPage">Appending end page. (optional, default to 0)</param>
        /// <param name="storage">The documents storage. (optional)</param>
        /// <param name="folder">The original document folder. (optional)</param>
        /// <returns>Task of DocumentResponse</returns>
        public async System.Threading.Tasks.Task<DocumentResponse> PostAppendDocumentAsync (string name, AppendDocument appendDocument = null, string appendFile = null, int? startPage = null, int? endPage = null, string storage = null, string folder = null)
        {
             ApiResponse<DocumentResponse> localVarResponse = await PostAppendDocumentAsyncWithHttpInfo(name, appendDocument, appendFile, startPage, endPage, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Append document to existing one. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The original document name.</param>
        /// <param name="appendDocument">with the append document data. (optional)</param>
        /// <param name="appendFile">Append file server path. (optional)</param>
        /// <param name="startPage">Appending start page. (optional, default to 0)</param>
        /// <param name="endPage">Appending end page. (optional, default to 0)</param>
        /// <param name="storage">The documents storage. (optional)</param>
        /// <param name="folder">The original document folder. (optional)</param>
        /// <returns>Task of ApiResponse (DocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentResponse>> PostAppendDocumentAsyncWithHttpInfo (string name, AppendDocument appendDocument = null, string appendFile = null, int? startPage = null, int? endPage = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostAppendDocument");

            var localVarPath = "/pdf/{name}/appendDocument";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (appendFile != null) localVarQueryParams.Add("appendFile", ApiClient.ParameterToString(appendFile)); // query parameter
            if (startPage != null) localVarQueryParams.Add("startPage", ApiClient.ParameterToString(startPage)); // query parameter
            if (endPage != null) localVarQueryParams.Add("endPage", ApiClient.ParameterToString(endPage)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (appendDocument != null && appendDocument.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(appendDocument); // http body (model) parameter
            }
            else
            {
                localVarPostBody = appendDocument; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostAppendDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentResponse) ApiClient.Deserialize(localVarResponse, typeof(DocumentResponse)));
        }

        /// <summary>
        /// Create field. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="page">Document page number.</param>
        /// <param name="field">with the field data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PostCreateField (string name, int? page, Field field = null, string storage = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PostCreateFieldWithHttpInfo(name, page, field, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create field. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="page">Document page number.</param>
        /// <param name="field">with the field data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PostCreateFieldWithHttpInfo (string name, int? page, Field field = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostCreateField");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling PdfApi->PostCreateField");

            var localVarPath = "/pdf/{name}/fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (page != null) localVarQueryParams.Add("page", ApiClient.ParameterToString(page)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (field != null && field.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(field); // http body (model) parameter
            }
            else
            {
                localVarPostBody = field; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostCreateField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Create field. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="page">Document page number.</param>
        /// <param name="field">with the field data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PostCreateFieldAsync (string name, int? page, Field field = null, string storage = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PostCreateFieldAsyncWithHttpInfo(name, page, field, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create field. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="page">Document page number.</param>
        /// <param name="field">with the field data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PostCreateFieldAsyncWithHttpInfo (string name, int? page, Field field = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostCreateField");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling PdfApi->PostCreateField");

            var localVarPath = "/pdf/{name}/fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (page != null) localVarQueryParams.Add("page", ApiClient.ParameterToString(page)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (field != null && field.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(field); // http body (model) parameter
            }
            else
            {
                localVarPostBody = field; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostCreateField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Document&#39;s replace text method. Deprecated 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="textReplace"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>DocumentTextReplaceResponse</returns>
        public DocumentTextReplaceResponse PostDocumentReplaceText (string name, TextReplaceRequest textReplace, string storage = null, string folder = null)
        {
             ApiResponse<DocumentTextReplaceResponse> localVarResponse = PostDocumentReplaceTextWithHttpInfo(name, textReplace, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Document&#39;s replace text method. Deprecated 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="textReplace"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of DocumentTextReplaceResponse</returns>
        public ApiResponse< DocumentTextReplaceResponse > PostDocumentReplaceTextWithHttpInfo (string name, TextReplaceRequest textReplace, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostDocumentReplaceText");
            // verify the required parameter 'textReplace' is set
            if (textReplace == null)
                throw new ApiException(400, "Missing required parameter 'textReplace' when calling PdfApi->PostDocumentReplaceText");

            var localVarPath = "/pdf/{name}/replaceText";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (textReplace != null && textReplace.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(textReplace); // http body (model) parameter
            }
            else
            {
                localVarPostBody = textReplace; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostDocumentReplaceText", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentTextReplaceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentTextReplaceResponse) ApiClient.Deserialize(localVarResponse, typeof(DocumentTextReplaceResponse)));
        }

        /// <summary>
        /// Document&#39;s replace text method. Deprecated 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="textReplace"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of DocumentTextReplaceResponse</returns>
        public async System.Threading.Tasks.Task<DocumentTextReplaceResponse> PostDocumentReplaceTextAsync (string name, TextReplaceRequest textReplace, string storage = null, string folder = null)
        {
             ApiResponse<DocumentTextReplaceResponse> localVarResponse = await PostDocumentReplaceTextAsyncWithHttpInfo(name, textReplace, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Document&#39;s replace text method. Deprecated 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="textReplace"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (DocumentTextReplaceResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentTextReplaceResponse>> PostDocumentReplaceTextAsyncWithHttpInfo (string name, TextReplaceRequest textReplace, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostDocumentReplaceText");
            // verify the required parameter 'textReplace' is set
            if (textReplace == null)
                throw new ApiException(400, "Missing required parameter 'textReplace' when calling PdfApi->PostDocumentReplaceText");

            var localVarPath = "/pdf/{name}/replaceText";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (textReplace != null && textReplace.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(textReplace); // http body (model) parameter
            }
            else
            {
                localVarPostBody = textReplace; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostDocumentReplaceText", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentTextReplaceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentTextReplaceResponse) ApiClient.Deserialize(localVarResponse, typeof(DocumentTextReplaceResponse)));
        }

        /// <summary>
        /// Document&#39;s replace text method. Deprecated 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="textReplaceListRequest"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>DocumentTextReplaceResponse</returns>
        public DocumentTextReplaceResponse PostDocumentReplaceTextList (string name, TextReplaceListRequest textReplaceListRequest, string storage = null, string folder = null)
        {
             ApiResponse<DocumentTextReplaceResponse> localVarResponse = PostDocumentReplaceTextListWithHttpInfo(name, textReplaceListRequest, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Document&#39;s replace text method. Deprecated 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="textReplaceListRequest"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of DocumentTextReplaceResponse</returns>
        public ApiResponse< DocumentTextReplaceResponse > PostDocumentReplaceTextListWithHttpInfo (string name, TextReplaceListRequest textReplaceListRequest, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostDocumentReplaceTextList");
            // verify the required parameter 'textReplaceListRequest' is set
            if (textReplaceListRequest == null)
                throw new ApiException(400, "Missing required parameter 'textReplaceListRequest' when calling PdfApi->PostDocumentReplaceTextList");

            var localVarPath = "/pdf/{name}/replaceTextList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (textReplaceListRequest != null && textReplaceListRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(textReplaceListRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = textReplaceListRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostDocumentReplaceTextList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentTextReplaceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentTextReplaceResponse) ApiClient.Deserialize(localVarResponse, typeof(DocumentTextReplaceResponse)));
        }

        /// <summary>
        /// Document&#39;s replace text method. Deprecated 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="textReplaceListRequest"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of DocumentTextReplaceResponse</returns>
        public async System.Threading.Tasks.Task<DocumentTextReplaceResponse> PostDocumentReplaceTextListAsync (string name, TextReplaceListRequest textReplaceListRequest, string storage = null, string folder = null)
        {
             ApiResponse<DocumentTextReplaceResponse> localVarResponse = await PostDocumentReplaceTextListAsyncWithHttpInfo(name, textReplaceListRequest, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Document&#39;s replace text method. Deprecated 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="textReplaceListRequest"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (DocumentTextReplaceResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentTextReplaceResponse>> PostDocumentReplaceTextListAsyncWithHttpInfo (string name, TextReplaceListRequest textReplaceListRequest, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostDocumentReplaceTextList");
            // verify the required parameter 'textReplaceListRequest' is set
            if (textReplaceListRequest == null)
                throw new ApiException(400, "Missing required parameter 'textReplaceListRequest' when calling PdfApi->PostDocumentReplaceTextList");

            var localVarPath = "/pdf/{name}/replaceTextList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (textReplaceListRequest != null && textReplaceListRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(textReplaceListRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = textReplaceListRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostDocumentReplaceTextList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentTextReplaceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentTextReplaceResponse) ApiClient.Deserialize(localVarResponse, typeof(DocumentTextReplaceResponse)));
        }

        /// <summary>
        /// Document&#39;s replace text method. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="textReplace"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>TextReplaceResponse</returns>
        public TextReplaceResponse PostDocumentTextReplace (string name, TextReplaceListRequest textReplace, string storage = null, string folder = null)
        {
             ApiResponse<TextReplaceResponse> localVarResponse = PostDocumentTextReplaceWithHttpInfo(name, textReplace, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Document&#39;s replace text method. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="textReplace"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of TextReplaceResponse</returns>
        public ApiResponse< TextReplaceResponse > PostDocumentTextReplaceWithHttpInfo (string name, TextReplaceListRequest textReplace, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostDocumentTextReplace");
            // verify the required parameter 'textReplace' is set
            if (textReplace == null)
                throw new ApiException(400, "Missing required parameter 'textReplace' when calling PdfApi->PostDocumentTextReplace");

            var localVarPath = "/pdf/{name}/text/replace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (textReplace != null && textReplace.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(textReplace); // http body (model) parameter
            }
            else
            {
                localVarPostBody = textReplace; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostDocumentTextReplace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextReplaceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TextReplaceResponse) ApiClient.Deserialize(localVarResponse, typeof(TextReplaceResponse)));
        }

        /// <summary>
        /// Document&#39;s replace text method. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="textReplace"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of TextReplaceResponse</returns>
        public async System.Threading.Tasks.Task<TextReplaceResponse> PostDocumentTextReplaceAsync (string name, TextReplaceListRequest textReplace, string storage = null, string folder = null)
        {
             ApiResponse<TextReplaceResponse> localVarResponse = await PostDocumentTextReplaceAsyncWithHttpInfo(name, textReplace, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Document&#39;s replace text method. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="textReplace"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (TextReplaceResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TextReplaceResponse>> PostDocumentTextReplaceAsyncWithHttpInfo (string name, TextReplaceListRequest textReplace, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostDocumentTextReplace");
            // verify the required parameter 'textReplace' is set
            if (textReplace == null)
                throw new ApiException(400, "Missing required parameter 'textReplace' when calling PdfApi->PostDocumentTextReplace");

            var localVarPath = "/pdf/{name}/text/replace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (textReplace != null && textReplace.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(textReplace); // http body (model) parameter
            }
            else
            {
                localVarPostBody = textReplace; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostDocumentTextReplace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextReplaceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TextReplaceResponse) ApiClient.Deserialize(localVarResponse, typeof(TextReplaceResponse)));
        }

        /// <summary>
        /// Move page to new position. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="newIndex">The new page position/index.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PostMovePage (string name, int? pageNumber, int? newIndex, string storage = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PostMovePageWithHttpInfo(name, pageNumber, newIndex, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Move page to new position. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="newIndex">The new page position/index.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PostMovePageWithHttpInfo (string name, int? pageNumber, int? newIndex, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostMovePage");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PostMovePage");
            // verify the required parameter 'newIndex' is set
            if (newIndex == null)
                throw new ApiException(400, "Missing required parameter 'newIndex' when calling PdfApi->PostMovePage");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/movePage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (newIndex != null) localVarQueryParams.Add("newIndex", ApiClient.ParameterToString(newIndex)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostMovePage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Move page to new position. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="newIndex">The new page position/index.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PostMovePageAsync (string name, int? pageNumber, int? newIndex, string storage = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PostMovePageAsyncWithHttpInfo(name, pageNumber, newIndex, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Move page to new position. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="newIndex">The new page position/index.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PostMovePageAsyncWithHttpInfo (string name, int? pageNumber, int? newIndex, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostMovePage");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PostMovePage");
            // verify the required parameter 'newIndex' is set
            if (newIndex == null)
                throw new ApiException(400, "Missing required parameter 'newIndex' when calling PdfApi->PostMovePage");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/movePage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (newIndex != null) localVarQueryParams.Add("newIndex", ApiClient.ParameterToString(newIndex)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostMovePage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Optimize document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="options">The optimization options. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PostOptimizeDocument (string name, OptimizeOptions options = null, string storage = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PostOptimizeDocumentWithHttpInfo(name, options, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Optimize document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="options">The optimization options. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PostOptimizeDocumentWithHttpInfo (string name, OptimizeOptions options = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostOptimizeDocument");

            var localVarPath = "/pdf/{name}/optimize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostOptimizeDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Optimize document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="options">The optimization options. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PostOptimizeDocumentAsync (string name, OptimizeOptions options = null, string storage = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PostOptimizeDocumentAsyncWithHttpInfo(name, options, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Optimize document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="options">The optimization options. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PostOptimizeDocumentAsyncWithHttpInfo (string name, OptimizeOptions options = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostOptimizeDocument");

            var localVarPath = "/pdf/{name}/optimize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostOptimizeDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Page&#39;s replace text method. Deprecated 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="textReplace"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>PageTextReplaceResponse</returns>
        public PageTextReplaceResponse PostPageReplaceText (string name, int? pageNumber, TextReplaceRequest textReplace, string storage = null, string folder = null)
        {
             ApiResponse<PageTextReplaceResponse> localVarResponse = PostPageReplaceTextWithHttpInfo(name, pageNumber, textReplace, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Page&#39;s replace text method. Deprecated 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="textReplace"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of PageTextReplaceResponse</returns>
        public ApiResponse< PageTextReplaceResponse > PostPageReplaceTextWithHttpInfo (string name, int? pageNumber, TextReplaceRequest textReplace, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostPageReplaceText");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PostPageReplaceText");
            // verify the required parameter 'textReplace' is set
            if (textReplace == null)
                throw new ApiException(400, "Missing required parameter 'textReplace' when calling PdfApi->PostPageReplaceText");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/replaceText";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (textReplace != null && textReplace.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(textReplace); // http body (model) parameter
            }
            else
            {
                localVarPostBody = textReplace; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostPageReplaceText", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageTextReplaceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageTextReplaceResponse) ApiClient.Deserialize(localVarResponse, typeof(PageTextReplaceResponse)));
        }

        /// <summary>
        /// Page&#39;s replace text method. Deprecated 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="textReplace"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of PageTextReplaceResponse</returns>
        public async System.Threading.Tasks.Task<PageTextReplaceResponse> PostPageReplaceTextAsync (string name, int? pageNumber, TextReplaceRequest textReplace, string storage = null, string folder = null)
        {
             ApiResponse<PageTextReplaceResponse> localVarResponse = await PostPageReplaceTextAsyncWithHttpInfo(name, pageNumber, textReplace, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Page&#39;s replace text method. Deprecated 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="textReplace"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (PageTextReplaceResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageTextReplaceResponse>> PostPageReplaceTextAsyncWithHttpInfo (string name, int? pageNumber, TextReplaceRequest textReplace, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostPageReplaceText");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PostPageReplaceText");
            // verify the required parameter 'textReplace' is set
            if (textReplace == null)
                throw new ApiException(400, "Missing required parameter 'textReplace' when calling PdfApi->PostPageReplaceText");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/replaceText";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (textReplace != null && textReplace.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(textReplace); // http body (model) parameter
            }
            else
            {
                localVarPostBody = textReplace; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostPageReplaceText", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageTextReplaceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageTextReplaceResponse) ApiClient.Deserialize(localVarResponse, typeof(PageTextReplaceResponse)));
        }

        /// <summary>
        /// Page&#39;s replace text method. Deprecated 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="textReplaceListRequest"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>PageTextReplaceResponse</returns>
        public PageTextReplaceResponse PostPageReplaceTextList (string name, int? pageNumber, TextReplaceListRequest textReplaceListRequest, string storage = null, string folder = null)
        {
             ApiResponse<PageTextReplaceResponse> localVarResponse = PostPageReplaceTextListWithHttpInfo(name, pageNumber, textReplaceListRequest, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Page&#39;s replace text method. Deprecated 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="textReplaceListRequest"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of PageTextReplaceResponse</returns>
        public ApiResponse< PageTextReplaceResponse > PostPageReplaceTextListWithHttpInfo (string name, int? pageNumber, TextReplaceListRequest textReplaceListRequest, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostPageReplaceTextList");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PostPageReplaceTextList");
            // verify the required parameter 'textReplaceListRequest' is set
            if (textReplaceListRequest == null)
                throw new ApiException(400, "Missing required parameter 'textReplaceListRequest' when calling PdfApi->PostPageReplaceTextList");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/replaceTextList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (textReplaceListRequest != null && textReplaceListRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(textReplaceListRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = textReplaceListRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostPageReplaceTextList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageTextReplaceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageTextReplaceResponse) ApiClient.Deserialize(localVarResponse, typeof(PageTextReplaceResponse)));
        }

        /// <summary>
        /// Page&#39;s replace text method. Deprecated 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="textReplaceListRequest"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of PageTextReplaceResponse</returns>
        public async System.Threading.Tasks.Task<PageTextReplaceResponse> PostPageReplaceTextListAsync (string name, int? pageNumber, TextReplaceListRequest textReplaceListRequest, string storage = null, string folder = null)
        {
             ApiResponse<PageTextReplaceResponse> localVarResponse = await PostPageReplaceTextListAsyncWithHttpInfo(name, pageNumber, textReplaceListRequest, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Page&#39;s replace text method. Deprecated 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="textReplaceListRequest"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (PageTextReplaceResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageTextReplaceResponse>> PostPageReplaceTextListAsyncWithHttpInfo (string name, int? pageNumber, TextReplaceListRequest textReplaceListRequest, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostPageReplaceTextList");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PostPageReplaceTextList");
            // verify the required parameter 'textReplaceListRequest' is set
            if (textReplaceListRequest == null)
                throw new ApiException(400, "Missing required parameter 'textReplaceListRequest' when calling PdfApi->PostPageReplaceTextList");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/replaceTextList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (textReplaceListRequest != null && textReplaceListRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(textReplaceListRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = textReplaceListRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostPageReplaceTextList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageTextReplaceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageTextReplaceResponse) ApiClient.Deserialize(localVarResponse, typeof(PageTextReplaceResponse)));
        }

        /// <summary>
        /// Page&#39;s replace text method. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="textReplaceListRequest"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>TextReplaceResponse</returns>
        public TextReplaceResponse PostPageTextReplace (string name, int? pageNumber, TextReplaceListRequest textReplaceListRequest, string storage = null, string folder = null)
        {
             ApiResponse<TextReplaceResponse> localVarResponse = PostPageTextReplaceWithHttpInfo(name, pageNumber, textReplaceListRequest, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Page&#39;s replace text method. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="textReplaceListRequest"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of TextReplaceResponse</returns>
        public ApiResponse< TextReplaceResponse > PostPageTextReplaceWithHttpInfo (string name, int? pageNumber, TextReplaceListRequest textReplaceListRequest, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostPageTextReplace");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PostPageTextReplace");
            // verify the required parameter 'textReplaceListRequest' is set
            if (textReplaceListRequest == null)
                throw new ApiException(400, "Missing required parameter 'textReplaceListRequest' when calling PdfApi->PostPageTextReplace");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/text/replace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (textReplaceListRequest != null && textReplaceListRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(textReplaceListRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = textReplaceListRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostPageTextReplace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextReplaceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TextReplaceResponse) ApiClient.Deserialize(localVarResponse, typeof(TextReplaceResponse)));
        }

        /// <summary>
        /// Page&#39;s replace text method. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="textReplaceListRequest"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of TextReplaceResponse</returns>
        public async System.Threading.Tasks.Task<TextReplaceResponse> PostPageTextReplaceAsync (string name, int? pageNumber, TextReplaceListRequest textReplaceListRequest, string storage = null, string folder = null)
        {
             ApiResponse<TextReplaceResponse> localVarResponse = await PostPageTextReplaceAsyncWithHttpInfo(name, pageNumber, textReplaceListRequest, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Page&#39;s replace text method. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="textReplaceListRequest"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (TextReplaceResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TextReplaceResponse>> PostPageTextReplaceAsyncWithHttpInfo (string name, int? pageNumber, TextReplaceListRequest textReplaceListRequest, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostPageTextReplace");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PostPageTextReplace");
            // verify the required parameter 'textReplaceListRequest' is set
            if (textReplaceListRequest == null)
                throw new ApiException(400, "Missing required parameter 'textReplaceListRequest' when calling PdfApi->PostPageTextReplace");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/text/replace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (textReplaceListRequest != null && textReplaceListRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(textReplaceListRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = textReplaceListRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostPageTextReplace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextReplaceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TextReplaceResponse) ApiClient.Deserialize(localVarResponse, typeof(TextReplaceResponse)));
        }

        /// <summary>
        /// Replace document image. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="imageNumber">The image number.</param>
        /// <param name="imageFile">Path to image file if specified. Request content is used otherwise. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="image">Image file. (optional)</param>
        /// <returns>ImageResponse</returns>
        public ImageResponse PostReplaceImage (string name, int? pageNumber, int? imageNumber, string imageFile = null, string storage = null, string folder = null, System.IO.Stream image = null)
        {
             ApiResponse<ImageResponse> localVarResponse = PostReplaceImageWithHttpInfo(name, pageNumber, imageNumber, imageFile, storage, folder, image);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replace document image. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="imageNumber">The image number.</param>
        /// <param name="imageFile">Path to image file if specified. Request content is used otherwise. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="image">Image file. (optional)</param>
        /// <returns>ApiResponse of ImageResponse</returns>
        public ApiResponse< ImageResponse > PostReplaceImageWithHttpInfo (string name, int? pageNumber, int? imageNumber, string imageFile = null, string storage = null, string folder = null, System.IO.Stream image = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostReplaceImage");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PostReplaceImage");
            // verify the required parameter 'imageNumber' is set
            if (imageNumber == null)
                throw new ApiException(400, "Missing required parameter 'imageNumber' when calling PdfApi->PostReplaceImage");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/images/{imageNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (imageNumber != null) localVarPathParams.Add("imageNumber", ApiClient.ParameterToString(imageNumber)); // path parameter
            if (imageFile != null) localVarQueryParams.Add("imageFile", ApiClient.ParameterToString(imageFile)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (image != null) localVarFileParams.Add("image", ApiClient.ParameterToFile("image", image));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostReplaceImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ImageResponse) ApiClient.Deserialize(localVarResponse, typeof(ImageResponse)));
        }

        /// <summary>
        /// Replace document image. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="imageNumber">The image number.</param>
        /// <param name="imageFile">Path to image file if specified. Request content is used otherwise. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="image">Image file. (optional)</param>
        /// <returns>Task of ImageResponse</returns>
        public async System.Threading.Tasks.Task<ImageResponse> PostReplaceImageAsync (string name, int? pageNumber, int? imageNumber, string imageFile = null, string storage = null, string folder = null, System.IO.Stream image = null)
        {
             ApiResponse<ImageResponse> localVarResponse = await PostReplaceImageAsyncWithHttpInfo(name, pageNumber, imageNumber, imageFile, storage, folder, image);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replace document image. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="imageNumber">The image number.</param>
        /// <param name="imageFile">Path to image file if specified. Request content is used otherwise. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="image">Image file. (optional)</param>
        /// <returns>Task of ApiResponse (ImageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ImageResponse>> PostReplaceImageAsyncWithHttpInfo (string name, int? pageNumber, int? imageNumber, string imageFile = null, string storage = null, string folder = null, System.IO.Stream image = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostReplaceImage");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PostReplaceImage");
            // verify the required parameter 'imageNumber' is set
            if (imageNumber == null)
                throw new ApiException(400, "Missing required parameter 'imageNumber' when calling PdfApi->PostReplaceImage");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/images/{imageNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (imageNumber != null) localVarPathParams.Add("imageNumber", ApiClient.ParameterToString(imageNumber)); // path parameter
            if (imageFile != null) localVarQueryParams.Add("imageFile", ApiClient.ParameterToString(imageFile)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (image != null) localVarFileParams.Add("image", ApiClient.ParameterToFile("image", image));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostReplaceImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ImageResponse) ApiClient.Deserialize(localVarResponse, typeof(ImageResponse)));
        }

        /// <summary>
        /// Sign document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="signature">Signature object containing signature data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PostSignDocument (string name, Signature signature = null, string storage = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PostSignDocumentWithHttpInfo(name, signature, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sign document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="signature">Signature object containing signature data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PostSignDocumentWithHttpInfo (string name, Signature signature = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostSignDocument");

            var localVarPath = "/pdf/{name}/sign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (signature != null && signature.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(signature); // http body (model) parameter
            }
            else
            {
                localVarPostBody = signature; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSignDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Sign document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="signature">Signature object containing signature data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PostSignDocumentAsync (string name, Signature signature = null, string storage = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PostSignDocumentAsyncWithHttpInfo(name, signature, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sign document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="signature">Signature object containing signature data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PostSignDocumentAsyncWithHttpInfo (string name, Signature signature = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostSignDocument");

            var localVarPath = "/pdf/{name}/sign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (signature != null && signature.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(signature); // http body (model) parameter
            }
            else
            {
                localVarPostBody = signature; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSignDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Sign page. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="signature">Signature object containing signature data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PostSignPage (string name, int? pageNumber, Signature signature = null, string storage = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PostSignPageWithHttpInfo(name, pageNumber, signature, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sign page. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="signature">Signature object containing signature data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PostSignPageWithHttpInfo (string name, int? pageNumber, Signature signature = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostSignPage");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PostSignPage");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/sign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (signature != null && signature.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(signature); // http body (model) parameter
            }
            else
            {
                localVarPostBody = signature; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSignPage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Sign page. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="signature">Signature object containing signature data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PostSignPageAsync (string name, int? pageNumber, Signature signature = null, string storage = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PostSignPageAsyncWithHttpInfo(name, pageNumber, signature, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sign page. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="signature">Signature object containing signature data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PostSignPageAsyncWithHttpInfo (string name, int? pageNumber, Signature signature = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostSignPage");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PostSignPage");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/sign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (signature != null && signature.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(signature); // http body (model) parameter
            }
            else
            {
                localVarPostBody = signature; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSignPage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Split document to parts. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="format">Resulting documents format. (optional)</param>
        /// <param name="from">Start page if defined. (optional)</param>
        /// <param name="to">End page if defined. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SplitResultResponse</returns>
        public SplitResultResponse PostSplitDocument (string name, string format = null, int? from = null, int? to = null, string storage = null, string folder = null)
        {
             ApiResponse<SplitResultResponse> localVarResponse = PostSplitDocumentWithHttpInfo(name, format, from, to, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Split document to parts. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="format">Resulting documents format. (optional)</param>
        /// <param name="from">Start page if defined. (optional)</param>
        /// <param name="to">End page if defined. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SplitResultResponse</returns>
        public ApiResponse< SplitResultResponse > PostSplitDocumentWithHttpInfo (string name, string format = null, int? from = null, int? to = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostSplitDocument");

            var localVarPath = "/pdf/{name}/split";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (format != null) localVarQueryParams.Add("format", ApiClient.ParameterToString(format)); // query parameter
            if (from != null) localVarQueryParams.Add("from", ApiClient.ParameterToString(from)); // query parameter
            if (to != null) localVarQueryParams.Add("to", ApiClient.ParameterToString(to)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSplitDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SplitResultResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SplitResultResponse) ApiClient.Deserialize(localVarResponse, typeof(SplitResultResponse)));
        }

        /// <summary>
        /// Split document to parts. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="format">Resulting documents format. (optional)</param>
        /// <param name="from">Start page if defined. (optional)</param>
        /// <param name="to">End page if defined. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SplitResultResponse</returns>
        public async System.Threading.Tasks.Task<SplitResultResponse> PostSplitDocumentAsync (string name, string format = null, int? from = null, int? to = null, string storage = null, string folder = null)
        {
             ApiResponse<SplitResultResponse> localVarResponse = await PostSplitDocumentAsyncWithHttpInfo(name, format, from, to, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Split document to parts. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="format">Resulting documents format. (optional)</param>
        /// <param name="from">Start page if defined. (optional)</param>
        /// <param name="to">End page if defined. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SplitResultResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SplitResultResponse>> PostSplitDocumentAsyncWithHttpInfo (string name, string format = null, int? from = null, int? to = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostSplitDocument");

            var localVarPath = "/pdf/{name}/split";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (format != null) localVarQueryParams.Add("format", ApiClient.ParameterToString(format)); // query parameter
            if (from != null) localVarQueryParams.Add("from", ApiClient.ParameterToString(from)); // query parameter
            if (to != null) localVarQueryParams.Add("to", ApiClient.ParameterToString(to)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSplitDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SplitResultResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SplitResultResponse) ApiClient.Deserialize(localVarResponse, typeof(SplitResultResponse)));
        }

        /// <summary>
        /// Add new page to end of the document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>DocumentPagesResponse</returns>
        public DocumentPagesResponse PutAddNewPage (string name, string storage = null, string folder = null)
        {
             ApiResponse<DocumentPagesResponse> localVarResponse = PutAddNewPageWithHttpInfo(name, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add new page to end of the document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of DocumentPagesResponse</returns>
        public ApiResponse< DocumentPagesResponse > PutAddNewPageWithHttpInfo (string name, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutAddNewPage");

            var localVarPath = "/pdf/{name}/pages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutAddNewPage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentPagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentPagesResponse) ApiClient.Deserialize(localVarResponse, typeof(DocumentPagesResponse)));
        }

        /// <summary>
        /// Add new page to end of the document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of DocumentPagesResponse</returns>
        public async System.Threading.Tasks.Task<DocumentPagesResponse> PutAddNewPageAsync (string name, string storage = null, string folder = null)
        {
             ApiResponse<DocumentPagesResponse> localVarResponse = await PutAddNewPageAsyncWithHttpInfo(name, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add new page to end of the document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (DocumentPagesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentPagesResponse>> PutAddNewPageAsyncWithHttpInfo (string name, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutAddNewPage");

            var localVarPath = "/pdf/{name}/pages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutAddNewPage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentPagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentPagesResponse) ApiClient.Deserialize(localVarResponse, typeof(DocumentPagesResponse)));
        }

        /// <summary>
        /// Add text to PDF document page. Deprecated 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the document to which text should be added.</param>
        /// <param name="pageNumber">Number of page (starting with 1) to which text should be added.</param>
        /// <param name="paragraph">Paragraph data. (optional)</param>
        /// <param name="storage">File storage to be used. (optional)</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PutAddParagraph (string name, int? pageNumber, Paragraph paragraph = null, string storage = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PutAddParagraphWithHttpInfo(name, pageNumber, paragraph, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add text to PDF document page. Deprecated 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the document to which text should be added.</param>
        /// <param name="pageNumber">Number of page (starting with 1) to which text should be added.</param>
        /// <param name="paragraph">Paragraph data. (optional)</param>
        /// <param name="storage">File storage to be used. (optional)</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PutAddParagraphWithHttpInfo (string name, int? pageNumber, Paragraph paragraph = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutAddParagraph");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PutAddParagraph");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/paragraph";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (paragraph != null && paragraph.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(paragraph); // http body (model) parameter
            }
            else
            {
                localVarPostBody = paragraph; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutAddParagraph", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Add text to PDF document page. Deprecated 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the document to which text should be added.</param>
        /// <param name="pageNumber">Number of page (starting with 1) to which text should be added.</param>
        /// <param name="paragraph">Paragraph data. (optional)</param>
        /// <param name="storage">File storage to be used. (optional)</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PutAddParagraphAsync (string name, int? pageNumber, Paragraph paragraph = null, string storage = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PutAddParagraphAsyncWithHttpInfo(name, pageNumber, paragraph, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add text to PDF document page. Deprecated 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the document to which text should be added.</param>
        /// <param name="pageNumber">Number of page (starting with 1) to which text should be added.</param>
        /// <param name="paragraph">Paragraph data. (optional)</param>
        /// <param name="storage">File storage to be used. (optional)</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutAddParagraphAsyncWithHttpInfo (string name, int? pageNumber, Paragraph paragraph = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutAddParagraph");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PutAddParagraph");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/paragraph";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (paragraph != null && paragraph.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(paragraph); // http body (model) parameter
            }
            else
            {
                localVarPostBody = paragraph; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutAddParagraph", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Add text to PDF document page. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">Number of page (starting from 1).</param>
        /// <param name="paragraph">Paragraph data. (optional)</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PutAddText (string name, int? pageNumber, Paragraph paragraph = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PutAddTextWithHttpInfo(name, pageNumber, paragraph, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add text to PDF document page. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">Number of page (starting from 1).</param>
        /// <param name="paragraph">Paragraph data. (optional)</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PutAddTextWithHttpInfo (string name, int? pageNumber, Paragraph paragraph = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutAddText");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PutAddText");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/text";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (paragraph != null && paragraph.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(paragraph); // http body (model) parameter
            }
            else
            {
                localVarPostBody = paragraph; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutAddText", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Add text to PDF document page. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">Number of page (starting from 1).</param>
        /// <param name="paragraph">Paragraph data. (optional)</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PutAddTextAsync (string name, int? pageNumber, Paragraph paragraph = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PutAddTextAsyncWithHttpInfo(name, pageNumber, paragraph, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add text to PDF document page. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">Number of page (starting from 1).</param>
        /// <param name="paragraph">Paragraph data. (optional)</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutAddTextAsyncWithHttpInfo (string name, int? pageNumber, Paragraph paragraph = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutAddText");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PutAddText");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/text";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (paragraph != null && paragraph.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(paragraph); // http body (model) parameter
            }
            else
            {
                localVarPostBody = paragraph; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutAddText", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Convert document from request content to format specified. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">The format to convert. (optional)</param>
        /// <param name="url"> (optional)</param>
        /// <param name="outPath">Path to save result (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream PutConvertDocument (string format = null, string url = null, string outPath = null, System.IO.Stream file = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = PutConvertDocumentWithHttpInfo(format, url, outPath, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert document from request content to format specified. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">The format to convert. (optional)</param>
        /// <param name="url"> (optional)</param>
        /// <param name="outPath">Path to save result (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > PutConvertDocumentWithHttpInfo (string format = null, string url = null, string outPath = null, System.IO.Stream file = null)
        {

            var localVarPath = "/pdf/convert";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarQueryParams.Add("format", ApiClient.ParameterToString(format)); // query parameter
            if (url != null) localVarQueryParams.Add("url", ApiClient.ParameterToString(url)); // query parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (file != null) localVarFileParams.Add("file", ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutConvertDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert document from request content to format specified. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">The format to convert. (optional)</param>
        /// <param name="url"> (optional)</param>
        /// <param name="outPath">Path to save result (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> PutConvertDocumentAsync (string format = null, string url = null, string outPath = null, System.IO.Stream file = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await PutConvertDocumentAsyncWithHttpInfo(format, url, outPath, file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert document from request content to format specified. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">The format to convert. (optional)</param>
        /// <param name="url"> (optional)</param>
        /// <param name="outPath">Path to save result (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> PutConvertDocumentAsyncWithHttpInfo (string format = null, string url = null, string outPath = null, System.IO.Stream file = null)
        {

            var localVarPath = "/pdf/convert";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarQueryParams.Add("format", ApiClient.ParameterToString(format)); // query parameter
            if (url != null) localVarQueryParams.Add("url", ApiClient.ParameterToString(url)); // query parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (file != null) localVarFileParams.Add("file", ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutConvertDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Upload a specific file  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext</param>
        /// <param name="file">File to upload</param>
        /// <param name="versionId">Source file&#39;s version (optional)</param>
        /// <param name="storage">User&#39;s storage name (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PutCreate (string path, System.IO.Stream file, string versionId = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PutCreateWithHttpInfo(path, file, versionId, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload a specific file  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext</param>
        /// <param name="file">File to upload</param>
        /// <param name="versionId">Source file&#39;s version (optional)</param>
        /// <param name="storage">User&#39;s storage name (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PutCreateWithHttpInfo (string path, System.IO.Stream file, string versionId = null, string storage = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling PdfApi->PutCreate");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling PdfApi->PutCreate");

            var localVarPath = "/storage/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarQueryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            if (versionId != null) localVarQueryParams.Add("versionId", ApiClient.ParameterToString(versionId)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (file != null) localVarFileParams.Add("File", ApiClient.ParameterToFile("File", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Upload a specific file  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext</param>
        /// <param name="file">File to upload</param>
        /// <param name="versionId">Source file&#39;s version (optional)</param>
        /// <param name="storage">User&#39;s storage name (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PutCreateAsync (string path, System.IO.Stream file, string versionId = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PutCreateAsyncWithHttpInfo(path, file, versionId, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload a specific file  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext</param>
        /// <param name="file">File to upload</param>
        /// <param name="versionId">Source file&#39;s version (optional)</param>
        /// <param name="storage">User&#39;s storage name (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutCreateAsyncWithHttpInfo (string path, System.IO.Stream file, string versionId = null, string storage = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling PdfApi->PutCreate");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling PdfApi->PutCreate");

            var localVarPath = "/storage/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarQueryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            if (versionId != null) localVarQueryParams.Add("versionId", ApiClient.ParameterToString(versionId)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (file != null) localVarFileParams.Add("File", ApiClient.ParameterToFile("File", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Create new document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new document name.</param>
        /// <param name="templateFile">The template file server path if defined. (optional)</param>
        /// <param name="dataFile">The data file path (for xml template only). (optional)</param>
        /// <param name="templateType">The template type, can be xml, html, bmp, jpg, png, tiff, emf, cgm, tex. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The new document folder. (optional)</param>
        /// <param name="url">The url of web page if defined. (optional)</param>
        /// <param name="fitSize">Draw a margin around content in resulting pdf. (optional, default to false)</param>
        /// <returns>DocumentResponse</returns>
        public DocumentResponse PutCreateDocument (string name, string templateFile = null, string dataFile = null, string templateType = null, string storage = null, string folder = null, string url = null, bool? fitSize = null)
        {
             ApiResponse<DocumentResponse> localVarResponse = PutCreateDocumentWithHttpInfo(name, templateFile, dataFile, templateType, storage, folder, url, fitSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create new document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new document name.</param>
        /// <param name="templateFile">The template file server path if defined. (optional)</param>
        /// <param name="dataFile">The data file path (for xml template only). (optional)</param>
        /// <param name="templateType">The template type, can be xml, html, bmp, jpg, png, tiff, emf, cgm, tex. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The new document folder. (optional)</param>
        /// <param name="url">The url of web page if defined. (optional)</param>
        /// <param name="fitSize">Draw a margin around content in resulting pdf. (optional, default to false)</param>
        /// <returns>ApiResponse of DocumentResponse</returns>
        public ApiResponse< DocumentResponse > PutCreateDocumentWithHttpInfo (string name, string templateFile = null, string dataFile = null, string templateType = null, string storage = null, string folder = null, string url = null, bool? fitSize = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutCreateDocument");

            var localVarPath = "/pdf/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (templateFile != null) localVarQueryParams.Add("templateFile", ApiClient.ParameterToString(templateFile)); // query parameter
            if (dataFile != null) localVarQueryParams.Add("dataFile", ApiClient.ParameterToString(dataFile)); // query parameter
            if (templateType != null) localVarQueryParams.Add("templateType", ApiClient.ParameterToString(templateType)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (url != null) localVarQueryParams.Add("url", ApiClient.ParameterToString(url)); // query parameter
            if (fitSize != null) localVarQueryParams.Add("fitSize", ApiClient.ParameterToString(fitSize)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutCreateDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentResponse) ApiClient.Deserialize(localVarResponse, typeof(DocumentResponse)));
        }

        /// <summary>
        /// Create new document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new document name.</param>
        /// <param name="templateFile">The template file server path if defined. (optional)</param>
        /// <param name="dataFile">The data file path (for xml template only). (optional)</param>
        /// <param name="templateType">The template type, can be xml, html, bmp, jpg, png, tiff, emf, cgm, tex. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The new document folder. (optional)</param>
        /// <param name="url">The url of web page if defined. (optional)</param>
        /// <param name="fitSize">Draw a margin around content in resulting pdf. (optional, default to false)</param>
        /// <returns>Task of DocumentResponse</returns>
        public async System.Threading.Tasks.Task<DocumentResponse> PutCreateDocumentAsync (string name, string templateFile = null, string dataFile = null, string templateType = null, string storage = null, string folder = null, string url = null, bool? fitSize = null)
        {
             ApiResponse<DocumentResponse> localVarResponse = await PutCreateDocumentAsyncWithHttpInfo(name, templateFile, dataFile, templateType, storage, folder, url, fitSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create new document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new document name.</param>
        /// <param name="templateFile">The template file server path if defined. (optional)</param>
        /// <param name="dataFile">The data file path (for xml template only). (optional)</param>
        /// <param name="templateType">The template type, can be xml, html, bmp, jpg, png, tiff, emf, cgm, tex. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The new document folder. (optional)</param>
        /// <param name="url">The url of web page if defined. (optional)</param>
        /// <param name="fitSize">Draw a margin around content in resulting pdf. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (DocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentResponse>> PutCreateDocumentAsyncWithHttpInfo (string name, string templateFile = null, string dataFile = null, string templateType = null, string storage = null, string folder = null, string url = null, bool? fitSize = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutCreateDocument");

            var localVarPath = "/pdf/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (templateFile != null) localVarQueryParams.Add("templateFile", ApiClient.ParameterToString(templateFile)); // query parameter
            if (dataFile != null) localVarQueryParams.Add("dataFile", ApiClient.ParameterToString(dataFile)); // query parameter
            if (templateType != null) localVarQueryParams.Add("templateType", ApiClient.ParameterToString(templateType)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (url != null) localVarQueryParams.Add("url", ApiClient.ParameterToString(url)); // query parameter
            if (fitSize != null) localVarQueryParams.Add("fitSize", ApiClient.ParameterToString(fitSize)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutCreateDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentResponse) ApiClient.Deserialize(localVarResponse, typeof(DocumentResponse)));
        }

        /// <summary>
        /// Create new document from images. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new document name.</param>
        /// <param name="images">The images file paths set.   (optional)</param>
        /// <param name="ocr">To create OCR layer for image or not. (optional, default to false)</param>
        /// <param name="ocrLang">The language which is defined for OCR engine. Default is eng. (optional, default to eng)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The new document folder. (optional)</param>
        /// <returns>DocumentResponse</returns>
        public DocumentResponse PutCreateDocumentFromImages (string name, ImagesListRequest images = null, bool? ocr = null, string ocrLang = null, string storage = null, string folder = null)
        {
             ApiResponse<DocumentResponse> localVarResponse = PutCreateDocumentFromImagesWithHttpInfo(name, images, ocr, ocrLang, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create new document from images. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new document name.</param>
        /// <param name="images">The images file paths set.   (optional)</param>
        /// <param name="ocr">To create OCR layer for image or not. (optional, default to false)</param>
        /// <param name="ocrLang">The language which is defined for OCR engine. Default is eng. (optional, default to eng)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The new document folder. (optional)</param>
        /// <returns>ApiResponse of DocumentResponse</returns>
        public ApiResponse< DocumentResponse > PutCreateDocumentFromImagesWithHttpInfo (string name, ImagesListRequest images = null, bool? ocr = null, string ocrLang = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutCreateDocumentFromImages");

            var localVarPath = "/pdf/{name}/fromimages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (ocr != null) localVarQueryParams.Add("ocr", ApiClient.ParameterToString(ocr)); // query parameter
            if (ocrLang != null) localVarQueryParams.Add("ocrLang", ApiClient.ParameterToString(ocrLang)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (images != null && images.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(images); // http body (model) parameter
            }
            else
            {
                localVarPostBody = images; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutCreateDocumentFromImages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentResponse) ApiClient.Deserialize(localVarResponse, typeof(DocumentResponse)));
        }

        /// <summary>
        /// Create new document from images. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new document name.</param>
        /// <param name="images">The images file paths set.   (optional)</param>
        /// <param name="ocr">To create OCR layer for image or not. (optional, default to false)</param>
        /// <param name="ocrLang">The language which is defined for OCR engine. Default is eng. (optional, default to eng)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The new document folder. (optional)</param>
        /// <returns>Task of DocumentResponse</returns>
        public async System.Threading.Tasks.Task<DocumentResponse> PutCreateDocumentFromImagesAsync (string name, ImagesListRequest images = null, bool? ocr = null, string ocrLang = null, string storage = null, string folder = null)
        {
             ApiResponse<DocumentResponse> localVarResponse = await PutCreateDocumentFromImagesAsyncWithHttpInfo(name, images, ocr, ocrLang, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create new document from images. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new document name.</param>
        /// <param name="images">The images file paths set.   (optional)</param>
        /// <param name="ocr">To create OCR layer for image or not. (optional, default to false)</param>
        /// <param name="ocrLang">The language which is defined for OCR engine. Default is eng. (optional, default to eng)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The new document folder. (optional)</param>
        /// <returns>Task of ApiResponse (DocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentResponse>> PutCreateDocumentFromImagesAsyncWithHttpInfo (string name, ImagesListRequest images = null, bool? ocr = null, string ocrLang = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutCreateDocumentFromImages");

            var localVarPath = "/pdf/{name}/fromimages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (ocr != null) localVarQueryParams.Add("ocr", ApiClient.ParameterToString(ocr)); // query parameter
            if (ocrLang != null) localVarQueryParams.Add("ocrLang", ApiClient.ParameterToString(ocrLang)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (images != null && images.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(images); // http body (model) parameter
            }
            else
            {
                localVarPostBody = images; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutCreateDocumentFromImages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentResponse) ApiClient.Deserialize(localVarResponse, typeof(DocumentResponse)));
        }

        /// <summary>
        /// Save document as Tiff image. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="exportOptions">with tiff export options. (optional)</param>
        /// <param name="resultFile">The resulting file. (optional)</param>
        /// <param name="brightness">The image brightness. (optional)</param>
        /// <param name="compression">Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)</param>
        /// <param name="colorDepth">Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)</param>
        /// <param name="leftMargin">Left image margin. (optional)</param>
        /// <param name="rightMargin">Right image margin. (optional)</param>
        /// <param name="topMargin">Top image margin. (optional)</param>
        /// <param name="bottomMargin">Bottom image margin. (optional)</param>
        /// <param name="orientation">Image orientation. Possible values are: None, Landscape, Portait. (optional)</param>
        /// <param name="skipBlankPages">Skip blank pages flag. (optional)</param>
        /// <param name="width">Image width. (optional)</param>
        /// <param name="height">Image height. (optional)</param>
        /// <param name="xResolution">Horizontal resolution. (optional)</param>
        /// <param name="yResolution">Vertical resolution. (optional)</param>
        /// <param name="pageIndex">Start page to export. (optional)</param>
        /// <param name="pageCount">Number of pages to export. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PutDocumentSaveAsTiff (string name, TiffExportOptions exportOptions = null, string resultFile = null, double? brightness = null, string compression = null, string colorDepth = null, int? leftMargin = null, int? rightMargin = null, int? topMargin = null, int? bottomMargin = null, string orientation = null, bool? skipBlankPages = null, int? width = null, int? height = null, int? xResolution = null, int? yResolution = null, int? pageIndex = null, int? pageCount = null, string storage = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PutDocumentSaveAsTiffWithHttpInfo(name, exportOptions, resultFile, brightness, compression, colorDepth, leftMargin, rightMargin, topMargin, bottomMargin, orientation, skipBlankPages, width, height, xResolution, yResolution, pageIndex, pageCount, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Save document as Tiff image. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="exportOptions">with tiff export options. (optional)</param>
        /// <param name="resultFile">The resulting file. (optional)</param>
        /// <param name="brightness">The image brightness. (optional)</param>
        /// <param name="compression">Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)</param>
        /// <param name="colorDepth">Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)</param>
        /// <param name="leftMargin">Left image margin. (optional)</param>
        /// <param name="rightMargin">Right image margin. (optional)</param>
        /// <param name="topMargin">Top image margin. (optional)</param>
        /// <param name="bottomMargin">Bottom image margin. (optional)</param>
        /// <param name="orientation">Image orientation. Possible values are: None, Landscape, Portait. (optional)</param>
        /// <param name="skipBlankPages">Skip blank pages flag. (optional)</param>
        /// <param name="width">Image width. (optional)</param>
        /// <param name="height">Image height. (optional)</param>
        /// <param name="xResolution">Horizontal resolution. (optional)</param>
        /// <param name="yResolution">Vertical resolution. (optional)</param>
        /// <param name="pageIndex">Start page to export. (optional)</param>
        /// <param name="pageCount">Number of pages to export. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PutDocumentSaveAsTiffWithHttpInfo (string name, TiffExportOptions exportOptions = null, string resultFile = null, double? brightness = null, string compression = null, string colorDepth = null, int? leftMargin = null, int? rightMargin = null, int? topMargin = null, int? bottomMargin = null, string orientation = null, bool? skipBlankPages = null, int? width = null, int? height = null, int? xResolution = null, int? yResolution = null, int? pageIndex = null, int? pageCount = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutDocumentSaveAsTiff");

            var localVarPath = "/pdf/{name}/SaveAs/tiff";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (resultFile != null) localVarQueryParams.Add("resultFile", ApiClient.ParameterToString(resultFile)); // query parameter
            if (brightness != null) localVarQueryParams.Add("brightness", ApiClient.ParameterToString(brightness)); // query parameter
            if (compression != null) localVarQueryParams.Add("compression", ApiClient.ParameterToString(compression)); // query parameter
            if (colorDepth != null) localVarQueryParams.Add("colorDepth", ApiClient.ParameterToString(colorDepth)); // query parameter
            if (leftMargin != null) localVarQueryParams.Add("leftMargin", ApiClient.ParameterToString(leftMargin)); // query parameter
            if (rightMargin != null) localVarQueryParams.Add("rightMargin", ApiClient.ParameterToString(rightMargin)); // query parameter
            if (topMargin != null) localVarQueryParams.Add("topMargin", ApiClient.ParameterToString(topMargin)); // query parameter
            if (bottomMargin != null) localVarQueryParams.Add("bottomMargin", ApiClient.ParameterToString(bottomMargin)); // query parameter
            if (orientation != null) localVarQueryParams.Add("orientation", ApiClient.ParameterToString(orientation)); // query parameter
            if (skipBlankPages != null) localVarQueryParams.Add("skipBlankPages", ApiClient.ParameterToString(skipBlankPages)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (xResolution != null) localVarQueryParams.Add("xResolution", ApiClient.ParameterToString(xResolution)); // query parameter
            if (yResolution != null) localVarQueryParams.Add("yResolution", ApiClient.ParameterToString(yResolution)); // query parameter
            if (pageIndex != null) localVarQueryParams.Add("pageIndex", ApiClient.ParameterToString(pageIndex)); // query parameter
            if (pageCount != null) localVarQueryParams.Add("pageCount", ApiClient.ParameterToString(pageCount)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (exportOptions != null && exportOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(exportOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = exportOptions; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutDocumentSaveAsTiff", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Save document as Tiff image. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="exportOptions">with tiff export options. (optional)</param>
        /// <param name="resultFile">The resulting file. (optional)</param>
        /// <param name="brightness">The image brightness. (optional)</param>
        /// <param name="compression">Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)</param>
        /// <param name="colorDepth">Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)</param>
        /// <param name="leftMargin">Left image margin. (optional)</param>
        /// <param name="rightMargin">Right image margin. (optional)</param>
        /// <param name="topMargin">Top image margin. (optional)</param>
        /// <param name="bottomMargin">Bottom image margin. (optional)</param>
        /// <param name="orientation">Image orientation. Possible values are: None, Landscape, Portait. (optional)</param>
        /// <param name="skipBlankPages">Skip blank pages flag. (optional)</param>
        /// <param name="width">Image width. (optional)</param>
        /// <param name="height">Image height. (optional)</param>
        /// <param name="xResolution">Horizontal resolution. (optional)</param>
        /// <param name="yResolution">Vertical resolution. (optional)</param>
        /// <param name="pageIndex">Start page to export. (optional)</param>
        /// <param name="pageCount">Number of pages to export. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PutDocumentSaveAsTiffAsync (string name, TiffExportOptions exportOptions = null, string resultFile = null, double? brightness = null, string compression = null, string colorDepth = null, int? leftMargin = null, int? rightMargin = null, int? topMargin = null, int? bottomMargin = null, string orientation = null, bool? skipBlankPages = null, int? width = null, int? height = null, int? xResolution = null, int? yResolution = null, int? pageIndex = null, int? pageCount = null, string storage = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PutDocumentSaveAsTiffAsyncWithHttpInfo(name, exportOptions, resultFile, brightness, compression, colorDepth, leftMargin, rightMargin, topMargin, bottomMargin, orientation, skipBlankPages, width, height, xResolution, yResolution, pageIndex, pageCount, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Save document as Tiff image. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="exportOptions">with tiff export options. (optional)</param>
        /// <param name="resultFile">The resulting file. (optional)</param>
        /// <param name="brightness">The image brightness. (optional)</param>
        /// <param name="compression">Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)</param>
        /// <param name="colorDepth">Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)</param>
        /// <param name="leftMargin">Left image margin. (optional)</param>
        /// <param name="rightMargin">Right image margin. (optional)</param>
        /// <param name="topMargin">Top image margin. (optional)</param>
        /// <param name="bottomMargin">Bottom image margin. (optional)</param>
        /// <param name="orientation">Image orientation. Possible values are: None, Landscape, Portait. (optional)</param>
        /// <param name="skipBlankPages">Skip blank pages flag. (optional)</param>
        /// <param name="width">Image width. (optional)</param>
        /// <param name="height">Image height. (optional)</param>
        /// <param name="xResolution">Horizontal resolution. (optional)</param>
        /// <param name="yResolution">Vertical resolution. (optional)</param>
        /// <param name="pageIndex">Start page to export. (optional)</param>
        /// <param name="pageCount">Number of pages to export. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutDocumentSaveAsTiffAsyncWithHttpInfo (string name, TiffExportOptions exportOptions = null, string resultFile = null, double? brightness = null, string compression = null, string colorDepth = null, int? leftMargin = null, int? rightMargin = null, int? topMargin = null, int? bottomMargin = null, string orientation = null, bool? skipBlankPages = null, int? width = null, int? height = null, int? xResolution = null, int? yResolution = null, int? pageIndex = null, int? pageCount = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutDocumentSaveAsTiff");

            var localVarPath = "/pdf/{name}/SaveAs/tiff";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (resultFile != null) localVarQueryParams.Add("resultFile", ApiClient.ParameterToString(resultFile)); // query parameter
            if (brightness != null) localVarQueryParams.Add("brightness", ApiClient.ParameterToString(brightness)); // query parameter
            if (compression != null) localVarQueryParams.Add("compression", ApiClient.ParameterToString(compression)); // query parameter
            if (colorDepth != null) localVarQueryParams.Add("colorDepth", ApiClient.ParameterToString(colorDepth)); // query parameter
            if (leftMargin != null) localVarQueryParams.Add("leftMargin", ApiClient.ParameterToString(leftMargin)); // query parameter
            if (rightMargin != null) localVarQueryParams.Add("rightMargin", ApiClient.ParameterToString(rightMargin)); // query parameter
            if (topMargin != null) localVarQueryParams.Add("topMargin", ApiClient.ParameterToString(topMargin)); // query parameter
            if (bottomMargin != null) localVarQueryParams.Add("bottomMargin", ApiClient.ParameterToString(bottomMargin)); // query parameter
            if (orientation != null) localVarQueryParams.Add("orientation", ApiClient.ParameterToString(orientation)); // query parameter
            if (skipBlankPages != null) localVarQueryParams.Add("skipBlankPages", ApiClient.ParameterToString(skipBlankPages)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (xResolution != null) localVarQueryParams.Add("xResolution", ApiClient.ParameterToString(xResolution)); // query parameter
            if (yResolution != null) localVarQueryParams.Add("yResolution", ApiClient.ParameterToString(yResolution)); // query parameter
            if (pageIndex != null) localVarQueryParams.Add("pageIndex", ApiClient.ParameterToString(pageIndex)); // query parameter
            if (pageCount != null) localVarQueryParams.Add("pageCount", ApiClient.ParameterToString(pageCount)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (exportOptions != null && exportOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(exportOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = exportOptions; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutDocumentSaveAsTiff", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Convert EPUB file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.epub)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PutEpubInStorageToPdf (string name, string srcPath, string dstFolder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PutEpubInStorageToPdfWithHttpInfo(name, srcPath, dstFolder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert EPUB file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.epub)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PutEpubInStorageToPdfWithHttpInfo (string name, string srcPath, string dstFolder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutEpubInStorageToPdf");
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->PutEpubInStorageToPdf");

            var localVarPath = "/pdf/{name}/create/epub";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (dstFolder != null) localVarQueryParams.Add("dstFolder", ApiClient.ParameterToString(dstFolder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutEpubInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Convert EPUB file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.epub)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PutEpubInStorageToPdfAsync (string name, string srcPath, string dstFolder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PutEpubInStorageToPdfAsyncWithHttpInfo(name, srcPath, dstFolder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert EPUB file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.epub)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutEpubInStorageToPdfAsyncWithHttpInfo (string name, string srcPath, string dstFolder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutEpubInStorageToPdf");
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->PutEpubInStorageToPdf");

            var localVarPath = "/pdf/{name}/create/epub";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (dstFolder != null) localVarQueryParams.Add("dstFolder", ApiClient.ParameterToString(dstFolder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutEpubInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Flatten form fields in document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PutFieldsFlatten (string name, string storage = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PutFieldsFlattenWithHttpInfo(name, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Flatten form fields in document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PutFieldsFlattenWithHttpInfo (string name, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutFieldsFlatten");

            var localVarPath = "/pdf/{name}/fields/flatten";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutFieldsFlatten", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Flatten form fields in document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PutFieldsFlattenAsync (string name, string storage = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PutFieldsFlattenAsyncWithHttpInfo(name, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Flatten form fields in document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutFieldsFlattenAsyncWithHttpInfo (string name, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutFieldsFlatten");

            var localVarPath = "/pdf/{name}/fields/flatten";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutFieldsFlatten", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Convert HTML file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.zip)</param>
        /// <param name="htmlFileName">Name of HTML file in ZIP.</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PutHtmlInStorageToPdf (string name, string srcPath, string htmlFileName, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string dstFolder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PutHtmlInStorageToPdfWithHttpInfo(name, srcPath, htmlFileName, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, dstFolder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert HTML file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.zip)</param>
        /// <param name="htmlFileName">Name of HTML file in ZIP.</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PutHtmlInStorageToPdfWithHttpInfo (string name, string srcPath, string htmlFileName, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string dstFolder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutHtmlInStorageToPdf");
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->PutHtmlInStorageToPdf");
            // verify the required parameter 'htmlFileName' is set
            if (htmlFileName == null)
                throw new ApiException(400, "Missing required parameter 'htmlFileName' when calling PdfApi->PutHtmlInStorageToPdf");

            var localVarPath = "/pdf/{name}/create/html";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (htmlFileName != null) localVarQueryParams.Add("htmlFileName", ApiClient.ParameterToString(htmlFileName)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (isLandscape != null) localVarQueryParams.Add("isLandscape", ApiClient.ParameterToString(isLandscape)); // query parameter
            if (marginLeft != null) localVarQueryParams.Add("marginLeft", ApiClient.ParameterToString(marginLeft)); // query parameter
            if (marginBottom != null) localVarQueryParams.Add("marginBottom", ApiClient.ParameterToString(marginBottom)); // query parameter
            if (marginRight != null) localVarQueryParams.Add("marginRight", ApiClient.ParameterToString(marginRight)); // query parameter
            if (marginTop != null) localVarQueryParams.Add("marginTop", ApiClient.ParameterToString(marginTop)); // query parameter
            if (dstFolder != null) localVarQueryParams.Add("dstFolder", ApiClient.ParameterToString(dstFolder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutHtmlInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Convert HTML file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.zip)</param>
        /// <param name="htmlFileName">Name of HTML file in ZIP.</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PutHtmlInStorageToPdfAsync (string name, string srcPath, string htmlFileName, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string dstFolder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PutHtmlInStorageToPdfAsyncWithHttpInfo(name, srcPath, htmlFileName, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, dstFolder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert HTML file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.zip)</param>
        /// <param name="htmlFileName">Name of HTML file in ZIP.</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutHtmlInStorageToPdfAsyncWithHttpInfo (string name, string srcPath, string htmlFileName, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string dstFolder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutHtmlInStorageToPdf");
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->PutHtmlInStorageToPdf");
            // verify the required parameter 'htmlFileName' is set
            if (htmlFileName == null)
                throw new ApiException(400, "Missing required parameter 'htmlFileName' when calling PdfApi->PutHtmlInStorageToPdf");

            var localVarPath = "/pdf/{name}/create/html";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (htmlFileName != null) localVarQueryParams.Add("htmlFileName", ApiClient.ParameterToString(htmlFileName)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (isLandscape != null) localVarQueryParams.Add("isLandscape", ApiClient.ParameterToString(isLandscape)); // query parameter
            if (marginLeft != null) localVarQueryParams.Add("marginLeft", ApiClient.ParameterToString(marginLeft)); // query parameter
            if (marginBottom != null) localVarQueryParams.Add("marginBottom", ApiClient.ParameterToString(marginBottom)); // query parameter
            if (marginRight != null) localVarQueryParams.Add("marginRight", ApiClient.ParameterToString(marginRight)); // query parameter
            if (marginTop != null) localVarQueryParams.Add("marginTop", ApiClient.ParameterToString(marginTop)); // query parameter
            if (dstFolder != null) localVarQueryParams.Add("dstFolder", ApiClient.ParameterToString(dstFolder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutHtmlInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Convert image file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageTemplates">Image templates</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PutImageInStorageToPdf (string name, ImageTemplatesRequest imageTemplates, string dstFolder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PutImageInStorageToPdfWithHttpInfo(name, imageTemplates, dstFolder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert image file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageTemplates">Image templates</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PutImageInStorageToPdfWithHttpInfo (string name, ImageTemplatesRequest imageTemplates, string dstFolder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutImageInStorageToPdf");
            // verify the required parameter 'imageTemplates' is set
            if (imageTemplates == null)
                throw new ApiException(400, "Missing required parameter 'imageTemplates' when calling PdfApi->PutImageInStorageToPdf");

            var localVarPath = "/pdf/{name}/create/images";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (dstFolder != null) localVarQueryParams.Add("dstFolder", ApiClient.ParameterToString(dstFolder)); // query parameter
            if (imageTemplates != null && imageTemplates.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(imageTemplates); // http body (model) parameter
            }
            else
            {
                localVarPostBody = imageTemplates; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutImageInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Convert image file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageTemplates">Image templates</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PutImageInStorageToPdfAsync (string name, ImageTemplatesRequest imageTemplates, string dstFolder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PutImageInStorageToPdfAsyncWithHttpInfo(name, imageTemplates, dstFolder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert image file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageTemplates">Image templates</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutImageInStorageToPdfAsyncWithHttpInfo (string name, ImageTemplatesRequest imageTemplates, string dstFolder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutImageInStorageToPdf");
            // verify the required parameter 'imageTemplates' is set
            if (imageTemplates == null)
                throw new ApiException(400, "Missing required parameter 'imageTemplates' when calling PdfApi->PutImageInStorageToPdf");

            var localVarPath = "/pdf/{name}/create/images";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (dstFolder != null) localVarQueryParams.Add("dstFolder", ApiClient.ParameterToString(dstFolder)); // query parameter
            if (imageTemplates != null && imageTemplates.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(imageTemplates); // http body (model) parameter
            }
            else
            {
                localVarPostBody = imageTemplates; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutImageInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Extract document images in format specified to folder. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PutImagesExtractAsGif (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string destFolder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PutImagesExtractAsGifWithHttpInfo(name, pageNumber, width, height, folder, destFolder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Extract document images in format specified to folder. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PutImagesExtractAsGifWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string destFolder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutImagesExtractAsGif");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PutImagesExtractAsGif");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/images/extract/gif";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (destFolder != null) localVarQueryParams.Add("destFolder", ApiClient.ParameterToString(destFolder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutImagesExtractAsGif", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Extract document images in format specified to folder. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PutImagesExtractAsGifAsync (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string destFolder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PutImagesExtractAsGifAsyncWithHttpInfo(name, pageNumber, width, height, folder, destFolder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Extract document images in format specified to folder. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutImagesExtractAsGifAsyncWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string destFolder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutImagesExtractAsGif");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PutImagesExtractAsGif");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/images/extract/gif";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (destFolder != null) localVarQueryParams.Add("destFolder", ApiClient.ParameterToString(destFolder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutImagesExtractAsGif", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Extract document images in format specified to folder. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PutImagesExtractAsJpeg (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string destFolder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PutImagesExtractAsJpegWithHttpInfo(name, pageNumber, width, height, folder, destFolder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Extract document images in format specified to folder. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PutImagesExtractAsJpegWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string destFolder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutImagesExtractAsJpeg");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PutImagesExtractAsJpeg");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/images/extract/jpeg";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (destFolder != null) localVarQueryParams.Add("destFolder", ApiClient.ParameterToString(destFolder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutImagesExtractAsJpeg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Extract document images in format specified to folder. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PutImagesExtractAsJpegAsync (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string destFolder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PutImagesExtractAsJpegAsyncWithHttpInfo(name, pageNumber, width, height, folder, destFolder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Extract document images in format specified to folder. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutImagesExtractAsJpegAsyncWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string destFolder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutImagesExtractAsJpeg");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PutImagesExtractAsJpeg");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/images/extract/jpeg";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (destFolder != null) localVarQueryParams.Add("destFolder", ApiClient.ParameterToString(destFolder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutImagesExtractAsJpeg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Extract document images in format specified to folder. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PutImagesExtractAsPng (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string destFolder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PutImagesExtractAsPngWithHttpInfo(name, pageNumber, width, height, folder, destFolder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Extract document images in format specified to folder. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PutImagesExtractAsPngWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string destFolder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutImagesExtractAsPng");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PutImagesExtractAsPng");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/images/extract/png";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (destFolder != null) localVarQueryParams.Add("destFolder", ApiClient.ParameterToString(destFolder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutImagesExtractAsPng", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Extract document images in format specified to folder. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PutImagesExtractAsPngAsync (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string destFolder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PutImagesExtractAsPngAsyncWithHttpInfo(name, pageNumber, width, height, folder, destFolder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Extract document images in format specified to folder. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutImagesExtractAsPngAsyncWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string destFolder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutImagesExtractAsPng");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PutImagesExtractAsPng");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/images/extract/png";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (destFolder != null) localVarQueryParams.Add("destFolder", ApiClient.ParameterToString(destFolder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutImagesExtractAsPng", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Extract document images in format specified to folder. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PutImagesExtractAsTiff (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string destFolder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PutImagesExtractAsTiffWithHttpInfo(name, pageNumber, width, height, folder, destFolder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Extract document images in format specified to folder. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PutImagesExtractAsTiffWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string destFolder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutImagesExtractAsTiff");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PutImagesExtractAsTiff");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/images/extract/tiff";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (destFolder != null) localVarQueryParams.Add("destFolder", ApiClient.ParameterToString(destFolder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutImagesExtractAsTiff", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Extract document images in format specified to folder. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PutImagesExtractAsTiffAsync (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string destFolder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PutImagesExtractAsTiffAsyncWithHttpInfo(name, pageNumber, width, height, folder, destFolder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Extract document images in format specified to folder. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutImagesExtractAsTiffAsyncWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string destFolder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutImagesExtractAsTiff");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PutImagesExtractAsTiff");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/images/extract/tiff";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (destFolder != null) localVarQueryParams.Add("destFolder", ApiClient.ParameterToString(destFolder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutImagesExtractAsTiff", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Convert LaTeX file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.tex)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PutLaTeXInStorageToPdf (string name, string srcPath, string dstFolder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PutLaTeXInStorageToPdfWithHttpInfo(name, srcPath, dstFolder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert LaTeX file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.tex)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PutLaTeXInStorageToPdfWithHttpInfo (string name, string srcPath, string dstFolder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutLaTeXInStorageToPdf");
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->PutLaTeXInStorageToPdf");

            var localVarPath = "/pdf/{name}/create/latex";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (dstFolder != null) localVarQueryParams.Add("dstFolder", ApiClient.ParameterToString(dstFolder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutLaTeXInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Convert LaTeX file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.tex)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PutLaTeXInStorageToPdfAsync (string name, string srcPath, string dstFolder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PutLaTeXInStorageToPdfAsyncWithHttpInfo(name, srcPath, dstFolder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert LaTeX file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.tex)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutLaTeXInStorageToPdfAsyncWithHttpInfo (string name, string srcPath, string dstFolder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutLaTeXInStorageToPdf");
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->PutLaTeXInStorageToPdf");

            var localVarPath = "/pdf/{name}/create/latex";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (dstFolder != null) localVarQueryParams.Add("dstFolder", ApiClient.ParameterToString(dstFolder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutLaTeXInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Merge a list of documents. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Resulting documen name.</param>
        /// <param name="mergeDocuments">with a list of documents. (optional)</param>
        /// <param name="storage">Resulting document storage. (optional)</param>
        /// <param name="folder">Resulting document folder. (optional)</param>
        /// <returns>DocumentResponse</returns>
        public DocumentResponse PutMergeDocuments (string name, MergeDocuments mergeDocuments = null, string storage = null, string folder = null)
        {
             ApiResponse<DocumentResponse> localVarResponse = PutMergeDocumentsWithHttpInfo(name, mergeDocuments, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Merge a list of documents. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Resulting documen name.</param>
        /// <param name="mergeDocuments">with a list of documents. (optional)</param>
        /// <param name="storage">Resulting document storage. (optional)</param>
        /// <param name="folder">Resulting document folder. (optional)</param>
        /// <returns>ApiResponse of DocumentResponse</returns>
        public ApiResponse< DocumentResponse > PutMergeDocumentsWithHttpInfo (string name, MergeDocuments mergeDocuments = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutMergeDocuments");

            var localVarPath = "/pdf/{name}/merge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (mergeDocuments != null && mergeDocuments.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(mergeDocuments); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mergeDocuments; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutMergeDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentResponse) ApiClient.Deserialize(localVarResponse, typeof(DocumentResponse)));
        }

        /// <summary>
        /// Merge a list of documents. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Resulting documen name.</param>
        /// <param name="mergeDocuments">with a list of documents. (optional)</param>
        /// <param name="storage">Resulting document storage. (optional)</param>
        /// <param name="folder">Resulting document folder. (optional)</param>
        /// <returns>Task of DocumentResponse</returns>
        public async System.Threading.Tasks.Task<DocumentResponse> PutMergeDocumentsAsync (string name, MergeDocuments mergeDocuments = null, string storage = null, string folder = null)
        {
             ApiResponse<DocumentResponse> localVarResponse = await PutMergeDocumentsAsyncWithHttpInfo(name, mergeDocuments, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Merge a list of documents. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Resulting documen name.</param>
        /// <param name="mergeDocuments">with a list of documents. (optional)</param>
        /// <param name="storage">Resulting document storage. (optional)</param>
        /// <param name="folder">Resulting document folder. (optional)</param>
        /// <returns>Task of ApiResponse (DocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentResponse>> PutMergeDocumentsAsyncWithHttpInfo (string name, MergeDocuments mergeDocuments = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutMergeDocuments");

            var localVarPath = "/pdf/{name}/merge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (mergeDocuments != null && mergeDocuments.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(mergeDocuments); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mergeDocuments; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutMergeDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentResponse) ApiClient.Deserialize(localVarResponse, typeof(DocumentResponse)));
        }

        /// <summary>
        /// Convert MHT file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.mht)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PutMhtInStorageToPdf (string name, string srcPath, string dstFolder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PutMhtInStorageToPdfWithHttpInfo(name, srcPath, dstFolder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert MHT file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.mht)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PutMhtInStorageToPdfWithHttpInfo (string name, string srcPath, string dstFolder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutMhtInStorageToPdf");
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->PutMhtInStorageToPdf");

            var localVarPath = "/pdf/{name}/create/mht";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (dstFolder != null) localVarQueryParams.Add("dstFolder", ApiClient.ParameterToString(dstFolder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutMhtInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Convert MHT file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.mht)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PutMhtInStorageToPdfAsync (string name, string srcPath, string dstFolder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PutMhtInStorageToPdfAsyncWithHttpInfo(name, srcPath, dstFolder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert MHT file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.mht)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutMhtInStorageToPdfAsyncWithHttpInfo (string name, string srcPath, string dstFolder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutMhtInStorageToPdf");
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->PutMhtInStorageToPdf");

            var localVarPath = "/pdf/{name}/create/mht";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (dstFolder != null) localVarQueryParams.Add("dstFolder", ApiClient.ParameterToString(dstFolder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutMhtInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Add page stamp. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="stamp">with data.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PutPageAddStamp (string name, int? pageNumber, Stamp stamp, string storage = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PutPageAddStampWithHttpInfo(name, pageNumber, stamp, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add page stamp. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="stamp">with data.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PutPageAddStampWithHttpInfo (string name, int? pageNumber, Stamp stamp, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPageAddStamp");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PutPageAddStamp");
            // verify the required parameter 'stamp' is set
            if (stamp == null)
                throw new ApiException(400, "Missing required parameter 'stamp' when calling PdfApi->PutPageAddStamp");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/stamp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (stamp != null && stamp.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(stamp); // http body (model) parameter
            }
            else
            {
                localVarPostBody = stamp; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPageAddStamp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Add page stamp. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="stamp">with data.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PutPageAddStampAsync (string name, int? pageNumber, Stamp stamp, string storage = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PutPageAddStampAsyncWithHttpInfo(name, pageNumber, stamp, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add page stamp. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="stamp">with data.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPageAddStampAsyncWithHttpInfo (string name, int? pageNumber, Stamp stamp, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPageAddStamp");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PutPageAddStamp");
            // verify the required parameter 'stamp' is set
            if (stamp == null)
                throw new ApiException(400, "Missing required parameter 'stamp' when calling PdfApi->PutPageAddStamp");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/stamp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (stamp != null && stamp.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(stamp); // http body (model) parameter
            }
            else
            {
                localVarPostBody = stamp; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPageAddStamp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Convert document page to bmp image and save in storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PutPageConvertToBmp (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PutPageConvertToBmpWithHttpInfo(name, pageNumber, outPath, width, height, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert document page to bmp image and save in storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PutPageConvertToBmpWithHttpInfo (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPageConvertToBmp");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PutPageConvertToBmp");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPageConvertToBmp");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/bmp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPageConvertToBmp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Convert document page to bmp image and save in storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PutPageConvertToBmpAsync (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PutPageConvertToBmpAsyncWithHttpInfo(name, pageNumber, outPath, width, height, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert document page to bmp image and save in storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPageConvertToBmpAsyncWithHttpInfo (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPageConvertToBmp");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PutPageConvertToBmp");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPageConvertToBmp");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/bmp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPageConvertToBmp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Convert document page to emf image and save in storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PutPageConvertToEmf (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PutPageConvertToEmfWithHttpInfo(name, pageNumber, outPath, width, height, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert document page to emf image and save in storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PutPageConvertToEmfWithHttpInfo (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPageConvertToEmf");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PutPageConvertToEmf");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPageConvertToEmf");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/emf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPageConvertToEmf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Convert document page to emf image and save in storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PutPageConvertToEmfAsync (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PutPageConvertToEmfAsyncWithHttpInfo(name, pageNumber, outPath, width, height, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert document page to emf image and save in storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPageConvertToEmfAsyncWithHttpInfo (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPageConvertToEmf");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PutPageConvertToEmf");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPageConvertToEmf");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/emf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPageConvertToEmf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Convert document page to gif image and save in storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PutPageConvertToGif (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PutPageConvertToGifWithHttpInfo(name, pageNumber, outPath, width, height, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert document page to gif image and save in storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PutPageConvertToGifWithHttpInfo (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPageConvertToGif");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PutPageConvertToGif");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPageConvertToGif");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/gif";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPageConvertToGif", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Convert document page to gif image and save in storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PutPageConvertToGifAsync (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PutPageConvertToGifAsyncWithHttpInfo(name, pageNumber, outPath, width, height, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert document page to gif image and save in storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPageConvertToGifAsyncWithHttpInfo (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPageConvertToGif");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PutPageConvertToGif");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPageConvertToGif");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/gif";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPageConvertToGif", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Convert document page to Jpeg image and save in storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PutPageConvertToJpeg (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PutPageConvertToJpegWithHttpInfo(name, pageNumber, outPath, width, height, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert document page to Jpeg image and save in storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PutPageConvertToJpegWithHttpInfo (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPageConvertToJpeg");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PutPageConvertToJpeg");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPageConvertToJpeg");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/jpeg";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPageConvertToJpeg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Convert document page to Jpeg image and save in storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PutPageConvertToJpegAsync (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PutPageConvertToJpegAsyncWithHttpInfo(name, pageNumber, outPath, width, height, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert document page to Jpeg image and save in storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPageConvertToJpegAsyncWithHttpInfo (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPageConvertToJpeg");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PutPageConvertToJpeg");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPageConvertToJpeg");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/jpeg";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPageConvertToJpeg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Convert document page to png image and save in storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PutPageConvertToPng (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PutPageConvertToPngWithHttpInfo(name, pageNumber, outPath, width, height, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert document page to png image and save in storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PutPageConvertToPngWithHttpInfo (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPageConvertToPng");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PutPageConvertToPng");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPageConvertToPng");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/png";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPageConvertToPng", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Convert document page to png image and save in storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PutPageConvertToPngAsync (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PutPageConvertToPngAsyncWithHttpInfo(name, pageNumber, outPath, width, height, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert document page to png image and save in storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPageConvertToPngAsyncWithHttpInfo (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPageConvertToPng");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PutPageConvertToPng");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPageConvertToPng");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/png";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPageConvertToPng", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Convert document page to Tiff image and save in storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PutPageConvertToTiff (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PutPageConvertToTiffWithHttpInfo(name, pageNumber, outPath, width, height, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert document page to Tiff image and save in storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PutPageConvertToTiffWithHttpInfo (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPageConvertToTiff");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PutPageConvertToTiff");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPageConvertToTiff");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/tiff";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPageConvertToTiff", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Convert document page to Tiff image and save in storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PutPageConvertToTiffAsync (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PutPageConvertToTiffAsyncWithHttpInfo(name, pageNumber, outPath, width, height, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert document page to Tiff image and save in storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPageConvertToTiffAsyncWithHttpInfo (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPageConvertToTiff");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PutPageConvertToTiff");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPageConvertToTiff");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/tiff";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPageConvertToTiff", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Convert PCL file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.pcl)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PutPclInStorageToPdf (string name, string srcPath, string dstFolder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PutPclInStorageToPdfWithHttpInfo(name, srcPath, dstFolder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert PCL file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.pcl)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PutPclInStorageToPdfWithHttpInfo (string name, string srcPath, string dstFolder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPclInStorageToPdf");
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->PutPclInStorageToPdf");

            var localVarPath = "/pdf/{name}/create/pcl";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (dstFolder != null) localVarQueryParams.Add("dstFolder", ApiClient.ParameterToString(dstFolder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPclInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Convert PCL file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.pcl)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PutPclInStorageToPdfAsync (string name, string srcPath, string dstFolder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PutPclInStorageToPdfAsyncWithHttpInfo(name, srcPath, dstFolder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert PCL file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.pcl)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPclInStorageToPdfAsyncWithHttpInfo (string name, string srcPath, string dstFolder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPclInStorageToPdf");
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->PutPclInStorageToPdf");

            var localVarPath = "/pdf/{name}/create/pcl";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (dstFolder != null) localVarQueryParams.Add("dstFolder", ApiClient.ParameterToString(dstFolder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPclInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (in request content) to DOC format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.doc)</param>
        /// <param name="addReturnToLineEnd">Add return to line end. (optional)</param>
        /// <param name="format">Allows to specify .doc or .docx file format. (optional)</param>
        /// <param name="imageResolutionX">Image resolution X. (optional)</param>
        /// <param name="imageResolutionY">Image resolution Y. (optional)</param>
        /// <param name="maxDistanceBetweenTextLines">Max distance between text lines. (optional)</param>
        /// <param name="mode">Allows to control how a PDF document is converted into a word processing document. (optional)</param>
        /// <param name="recognizeBullets">Recognize bullets. (optional)</param>
        /// <param name="relativeHorizontalProximity">Relative horizontal proximity. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PutPdfInRequestToDoc (string outPath, bool? addReturnToLineEnd = null, string format = null, int? imageResolutionX = null, int? imageResolutionY = null, int? maxDistanceBetweenTextLines = null, string mode = null, bool? recognizeBullets = null, double? relativeHorizontalProximity = null, System.IO.Stream file = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PutPdfInRequestToDocWithHttpInfo(outPath, addReturnToLineEnd, format, imageResolutionX, imageResolutionY, maxDistanceBetweenTextLines, mode, recognizeBullets, relativeHorizontalProximity, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (in request content) to DOC format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.doc)</param>
        /// <param name="addReturnToLineEnd">Add return to line end. (optional)</param>
        /// <param name="format">Allows to specify .doc or .docx file format. (optional)</param>
        /// <param name="imageResolutionX">Image resolution X. (optional)</param>
        /// <param name="imageResolutionY">Image resolution Y. (optional)</param>
        /// <param name="maxDistanceBetweenTextLines">Max distance between text lines. (optional)</param>
        /// <param name="mode">Allows to control how a PDF document is converted into a word processing document. (optional)</param>
        /// <param name="recognizeBullets">Recognize bullets. (optional)</param>
        /// <param name="relativeHorizontalProximity">Relative horizontal proximity. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PutPdfInRequestToDocWithHttpInfo (string outPath, bool? addReturnToLineEnd = null, string format = null, int? imageResolutionX = null, int? imageResolutionY = null, int? maxDistanceBetweenTextLines = null, string mode = null, bool? recognizeBullets = null, double? relativeHorizontalProximity = null, System.IO.Stream file = null)
        {
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInRequestToDoc");

            var localVarPath = "/pdf/convert/doc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (addReturnToLineEnd != null) localVarQueryParams.Add("addReturnToLineEnd", ApiClient.ParameterToString(addReturnToLineEnd)); // query parameter
            if (format != null) localVarQueryParams.Add("format", ApiClient.ParameterToString(format)); // query parameter
            if (imageResolutionX != null) localVarQueryParams.Add("imageResolutionX", ApiClient.ParameterToString(imageResolutionX)); // query parameter
            if (imageResolutionY != null) localVarQueryParams.Add("imageResolutionY", ApiClient.ParameterToString(imageResolutionY)); // query parameter
            if (maxDistanceBetweenTextLines != null) localVarQueryParams.Add("maxDistanceBetweenTextLines", ApiClient.ParameterToString(maxDistanceBetweenTextLines)); // query parameter
            if (mode != null) localVarQueryParams.Add("mode", ApiClient.ParameterToString(mode)); // query parameter
            if (recognizeBullets != null) localVarQueryParams.Add("recognizeBullets", ApiClient.ParameterToString(recognizeBullets)); // query parameter
            if (relativeHorizontalProximity != null) localVarQueryParams.Add("relativeHorizontalProximity", ApiClient.ParameterToString(relativeHorizontalProximity)); // query parameter
            if (file != null) localVarFileParams.Add("file", ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInRequestToDoc", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (in request content) to DOC format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.doc)</param>
        /// <param name="addReturnToLineEnd">Add return to line end. (optional)</param>
        /// <param name="format">Allows to specify .doc or .docx file format. (optional)</param>
        /// <param name="imageResolutionX">Image resolution X. (optional)</param>
        /// <param name="imageResolutionY">Image resolution Y. (optional)</param>
        /// <param name="maxDistanceBetweenTextLines">Max distance between text lines. (optional)</param>
        /// <param name="mode">Allows to control how a PDF document is converted into a word processing document. (optional)</param>
        /// <param name="recognizeBullets">Recognize bullets. (optional)</param>
        /// <param name="relativeHorizontalProximity">Relative horizontal proximity. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PutPdfInRequestToDocAsync (string outPath, bool? addReturnToLineEnd = null, string format = null, int? imageResolutionX = null, int? imageResolutionY = null, int? maxDistanceBetweenTextLines = null, string mode = null, bool? recognizeBullets = null, double? relativeHorizontalProximity = null, System.IO.Stream file = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PutPdfInRequestToDocAsyncWithHttpInfo(outPath, addReturnToLineEnd, format, imageResolutionX, imageResolutionY, maxDistanceBetweenTextLines, mode, recognizeBullets, relativeHorizontalProximity, file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (in request content) to DOC format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.doc)</param>
        /// <param name="addReturnToLineEnd">Add return to line end. (optional)</param>
        /// <param name="format">Allows to specify .doc or .docx file format. (optional)</param>
        /// <param name="imageResolutionX">Image resolution X. (optional)</param>
        /// <param name="imageResolutionY">Image resolution Y. (optional)</param>
        /// <param name="maxDistanceBetweenTextLines">Max distance between text lines. (optional)</param>
        /// <param name="mode">Allows to control how a PDF document is converted into a word processing document. (optional)</param>
        /// <param name="recognizeBullets">Recognize bullets. (optional)</param>
        /// <param name="relativeHorizontalProximity">Relative horizontal proximity. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPdfInRequestToDocAsyncWithHttpInfo (string outPath, bool? addReturnToLineEnd = null, string format = null, int? imageResolutionX = null, int? imageResolutionY = null, int? maxDistanceBetweenTextLines = null, string mode = null, bool? recognizeBullets = null, double? relativeHorizontalProximity = null, System.IO.Stream file = null)
        {
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInRequestToDoc");

            var localVarPath = "/pdf/convert/doc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (addReturnToLineEnd != null) localVarQueryParams.Add("addReturnToLineEnd", ApiClient.ParameterToString(addReturnToLineEnd)); // query parameter
            if (format != null) localVarQueryParams.Add("format", ApiClient.ParameterToString(format)); // query parameter
            if (imageResolutionX != null) localVarQueryParams.Add("imageResolutionX", ApiClient.ParameterToString(imageResolutionX)); // query parameter
            if (imageResolutionY != null) localVarQueryParams.Add("imageResolutionY", ApiClient.ParameterToString(imageResolutionY)); // query parameter
            if (maxDistanceBetweenTextLines != null) localVarQueryParams.Add("maxDistanceBetweenTextLines", ApiClient.ParameterToString(maxDistanceBetweenTextLines)); // query parameter
            if (mode != null) localVarQueryParams.Add("mode", ApiClient.ParameterToString(mode)); // query parameter
            if (recognizeBullets != null) localVarQueryParams.Add("recognizeBullets", ApiClient.ParameterToString(recognizeBullets)); // query parameter
            if (relativeHorizontalProximity != null) localVarQueryParams.Add("relativeHorizontalProximity", ApiClient.ParameterToString(relativeHorizontalProximity)); // query parameter
            if (file != null) localVarFileParams.Add("file", ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInRequestToDoc", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (in request content) to EPUB format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.epub)</param>
        /// <param name="contentRecognitionMode">Рroperty tunes conversion for this or that desirable method of recognition of content. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PutPdfInRequestToEpub (string outPath, string contentRecognitionMode = null, System.IO.Stream file = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PutPdfInRequestToEpubWithHttpInfo(outPath, contentRecognitionMode, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (in request content) to EPUB format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.epub)</param>
        /// <param name="contentRecognitionMode">Рroperty tunes conversion for this or that desirable method of recognition of content. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PutPdfInRequestToEpubWithHttpInfo (string outPath, string contentRecognitionMode = null, System.IO.Stream file = null)
        {
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInRequestToEpub");

            var localVarPath = "/pdf/convert/epub";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (contentRecognitionMode != null) localVarQueryParams.Add("contentRecognitionMode", ApiClient.ParameterToString(contentRecognitionMode)); // query parameter
            if (file != null) localVarFileParams.Add("file", ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInRequestToEpub", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (in request content) to EPUB format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.epub)</param>
        /// <param name="contentRecognitionMode">Рroperty tunes conversion for this or that desirable method of recognition of content. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PutPdfInRequestToEpubAsync (string outPath, string contentRecognitionMode = null, System.IO.Stream file = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PutPdfInRequestToEpubAsyncWithHttpInfo(outPath, contentRecognitionMode, file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (in request content) to EPUB format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.epub)</param>
        /// <param name="contentRecognitionMode">Рroperty tunes conversion for this or that desirable method of recognition of content. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPdfInRequestToEpubAsyncWithHttpInfo (string outPath, string contentRecognitionMode = null, System.IO.Stream file = null)
        {
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInRequestToEpub");

            var localVarPath = "/pdf/convert/epub";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (contentRecognitionMode != null) localVarQueryParams.Add("contentRecognitionMode", ApiClient.ParameterToString(contentRecognitionMode)); // query parameter
            if (file != null) localVarFileParams.Add("file", ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInRequestToEpub", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (in request content) to Html format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.html)</param>
        /// <param name="additionalMarginWidthInPoints">Defines width of margin that will be forcibly left around that output HTML-areas. (optional)</param>
        /// <param name="compressSvgGraphicsIfAny">The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)</param>
        /// <param name="convertMarkedContentToLayers">If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)</param>
        /// <param name="defaultFontName">Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)</param>
        /// <param name="documentType">Result document type. (optional)</param>
        /// <param name="fixedLayout">The value indicating whether that HTML is created as fixed layout. (optional)</param>
        /// <param name="imageResolution">Resolution for image rendering. (optional)</param>
        /// <param name="minimalLineWidth">This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)</param>
        /// <param name="preventGlyphsGrouping">This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)</param>
        /// <param name="splitCssIntoPages">When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)</param>
        /// <param name="splitIntoPages">The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)</param>
        /// <param name="useZOrder">If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)</param>
        /// <param name="antialiasingProcessing">The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)</param>
        /// <param name="cssClassNamesPrefix">When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)</param>
        /// <param name="explicitListOfSavedPages">With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)</param>
        /// <param name="fontEncodingStrategy">Defines encoding special rule to tune PDF decoding for current document. (optional)</param>
        /// <param name="fontSavingMode">Defines font saving mode that will be used during saving of PDF to desirable format. (optional)</param>
        /// <param name="htmlMarkupGenerationMode">Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)</param>
        /// <param name="lettersPositioningMethod">The mode of positioning of letters in words in result HTML. (optional)</param>
        /// <param name="pagesFlowTypeDependsOnViewersScreenSize">If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)</param>
        /// <param name="partsEmbeddingMode">It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)</param>
        /// <param name="rasterImagesSavingMode">Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)</param>
        /// <param name="removeEmptyAreasOnTopAndBottom">Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)</param>
        /// <param name="saveShadowedTextsAsTransparentTexts">Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)</param>
        /// <param name="saveTransparentTexts">Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)</param>
        /// <param name="specialFolderForAllImages">The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="specialFolderForSvgImages">The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="trySaveTextUnderliningAndStrikeoutingInCss">PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PutPdfInRequestToHtml (string outPath, int? additionalMarginWidthInPoints = null, bool? compressSvgGraphicsIfAny = null, bool? convertMarkedContentToLayers = null, string defaultFontName = null, string documentType = null, bool? fixedLayout = null, int? imageResolution = null, int? minimalLineWidth = null, bool? preventGlyphsGrouping = null, bool? splitCssIntoPages = null, bool? splitIntoPages = null, bool? useZOrder = null, string antialiasingProcessing = null, string cssClassNamesPrefix = null, List<int?> explicitListOfSavedPages = null, string fontEncodingStrategy = null, string fontSavingMode = null, string htmlMarkupGenerationMode = null, string lettersPositioningMethod = null, bool? pagesFlowTypeDependsOnViewersScreenSize = null, string partsEmbeddingMode = null, string rasterImagesSavingMode = null, bool? removeEmptyAreasOnTopAndBottom = null, bool? saveShadowedTextsAsTransparentTexts = null, bool? saveTransparentTexts = null, string specialFolderForAllImages = null, string specialFolderForSvgImages = null, bool? trySaveTextUnderliningAndStrikeoutingInCss = null, System.IO.Stream file = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PutPdfInRequestToHtmlWithHttpInfo(outPath, additionalMarginWidthInPoints, compressSvgGraphicsIfAny, convertMarkedContentToLayers, defaultFontName, documentType, fixedLayout, imageResolution, minimalLineWidth, preventGlyphsGrouping, splitCssIntoPages, splitIntoPages, useZOrder, antialiasingProcessing, cssClassNamesPrefix, explicitListOfSavedPages, fontEncodingStrategy, fontSavingMode, htmlMarkupGenerationMode, lettersPositioningMethod, pagesFlowTypeDependsOnViewersScreenSize, partsEmbeddingMode, rasterImagesSavingMode, removeEmptyAreasOnTopAndBottom, saveShadowedTextsAsTransparentTexts, saveTransparentTexts, specialFolderForAllImages, specialFolderForSvgImages, trySaveTextUnderliningAndStrikeoutingInCss, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (in request content) to Html format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.html)</param>
        /// <param name="additionalMarginWidthInPoints">Defines width of margin that will be forcibly left around that output HTML-areas. (optional)</param>
        /// <param name="compressSvgGraphicsIfAny">The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)</param>
        /// <param name="convertMarkedContentToLayers">If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)</param>
        /// <param name="defaultFontName">Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)</param>
        /// <param name="documentType">Result document type. (optional)</param>
        /// <param name="fixedLayout">The value indicating whether that HTML is created as fixed layout. (optional)</param>
        /// <param name="imageResolution">Resolution for image rendering. (optional)</param>
        /// <param name="minimalLineWidth">This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)</param>
        /// <param name="preventGlyphsGrouping">This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)</param>
        /// <param name="splitCssIntoPages">When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)</param>
        /// <param name="splitIntoPages">The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)</param>
        /// <param name="useZOrder">If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)</param>
        /// <param name="antialiasingProcessing">The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)</param>
        /// <param name="cssClassNamesPrefix">When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)</param>
        /// <param name="explicitListOfSavedPages">With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)</param>
        /// <param name="fontEncodingStrategy">Defines encoding special rule to tune PDF decoding for current document. (optional)</param>
        /// <param name="fontSavingMode">Defines font saving mode that will be used during saving of PDF to desirable format. (optional)</param>
        /// <param name="htmlMarkupGenerationMode">Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)</param>
        /// <param name="lettersPositioningMethod">The mode of positioning of letters in words in result HTML. (optional)</param>
        /// <param name="pagesFlowTypeDependsOnViewersScreenSize">If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)</param>
        /// <param name="partsEmbeddingMode">It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)</param>
        /// <param name="rasterImagesSavingMode">Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)</param>
        /// <param name="removeEmptyAreasOnTopAndBottom">Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)</param>
        /// <param name="saveShadowedTextsAsTransparentTexts">Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)</param>
        /// <param name="saveTransparentTexts">Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)</param>
        /// <param name="specialFolderForAllImages">The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="specialFolderForSvgImages">The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="trySaveTextUnderliningAndStrikeoutingInCss">PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PutPdfInRequestToHtmlWithHttpInfo (string outPath, int? additionalMarginWidthInPoints = null, bool? compressSvgGraphicsIfAny = null, bool? convertMarkedContentToLayers = null, string defaultFontName = null, string documentType = null, bool? fixedLayout = null, int? imageResolution = null, int? minimalLineWidth = null, bool? preventGlyphsGrouping = null, bool? splitCssIntoPages = null, bool? splitIntoPages = null, bool? useZOrder = null, string antialiasingProcessing = null, string cssClassNamesPrefix = null, List<int?> explicitListOfSavedPages = null, string fontEncodingStrategy = null, string fontSavingMode = null, string htmlMarkupGenerationMode = null, string lettersPositioningMethod = null, bool? pagesFlowTypeDependsOnViewersScreenSize = null, string partsEmbeddingMode = null, string rasterImagesSavingMode = null, bool? removeEmptyAreasOnTopAndBottom = null, bool? saveShadowedTextsAsTransparentTexts = null, bool? saveTransparentTexts = null, string specialFolderForAllImages = null, string specialFolderForSvgImages = null, bool? trySaveTextUnderliningAndStrikeoutingInCss = null, System.IO.Stream file = null)
        {
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInRequestToHtml");

            var localVarPath = "/pdf/convert/html";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (additionalMarginWidthInPoints != null) localVarQueryParams.Add("additionalMarginWidthInPoints", ApiClient.ParameterToString(additionalMarginWidthInPoints)); // query parameter
            if (compressSvgGraphicsIfAny != null) localVarQueryParams.Add("compressSvgGraphicsIfAny", ApiClient.ParameterToString(compressSvgGraphicsIfAny)); // query parameter
            if (convertMarkedContentToLayers != null) localVarQueryParams.Add("convertMarkedContentToLayers", ApiClient.ParameterToString(convertMarkedContentToLayers)); // query parameter
            if (defaultFontName != null) localVarQueryParams.Add("defaultFontName", ApiClient.ParameterToString(defaultFontName)); // query parameter
            if (documentType != null) localVarQueryParams.Add("documentType", ApiClient.ParameterToString(documentType)); // query parameter
            if (fixedLayout != null) localVarQueryParams.Add("fixedLayout", ApiClient.ParameterToString(fixedLayout)); // query parameter
            if (imageResolution != null) localVarQueryParams.Add("imageResolution", ApiClient.ParameterToString(imageResolution)); // query parameter
            if (minimalLineWidth != null) localVarQueryParams.Add("minimalLineWidth", ApiClient.ParameterToString(minimalLineWidth)); // query parameter
            if (preventGlyphsGrouping != null) localVarQueryParams.Add("preventGlyphsGrouping", ApiClient.ParameterToString(preventGlyphsGrouping)); // query parameter
            if (splitCssIntoPages != null) localVarQueryParams.Add("splitCssIntoPages", ApiClient.ParameterToString(splitCssIntoPages)); // query parameter
            if (splitIntoPages != null) localVarQueryParams.Add("splitIntoPages", ApiClient.ParameterToString(splitIntoPages)); // query parameter
            if (useZOrder != null) localVarQueryParams.Add("useZOrder", ApiClient.ParameterToString(useZOrder)); // query parameter
            if (antialiasingProcessing != null) localVarQueryParams.Add("antialiasingProcessing", ApiClient.ParameterToString(antialiasingProcessing)); // query parameter
            if (cssClassNamesPrefix != null) localVarQueryParams.Add("cssClassNamesPrefix", ApiClient.ParameterToString(cssClassNamesPrefix)); // query parameter
            if (explicitListOfSavedPages != null) localVarQueryParams.Add("explicitListOfSavedPages", ApiClient.ParameterToString(explicitListOfSavedPages)); // query parameter
            if (fontEncodingStrategy != null) localVarQueryParams.Add("fontEncodingStrategy", ApiClient.ParameterToString(fontEncodingStrategy)); // query parameter
            if (fontSavingMode != null) localVarQueryParams.Add("fontSavingMode", ApiClient.ParameterToString(fontSavingMode)); // query parameter
            if (htmlMarkupGenerationMode != null) localVarQueryParams.Add("htmlMarkupGenerationMode", ApiClient.ParameterToString(htmlMarkupGenerationMode)); // query parameter
            if (lettersPositioningMethod != null) localVarQueryParams.Add("lettersPositioningMethod", ApiClient.ParameterToString(lettersPositioningMethod)); // query parameter
            if (pagesFlowTypeDependsOnViewersScreenSize != null) localVarQueryParams.Add("pagesFlowTypeDependsOnViewersScreenSize", ApiClient.ParameterToString(pagesFlowTypeDependsOnViewersScreenSize)); // query parameter
            if (partsEmbeddingMode != null) localVarQueryParams.Add("partsEmbeddingMode", ApiClient.ParameterToString(partsEmbeddingMode)); // query parameter
            if (rasterImagesSavingMode != null) localVarQueryParams.Add("rasterImagesSavingMode", ApiClient.ParameterToString(rasterImagesSavingMode)); // query parameter
            if (removeEmptyAreasOnTopAndBottom != null) localVarQueryParams.Add("removeEmptyAreasOnTopAndBottom", ApiClient.ParameterToString(removeEmptyAreasOnTopAndBottom)); // query parameter
            if (saveShadowedTextsAsTransparentTexts != null) localVarQueryParams.Add("saveShadowedTextsAsTransparentTexts", ApiClient.ParameterToString(saveShadowedTextsAsTransparentTexts)); // query parameter
            if (saveTransparentTexts != null) localVarQueryParams.Add("saveTransparentTexts", ApiClient.ParameterToString(saveTransparentTexts)); // query parameter
            if (specialFolderForAllImages != null) localVarQueryParams.Add("specialFolderForAllImages", ApiClient.ParameterToString(specialFolderForAllImages)); // query parameter
            if (specialFolderForSvgImages != null) localVarQueryParams.Add("specialFolderForSvgImages", ApiClient.ParameterToString(specialFolderForSvgImages)); // query parameter
            if (trySaveTextUnderliningAndStrikeoutingInCss != null) localVarQueryParams.Add("trySaveTextUnderliningAndStrikeoutingInCss", ApiClient.ParameterToString(trySaveTextUnderliningAndStrikeoutingInCss)); // query parameter
            if (file != null) localVarFileParams.Add("file", ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInRequestToHtml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (in request content) to Html format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.html)</param>
        /// <param name="additionalMarginWidthInPoints">Defines width of margin that will be forcibly left around that output HTML-areas. (optional)</param>
        /// <param name="compressSvgGraphicsIfAny">The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)</param>
        /// <param name="convertMarkedContentToLayers">If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)</param>
        /// <param name="defaultFontName">Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)</param>
        /// <param name="documentType">Result document type. (optional)</param>
        /// <param name="fixedLayout">The value indicating whether that HTML is created as fixed layout. (optional)</param>
        /// <param name="imageResolution">Resolution for image rendering. (optional)</param>
        /// <param name="minimalLineWidth">This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)</param>
        /// <param name="preventGlyphsGrouping">This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)</param>
        /// <param name="splitCssIntoPages">When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)</param>
        /// <param name="splitIntoPages">The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)</param>
        /// <param name="useZOrder">If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)</param>
        /// <param name="antialiasingProcessing">The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)</param>
        /// <param name="cssClassNamesPrefix">When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)</param>
        /// <param name="explicitListOfSavedPages">With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)</param>
        /// <param name="fontEncodingStrategy">Defines encoding special rule to tune PDF decoding for current document. (optional)</param>
        /// <param name="fontSavingMode">Defines font saving mode that will be used during saving of PDF to desirable format. (optional)</param>
        /// <param name="htmlMarkupGenerationMode">Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)</param>
        /// <param name="lettersPositioningMethod">The mode of positioning of letters in words in result HTML. (optional)</param>
        /// <param name="pagesFlowTypeDependsOnViewersScreenSize">If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)</param>
        /// <param name="partsEmbeddingMode">It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)</param>
        /// <param name="rasterImagesSavingMode">Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)</param>
        /// <param name="removeEmptyAreasOnTopAndBottom">Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)</param>
        /// <param name="saveShadowedTextsAsTransparentTexts">Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)</param>
        /// <param name="saveTransparentTexts">Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)</param>
        /// <param name="specialFolderForAllImages">The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="specialFolderForSvgImages">The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="trySaveTextUnderliningAndStrikeoutingInCss">PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PutPdfInRequestToHtmlAsync (string outPath, int? additionalMarginWidthInPoints = null, bool? compressSvgGraphicsIfAny = null, bool? convertMarkedContentToLayers = null, string defaultFontName = null, string documentType = null, bool? fixedLayout = null, int? imageResolution = null, int? minimalLineWidth = null, bool? preventGlyphsGrouping = null, bool? splitCssIntoPages = null, bool? splitIntoPages = null, bool? useZOrder = null, string antialiasingProcessing = null, string cssClassNamesPrefix = null, List<int?> explicitListOfSavedPages = null, string fontEncodingStrategy = null, string fontSavingMode = null, string htmlMarkupGenerationMode = null, string lettersPositioningMethod = null, bool? pagesFlowTypeDependsOnViewersScreenSize = null, string partsEmbeddingMode = null, string rasterImagesSavingMode = null, bool? removeEmptyAreasOnTopAndBottom = null, bool? saveShadowedTextsAsTransparentTexts = null, bool? saveTransparentTexts = null, string specialFolderForAllImages = null, string specialFolderForSvgImages = null, bool? trySaveTextUnderliningAndStrikeoutingInCss = null, System.IO.Stream file = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PutPdfInRequestToHtmlAsyncWithHttpInfo(outPath, additionalMarginWidthInPoints, compressSvgGraphicsIfAny, convertMarkedContentToLayers, defaultFontName, documentType, fixedLayout, imageResolution, minimalLineWidth, preventGlyphsGrouping, splitCssIntoPages, splitIntoPages, useZOrder, antialiasingProcessing, cssClassNamesPrefix, explicitListOfSavedPages, fontEncodingStrategy, fontSavingMode, htmlMarkupGenerationMode, lettersPositioningMethod, pagesFlowTypeDependsOnViewersScreenSize, partsEmbeddingMode, rasterImagesSavingMode, removeEmptyAreasOnTopAndBottom, saveShadowedTextsAsTransparentTexts, saveTransparentTexts, specialFolderForAllImages, specialFolderForSvgImages, trySaveTextUnderliningAndStrikeoutingInCss, file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (in request content) to Html format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.html)</param>
        /// <param name="additionalMarginWidthInPoints">Defines width of margin that will be forcibly left around that output HTML-areas. (optional)</param>
        /// <param name="compressSvgGraphicsIfAny">The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)</param>
        /// <param name="convertMarkedContentToLayers">If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)</param>
        /// <param name="defaultFontName">Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)</param>
        /// <param name="documentType">Result document type. (optional)</param>
        /// <param name="fixedLayout">The value indicating whether that HTML is created as fixed layout. (optional)</param>
        /// <param name="imageResolution">Resolution for image rendering. (optional)</param>
        /// <param name="minimalLineWidth">This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)</param>
        /// <param name="preventGlyphsGrouping">This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)</param>
        /// <param name="splitCssIntoPages">When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)</param>
        /// <param name="splitIntoPages">The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)</param>
        /// <param name="useZOrder">If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)</param>
        /// <param name="antialiasingProcessing">The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)</param>
        /// <param name="cssClassNamesPrefix">When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)</param>
        /// <param name="explicitListOfSavedPages">With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)</param>
        /// <param name="fontEncodingStrategy">Defines encoding special rule to tune PDF decoding for current document. (optional)</param>
        /// <param name="fontSavingMode">Defines font saving mode that will be used during saving of PDF to desirable format. (optional)</param>
        /// <param name="htmlMarkupGenerationMode">Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)</param>
        /// <param name="lettersPositioningMethod">The mode of positioning of letters in words in result HTML. (optional)</param>
        /// <param name="pagesFlowTypeDependsOnViewersScreenSize">If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)</param>
        /// <param name="partsEmbeddingMode">It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)</param>
        /// <param name="rasterImagesSavingMode">Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)</param>
        /// <param name="removeEmptyAreasOnTopAndBottom">Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)</param>
        /// <param name="saveShadowedTextsAsTransparentTexts">Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)</param>
        /// <param name="saveTransparentTexts">Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)</param>
        /// <param name="specialFolderForAllImages">The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="specialFolderForSvgImages">The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="trySaveTextUnderliningAndStrikeoutingInCss">PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPdfInRequestToHtmlAsyncWithHttpInfo (string outPath, int? additionalMarginWidthInPoints = null, bool? compressSvgGraphicsIfAny = null, bool? convertMarkedContentToLayers = null, string defaultFontName = null, string documentType = null, bool? fixedLayout = null, int? imageResolution = null, int? minimalLineWidth = null, bool? preventGlyphsGrouping = null, bool? splitCssIntoPages = null, bool? splitIntoPages = null, bool? useZOrder = null, string antialiasingProcessing = null, string cssClassNamesPrefix = null, List<int?> explicitListOfSavedPages = null, string fontEncodingStrategy = null, string fontSavingMode = null, string htmlMarkupGenerationMode = null, string lettersPositioningMethod = null, bool? pagesFlowTypeDependsOnViewersScreenSize = null, string partsEmbeddingMode = null, string rasterImagesSavingMode = null, bool? removeEmptyAreasOnTopAndBottom = null, bool? saveShadowedTextsAsTransparentTexts = null, bool? saveTransparentTexts = null, string specialFolderForAllImages = null, string specialFolderForSvgImages = null, bool? trySaveTextUnderliningAndStrikeoutingInCss = null, System.IO.Stream file = null)
        {
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInRequestToHtml");

            var localVarPath = "/pdf/convert/html";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (additionalMarginWidthInPoints != null) localVarQueryParams.Add("additionalMarginWidthInPoints", ApiClient.ParameterToString(additionalMarginWidthInPoints)); // query parameter
            if (compressSvgGraphicsIfAny != null) localVarQueryParams.Add("compressSvgGraphicsIfAny", ApiClient.ParameterToString(compressSvgGraphicsIfAny)); // query parameter
            if (convertMarkedContentToLayers != null) localVarQueryParams.Add("convertMarkedContentToLayers", ApiClient.ParameterToString(convertMarkedContentToLayers)); // query parameter
            if (defaultFontName != null) localVarQueryParams.Add("defaultFontName", ApiClient.ParameterToString(defaultFontName)); // query parameter
            if (documentType != null) localVarQueryParams.Add("documentType", ApiClient.ParameterToString(documentType)); // query parameter
            if (fixedLayout != null) localVarQueryParams.Add("fixedLayout", ApiClient.ParameterToString(fixedLayout)); // query parameter
            if (imageResolution != null) localVarQueryParams.Add("imageResolution", ApiClient.ParameterToString(imageResolution)); // query parameter
            if (minimalLineWidth != null) localVarQueryParams.Add("minimalLineWidth", ApiClient.ParameterToString(minimalLineWidth)); // query parameter
            if (preventGlyphsGrouping != null) localVarQueryParams.Add("preventGlyphsGrouping", ApiClient.ParameterToString(preventGlyphsGrouping)); // query parameter
            if (splitCssIntoPages != null) localVarQueryParams.Add("splitCssIntoPages", ApiClient.ParameterToString(splitCssIntoPages)); // query parameter
            if (splitIntoPages != null) localVarQueryParams.Add("splitIntoPages", ApiClient.ParameterToString(splitIntoPages)); // query parameter
            if (useZOrder != null) localVarQueryParams.Add("useZOrder", ApiClient.ParameterToString(useZOrder)); // query parameter
            if (antialiasingProcessing != null) localVarQueryParams.Add("antialiasingProcessing", ApiClient.ParameterToString(antialiasingProcessing)); // query parameter
            if (cssClassNamesPrefix != null) localVarQueryParams.Add("cssClassNamesPrefix", ApiClient.ParameterToString(cssClassNamesPrefix)); // query parameter
            if (explicitListOfSavedPages != null) localVarQueryParams.Add("explicitListOfSavedPages", ApiClient.ParameterToString(explicitListOfSavedPages)); // query parameter
            if (fontEncodingStrategy != null) localVarQueryParams.Add("fontEncodingStrategy", ApiClient.ParameterToString(fontEncodingStrategy)); // query parameter
            if (fontSavingMode != null) localVarQueryParams.Add("fontSavingMode", ApiClient.ParameterToString(fontSavingMode)); // query parameter
            if (htmlMarkupGenerationMode != null) localVarQueryParams.Add("htmlMarkupGenerationMode", ApiClient.ParameterToString(htmlMarkupGenerationMode)); // query parameter
            if (lettersPositioningMethod != null) localVarQueryParams.Add("lettersPositioningMethod", ApiClient.ParameterToString(lettersPositioningMethod)); // query parameter
            if (pagesFlowTypeDependsOnViewersScreenSize != null) localVarQueryParams.Add("pagesFlowTypeDependsOnViewersScreenSize", ApiClient.ParameterToString(pagesFlowTypeDependsOnViewersScreenSize)); // query parameter
            if (partsEmbeddingMode != null) localVarQueryParams.Add("partsEmbeddingMode", ApiClient.ParameterToString(partsEmbeddingMode)); // query parameter
            if (rasterImagesSavingMode != null) localVarQueryParams.Add("rasterImagesSavingMode", ApiClient.ParameterToString(rasterImagesSavingMode)); // query parameter
            if (removeEmptyAreasOnTopAndBottom != null) localVarQueryParams.Add("removeEmptyAreasOnTopAndBottom", ApiClient.ParameterToString(removeEmptyAreasOnTopAndBottom)); // query parameter
            if (saveShadowedTextsAsTransparentTexts != null) localVarQueryParams.Add("saveShadowedTextsAsTransparentTexts", ApiClient.ParameterToString(saveShadowedTextsAsTransparentTexts)); // query parameter
            if (saveTransparentTexts != null) localVarQueryParams.Add("saveTransparentTexts", ApiClient.ParameterToString(saveTransparentTexts)); // query parameter
            if (specialFolderForAllImages != null) localVarQueryParams.Add("specialFolderForAllImages", ApiClient.ParameterToString(specialFolderForAllImages)); // query parameter
            if (specialFolderForSvgImages != null) localVarQueryParams.Add("specialFolderForSvgImages", ApiClient.ParameterToString(specialFolderForSvgImages)); // query parameter
            if (trySaveTextUnderliningAndStrikeoutingInCss != null) localVarQueryParams.Add("trySaveTextUnderliningAndStrikeoutingInCss", ApiClient.ParameterToString(trySaveTextUnderliningAndStrikeoutingInCss)); // query parameter
            if (file != null) localVarFileParams.Add("file", ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInRequestToHtml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (in request content) to LaTeX format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tex)</param>
        /// <param name="pagesCount">Pages count. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PutPdfInRequestToLaTeX (string outPath, int? pagesCount = null, System.IO.Stream file = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PutPdfInRequestToLaTeXWithHttpInfo(outPath, pagesCount, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (in request content) to LaTeX format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tex)</param>
        /// <param name="pagesCount">Pages count. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PutPdfInRequestToLaTeXWithHttpInfo (string outPath, int? pagesCount = null, System.IO.Stream file = null)
        {
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInRequestToLaTeX");

            var localVarPath = "/pdf/convert/latex";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (pagesCount != null) localVarQueryParams.Add("pagesCount", ApiClient.ParameterToString(pagesCount)); // query parameter
            if (file != null) localVarFileParams.Add("file", ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInRequestToLaTeX", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (in request content) to LaTeX format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tex)</param>
        /// <param name="pagesCount">Pages count. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PutPdfInRequestToLaTeXAsync (string outPath, int? pagesCount = null, System.IO.Stream file = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PutPdfInRequestToLaTeXAsyncWithHttpInfo(outPath, pagesCount, file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (in request content) to LaTeX format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tex)</param>
        /// <param name="pagesCount">Pages count. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPdfInRequestToLaTeXAsyncWithHttpInfo (string outPath, int? pagesCount = null, System.IO.Stream file = null)
        {
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInRequestToLaTeX");

            var localVarPath = "/pdf/convert/latex";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (pagesCount != null) localVarQueryParams.Add("pagesCount", ApiClient.ParameterToString(pagesCount)); // query parameter
            if (file != null) localVarFileParams.Add("file", ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInRequestToLaTeX", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (in request content) to MOBIXML format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.mobixml)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PutPdfInRequestToMobiXml (string outPath, System.IO.Stream file = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PutPdfInRequestToMobiXmlWithHttpInfo(outPath, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (in request content) to MOBIXML format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.mobixml)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PutPdfInRequestToMobiXmlWithHttpInfo (string outPath, System.IO.Stream file = null)
        {
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInRequestToMobiXml");

            var localVarPath = "/pdf/convert/mobixml";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (file != null) localVarFileParams.Add("file", ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInRequestToMobiXml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (in request content) to MOBIXML format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.mobixml)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PutPdfInRequestToMobiXmlAsync (string outPath, System.IO.Stream file = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PutPdfInRequestToMobiXmlAsyncWithHttpInfo(outPath, file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (in request content) to MOBIXML format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.mobixml)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPdfInRequestToMobiXmlAsyncWithHttpInfo (string outPath, System.IO.Stream file = null)
        {
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInRequestToMobiXml");

            var localVarPath = "/pdf/convert/mobixml";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (file != null) localVarFileParams.Add("file", ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInRequestToMobiXml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (in request content) to PdfA format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="type">Type of PdfA format.</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PutPdfInRequestToPdfA (string outPath, string type, System.IO.Stream file = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PutPdfInRequestToPdfAWithHttpInfo(outPath, type, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (in request content) to PdfA format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="type">Type of PdfA format.</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PutPdfInRequestToPdfAWithHttpInfo (string outPath, string type, System.IO.Stream file = null)
        {
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInRequestToPdfA");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling PdfApi->PutPdfInRequestToPdfA");

            var localVarPath = "/pdf/convert/pdfa";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (type != null) localVarQueryParams.Add("type", ApiClient.ParameterToString(type)); // query parameter
            if (file != null) localVarFileParams.Add("file", ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInRequestToPdfA", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (in request content) to PdfA format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="type">Type of PdfA format.</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PutPdfInRequestToPdfAAsync (string outPath, string type, System.IO.Stream file = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PutPdfInRequestToPdfAAsyncWithHttpInfo(outPath, type, file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (in request content) to PdfA format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="type">Type of PdfA format.</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPdfInRequestToPdfAAsyncWithHttpInfo (string outPath, string type, System.IO.Stream file = null)
        {
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInRequestToPdfA");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling PdfApi->PutPdfInRequestToPdfA");

            var localVarPath = "/pdf/convert/pdfa";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (type != null) localVarQueryParams.Add("type", ApiClient.ParameterToString(type)); // query parameter
            if (file != null) localVarFileParams.Add("file", ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInRequestToPdfA", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (in request content) to PPTX format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pptx)</param>
        /// <param name="separateImages">Separate images. (optional)</param>
        /// <param name="slidesAsImages">Slides as images. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PutPdfInRequestToPptx (string outPath, bool? separateImages = null, bool? slidesAsImages = null, System.IO.Stream file = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PutPdfInRequestToPptxWithHttpInfo(outPath, separateImages, slidesAsImages, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (in request content) to PPTX format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pptx)</param>
        /// <param name="separateImages">Separate images. (optional)</param>
        /// <param name="slidesAsImages">Slides as images. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PutPdfInRequestToPptxWithHttpInfo (string outPath, bool? separateImages = null, bool? slidesAsImages = null, System.IO.Stream file = null)
        {
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInRequestToPptx");

            var localVarPath = "/pdf/convert/pptx";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (separateImages != null) localVarQueryParams.Add("separateImages", ApiClient.ParameterToString(separateImages)); // query parameter
            if (slidesAsImages != null) localVarQueryParams.Add("slidesAsImages", ApiClient.ParameterToString(slidesAsImages)); // query parameter
            if (file != null) localVarFileParams.Add("file", ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInRequestToPptx", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (in request content) to PPTX format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pptx)</param>
        /// <param name="separateImages">Separate images. (optional)</param>
        /// <param name="slidesAsImages">Slides as images. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PutPdfInRequestToPptxAsync (string outPath, bool? separateImages = null, bool? slidesAsImages = null, System.IO.Stream file = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PutPdfInRequestToPptxAsyncWithHttpInfo(outPath, separateImages, slidesAsImages, file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (in request content) to PPTX format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pptx)</param>
        /// <param name="separateImages">Separate images. (optional)</param>
        /// <param name="slidesAsImages">Slides as images. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPdfInRequestToPptxAsyncWithHttpInfo (string outPath, bool? separateImages = null, bool? slidesAsImages = null, System.IO.Stream file = null)
        {
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInRequestToPptx");

            var localVarPath = "/pdf/convert/pptx";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (separateImages != null) localVarQueryParams.Add("separateImages", ApiClient.ParameterToString(separateImages)); // query parameter
            if (slidesAsImages != null) localVarQueryParams.Add("slidesAsImages", ApiClient.ParameterToString(slidesAsImages)); // query parameter
            if (file != null) localVarFileParams.Add("file", ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInRequestToPptx", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (in request content) to SVG format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.svg)</param>
        /// <param name="compressOutputToZipArchive">Specifies whether output will be created as one zip-archive. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PutPdfInRequestToSvg (string outPath, bool? compressOutputToZipArchive = null, System.IO.Stream file = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PutPdfInRequestToSvgWithHttpInfo(outPath, compressOutputToZipArchive, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (in request content) to SVG format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.svg)</param>
        /// <param name="compressOutputToZipArchive">Specifies whether output will be created as one zip-archive. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PutPdfInRequestToSvgWithHttpInfo (string outPath, bool? compressOutputToZipArchive = null, System.IO.Stream file = null)
        {
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInRequestToSvg");

            var localVarPath = "/pdf/convert/svg";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (compressOutputToZipArchive != null) localVarQueryParams.Add("compressOutputToZipArchive", ApiClient.ParameterToString(compressOutputToZipArchive)); // query parameter
            if (file != null) localVarFileParams.Add("file", ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInRequestToSvg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (in request content) to SVG format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.svg)</param>
        /// <param name="compressOutputToZipArchive">Specifies whether output will be created as one zip-archive. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PutPdfInRequestToSvgAsync (string outPath, bool? compressOutputToZipArchive = null, System.IO.Stream file = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PutPdfInRequestToSvgAsyncWithHttpInfo(outPath, compressOutputToZipArchive, file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (in request content) to SVG format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.svg)</param>
        /// <param name="compressOutputToZipArchive">Specifies whether output will be created as one zip-archive. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPdfInRequestToSvgAsyncWithHttpInfo (string outPath, bool? compressOutputToZipArchive = null, System.IO.Stream file = null)
        {
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInRequestToSvg");

            var localVarPath = "/pdf/convert/svg";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (compressOutputToZipArchive != null) localVarQueryParams.Add("compressOutputToZipArchive", ApiClient.ParameterToString(compressOutputToZipArchive)); // query parameter
            if (file != null) localVarFileParams.Add("file", ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInRequestToSvg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (in request content) to TIFF format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tiff)</param>
        /// <param name="brightness">Image brightness. (optional)</param>
        /// <param name="compression">Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)</param>
        /// <param name="colorDepth">Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)</param>
        /// <param name="leftMargin">Left image margin. (optional)</param>
        /// <param name="rightMargin">Right image margin. (optional)</param>
        /// <param name="topMargin">Top image margin. (optional)</param>
        /// <param name="bottomMargin">Bottom image margin. (optional)</param>
        /// <param name="orientation">Image orientation. Possible values are: None, Landscape, Portait. (optional)</param>
        /// <param name="skipBlankPages">Skip blank pages flag. (optional)</param>
        /// <param name="width">Image width. (optional)</param>
        /// <param name="height">Image height. (optional)</param>
        /// <param name="xResolution">Horizontal resolution. (optional)</param>
        /// <param name="yResolution">Vertical resolution. (optional)</param>
        /// <param name="pageIndex">Start page to export. (optional)</param>
        /// <param name="pageCount">Number of pages to export. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PutPdfInRequestToTiff (string outPath, double? brightness = null, string compression = null, string colorDepth = null, int? leftMargin = null, int? rightMargin = null, int? topMargin = null, int? bottomMargin = null, string orientation = null, bool? skipBlankPages = null, int? width = null, int? height = null, int? xResolution = null, int? yResolution = null, int? pageIndex = null, int? pageCount = null, System.IO.Stream file = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PutPdfInRequestToTiffWithHttpInfo(outPath, brightness, compression, colorDepth, leftMargin, rightMargin, topMargin, bottomMargin, orientation, skipBlankPages, width, height, xResolution, yResolution, pageIndex, pageCount, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (in request content) to TIFF format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tiff)</param>
        /// <param name="brightness">Image brightness. (optional)</param>
        /// <param name="compression">Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)</param>
        /// <param name="colorDepth">Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)</param>
        /// <param name="leftMargin">Left image margin. (optional)</param>
        /// <param name="rightMargin">Right image margin. (optional)</param>
        /// <param name="topMargin">Top image margin. (optional)</param>
        /// <param name="bottomMargin">Bottom image margin. (optional)</param>
        /// <param name="orientation">Image orientation. Possible values are: None, Landscape, Portait. (optional)</param>
        /// <param name="skipBlankPages">Skip blank pages flag. (optional)</param>
        /// <param name="width">Image width. (optional)</param>
        /// <param name="height">Image height. (optional)</param>
        /// <param name="xResolution">Horizontal resolution. (optional)</param>
        /// <param name="yResolution">Vertical resolution. (optional)</param>
        /// <param name="pageIndex">Start page to export. (optional)</param>
        /// <param name="pageCount">Number of pages to export. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PutPdfInRequestToTiffWithHttpInfo (string outPath, double? brightness = null, string compression = null, string colorDepth = null, int? leftMargin = null, int? rightMargin = null, int? topMargin = null, int? bottomMargin = null, string orientation = null, bool? skipBlankPages = null, int? width = null, int? height = null, int? xResolution = null, int? yResolution = null, int? pageIndex = null, int? pageCount = null, System.IO.Stream file = null)
        {
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInRequestToTiff");

            var localVarPath = "/pdf/convert/tiff";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (brightness != null) localVarQueryParams.Add("brightness", ApiClient.ParameterToString(brightness)); // query parameter
            if (compression != null) localVarQueryParams.Add("compression", ApiClient.ParameterToString(compression)); // query parameter
            if (colorDepth != null) localVarQueryParams.Add("colorDepth", ApiClient.ParameterToString(colorDepth)); // query parameter
            if (leftMargin != null) localVarQueryParams.Add("leftMargin", ApiClient.ParameterToString(leftMargin)); // query parameter
            if (rightMargin != null) localVarQueryParams.Add("rightMargin", ApiClient.ParameterToString(rightMargin)); // query parameter
            if (topMargin != null) localVarQueryParams.Add("topMargin", ApiClient.ParameterToString(topMargin)); // query parameter
            if (bottomMargin != null) localVarQueryParams.Add("bottomMargin", ApiClient.ParameterToString(bottomMargin)); // query parameter
            if (orientation != null) localVarQueryParams.Add("orientation", ApiClient.ParameterToString(orientation)); // query parameter
            if (skipBlankPages != null) localVarQueryParams.Add("skipBlankPages", ApiClient.ParameterToString(skipBlankPages)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (xResolution != null) localVarQueryParams.Add("xResolution", ApiClient.ParameterToString(xResolution)); // query parameter
            if (yResolution != null) localVarQueryParams.Add("yResolution", ApiClient.ParameterToString(yResolution)); // query parameter
            if (pageIndex != null) localVarQueryParams.Add("pageIndex", ApiClient.ParameterToString(pageIndex)); // query parameter
            if (pageCount != null) localVarQueryParams.Add("pageCount", ApiClient.ParameterToString(pageCount)); // query parameter
            if (file != null) localVarFileParams.Add("file", ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInRequestToTiff", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (in request content) to TIFF format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tiff)</param>
        /// <param name="brightness">Image brightness. (optional)</param>
        /// <param name="compression">Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)</param>
        /// <param name="colorDepth">Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)</param>
        /// <param name="leftMargin">Left image margin. (optional)</param>
        /// <param name="rightMargin">Right image margin. (optional)</param>
        /// <param name="topMargin">Top image margin. (optional)</param>
        /// <param name="bottomMargin">Bottom image margin. (optional)</param>
        /// <param name="orientation">Image orientation. Possible values are: None, Landscape, Portait. (optional)</param>
        /// <param name="skipBlankPages">Skip blank pages flag. (optional)</param>
        /// <param name="width">Image width. (optional)</param>
        /// <param name="height">Image height. (optional)</param>
        /// <param name="xResolution">Horizontal resolution. (optional)</param>
        /// <param name="yResolution">Vertical resolution. (optional)</param>
        /// <param name="pageIndex">Start page to export. (optional)</param>
        /// <param name="pageCount">Number of pages to export. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PutPdfInRequestToTiffAsync (string outPath, double? brightness = null, string compression = null, string colorDepth = null, int? leftMargin = null, int? rightMargin = null, int? topMargin = null, int? bottomMargin = null, string orientation = null, bool? skipBlankPages = null, int? width = null, int? height = null, int? xResolution = null, int? yResolution = null, int? pageIndex = null, int? pageCount = null, System.IO.Stream file = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PutPdfInRequestToTiffAsyncWithHttpInfo(outPath, brightness, compression, colorDepth, leftMargin, rightMargin, topMargin, bottomMargin, orientation, skipBlankPages, width, height, xResolution, yResolution, pageIndex, pageCount, file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (in request content) to TIFF format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tiff)</param>
        /// <param name="brightness">Image brightness. (optional)</param>
        /// <param name="compression">Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)</param>
        /// <param name="colorDepth">Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)</param>
        /// <param name="leftMargin">Left image margin. (optional)</param>
        /// <param name="rightMargin">Right image margin. (optional)</param>
        /// <param name="topMargin">Top image margin. (optional)</param>
        /// <param name="bottomMargin">Bottom image margin. (optional)</param>
        /// <param name="orientation">Image orientation. Possible values are: None, Landscape, Portait. (optional)</param>
        /// <param name="skipBlankPages">Skip blank pages flag. (optional)</param>
        /// <param name="width">Image width. (optional)</param>
        /// <param name="height">Image height. (optional)</param>
        /// <param name="xResolution">Horizontal resolution. (optional)</param>
        /// <param name="yResolution">Vertical resolution. (optional)</param>
        /// <param name="pageIndex">Start page to export. (optional)</param>
        /// <param name="pageCount">Number of pages to export. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPdfInRequestToTiffAsyncWithHttpInfo (string outPath, double? brightness = null, string compression = null, string colorDepth = null, int? leftMargin = null, int? rightMargin = null, int? topMargin = null, int? bottomMargin = null, string orientation = null, bool? skipBlankPages = null, int? width = null, int? height = null, int? xResolution = null, int? yResolution = null, int? pageIndex = null, int? pageCount = null, System.IO.Stream file = null)
        {
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInRequestToTiff");

            var localVarPath = "/pdf/convert/tiff";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (brightness != null) localVarQueryParams.Add("brightness", ApiClient.ParameterToString(brightness)); // query parameter
            if (compression != null) localVarQueryParams.Add("compression", ApiClient.ParameterToString(compression)); // query parameter
            if (colorDepth != null) localVarQueryParams.Add("colorDepth", ApiClient.ParameterToString(colorDepth)); // query parameter
            if (leftMargin != null) localVarQueryParams.Add("leftMargin", ApiClient.ParameterToString(leftMargin)); // query parameter
            if (rightMargin != null) localVarQueryParams.Add("rightMargin", ApiClient.ParameterToString(rightMargin)); // query parameter
            if (topMargin != null) localVarQueryParams.Add("topMargin", ApiClient.ParameterToString(topMargin)); // query parameter
            if (bottomMargin != null) localVarQueryParams.Add("bottomMargin", ApiClient.ParameterToString(bottomMargin)); // query parameter
            if (orientation != null) localVarQueryParams.Add("orientation", ApiClient.ParameterToString(orientation)); // query parameter
            if (skipBlankPages != null) localVarQueryParams.Add("skipBlankPages", ApiClient.ParameterToString(skipBlankPages)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (xResolution != null) localVarQueryParams.Add("xResolution", ApiClient.ParameterToString(xResolution)); // query parameter
            if (yResolution != null) localVarQueryParams.Add("yResolution", ApiClient.ParameterToString(yResolution)); // query parameter
            if (pageIndex != null) localVarQueryParams.Add("pageIndex", ApiClient.ParameterToString(pageIndex)); // query parameter
            if (pageCount != null) localVarQueryParams.Add("pageCount", ApiClient.ParameterToString(pageCount)); // query parameter
            if (file != null) localVarFileParams.Add("file", ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInRequestToTiff", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (in request content) to XLS format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xls)</param>
        /// <param name="insertBlankColumnAtFirst">Insert blank column at first (optional)</param>
        /// <param name="minimizeTheNumberOfWorksheets">Minimize the number of worksheets (optional)</param>
        /// <param name="scaleFactor">Scale factor (optional)</param>
        /// <param name="uniformWorksheets">Uniform worksheets (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PutPdfInRequestToXls (string outPath, bool? insertBlankColumnAtFirst = null, bool? minimizeTheNumberOfWorksheets = null, double? scaleFactor = null, bool? uniformWorksheets = null, System.IO.Stream file = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PutPdfInRequestToXlsWithHttpInfo(outPath, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (in request content) to XLS format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xls)</param>
        /// <param name="insertBlankColumnAtFirst">Insert blank column at first (optional)</param>
        /// <param name="minimizeTheNumberOfWorksheets">Minimize the number of worksheets (optional)</param>
        /// <param name="scaleFactor">Scale factor (optional)</param>
        /// <param name="uniformWorksheets">Uniform worksheets (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PutPdfInRequestToXlsWithHttpInfo (string outPath, bool? insertBlankColumnAtFirst = null, bool? minimizeTheNumberOfWorksheets = null, double? scaleFactor = null, bool? uniformWorksheets = null, System.IO.Stream file = null)
        {
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInRequestToXls");

            var localVarPath = "/pdf/convert/xls";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (insertBlankColumnAtFirst != null) localVarQueryParams.Add("insertBlankColumnAtFirst", ApiClient.ParameterToString(insertBlankColumnAtFirst)); // query parameter
            if (minimizeTheNumberOfWorksheets != null) localVarQueryParams.Add("minimizeTheNumberOfWorksheets", ApiClient.ParameterToString(minimizeTheNumberOfWorksheets)); // query parameter
            if (scaleFactor != null) localVarQueryParams.Add("scaleFactor", ApiClient.ParameterToString(scaleFactor)); // query parameter
            if (uniformWorksheets != null) localVarQueryParams.Add("uniformWorksheets", ApiClient.ParameterToString(uniformWorksheets)); // query parameter
            if (file != null) localVarFileParams.Add("file", ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInRequestToXls", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (in request content) to XLS format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xls)</param>
        /// <param name="insertBlankColumnAtFirst">Insert blank column at first (optional)</param>
        /// <param name="minimizeTheNumberOfWorksheets">Minimize the number of worksheets (optional)</param>
        /// <param name="scaleFactor">Scale factor (optional)</param>
        /// <param name="uniformWorksheets">Uniform worksheets (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PutPdfInRequestToXlsAsync (string outPath, bool? insertBlankColumnAtFirst = null, bool? minimizeTheNumberOfWorksheets = null, double? scaleFactor = null, bool? uniformWorksheets = null, System.IO.Stream file = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PutPdfInRequestToXlsAsyncWithHttpInfo(outPath, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (in request content) to XLS format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xls)</param>
        /// <param name="insertBlankColumnAtFirst">Insert blank column at first (optional)</param>
        /// <param name="minimizeTheNumberOfWorksheets">Minimize the number of worksheets (optional)</param>
        /// <param name="scaleFactor">Scale factor (optional)</param>
        /// <param name="uniformWorksheets">Uniform worksheets (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPdfInRequestToXlsAsyncWithHttpInfo (string outPath, bool? insertBlankColumnAtFirst = null, bool? minimizeTheNumberOfWorksheets = null, double? scaleFactor = null, bool? uniformWorksheets = null, System.IO.Stream file = null)
        {
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInRequestToXls");

            var localVarPath = "/pdf/convert/xls";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (insertBlankColumnAtFirst != null) localVarQueryParams.Add("insertBlankColumnAtFirst", ApiClient.ParameterToString(insertBlankColumnAtFirst)); // query parameter
            if (minimizeTheNumberOfWorksheets != null) localVarQueryParams.Add("minimizeTheNumberOfWorksheets", ApiClient.ParameterToString(minimizeTheNumberOfWorksheets)); // query parameter
            if (scaleFactor != null) localVarQueryParams.Add("scaleFactor", ApiClient.ParameterToString(scaleFactor)); // query parameter
            if (uniformWorksheets != null) localVarQueryParams.Add("uniformWorksheets", ApiClient.ParameterToString(uniformWorksheets)); // query parameter
            if (file != null) localVarFileParams.Add("file", ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInRequestToXls", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (in request content) to XML format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xml)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PutPdfInRequestToXml (string outPath, System.IO.Stream file = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PutPdfInRequestToXmlWithHttpInfo(outPath, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (in request content) to XML format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xml)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PutPdfInRequestToXmlWithHttpInfo (string outPath, System.IO.Stream file = null)
        {
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInRequestToXml");

            var localVarPath = "/pdf/convert/xml";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (file != null) localVarFileParams.Add("file", ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInRequestToXml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (in request content) to XML format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xml)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PutPdfInRequestToXmlAsync (string outPath, System.IO.Stream file = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PutPdfInRequestToXmlAsyncWithHttpInfo(outPath, file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (in request content) to XML format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xml)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPdfInRequestToXmlAsyncWithHttpInfo (string outPath, System.IO.Stream file = null)
        {
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInRequestToXml");

            var localVarPath = "/pdf/convert/xml";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (file != null) localVarFileParams.Add("file", ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInRequestToXml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (in request content) to XPS format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xps)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PutPdfInRequestToXps (string outPath, System.IO.Stream file = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PutPdfInRequestToXpsWithHttpInfo(outPath, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (in request content) to XPS format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xps)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PutPdfInRequestToXpsWithHttpInfo (string outPath, System.IO.Stream file = null)
        {
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInRequestToXps");

            var localVarPath = "/pdf/convert/xps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (file != null) localVarFileParams.Add("file", ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInRequestToXps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (in request content) to XPS format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xps)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PutPdfInRequestToXpsAsync (string outPath, System.IO.Stream file = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PutPdfInRequestToXpsAsyncWithHttpInfo(outPath, file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (in request content) to XPS format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xps)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPdfInRequestToXpsAsyncWithHttpInfo (string outPath, System.IO.Stream file = null)
        {
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInRequestToXps");

            var localVarPath = "/pdf/convert/xps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (file != null) localVarFileParams.Add("file", ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInRequestToXps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to DOC format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.doc)</param>
        /// <param name="addReturnToLineEnd">Add return to line end. (optional)</param>
        /// <param name="format">Allows to specify .doc or .docx file format. (optional)</param>
        /// <param name="imageResolutionX">Image resolution X. (optional)</param>
        /// <param name="imageResolutionY">Image resolution Y. (optional)</param>
        /// <param name="maxDistanceBetweenTextLines">Max distance between text lines. (optional)</param>
        /// <param name="mode">Allows to control how a PDF document is converted into a word processing document. (optional)</param>
        /// <param name="recognizeBullets">Recognize bullets. (optional)</param>
        /// <param name="relativeHorizontalProximity">Relative horizontal proximity. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PutPdfInStorageToDoc (string name, string outPath, bool? addReturnToLineEnd = null, string format = null, int? imageResolutionX = null, int? imageResolutionY = null, int? maxDistanceBetweenTextLines = null, string mode = null, bool? recognizeBullets = null, double? relativeHorizontalProximity = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PutPdfInStorageToDocWithHttpInfo(name, outPath, addReturnToLineEnd, format, imageResolutionX, imageResolutionY, maxDistanceBetweenTextLines, mode, recognizeBullets, relativeHorizontalProximity, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (located on storage) to DOC format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.doc)</param>
        /// <param name="addReturnToLineEnd">Add return to line end. (optional)</param>
        /// <param name="format">Allows to specify .doc or .docx file format. (optional)</param>
        /// <param name="imageResolutionX">Image resolution X. (optional)</param>
        /// <param name="imageResolutionY">Image resolution Y. (optional)</param>
        /// <param name="maxDistanceBetweenTextLines">Max distance between text lines. (optional)</param>
        /// <param name="mode">Allows to control how a PDF document is converted into a word processing document. (optional)</param>
        /// <param name="recognizeBullets">Recognize bullets. (optional)</param>
        /// <param name="relativeHorizontalProximity">Relative horizontal proximity. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PutPdfInStorageToDocWithHttpInfo (string name, string outPath, bool? addReturnToLineEnd = null, string format = null, int? imageResolutionX = null, int? imageResolutionY = null, int? maxDistanceBetweenTextLines = null, string mode = null, bool? recognizeBullets = null, double? relativeHorizontalProximity = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPdfInStorageToDoc");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInStorageToDoc");

            var localVarPath = "/pdf/{name}/convert/doc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (addReturnToLineEnd != null) localVarQueryParams.Add("addReturnToLineEnd", ApiClient.ParameterToString(addReturnToLineEnd)); // query parameter
            if (format != null) localVarQueryParams.Add("format", ApiClient.ParameterToString(format)); // query parameter
            if (imageResolutionX != null) localVarQueryParams.Add("imageResolutionX", ApiClient.ParameterToString(imageResolutionX)); // query parameter
            if (imageResolutionY != null) localVarQueryParams.Add("imageResolutionY", ApiClient.ParameterToString(imageResolutionY)); // query parameter
            if (maxDistanceBetweenTextLines != null) localVarQueryParams.Add("maxDistanceBetweenTextLines", ApiClient.ParameterToString(maxDistanceBetweenTextLines)); // query parameter
            if (mode != null) localVarQueryParams.Add("mode", ApiClient.ParameterToString(mode)); // query parameter
            if (recognizeBullets != null) localVarQueryParams.Add("recognizeBullets", ApiClient.ParameterToString(recognizeBullets)); // query parameter
            if (relativeHorizontalProximity != null) localVarQueryParams.Add("relativeHorizontalProximity", ApiClient.ParameterToString(relativeHorizontalProximity)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInStorageToDoc", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to DOC format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.doc)</param>
        /// <param name="addReturnToLineEnd">Add return to line end. (optional)</param>
        /// <param name="format">Allows to specify .doc or .docx file format. (optional)</param>
        /// <param name="imageResolutionX">Image resolution X. (optional)</param>
        /// <param name="imageResolutionY">Image resolution Y. (optional)</param>
        /// <param name="maxDistanceBetweenTextLines">Max distance between text lines. (optional)</param>
        /// <param name="mode">Allows to control how a PDF document is converted into a word processing document. (optional)</param>
        /// <param name="recognizeBullets">Recognize bullets. (optional)</param>
        /// <param name="relativeHorizontalProximity">Relative horizontal proximity. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PutPdfInStorageToDocAsync (string name, string outPath, bool? addReturnToLineEnd = null, string format = null, int? imageResolutionX = null, int? imageResolutionY = null, int? maxDistanceBetweenTextLines = null, string mode = null, bool? recognizeBullets = null, double? relativeHorizontalProximity = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PutPdfInStorageToDocAsyncWithHttpInfo(name, outPath, addReturnToLineEnd, format, imageResolutionX, imageResolutionY, maxDistanceBetweenTextLines, mode, recognizeBullets, relativeHorizontalProximity, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (located on storage) to DOC format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.doc)</param>
        /// <param name="addReturnToLineEnd">Add return to line end. (optional)</param>
        /// <param name="format">Allows to specify .doc or .docx file format. (optional)</param>
        /// <param name="imageResolutionX">Image resolution X. (optional)</param>
        /// <param name="imageResolutionY">Image resolution Y. (optional)</param>
        /// <param name="maxDistanceBetweenTextLines">Max distance between text lines. (optional)</param>
        /// <param name="mode">Allows to control how a PDF document is converted into a word processing document. (optional)</param>
        /// <param name="recognizeBullets">Recognize bullets. (optional)</param>
        /// <param name="relativeHorizontalProximity">Relative horizontal proximity. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPdfInStorageToDocAsyncWithHttpInfo (string name, string outPath, bool? addReturnToLineEnd = null, string format = null, int? imageResolutionX = null, int? imageResolutionY = null, int? maxDistanceBetweenTextLines = null, string mode = null, bool? recognizeBullets = null, double? relativeHorizontalProximity = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPdfInStorageToDoc");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInStorageToDoc");

            var localVarPath = "/pdf/{name}/convert/doc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (addReturnToLineEnd != null) localVarQueryParams.Add("addReturnToLineEnd", ApiClient.ParameterToString(addReturnToLineEnd)); // query parameter
            if (format != null) localVarQueryParams.Add("format", ApiClient.ParameterToString(format)); // query parameter
            if (imageResolutionX != null) localVarQueryParams.Add("imageResolutionX", ApiClient.ParameterToString(imageResolutionX)); // query parameter
            if (imageResolutionY != null) localVarQueryParams.Add("imageResolutionY", ApiClient.ParameterToString(imageResolutionY)); // query parameter
            if (maxDistanceBetweenTextLines != null) localVarQueryParams.Add("maxDistanceBetweenTextLines", ApiClient.ParameterToString(maxDistanceBetweenTextLines)); // query parameter
            if (mode != null) localVarQueryParams.Add("mode", ApiClient.ParameterToString(mode)); // query parameter
            if (recognizeBullets != null) localVarQueryParams.Add("recognizeBullets", ApiClient.ParameterToString(recognizeBullets)); // query parameter
            if (relativeHorizontalProximity != null) localVarQueryParams.Add("relativeHorizontalProximity", ApiClient.ParameterToString(relativeHorizontalProximity)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInStorageToDoc", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to EPUB format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.epub)</param>
        /// <param name="contentRecognitionMode">Рroperty tunes conversion for this or that desirable method of recognition of content. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PutPdfInStorageToEpub (string name, string outPath, string contentRecognitionMode = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PutPdfInStorageToEpubWithHttpInfo(name, outPath, contentRecognitionMode, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (located on storage) to EPUB format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.epub)</param>
        /// <param name="contentRecognitionMode">Рroperty tunes conversion for this or that desirable method of recognition of content. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PutPdfInStorageToEpubWithHttpInfo (string name, string outPath, string contentRecognitionMode = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPdfInStorageToEpub");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInStorageToEpub");

            var localVarPath = "/pdf/{name}/convert/epub";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (contentRecognitionMode != null) localVarQueryParams.Add("contentRecognitionMode", ApiClient.ParameterToString(contentRecognitionMode)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInStorageToEpub", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to EPUB format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.epub)</param>
        /// <param name="contentRecognitionMode">Рroperty tunes conversion for this or that desirable method of recognition of content. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PutPdfInStorageToEpubAsync (string name, string outPath, string contentRecognitionMode = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PutPdfInStorageToEpubAsyncWithHttpInfo(name, outPath, contentRecognitionMode, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (located on storage) to EPUB format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.epub)</param>
        /// <param name="contentRecognitionMode">Рroperty tunes conversion for this or that desirable method of recognition of content. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPdfInStorageToEpubAsyncWithHttpInfo (string name, string outPath, string contentRecognitionMode = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPdfInStorageToEpub");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInStorageToEpub");

            var localVarPath = "/pdf/{name}/convert/epub";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (contentRecognitionMode != null) localVarQueryParams.Add("contentRecognitionMode", ApiClient.ParameterToString(contentRecognitionMode)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInStorageToEpub", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to Html format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.html)</param>
        /// <param name="additionalMarginWidthInPoints">Defines width of margin that will be forcibly left around that output HTML-areas. (optional)</param>
        /// <param name="compressSvgGraphicsIfAny">The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)</param>
        /// <param name="convertMarkedContentToLayers">If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)</param>
        /// <param name="defaultFontName">Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)</param>
        /// <param name="documentType">Result document type. (optional)</param>
        /// <param name="fixedLayout">The value indicating whether that HTML is created as fixed layout. (optional)</param>
        /// <param name="imageResolution">Resolution for image rendering. (optional)</param>
        /// <param name="minimalLineWidth">This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)</param>
        /// <param name="preventGlyphsGrouping">This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)</param>
        /// <param name="splitCssIntoPages">When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)</param>
        /// <param name="splitIntoPages">The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)</param>
        /// <param name="useZOrder">If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)</param>
        /// <param name="antialiasingProcessing">The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)</param>
        /// <param name="cssClassNamesPrefix">When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)</param>
        /// <param name="explicitListOfSavedPages">With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)</param>
        /// <param name="fontEncodingStrategy">Defines encoding special rule to tune PDF decoding for current document. (optional)</param>
        /// <param name="fontSavingMode">Defines font saving mode that will be used during saving of PDF to desirable format. (optional)</param>
        /// <param name="htmlMarkupGenerationMode">Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)</param>
        /// <param name="lettersPositioningMethod">The mode of positioning of letters in words in result HTML. (optional)</param>
        /// <param name="pagesFlowTypeDependsOnViewersScreenSize">If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)</param>
        /// <param name="partsEmbeddingMode">It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)</param>
        /// <param name="rasterImagesSavingMode">Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)</param>
        /// <param name="removeEmptyAreasOnTopAndBottom">Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)</param>
        /// <param name="saveShadowedTextsAsTransparentTexts">Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)</param>
        /// <param name="saveTransparentTexts">Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)</param>
        /// <param name="specialFolderForAllImages">The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="specialFolderForSvgImages">The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="trySaveTextUnderliningAndStrikeoutingInCss">PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PutPdfInStorageToHtml (string name, string outPath, int? additionalMarginWidthInPoints = null, bool? compressSvgGraphicsIfAny = null, bool? convertMarkedContentToLayers = null, string defaultFontName = null, string documentType = null, bool? fixedLayout = null, int? imageResolution = null, int? minimalLineWidth = null, bool? preventGlyphsGrouping = null, bool? splitCssIntoPages = null, bool? splitIntoPages = null, bool? useZOrder = null, string antialiasingProcessing = null, string cssClassNamesPrefix = null, List<int?> explicitListOfSavedPages = null, string fontEncodingStrategy = null, string fontSavingMode = null, string htmlMarkupGenerationMode = null, string lettersPositioningMethod = null, bool? pagesFlowTypeDependsOnViewersScreenSize = null, string partsEmbeddingMode = null, string rasterImagesSavingMode = null, bool? removeEmptyAreasOnTopAndBottom = null, bool? saveShadowedTextsAsTransparentTexts = null, bool? saveTransparentTexts = null, string specialFolderForAllImages = null, string specialFolderForSvgImages = null, bool? trySaveTextUnderliningAndStrikeoutingInCss = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PutPdfInStorageToHtmlWithHttpInfo(name, outPath, additionalMarginWidthInPoints, compressSvgGraphicsIfAny, convertMarkedContentToLayers, defaultFontName, documentType, fixedLayout, imageResolution, minimalLineWidth, preventGlyphsGrouping, splitCssIntoPages, splitIntoPages, useZOrder, antialiasingProcessing, cssClassNamesPrefix, explicitListOfSavedPages, fontEncodingStrategy, fontSavingMode, htmlMarkupGenerationMode, lettersPositioningMethod, pagesFlowTypeDependsOnViewersScreenSize, partsEmbeddingMode, rasterImagesSavingMode, removeEmptyAreasOnTopAndBottom, saveShadowedTextsAsTransparentTexts, saveTransparentTexts, specialFolderForAllImages, specialFolderForSvgImages, trySaveTextUnderliningAndStrikeoutingInCss, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (located on storage) to Html format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.html)</param>
        /// <param name="additionalMarginWidthInPoints">Defines width of margin that will be forcibly left around that output HTML-areas. (optional)</param>
        /// <param name="compressSvgGraphicsIfAny">The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)</param>
        /// <param name="convertMarkedContentToLayers">If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)</param>
        /// <param name="defaultFontName">Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)</param>
        /// <param name="documentType">Result document type. (optional)</param>
        /// <param name="fixedLayout">The value indicating whether that HTML is created as fixed layout. (optional)</param>
        /// <param name="imageResolution">Resolution for image rendering. (optional)</param>
        /// <param name="minimalLineWidth">This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)</param>
        /// <param name="preventGlyphsGrouping">This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)</param>
        /// <param name="splitCssIntoPages">When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)</param>
        /// <param name="splitIntoPages">The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)</param>
        /// <param name="useZOrder">If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)</param>
        /// <param name="antialiasingProcessing">The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)</param>
        /// <param name="cssClassNamesPrefix">When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)</param>
        /// <param name="explicitListOfSavedPages">With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)</param>
        /// <param name="fontEncodingStrategy">Defines encoding special rule to tune PDF decoding for current document. (optional)</param>
        /// <param name="fontSavingMode">Defines font saving mode that will be used during saving of PDF to desirable format. (optional)</param>
        /// <param name="htmlMarkupGenerationMode">Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)</param>
        /// <param name="lettersPositioningMethod">The mode of positioning of letters in words in result HTML. (optional)</param>
        /// <param name="pagesFlowTypeDependsOnViewersScreenSize">If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)</param>
        /// <param name="partsEmbeddingMode">It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)</param>
        /// <param name="rasterImagesSavingMode">Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)</param>
        /// <param name="removeEmptyAreasOnTopAndBottom">Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)</param>
        /// <param name="saveShadowedTextsAsTransparentTexts">Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)</param>
        /// <param name="saveTransparentTexts">Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)</param>
        /// <param name="specialFolderForAllImages">The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="specialFolderForSvgImages">The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="trySaveTextUnderliningAndStrikeoutingInCss">PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PutPdfInStorageToHtmlWithHttpInfo (string name, string outPath, int? additionalMarginWidthInPoints = null, bool? compressSvgGraphicsIfAny = null, bool? convertMarkedContentToLayers = null, string defaultFontName = null, string documentType = null, bool? fixedLayout = null, int? imageResolution = null, int? minimalLineWidth = null, bool? preventGlyphsGrouping = null, bool? splitCssIntoPages = null, bool? splitIntoPages = null, bool? useZOrder = null, string antialiasingProcessing = null, string cssClassNamesPrefix = null, List<int?> explicitListOfSavedPages = null, string fontEncodingStrategy = null, string fontSavingMode = null, string htmlMarkupGenerationMode = null, string lettersPositioningMethod = null, bool? pagesFlowTypeDependsOnViewersScreenSize = null, string partsEmbeddingMode = null, string rasterImagesSavingMode = null, bool? removeEmptyAreasOnTopAndBottom = null, bool? saveShadowedTextsAsTransparentTexts = null, bool? saveTransparentTexts = null, string specialFolderForAllImages = null, string specialFolderForSvgImages = null, bool? trySaveTextUnderliningAndStrikeoutingInCss = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPdfInStorageToHtml");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInStorageToHtml");

            var localVarPath = "/pdf/{name}/convert/html";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (additionalMarginWidthInPoints != null) localVarQueryParams.Add("additionalMarginWidthInPoints", ApiClient.ParameterToString(additionalMarginWidthInPoints)); // query parameter
            if (compressSvgGraphicsIfAny != null) localVarQueryParams.Add("compressSvgGraphicsIfAny", ApiClient.ParameterToString(compressSvgGraphicsIfAny)); // query parameter
            if (convertMarkedContentToLayers != null) localVarQueryParams.Add("convertMarkedContentToLayers", ApiClient.ParameterToString(convertMarkedContentToLayers)); // query parameter
            if (defaultFontName != null) localVarQueryParams.Add("defaultFontName", ApiClient.ParameterToString(defaultFontName)); // query parameter
            if (documentType != null) localVarQueryParams.Add("documentType", ApiClient.ParameterToString(documentType)); // query parameter
            if (fixedLayout != null) localVarQueryParams.Add("fixedLayout", ApiClient.ParameterToString(fixedLayout)); // query parameter
            if (imageResolution != null) localVarQueryParams.Add("imageResolution", ApiClient.ParameterToString(imageResolution)); // query parameter
            if (minimalLineWidth != null) localVarQueryParams.Add("minimalLineWidth", ApiClient.ParameterToString(minimalLineWidth)); // query parameter
            if (preventGlyphsGrouping != null) localVarQueryParams.Add("preventGlyphsGrouping", ApiClient.ParameterToString(preventGlyphsGrouping)); // query parameter
            if (splitCssIntoPages != null) localVarQueryParams.Add("splitCssIntoPages", ApiClient.ParameterToString(splitCssIntoPages)); // query parameter
            if (splitIntoPages != null) localVarQueryParams.Add("splitIntoPages", ApiClient.ParameterToString(splitIntoPages)); // query parameter
            if (useZOrder != null) localVarQueryParams.Add("useZOrder", ApiClient.ParameterToString(useZOrder)); // query parameter
            if (antialiasingProcessing != null) localVarQueryParams.Add("antialiasingProcessing", ApiClient.ParameterToString(antialiasingProcessing)); // query parameter
            if (cssClassNamesPrefix != null) localVarQueryParams.Add("cssClassNamesPrefix", ApiClient.ParameterToString(cssClassNamesPrefix)); // query parameter
            if (explicitListOfSavedPages != null) localVarQueryParams.Add("explicitListOfSavedPages", ApiClient.ParameterToString(explicitListOfSavedPages)); // query parameter
            if (fontEncodingStrategy != null) localVarQueryParams.Add("fontEncodingStrategy", ApiClient.ParameterToString(fontEncodingStrategy)); // query parameter
            if (fontSavingMode != null) localVarQueryParams.Add("fontSavingMode", ApiClient.ParameterToString(fontSavingMode)); // query parameter
            if (htmlMarkupGenerationMode != null) localVarQueryParams.Add("htmlMarkupGenerationMode", ApiClient.ParameterToString(htmlMarkupGenerationMode)); // query parameter
            if (lettersPositioningMethod != null) localVarQueryParams.Add("lettersPositioningMethod", ApiClient.ParameterToString(lettersPositioningMethod)); // query parameter
            if (pagesFlowTypeDependsOnViewersScreenSize != null) localVarQueryParams.Add("pagesFlowTypeDependsOnViewersScreenSize", ApiClient.ParameterToString(pagesFlowTypeDependsOnViewersScreenSize)); // query parameter
            if (partsEmbeddingMode != null) localVarQueryParams.Add("partsEmbeddingMode", ApiClient.ParameterToString(partsEmbeddingMode)); // query parameter
            if (rasterImagesSavingMode != null) localVarQueryParams.Add("rasterImagesSavingMode", ApiClient.ParameterToString(rasterImagesSavingMode)); // query parameter
            if (removeEmptyAreasOnTopAndBottom != null) localVarQueryParams.Add("removeEmptyAreasOnTopAndBottom", ApiClient.ParameterToString(removeEmptyAreasOnTopAndBottom)); // query parameter
            if (saveShadowedTextsAsTransparentTexts != null) localVarQueryParams.Add("saveShadowedTextsAsTransparentTexts", ApiClient.ParameterToString(saveShadowedTextsAsTransparentTexts)); // query parameter
            if (saveTransparentTexts != null) localVarQueryParams.Add("saveTransparentTexts", ApiClient.ParameterToString(saveTransparentTexts)); // query parameter
            if (specialFolderForAllImages != null) localVarQueryParams.Add("specialFolderForAllImages", ApiClient.ParameterToString(specialFolderForAllImages)); // query parameter
            if (specialFolderForSvgImages != null) localVarQueryParams.Add("specialFolderForSvgImages", ApiClient.ParameterToString(specialFolderForSvgImages)); // query parameter
            if (trySaveTextUnderliningAndStrikeoutingInCss != null) localVarQueryParams.Add("trySaveTextUnderliningAndStrikeoutingInCss", ApiClient.ParameterToString(trySaveTextUnderliningAndStrikeoutingInCss)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInStorageToHtml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to Html format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.html)</param>
        /// <param name="additionalMarginWidthInPoints">Defines width of margin that will be forcibly left around that output HTML-areas. (optional)</param>
        /// <param name="compressSvgGraphicsIfAny">The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)</param>
        /// <param name="convertMarkedContentToLayers">If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)</param>
        /// <param name="defaultFontName">Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)</param>
        /// <param name="documentType">Result document type. (optional)</param>
        /// <param name="fixedLayout">The value indicating whether that HTML is created as fixed layout. (optional)</param>
        /// <param name="imageResolution">Resolution for image rendering. (optional)</param>
        /// <param name="minimalLineWidth">This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)</param>
        /// <param name="preventGlyphsGrouping">This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)</param>
        /// <param name="splitCssIntoPages">When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)</param>
        /// <param name="splitIntoPages">The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)</param>
        /// <param name="useZOrder">If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)</param>
        /// <param name="antialiasingProcessing">The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)</param>
        /// <param name="cssClassNamesPrefix">When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)</param>
        /// <param name="explicitListOfSavedPages">With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)</param>
        /// <param name="fontEncodingStrategy">Defines encoding special rule to tune PDF decoding for current document. (optional)</param>
        /// <param name="fontSavingMode">Defines font saving mode that will be used during saving of PDF to desirable format. (optional)</param>
        /// <param name="htmlMarkupGenerationMode">Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)</param>
        /// <param name="lettersPositioningMethod">The mode of positioning of letters in words in result HTML. (optional)</param>
        /// <param name="pagesFlowTypeDependsOnViewersScreenSize">If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)</param>
        /// <param name="partsEmbeddingMode">It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)</param>
        /// <param name="rasterImagesSavingMode">Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)</param>
        /// <param name="removeEmptyAreasOnTopAndBottom">Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)</param>
        /// <param name="saveShadowedTextsAsTransparentTexts">Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)</param>
        /// <param name="saveTransparentTexts">Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)</param>
        /// <param name="specialFolderForAllImages">The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="specialFolderForSvgImages">The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="trySaveTextUnderliningAndStrikeoutingInCss">PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PutPdfInStorageToHtmlAsync (string name, string outPath, int? additionalMarginWidthInPoints = null, bool? compressSvgGraphicsIfAny = null, bool? convertMarkedContentToLayers = null, string defaultFontName = null, string documentType = null, bool? fixedLayout = null, int? imageResolution = null, int? minimalLineWidth = null, bool? preventGlyphsGrouping = null, bool? splitCssIntoPages = null, bool? splitIntoPages = null, bool? useZOrder = null, string antialiasingProcessing = null, string cssClassNamesPrefix = null, List<int?> explicitListOfSavedPages = null, string fontEncodingStrategy = null, string fontSavingMode = null, string htmlMarkupGenerationMode = null, string lettersPositioningMethod = null, bool? pagesFlowTypeDependsOnViewersScreenSize = null, string partsEmbeddingMode = null, string rasterImagesSavingMode = null, bool? removeEmptyAreasOnTopAndBottom = null, bool? saveShadowedTextsAsTransparentTexts = null, bool? saveTransparentTexts = null, string specialFolderForAllImages = null, string specialFolderForSvgImages = null, bool? trySaveTextUnderliningAndStrikeoutingInCss = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PutPdfInStorageToHtmlAsyncWithHttpInfo(name, outPath, additionalMarginWidthInPoints, compressSvgGraphicsIfAny, convertMarkedContentToLayers, defaultFontName, documentType, fixedLayout, imageResolution, minimalLineWidth, preventGlyphsGrouping, splitCssIntoPages, splitIntoPages, useZOrder, antialiasingProcessing, cssClassNamesPrefix, explicitListOfSavedPages, fontEncodingStrategy, fontSavingMode, htmlMarkupGenerationMode, lettersPositioningMethod, pagesFlowTypeDependsOnViewersScreenSize, partsEmbeddingMode, rasterImagesSavingMode, removeEmptyAreasOnTopAndBottom, saveShadowedTextsAsTransparentTexts, saveTransparentTexts, specialFolderForAllImages, specialFolderForSvgImages, trySaveTextUnderliningAndStrikeoutingInCss, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (located on storage) to Html format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.html)</param>
        /// <param name="additionalMarginWidthInPoints">Defines width of margin that will be forcibly left around that output HTML-areas. (optional)</param>
        /// <param name="compressSvgGraphicsIfAny">The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)</param>
        /// <param name="convertMarkedContentToLayers">If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)</param>
        /// <param name="defaultFontName">Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)</param>
        /// <param name="documentType">Result document type. (optional)</param>
        /// <param name="fixedLayout">The value indicating whether that HTML is created as fixed layout. (optional)</param>
        /// <param name="imageResolution">Resolution for image rendering. (optional)</param>
        /// <param name="minimalLineWidth">This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)</param>
        /// <param name="preventGlyphsGrouping">This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)</param>
        /// <param name="splitCssIntoPages">When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)</param>
        /// <param name="splitIntoPages">The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)</param>
        /// <param name="useZOrder">If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)</param>
        /// <param name="antialiasingProcessing">The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)</param>
        /// <param name="cssClassNamesPrefix">When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)</param>
        /// <param name="explicitListOfSavedPages">With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)</param>
        /// <param name="fontEncodingStrategy">Defines encoding special rule to tune PDF decoding for current document. (optional)</param>
        /// <param name="fontSavingMode">Defines font saving mode that will be used during saving of PDF to desirable format. (optional)</param>
        /// <param name="htmlMarkupGenerationMode">Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)</param>
        /// <param name="lettersPositioningMethod">The mode of positioning of letters in words in result HTML. (optional)</param>
        /// <param name="pagesFlowTypeDependsOnViewersScreenSize">If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)</param>
        /// <param name="partsEmbeddingMode">It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)</param>
        /// <param name="rasterImagesSavingMode">Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)</param>
        /// <param name="removeEmptyAreasOnTopAndBottom">Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)</param>
        /// <param name="saveShadowedTextsAsTransparentTexts">Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)</param>
        /// <param name="saveTransparentTexts">Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)</param>
        /// <param name="specialFolderForAllImages">The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="specialFolderForSvgImages">The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="trySaveTextUnderliningAndStrikeoutingInCss">PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPdfInStorageToHtmlAsyncWithHttpInfo (string name, string outPath, int? additionalMarginWidthInPoints = null, bool? compressSvgGraphicsIfAny = null, bool? convertMarkedContentToLayers = null, string defaultFontName = null, string documentType = null, bool? fixedLayout = null, int? imageResolution = null, int? minimalLineWidth = null, bool? preventGlyphsGrouping = null, bool? splitCssIntoPages = null, bool? splitIntoPages = null, bool? useZOrder = null, string antialiasingProcessing = null, string cssClassNamesPrefix = null, List<int?> explicitListOfSavedPages = null, string fontEncodingStrategy = null, string fontSavingMode = null, string htmlMarkupGenerationMode = null, string lettersPositioningMethod = null, bool? pagesFlowTypeDependsOnViewersScreenSize = null, string partsEmbeddingMode = null, string rasterImagesSavingMode = null, bool? removeEmptyAreasOnTopAndBottom = null, bool? saveShadowedTextsAsTransparentTexts = null, bool? saveTransparentTexts = null, string specialFolderForAllImages = null, string specialFolderForSvgImages = null, bool? trySaveTextUnderliningAndStrikeoutingInCss = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPdfInStorageToHtml");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInStorageToHtml");

            var localVarPath = "/pdf/{name}/convert/html";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (additionalMarginWidthInPoints != null) localVarQueryParams.Add("additionalMarginWidthInPoints", ApiClient.ParameterToString(additionalMarginWidthInPoints)); // query parameter
            if (compressSvgGraphicsIfAny != null) localVarQueryParams.Add("compressSvgGraphicsIfAny", ApiClient.ParameterToString(compressSvgGraphicsIfAny)); // query parameter
            if (convertMarkedContentToLayers != null) localVarQueryParams.Add("convertMarkedContentToLayers", ApiClient.ParameterToString(convertMarkedContentToLayers)); // query parameter
            if (defaultFontName != null) localVarQueryParams.Add("defaultFontName", ApiClient.ParameterToString(defaultFontName)); // query parameter
            if (documentType != null) localVarQueryParams.Add("documentType", ApiClient.ParameterToString(documentType)); // query parameter
            if (fixedLayout != null) localVarQueryParams.Add("fixedLayout", ApiClient.ParameterToString(fixedLayout)); // query parameter
            if (imageResolution != null) localVarQueryParams.Add("imageResolution", ApiClient.ParameterToString(imageResolution)); // query parameter
            if (minimalLineWidth != null) localVarQueryParams.Add("minimalLineWidth", ApiClient.ParameterToString(minimalLineWidth)); // query parameter
            if (preventGlyphsGrouping != null) localVarQueryParams.Add("preventGlyphsGrouping", ApiClient.ParameterToString(preventGlyphsGrouping)); // query parameter
            if (splitCssIntoPages != null) localVarQueryParams.Add("splitCssIntoPages", ApiClient.ParameterToString(splitCssIntoPages)); // query parameter
            if (splitIntoPages != null) localVarQueryParams.Add("splitIntoPages", ApiClient.ParameterToString(splitIntoPages)); // query parameter
            if (useZOrder != null) localVarQueryParams.Add("useZOrder", ApiClient.ParameterToString(useZOrder)); // query parameter
            if (antialiasingProcessing != null) localVarQueryParams.Add("antialiasingProcessing", ApiClient.ParameterToString(antialiasingProcessing)); // query parameter
            if (cssClassNamesPrefix != null) localVarQueryParams.Add("cssClassNamesPrefix", ApiClient.ParameterToString(cssClassNamesPrefix)); // query parameter
            if (explicitListOfSavedPages != null) localVarQueryParams.Add("explicitListOfSavedPages", ApiClient.ParameterToString(explicitListOfSavedPages)); // query parameter
            if (fontEncodingStrategy != null) localVarQueryParams.Add("fontEncodingStrategy", ApiClient.ParameterToString(fontEncodingStrategy)); // query parameter
            if (fontSavingMode != null) localVarQueryParams.Add("fontSavingMode", ApiClient.ParameterToString(fontSavingMode)); // query parameter
            if (htmlMarkupGenerationMode != null) localVarQueryParams.Add("htmlMarkupGenerationMode", ApiClient.ParameterToString(htmlMarkupGenerationMode)); // query parameter
            if (lettersPositioningMethod != null) localVarQueryParams.Add("lettersPositioningMethod", ApiClient.ParameterToString(lettersPositioningMethod)); // query parameter
            if (pagesFlowTypeDependsOnViewersScreenSize != null) localVarQueryParams.Add("pagesFlowTypeDependsOnViewersScreenSize", ApiClient.ParameterToString(pagesFlowTypeDependsOnViewersScreenSize)); // query parameter
            if (partsEmbeddingMode != null) localVarQueryParams.Add("partsEmbeddingMode", ApiClient.ParameterToString(partsEmbeddingMode)); // query parameter
            if (rasterImagesSavingMode != null) localVarQueryParams.Add("rasterImagesSavingMode", ApiClient.ParameterToString(rasterImagesSavingMode)); // query parameter
            if (removeEmptyAreasOnTopAndBottom != null) localVarQueryParams.Add("removeEmptyAreasOnTopAndBottom", ApiClient.ParameterToString(removeEmptyAreasOnTopAndBottom)); // query parameter
            if (saveShadowedTextsAsTransparentTexts != null) localVarQueryParams.Add("saveShadowedTextsAsTransparentTexts", ApiClient.ParameterToString(saveShadowedTextsAsTransparentTexts)); // query parameter
            if (saveTransparentTexts != null) localVarQueryParams.Add("saveTransparentTexts", ApiClient.ParameterToString(saveTransparentTexts)); // query parameter
            if (specialFolderForAllImages != null) localVarQueryParams.Add("specialFolderForAllImages", ApiClient.ParameterToString(specialFolderForAllImages)); // query parameter
            if (specialFolderForSvgImages != null) localVarQueryParams.Add("specialFolderForSvgImages", ApiClient.ParameterToString(specialFolderForSvgImages)); // query parameter
            if (trySaveTextUnderliningAndStrikeoutingInCss != null) localVarQueryParams.Add("trySaveTextUnderliningAndStrikeoutingInCss", ApiClient.ParameterToString(trySaveTextUnderliningAndStrikeoutingInCss)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInStorageToHtml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to LaTeX format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tex)</param>
        /// <param name="pagesCount">Pages count. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PutPdfInStorageToLaTeX (string name, string outPath, int? pagesCount = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PutPdfInStorageToLaTeXWithHttpInfo(name, outPath, pagesCount, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (located on storage) to LaTeX format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tex)</param>
        /// <param name="pagesCount">Pages count. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PutPdfInStorageToLaTeXWithHttpInfo (string name, string outPath, int? pagesCount = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPdfInStorageToLaTeX");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInStorageToLaTeX");

            var localVarPath = "/pdf/{name}/convert/latex";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (pagesCount != null) localVarQueryParams.Add("pagesCount", ApiClient.ParameterToString(pagesCount)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInStorageToLaTeX", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to LaTeX format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tex)</param>
        /// <param name="pagesCount">Pages count. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PutPdfInStorageToLaTeXAsync (string name, string outPath, int? pagesCount = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PutPdfInStorageToLaTeXAsyncWithHttpInfo(name, outPath, pagesCount, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (located on storage) to LaTeX format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tex)</param>
        /// <param name="pagesCount">Pages count. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPdfInStorageToLaTeXAsyncWithHttpInfo (string name, string outPath, int? pagesCount = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPdfInStorageToLaTeX");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInStorageToLaTeX");

            var localVarPath = "/pdf/{name}/convert/latex";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (pagesCount != null) localVarQueryParams.Add("pagesCount", ApiClient.ParameterToString(pagesCount)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInStorageToLaTeX", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to MOBIXML format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.mobixml)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PutPdfInStorageToMobiXml (string name, string outPath, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PutPdfInStorageToMobiXmlWithHttpInfo(name, outPath, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (located on storage) to MOBIXML format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.mobixml)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PutPdfInStorageToMobiXmlWithHttpInfo (string name, string outPath, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPdfInStorageToMobiXml");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInStorageToMobiXml");

            var localVarPath = "/pdf/{name}/convert/mobixml";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInStorageToMobiXml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to MOBIXML format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.mobixml)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PutPdfInStorageToMobiXmlAsync (string name, string outPath, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PutPdfInStorageToMobiXmlAsyncWithHttpInfo(name, outPath, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (located on storage) to MOBIXML format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.mobixml)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPdfInStorageToMobiXmlAsyncWithHttpInfo (string name, string outPath, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPdfInStorageToMobiXml");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInStorageToMobiXml");

            var localVarPath = "/pdf/{name}/convert/mobixml";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInStorageToMobiXml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to PdfA format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="type">Type of PdfA format.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PutPdfInStorageToPdfA (string name, string outPath, string type, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PutPdfInStorageToPdfAWithHttpInfo(name, outPath, type, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (located on storage) to PdfA format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="type">Type of PdfA format.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PutPdfInStorageToPdfAWithHttpInfo (string name, string outPath, string type, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPdfInStorageToPdfA");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInStorageToPdfA");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling PdfApi->PutPdfInStorageToPdfA");

            var localVarPath = "/pdf/{name}/convert/pdfa";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (type != null) localVarQueryParams.Add("type", ApiClient.ParameterToString(type)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInStorageToPdfA", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to PdfA format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="type">Type of PdfA format.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PutPdfInStorageToPdfAAsync (string name, string outPath, string type, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PutPdfInStorageToPdfAAsyncWithHttpInfo(name, outPath, type, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (located on storage) to PdfA format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="type">Type of PdfA format.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPdfInStorageToPdfAAsyncWithHttpInfo (string name, string outPath, string type, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPdfInStorageToPdfA");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInStorageToPdfA");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling PdfApi->PutPdfInStorageToPdfA");

            var localVarPath = "/pdf/{name}/convert/pdfa";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (type != null) localVarQueryParams.Add("type", ApiClient.ParameterToString(type)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInStorageToPdfA", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to PPTX format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pptx)</param>
        /// <param name="separateImages">Separate images. (optional)</param>
        /// <param name="slidesAsImages">Slides as images. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PutPdfInStorageToPptx (string name, string outPath, bool? separateImages = null, bool? slidesAsImages = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PutPdfInStorageToPptxWithHttpInfo(name, outPath, separateImages, slidesAsImages, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (located on storage) to PPTX format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pptx)</param>
        /// <param name="separateImages">Separate images. (optional)</param>
        /// <param name="slidesAsImages">Slides as images. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PutPdfInStorageToPptxWithHttpInfo (string name, string outPath, bool? separateImages = null, bool? slidesAsImages = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPdfInStorageToPptx");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInStorageToPptx");

            var localVarPath = "/pdf/{name}/convert/pptx";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (separateImages != null) localVarQueryParams.Add("separateImages", ApiClient.ParameterToString(separateImages)); // query parameter
            if (slidesAsImages != null) localVarQueryParams.Add("slidesAsImages", ApiClient.ParameterToString(slidesAsImages)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInStorageToPptx", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to PPTX format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pptx)</param>
        /// <param name="separateImages">Separate images. (optional)</param>
        /// <param name="slidesAsImages">Slides as images. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PutPdfInStorageToPptxAsync (string name, string outPath, bool? separateImages = null, bool? slidesAsImages = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PutPdfInStorageToPptxAsyncWithHttpInfo(name, outPath, separateImages, slidesAsImages, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (located on storage) to PPTX format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pptx)</param>
        /// <param name="separateImages">Separate images. (optional)</param>
        /// <param name="slidesAsImages">Slides as images. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPdfInStorageToPptxAsyncWithHttpInfo (string name, string outPath, bool? separateImages = null, bool? slidesAsImages = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPdfInStorageToPptx");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInStorageToPptx");

            var localVarPath = "/pdf/{name}/convert/pptx";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (separateImages != null) localVarQueryParams.Add("separateImages", ApiClient.ParameterToString(separateImages)); // query parameter
            if (slidesAsImages != null) localVarQueryParams.Add("slidesAsImages", ApiClient.ParameterToString(slidesAsImages)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInStorageToPptx", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to SVG format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.svg)</param>
        /// <param name="compressOutputToZipArchive">Specifies whether output will be created as one zip-archive. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PutPdfInStorageToSvg (string name, string outPath, bool? compressOutputToZipArchive = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PutPdfInStorageToSvgWithHttpInfo(name, outPath, compressOutputToZipArchive, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (located on storage) to SVG format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.svg)</param>
        /// <param name="compressOutputToZipArchive">Specifies whether output will be created as one zip-archive. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PutPdfInStorageToSvgWithHttpInfo (string name, string outPath, bool? compressOutputToZipArchive = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPdfInStorageToSvg");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInStorageToSvg");

            var localVarPath = "/pdf/{name}/convert/svg";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (compressOutputToZipArchive != null) localVarQueryParams.Add("compressOutputToZipArchive", ApiClient.ParameterToString(compressOutputToZipArchive)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInStorageToSvg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to SVG format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.svg)</param>
        /// <param name="compressOutputToZipArchive">Specifies whether output will be created as one zip-archive. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PutPdfInStorageToSvgAsync (string name, string outPath, bool? compressOutputToZipArchive = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PutPdfInStorageToSvgAsyncWithHttpInfo(name, outPath, compressOutputToZipArchive, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (located on storage) to SVG format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.svg)</param>
        /// <param name="compressOutputToZipArchive">Specifies whether output will be created as one zip-archive. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPdfInStorageToSvgAsyncWithHttpInfo (string name, string outPath, bool? compressOutputToZipArchive = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPdfInStorageToSvg");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInStorageToSvg");

            var localVarPath = "/pdf/{name}/convert/svg";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (compressOutputToZipArchive != null) localVarQueryParams.Add("compressOutputToZipArchive", ApiClient.ParameterToString(compressOutputToZipArchive)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInStorageToSvg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to TIFF format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tiff)</param>
        /// <param name="brightness">Image brightness. (optional)</param>
        /// <param name="compression">Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)</param>
        /// <param name="colorDepth">Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)</param>
        /// <param name="leftMargin">Left image margin. (optional)</param>
        /// <param name="rightMargin">Right image margin. (optional)</param>
        /// <param name="topMargin">Top image margin. (optional)</param>
        /// <param name="bottomMargin">Bottom image margin. (optional)</param>
        /// <param name="orientation">Image orientation. Possible values are: None, Landscape, Portait. (optional)</param>
        /// <param name="skipBlankPages">Skip blank pages flag. (optional)</param>
        /// <param name="width">Image width. (optional)</param>
        /// <param name="height">Image height. (optional)</param>
        /// <param name="xResolution">Horizontal resolution. (optional)</param>
        /// <param name="yResolution">Vertical resolution. (optional)</param>
        /// <param name="pageIndex">Start page to export. (optional)</param>
        /// <param name="pageCount">Number of pages to export. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PutPdfInStorageToTiff (string name, string outPath, double? brightness = null, string compression = null, string colorDepth = null, int? leftMargin = null, int? rightMargin = null, int? topMargin = null, int? bottomMargin = null, string orientation = null, bool? skipBlankPages = null, int? width = null, int? height = null, int? xResolution = null, int? yResolution = null, int? pageIndex = null, int? pageCount = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PutPdfInStorageToTiffWithHttpInfo(name, outPath, brightness, compression, colorDepth, leftMargin, rightMargin, topMargin, bottomMargin, orientation, skipBlankPages, width, height, xResolution, yResolution, pageIndex, pageCount, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (located on storage) to TIFF format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tiff)</param>
        /// <param name="brightness">Image brightness. (optional)</param>
        /// <param name="compression">Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)</param>
        /// <param name="colorDepth">Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)</param>
        /// <param name="leftMargin">Left image margin. (optional)</param>
        /// <param name="rightMargin">Right image margin. (optional)</param>
        /// <param name="topMargin">Top image margin. (optional)</param>
        /// <param name="bottomMargin">Bottom image margin. (optional)</param>
        /// <param name="orientation">Image orientation. Possible values are: None, Landscape, Portait. (optional)</param>
        /// <param name="skipBlankPages">Skip blank pages flag. (optional)</param>
        /// <param name="width">Image width. (optional)</param>
        /// <param name="height">Image height. (optional)</param>
        /// <param name="xResolution">Horizontal resolution. (optional)</param>
        /// <param name="yResolution">Vertical resolution. (optional)</param>
        /// <param name="pageIndex">Start page to export. (optional)</param>
        /// <param name="pageCount">Number of pages to export. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PutPdfInStorageToTiffWithHttpInfo (string name, string outPath, double? brightness = null, string compression = null, string colorDepth = null, int? leftMargin = null, int? rightMargin = null, int? topMargin = null, int? bottomMargin = null, string orientation = null, bool? skipBlankPages = null, int? width = null, int? height = null, int? xResolution = null, int? yResolution = null, int? pageIndex = null, int? pageCount = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPdfInStorageToTiff");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInStorageToTiff");

            var localVarPath = "/pdf/{name}/convert/tiff";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (brightness != null) localVarQueryParams.Add("brightness", ApiClient.ParameterToString(brightness)); // query parameter
            if (compression != null) localVarQueryParams.Add("compression", ApiClient.ParameterToString(compression)); // query parameter
            if (colorDepth != null) localVarQueryParams.Add("colorDepth", ApiClient.ParameterToString(colorDepth)); // query parameter
            if (leftMargin != null) localVarQueryParams.Add("leftMargin", ApiClient.ParameterToString(leftMargin)); // query parameter
            if (rightMargin != null) localVarQueryParams.Add("rightMargin", ApiClient.ParameterToString(rightMargin)); // query parameter
            if (topMargin != null) localVarQueryParams.Add("topMargin", ApiClient.ParameterToString(topMargin)); // query parameter
            if (bottomMargin != null) localVarQueryParams.Add("bottomMargin", ApiClient.ParameterToString(bottomMargin)); // query parameter
            if (orientation != null) localVarQueryParams.Add("orientation", ApiClient.ParameterToString(orientation)); // query parameter
            if (skipBlankPages != null) localVarQueryParams.Add("skipBlankPages", ApiClient.ParameterToString(skipBlankPages)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (xResolution != null) localVarQueryParams.Add("xResolution", ApiClient.ParameterToString(xResolution)); // query parameter
            if (yResolution != null) localVarQueryParams.Add("yResolution", ApiClient.ParameterToString(yResolution)); // query parameter
            if (pageIndex != null) localVarQueryParams.Add("pageIndex", ApiClient.ParameterToString(pageIndex)); // query parameter
            if (pageCount != null) localVarQueryParams.Add("pageCount", ApiClient.ParameterToString(pageCount)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInStorageToTiff", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to TIFF format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tiff)</param>
        /// <param name="brightness">Image brightness. (optional)</param>
        /// <param name="compression">Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)</param>
        /// <param name="colorDepth">Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)</param>
        /// <param name="leftMargin">Left image margin. (optional)</param>
        /// <param name="rightMargin">Right image margin. (optional)</param>
        /// <param name="topMargin">Top image margin. (optional)</param>
        /// <param name="bottomMargin">Bottom image margin. (optional)</param>
        /// <param name="orientation">Image orientation. Possible values are: None, Landscape, Portait. (optional)</param>
        /// <param name="skipBlankPages">Skip blank pages flag. (optional)</param>
        /// <param name="width">Image width. (optional)</param>
        /// <param name="height">Image height. (optional)</param>
        /// <param name="xResolution">Horizontal resolution. (optional)</param>
        /// <param name="yResolution">Vertical resolution. (optional)</param>
        /// <param name="pageIndex">Start page to export. (optional)</param>
        /// <param name="pageCount">Number of pages to export. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PutPdfInStorageToTiffAsync (string name, string outPath, double? brightness = null, string compression = null, string colorDepth = null, int? leftMargin = null, int? rightMargin = null, int? topMargin = null, int? bottomMargin = null, string orientation = null, bool? skipBlankPages = null, int? width = null, int? height = null, int? xResolution = null, int? yResolution = null, int? pageIndex = null, int? pageCount = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PutPdfInStorageToTiffAsyncWithHttpInfo(name, outPath, brightness, compression, colorDepth, leftMargin, rightMargin, topMargin, bottomMargin, orientation, skipBlankPages, width, height, xResolution, yResolution, pageIndex, pageCount, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (located on storage) to TIFF format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tiff)</param>
        /// <param name="brightness">Image brightness. (optional)</param>
        /// <param name="compression">Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)</param>
        /// <param name="colorDepth">Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)</param>
        /// <param name="leftMargin">Left image margin. (optional)</param>
        /// <param name="rightMargin">Right image margin. (optional)</param>
        /// <param name="topMargin">Top image margin. (optional)</param>
        /// <param name="bottomMargin">Bottom image margin. (optional)</param>
        /// <param name="orientation">Image orientation. Possible values are: None, Landscape, Portait. (optional)</param>
        /// <param name="skipBlankPages">Skip blank pages flag. (optional)</param>
        /// <param name="width">Image width. (optional)</param>
        /// <param name="height">Image height. (optional)</param>
        /// <param name="xResolution">Horizontal resolution. (optional)</param>
        /// <param name="yResolution">Vertical resolution. (optional)</param>
        /// <param name="pageIndex">Start page to export. (optional)</param>
        /// <param name="pageCount">Number of pages to export. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPdfInStorageToTiffAsyncWithHttpInfo (string name, string outPath, double? brightness = null, string compression = null, string colorDepth = null, int? leftMargin = null, int? rightMargin = null, int? topMargin = null, int? bottomMargin = null, string orientation = null, bool? skipBlankPages = null, int? width = null, int? height = null, int? xResolution = null, int? yResolution = null, int? pageIndex = null, int? pageCount = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPdfInStorageToTiff");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInStorageToTiff");

            var localVarPath = "/pdf/{name}/convert/tiff";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (brightness != null) localVarQueryParams.Add("brightness", ApiClient.ParameterToString(brightness)); // query parameter
            if (compression != null) localVarQueryParams.Add("compression", ApiClient.ParameterToString(compression)); // query parameter
            if (colorDepth != null) localVarQueryParams.Add("colorDepth", ApiClient.ParameterToString(colorDepth)); // query parameter
            if (leftMargin != null) localVarQueryParams.Add("leftMargin", ApiClient.ParameterToString(leftMargin)); // query parameter
            if (rightMargin != null) localVarQueryParams.Add("rightMargin", ApiClient.ParameterToString(rightMargin)); // query parameter
            if (topMargin != null) localVarQueryParams.Add("topMargin", ApiClient.ParameterToString(topMargin)); // query parameter
            if (bottomMargin != null) localVarQueryParams.Add("bottomMargin", ApiClient.ParameterToString(bottomMargin)); // query parameter
            if (orientation != null) localVarQueryParams.Add("orientation", ApiClient.ParameterToString(orientation)); // query parameter
            if (skipBlankPages != null) localVarQueryParams.Add("skipBlankPages", ApiClient.ParameterToString(skipBlankPages)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (xResolution != null) localVarQueryParams.Add("xResolution", ApiClient.ParameterToString(xResolution)); // query parameter
            if (yResolution != null) localVarQueryParams.Add("yResolution", ApiClient.ParameterToString(yResolution)); // query parameter
            if (pageIndex != null) localVarQueryParams.Add("pageIndex", ApiClient.ParameterToString(pageIndex)); // query parameter
            if (pageCount != null) localVarQueryParams.Add("pageCount", ApiClient.ParameterToString(pageCount)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInStorageToTiff", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to XLS format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xls)</param>
        /// <param name="insertBlankColumnAtFirst">Insert blank column at first (optional)</param>
        /// <param name="minimizeTheNumberOfWorksheets">Minimize the number of worksheets (optional)</param>
        /// <param name="scaleFactor">Scale factor (optional)</param>
        /// <param name="uniformWorksheets">Uniform worksheets (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PutPdfInStorageToXls (string name, string outPath, bool? insertBlankColumnAtFirst = null, bool? minimizeTheNumberOfWorksheets = null, double? scaleFactor = null, bool? uniformWorksheets = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PutPdfInStorageToXlsWithHttpInfo(name, outPath, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (located on storage) to XLS format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xls)</param>
        /// <param name="insertBlankColumnAtFirst">Insert blank column at first (optional)</param>
        /// <param name="minimizeTheNumberOfWorksheets">Minimize the number of worksheets (optional)</param>
        /// <param name="scaleFactor">Scale factor (optional)</param>
        /// <param name="uniformWorksheets">Uniform worksheets (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PutPdfInStorageToXlsWithHttpInfo (string name, string outPath, bool? insertBlankColumnAtFirst = null, bool? minimizeTheNumberOfWorksheets = null, double? scaleFactor = null, bool? uniformWorksheets = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPdfInStorageToXls");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInStorageToXls");

            var localVarPath = "/pdf/{name}/convert/xls";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (insertBlankColumnAtFirst != null) localVarQueryParams.Add("insertBlankColumnAtFirst", ApiClient.ParameterToString(insertBlankColumnAtFirst)); // query parameter
            if (minimizeTheNumberOfWorksheets != null) localVarQueryParams.Add("minimizeTheNumberOfWorksheets", ApiClient.ParameterToString(minimizeTheNumberOfWorksheets)); // query parameter
            if (scaleFactor != null) localVarQueryParams.Add("scaleFactor", ApiClient.ParameterToString(scaleFactor)); // query parameter
            if (uniformWorksheets != null) localVarQueryParams.Add("uniformWorksheets", ApiClient.ParameterToString(uniformWorksheets)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInStorageToXls", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to XLS format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xls)</param>
        /// <param name="insertBlankColumnAtFirst">Insert blank column at first (optional)</param>
        /// <param name="minimizeTheNumberOfWorksheets">Minimize the number of worksheets (optional)</param>
        /// <param name="scaleFactor">Scale factor (optional)</param>
        /// <param name="uniformWorksheets">Uniform worksheets (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PutPdfInStorageToXlsAsync (string name, string outPath, bool? insertBlankColumnAtFirst = null, bool? minimizeTheNumberOfWorksheets = null, double? scaleFactor = null, bool? uniformWorksheets = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PutPdfInStorageToXlsAsyncWithHttpInfo(name, outPath, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (located on storage) to XLS format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xls)</param>
        /// <param name="insertBlankColumnAtFirst">Insert blank column at first (optional)</param>
        /// <param name="minimizeTheNumberOfWorksheets">Minimize the number of worksheets (optional)</param>
        /// <param name="scaleFactor">Scale factor (optional)</param>
        /// <param name="uniformWorksheets">Uniform worksheets (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPdfInStorageToXlsAsyncWithHttpInfo (string name, string outPath, bool? insertBlankColumnAtFirst = null, bool? minimizeTheNumberOfWorksheets = null, double? scaleFactor = null, bool? uniformWorksheets = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPdfInStorageToXls");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInStorageToXls");

            var localVarPath = "/pdf/{name}/convert/xls";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (insertBlankColumnAtFirst != null) localVarQueryParams.Add("insertBlankColumnAtFirst", ApiClient.ParameterToString(insertBlankColumnAtFirst)); // query parameter
            if (minimizeTheNumberOfWorksheets != null) localVarQueryParams.Add("minimizeTheNumberOfWorksheets", ApiClient.ParameterToString(minimizeTheNumberOfWorksheets)); // query parameter
            if (scaleFactor != null) localVarQueryParams.Add("scaleFactor", ApiClient.ParameterToString(scaleFactor)); // query parameter
            if (uniformWorksheets != null) localVarQueryParams.Add("uniformWorksheets", ApiClient.ParameterToString(uniformWorksheets)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInStorageToXls", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to XML format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xml)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PutPdfInStorageToXml (string name, string outPath, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PutPdfInStorageToXmlWithHttpInfo(name, outPath, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (located on storage) to XML format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xml)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PutPdfInStorageToXmlWithHttpInfo (string name, string outPath, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPdfInStorageToXml");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInStorageToXml");

            var localVarPath = "/pdf/{name}/convert/xml";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInStorageToXml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to XML format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xml)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PutPdfInStorageToXmlAsync (string name, string outPath, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PutPdfInStorageToXmlAsyncWithHttpInfo(name, outPath, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (located on storage) to XML format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xml)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPdfInStorageToXmlAsyncWithHttpInfo (string name, string outPath, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPdfInStorageToXml");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInStorageToXml");

            var localVarPath = "/pdf/{name}/convert/xml";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInStorageToXml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to XPS format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xps)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PutPdfInStorageToXps (string name, string outPath, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PutPdfInStorageToXpsWithHttpInfo(name, outPath, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (located on storage) to XPS format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xps)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PutPdfInStorageToXpsWithHttpInfo (string name, string outPath, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPdfInStorageToXps");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInStorageToXps");

            var localVarPath = "/pdf/{name}/convert/xps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInStorageToXps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to XPS format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xps)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PutPdfInStorageToXpsAsync (string name, string outPath, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PutPdfInStorageToXpsAsyncWithHttpInfo(name, outPath, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (located on storage) to XPS format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xps)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPdfInStorageToXpsAsyncWithHttpInfo (string name, string outPath, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPdfInStorageToXps");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInStorageToXps");

            var localVarPath = "/pdf/{name}/convert/xps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInStorageToXps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Update privilege document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="privileges">Document privileges.  (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PutPrivileges (string name, DocumentPrivilege privileges = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PutPrivilegesWithHttpInfo(name, privileges, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update privilege document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="privileges">Document privileges.  (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PutPrivilegesWithHttpInfo (string name, DocumentPrivilege privileges = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPrivileges");

            var localVarPath = "/pdf/{name}/privileges";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (privileges != null && privileges.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(privileges); // http body (model) parameter
            }
            else
            {
                localVarPostBody = privileges; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPrivileges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Update privilege document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="privileges">Document privileges.  (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PutPrivilegesAsync (string name, DocumentPrivilege privileges = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PutPrivilegesAsyncWithHttpInfo(name, privileges, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update privilege document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="privileges">Document privileges.  (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPrivilegesAsyncWithHttpInfo (string name, DocumentPrivilege privileges = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPrivileges");

            var localVarPath = "/pdf/{name}/privileges";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (privileges != null && privileges.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(privileges); // http body (model) parameter
            }
            else
            {
                localVarPostBody = privileges; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPrivileges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Convert PS file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.ps)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PutPsInStorageToPdf (string name, string srcPath, string dstFolder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PutPsInStorageToPdfWithHttpInfo(name, srcPath, dstFolder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert PS file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.ps)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PutPsInStorageToPdfWithHttpInfo (string name, string srcPath, string dstFolder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPsInStorageToPdf");
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->PutPsInStorageToPdf");

            var localVarPath = "/pdf/{name}/create/ps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (dstFolder != null) localVarQueryParams.Add("dstFolder", ApiClient.ParameterToString(dstFolder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPsInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Convert PS file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.ps)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PutPsInStorageToPdfAsync (string name, string srcPath, string dstFolder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PutPsInStorageToPdfAsyncWithHttpInfo(name, srcPath, dstFolder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert PS file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.ps)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutPsInStorageToPdfAsyncWithHttpInfo (string name, string srcPath, string dstFolder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPsInStorageToPdf");
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->PutPsInStorageToPdf");

            var localVarPath = "/pdf/{name}/create/ps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (dstFolder != null) localVarQueryParams.Add("dstFolder", ApiClient.ParameterToString(dstFolder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPsInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Create searchable PDF document. Generate OCR layer for images in input PDF document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="lang">language for OCR engine. Possible values: eng, ara, bel, ben, bul, ces, dan, deu, ell, fin, fra, heb, hin, ind, isl, ita, jpn, kor, nld, nor, pol, por, ron, rus, spa, swe, tha, tur, ukr, vie, chi_sim, chi_tra or thier combination e.g. eng,rus  (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PutSearchableDocument (string name, string storage = null, string folder = null, string lang = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PutSearchableDocumentWithHttpInfo(name, storage, folder, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create searchable PDF document. Generate OCR layer for images in input PDF document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="lang">language for OCR engine. Possible values: eng, ara, bel, ben, bul, ces, dan, deu, ell, fin, fra, heb, hin, ind, isl, ita, jpn, kor, nld, nor, pol, por, ron, rus, spa, swe, tha, tur, ukr, vie, chi_sim, chi_tra or thier combination e.g. eng,rus  (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PutSearchableDocumentWithHttpInfo (string name, string storage = null, string folder = null, string lang = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutSearchableDocument");

            var localVarPath = "/pdf/{name}/ocr";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (lang != null) localVarQueryParams.Add("lang", ApiClient.ParameterToString(lang)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutSearchableDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Create searchable PDF document. Generate OCR layer for images in input PDF document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="lang">language for OCR engine. Possible values: eng, ara, bel, ben, bul, ces, dan, deu, ell, fin, fra, heb, hin, ind, isl, ita, jpn, kor, nld, nor, pol, por, ron, rus, spa, swe, tha, tur, ukr, vie, chi_sim, chi_tra or thier combination e.g. eng,rus  (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PutSearchableDocumentAsync (string name, string storage = null, string folder = null, string lang = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PutSearchableDocumentAsyncWithHttpInfo(name, storage, folder, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create searchable PDF document. Generate OCR layer for images in input PDF document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="lang">language for OCR engine. Possible values: eng, ara, bel, ben, bul, ces, dan, deu, ell, fin, fra, heb, hin, ind, isl, ita, jpn, kor, nld, nor, pol, por, ron, rus, spa, swe, tha, tur, ukr, vie, chi_sim, chi_tra or thier combination e.g. eng,rus  (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutSearchableDocumentAsyncWithHttpInfo (string name, string storage = null, string folder = null, string lang = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutSearchableDocument");

            var localVarPath = "/pdf/{name}/ocr";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (lang != null) localVarQueryParams.Add("lang", ApiClient.ParameterToString(lang)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutSearchableDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Add/update document property. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="propertyName"></param>
        /// <param name="property"> (optional)</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>DocumentPropertyResponse</returns>
        public DocumentPropertyResponse PutSetProperty (string name, string propertyName, DocumentProperty property = null, string storage = null, string folder = null)
        {
             ApiResponse<DocumentPropertyResponse> localVarResponse = PutSetPropertyWithHttpInfo(name, propertyName, property, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add/update document property. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="propertyName"></param>
        /// <param name="property"> (optional)</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of DocumentPropertyResponse</returns>
        public ApiResponse< DocumentPropertyResponse > PutSetPropertyWithHttpInfo (string name, string propertyName, DocumentProperty property = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutSetProperty");
            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
                throw new ApiException(400, "Missing required parameter 'propertyName' when calling PdfApi->PutSetProperty");

            var localVarPath = "/pdf/{name}/documentproperties/{propertyName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (propertyName != null) localVarPathParams.Add("propertyName", ApiClient.ParameterToString(propertyName)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (property != null && property.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(property); // http body (model) parameter
            }
            else
            {
                localVarPostBody = property; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutSetProperty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentPropertyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentPropertyResponse) ApiClient.Deserialize(localVarResponse, typeof(DocumentPropertyResponse)));
        }

        /// <summary>
        /// Add/update document property. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="propertyName"></param>
        /// <param name="property"> (optional)</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of DocumentPropertyResponse</returns>
        public async System.Threading.Tasks.Task<DocumentPropertyResponse> PutSetPropertyAsync (string name, string propertyName, DocumentProperty property = null, string storage = null, string folder = null)
        {
             ApiResponse<DocumentPropertyResponse> localVarResponse = await PutSetPropertyAsyncWithHttpInfo(name, propertyName, property, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add/update document property. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="propertyName"></param>
        /// <param name="property"> (optional)</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (DocumentPropertyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentPropertyResponse>> PutSetPropertyAsyncWithHttpInfo (string name, string propertyName, DocumentProperty property = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutSetProperty");
            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
                throw new ApiException(400, "Missing required parameter 'propertyName' when calling PdfApi->PutSetProperty");

            var localVarPath = "/pdf/{name}/documentproperties/{propertyName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (propertyName != null) localVarPathParams.Add("propertyName", ApiClient.ParameterToString(propertyName)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (property != null && property.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(property); // http body (model) parameter
            }
            else
            {
                localVarPostBody = property; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutSetProperty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentPropertyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentPropertyResponse) ApiClient.Deserialize(localVarResponse, typeof(DocumentPropertyResponse)));
        }

        /// <summary>
        /// Convert SVG file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.svg)</param>
        /// <param name="adjustPageSize">Adjust page size (optional)</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PutSvgInStorageToPdf (string name, string srcPath, bool? adjustPageSize = null, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string dstFolder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PutSvgInStorageToPdfWithHttpInfo(name, srcPath, adjustPageSize, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, dstFolder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert SVG file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.svg)</param>
        /// <param name="adjustPageSize">Adjust page size (optional)</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PutSvgInStorageToPdfWithHttpInfo (string name, string srcPath, bool? adjustPageSize = null, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string dstFolder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutSvgInStorageToPdf");
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->PutSvgInStorageToPdf");

            var localVarPath = "/pdf/{name}/create/svg";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (adjustPageSize != null) localVarQueryParams.Add("adjustPageSize", ApiClient.ParameterToString(adjustPageSize)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (isLandscape != null) localVarQueryParams.Add("isLandscape", ApiClient.ParameterToString(isLandscape)); // query parameter
            if (marginLeft != null) localVarQueryParams.Add("marginLeft", ApiClient.ParameterToString(marginLeft)); // query parameter
            if (marginBottom != null) localVarQueryParams.Add("marginBottom", ApiClient.ParameterToString(marginBottom)); // query parameter
            if (marginRight != null) localVarQueryParams.Add("marginRight", ApiClient.ParameterToString(marginRight)); // query parameter
            if (marginTop != null) localVarQueryParams.Add("marginTop", ApiClient.ParameterToString(marginTop)); // query parameter
            if (dstFolder != null) localVarQueryParams.Add("dstFolder", ApiClient.ParameterToString(dstFolder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutSvgInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Convert SVG file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.svg)</param>
        /// <param name="adjustPageSize">Adjust page size (optional)</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PutSvgInStorageToPdfAsync (string name, string srcPath, bool? adjustPageSize = null, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string dstFolder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PutSvgInStorageToPdfAsyncWithHttpInfo(name, srcPath, adjustPageSize, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, dstFolder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert SVG file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.svg)</param>
        /// <param name="adjustPageSize">Adjust page size (optional)</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutSvgInStorageToPdfAsyncWithHttpInfo (string name, string srcPath, bool? adjustPageSize = null, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string dstFolder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutSvgInStorageToPdf");
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->PutSvgInStorageToPdf");

            var localVarPath = "/pdf/{name}/create/svg";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (adjustPageSize != null) localVarQueryParams.Add("adjustPageSize", ApiClient.ParameterToString(adjustPageSize)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (isLandscape != null) localVarQueryParams.Add("isLandscape", ApiClient.ParameterToString(isLandscape)); // query parameter
            if (marginLeft != null) localVarQueryParams.Add("marginLeft", ApiClient.ParameterToString(marginLeft)); // query parameter
            if (marginBottom != null) localVarQueryParams.Add("marginBottom", ApiClient.ParameterToString(marginBottom)); // query parameter
            if (marginRight != null) localVarQueryParams.Add("marginRight", ApiClient.ParameterToString(marginRight)); // query parameter
            if (marginTop != null) localVarQueryParams.Add("marginTop", ApiClient.ParameterToString(marginTop)); // query parameter
            if (dstFolder != null) localVarQueryParams.Add("dstFolder", ApiClient.ParameterToString(dstFolder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutSvgInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Update field. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fieldName">The name of a field to be updated.</param>
        /// <param name="field">with the field data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>FieldResponse</returns>
        public FieldResponse PutUpdateField (string name, string fieldName, Field field = null, string storage = null, string folder = null)
        {
             ApiResponse<FieldResponse> localVarResponse = PutUpdateFieldWithHttpInfo(name, fieldName, field, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update field. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fieldName">The name of a field to be updated.</param>
        /// <param name="field">with the field data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of FieldResponse</returns>
        public ApiResponse< FieldResponse > PutUpdateFieldWithHttpInfo (string name, string fieldName, Field field = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutUpdateField");
            // verify the required parameter 'fieldName' is set
            if (fieldName == null)
                throw new ApiException(400, "Missing required parameter 'fieldName' when calling PdfApi->PutUpdateField");

            var localVarPath = "/pdf/{name}/fields/{fieldName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (fieldName != null) localVarPathParams.Add("fieldName", ApiClient.ParameterToString(fieldName)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (field != null && field.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(field); // http body (model) parameter
            }
            else
            {
                localVarPostBody = field; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutUpdateField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldResponse) ApiClient.Deserialize(localVarResponse, typeof(FieldResponse)));
        }

        /// <summary>
        /// Update field. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fieldName">The name of a field to be updated.</param>
        /// <param name="field">with the field data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of FieldResponse</returns>
        public async System.Threading.Tasks.Task<FieldResponse> PutUpdateFieldAsync (string name, string fieldName, Field field = null, string storage = null, string folder = null)
        {
             ApiResponse<FieldResponse> localVarResponse = await PutUpdateFieldAsyncWithHttpInfo(name, fieldName, field, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update field. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fieldName">The name of a field to be updated.</param>
        /// <param name="field">with the field data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (FieldResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FieldResponse>> PutUpdateFieldAsyncWithHttpInfo (string name, string fieldName, Field field = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutUpdateField");
            // verify the required parameter 'fieldName' is set
            if (fieldName == null)
                throw new ApiException(400, "Missing required parameter 'fieldName' when calling PdfApi->PutUpdateField");

            var localVarPath = "/pdf/{name}/fields/{fieldName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (fieldName != null) localVarPathParams.Add("fieldName", ApiClient.ParameterToString(fieldName)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (field != null && field.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(field); // http body (model) parameter
            }
            else
            {
                localVarPostBody = field; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutUpdateField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldResponse) ApiClient.Deserialize(localVarResponse, typeof(FieldResponse)));
        }

        /// <summary>
        /// Update fields. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fields">with the fields data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>FieldsResponse</returns>
        public FieldsResponse PutUpdateFields (string name, Fields fields = null, string storage = null, string folder = null)
        {
             ApiResponse<FieldsResponse> localVarResponse = PutUpdateFieldsWithHttpInfo(name, fields, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update fields. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fields">with the fields data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of FieldsResponse</returns>
        public ApiResponse< FieldsResponse > PutUpdateFieldsWithHttpInfo (string name, Fields fields = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutUpdateFields");

            var localVarPath = "/pdf/{name}/fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (fields != null && fields.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(fields); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fields; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutUpdateFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldsResponse) ApiClient.Deserialize(localVarResponse, typeof(FieldsResponse)));
        }

        /// <summary>
        /// Update fields. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fields">with the fields data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of FieldsResponse</returns>
        public async System.Threading.Tasks.Task<FieldsResponse> PutUpdateFieldsAsync (string name, Fields fields = null, string storage = null, string folder = null)
        {
             ApiResponse<FieldsResponse> localVarResponse = await PutUpdateFieldsAsyncWithHttpInfo(name, fields, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update fields. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fields">with the fields data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (FieldsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FieldsResponse>> PutUpdateFieldsAsyncWithHttpInfo (string name, Fields fields = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutUpdateFields");

            var localVarPath = "/pdf/{name}/fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (fields != null && fields.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(fields); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fields; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutUpdateFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldsResponse) ApiClient.Deserialize(localVarResponse, typeof(FieldsResponse)));
        }

        /// <summary>
        /// Convert web page to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="url">Source url</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PutWebInStorageToPdf (string name, string url, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string dstFolder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PutWebInStorageToPdfWithHttpInfo(name, url, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, dstFolder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert web page to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="url">Source url</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PutWebInStorageToPdfWithHttpInfo (string name, string url, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string dstFolder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutWebInStorageToPdf");
            // verify the required parameter 'url' is set
            if (url == null)
                throw new ApiException(400, "Missing required parameter 'url' when calling PdfApi->PutWebInStorageToPdf");

            var localVarPath = "/pdf/{name}/create/web";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (url != null) localVarQueryParams.Add("url", ApiClient.ParameterToString(url)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (isLandscape != null) localVarQueryParams.Add("isLandscape", ApiClient.ParameterToString(isLandscape)); // query parameter
            if (marginLeft != null) localVarQueryParams.Add("marginLeft", ApiClient.ParameterToString(marginLeft)); // query parameter
            if (marginBottom != null) localVarQueryParams.Add("marginBottom", ApiClient.ParameterToString(marginBottom)); // query parameter
            if (marginRight != null) localVarQueryParams.Add("marginRight", ApiClient.ParameterToString(marginRight)); // query parameter
            if (marginTop != null) localVarQueryParams.Add("marginTop", ApiClient.ParameterToString(marginTop)); // query parameter
            if (dstFolder != null) localVarQueryParams.Add("dstFolder", ApiClient.ParameterToString(dstFolder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutWebInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Convert web page to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="url">Source url</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PutWebInStorageToPdfAsync (string name, string url, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string dstFolder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PutWebInStorageToPdfAsyncWithHttpInfo(name, url, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, dstFolder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert web page to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="url">Source url</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutWebInStorageToPdfAsyncWithHttpInfo (string name, string url, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string dstFolder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutWebInStorageToPdf");
            // verify the required parameter 'url' is set
            if (url == null)
                throw new ApiException(400, "Missing required parameter 'url' when calling PdfApi->PutWebInStorageToPdf");

            var localVarPath = "/pdf/{name}/create/web";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (url != null) localVarQueryParams.Add("url", ApiClient.ParameterToString(url)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (isLandscape != null) localVarQueryParams.Add("isLandscape", ApiClient.ParameterToString(isLandscape)); // query parameter
            if (marginLeft != null) localVarQueryParams.Add("marginLeft", ApiClient.ParameterToString(marginLeft)); // query parameter
            if (marginBottom != null) localVarQueryParams.Add("marginBottom", ApiClient.ParameterToString(marginBottom)); // query parameter
            if (marginRight != null) localVarQueryParams.Add("marginRight", ApiClient.ParameterToString(marginRight)); // query parameter
            if (marginTop != null) localVarQueryParams.Add("marginTop", ApiClient.ParameterToString(marginTop)); // query parameter
            if (dstFolder != null) localVarQueryParams.Add("dstFolder", ApiClient.ParameterToString(dstFolder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutWebInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Converts PDF document which contatins XFA form (in request content) to PDF with AcroForm and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PutXfaPdfInRequestToAcroForm (string outPath, System.IO.Stream file = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PutXfaPdfInRequestToAcroFormWithHttpInfo(outPath, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document which contatins XFA form (in request content) to PDF with AcroForm and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PutXfaPdfInRequestToAcroFormWithHttpInfo (string outPath, System.IO.Stream file = null)
        {
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutXfaPdfInRequestToAcroForm");

            var localVarPath = "/pdf/convert/xfatoacroform";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (file != null) localVarFileParams.Add("file", ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutXfaPdfInRequestToAcroForm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Converts PDF document which contatins XFA form (in request content) to PDF with AcroForm and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PutXfaPdfInRequestToAcroFormAsync (string outPath, System.IO.Stream file = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PutXfaPdfInRequestToAcroFormAsyncWithHttpInfo(outPath, file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document which contatins XFA form (in request content) to PDF with AcroForm and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutXfaPdfInRequestToAcroFormAsyncWithHttpInfo (string outPath, System.IO.Stream file = null)
        {
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutXfaPdfInRequestToAcroForm");

            var localVarPath = "/pdf/convert/xfatoacroform";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (file != null) localVarFileParams.Add("file", ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutXfaPdfInRequestToAcroForm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Converts PDF document which contatins XFA form (located on storage) to PDF with AcroForm and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PutXfaPdfInStorageToAcroForm (string name, string outPath, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PutXfaPdfInStorageToAcroFormWithHttpInfo(name, outPath, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document which contatins XFA form (located on storage) to PDF with AcroForm and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PutXfaPdfInStorageToAcroFormWithHttpInfo (string name, string outPath, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutXfaPdfInStorageToAcroForm");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutXfaPdfInStorageToAcroForm");

            var localVarPath = "/pdf/{name}/convert/xfatoacroform";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutXfaPdfInStorageToAcroForm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Converts PDF document which contatins XFA form (located on storage) to PDF with AcroForm and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PutXfaPdfInStorageToAcroFormAsync (string name, string outPath, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PutXfaPdfInStorageToAcroFormAsyncWithHttpInfo(name, outPath, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document which contatins XFA form (located on storage) to PDF with AcroForm and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutXfaPdfInStorageToAcroFormAsyncWithHttpInfo (string name, string outPath, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutXfaPdfInStorageToAcroForm");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutXfaPdfInStorageToAcroForm");

            var localVarPath = "/pdf/{name}/convert/xfatoacroform";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutXfaPdfInStorageToAcroForm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Convert XML file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xml)</param>
        /// <param name="xslFilePath">Full XSL source filename (ex. /folder1/folder2/template.xsl) (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PutXmlInStorageToPdf (string name, string srcPath, string xslFilePath = null, string dstFolder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PutXmlInStorageToPdfWithHttpInfo(name, srcPath, xslFilePath, dstFolder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert XML file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xml)</param>
        /// <param name="xslFilePath">Full XSL source filename (ex. /folder1/folder2/template.xsl) (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PutXmlInStorageToPdfWithHttpInfo (string name, string srcPath, string xslFilePath = null, string dstFolder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutXmlInStorageToPdf");
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->PutXmlInStorageToPdf");

            var localVarPath = "/pdf/{name}/create/xml";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (xslFilePath != null) localVarQueryParams.Add("xslFilePath", ApiClient.ParameterToString(xslFilePath)); // query parameter
            if (dstFolder != null) localVarQueryParams.Add("dstFolder", ApiClient.ParameterToString(dstFolder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutXmlInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Convert XML file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xml)</param>
        /// <param name="xslFilePath">Full XSL source filename (ex. /folder1/folder2/template.xsl) (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PutXmlInStorageToPdfAsync (string name, string srcPath, string xslFilePath = null, string dstFolder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PutXmlInStorageToPdfAsyncWithHttpInfo(name, srcPath, xslFilePath, dstFolder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert XML file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xml)</param>
        /// <param name="xslFilePath">Full XSL source filename (ex. /folder1/folder2/template.xsl) (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutXmlInStorageToPdfAsyncWithHttpInfo (string name, string srcPath, string xslFilePath = null, string dstFolder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutXmlInStorageToPdf");
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->PutXmlInStorageToPdf");

            var localVarPath = "/pdf/{name}/create/xml";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (xslFilePath != null) localVarQueryParams.Add("xslFilePath", ApiClient.ParameterToString(xslFilePath)); // query parameter
            if (dstFolder != null) localVarQueryParams.Add("dstFolder", ApiClient.ParameterToString(dstFolder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutXmlInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Convert XPS file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xps)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PutXpsInStorageToPdf (string name, string srcPath, string dstFolder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PutXpsInStorageToPdfWithHttpInfo(name, srcPath, dstFolder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert XPS file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xps)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PutXpsInStorageToPdfWithHttpInfo (string name, string srcPath, string dstFolder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutXpsInStorageToPdf");
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->PutXpsInStorageToPdf");

            var localVarPath = "/pdf/{name}/create/xps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (dstFolder != null) localVarQueryParams.Add("dstFolder", ApiClient.ParameterToString(dstFolder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutXpsInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Convert XPS file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xps)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PutXpsInStorageToPdfAsync (string name, string srcPath, string dstFolder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PutXpsInStorageToPdfAsyncWithHttpInfo(name, srcPath, dstFolder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert XPS file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xps)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutXpsInStorageToPdfAsyncWithHttpInfo (string name, string srcPath, string dstFolder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutXpsInStorageToPdf");
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->PutXpsInStorageToPdf");

            var localVarPath = "/pdf/{name}/create/xps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (dstFolder != null) localVarQueryParams.Add("dstFolder", ApiClient.ParameterToString(dstFolder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutXpsInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Convert XslFo file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xpsfo)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse PutXslFoInStorageToPdf (string name, string srcPath, string dstFolder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = PutXslFoInStorageToPdfWithHttpInfo(name, srcPath, dstFolder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert XslFo file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xpsfo)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > PutXslFoInStorageToPdfWithHttpInfo (string name, string srcPath, string dstFolder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutXslFoInStorageToPdf");
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->PutXslFoInStorageToPdf");

            var localVarPath = "/pdf/{name}/create/xslfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (dstFolder != null) localVarQueryParams.Add("dstFolder", ApiClient.ParameterToString(dstFolder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutXslFoInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Convert XslFo file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xpsfo)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> PutXslFoInStorageToPdfAsync (string name, string srcPath, string dstFolder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await PutXslFoInStorageToPdfAsyncWithHttpInfo(name, srcPath, dstFolder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert XslFo file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xpsfo)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> PutXslFoInStorageToPdfAsyncWithHttpInfo (string name, string srcPath, string dstFolder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutXslFoInStorageToPdf");
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->PutXslFoInStorageToPdf");

            var localVarPath = "/pdf/{name}/create/xslfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (dstFolder != null) localVarQueryParams.Add("dstFolder", ApiClient.ParameterToString(dstFolder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutXslFoInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

    }
}
