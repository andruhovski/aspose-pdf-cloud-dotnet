// --------------------------------------------------------------------------------------------------------------------
// <copyright company="Aspose" file="PdfApi.cs">
//   Copyright (c) 2018 Aspose.PDF Cloud
// </copyright>
// <summary>
//   Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
// 
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
// 
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
// </summary>
// --------------------------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Aspose.Pdf.Cloud.Sdk.Client;
using Aspose.Pdf.Cloud.Sdk.Model;

namespace Aspose.Pdf.Cloud.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPdfApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete document annotation by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse DeleteAnnotation (string name, string annotationId, string storage = null, string folder = null);

        /// <summary>
        /// Delete document annotation by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> DeleteAnnotationWithHttpInfo (string name, string annotationId, string storage = null, string folder = null);
        /// <summary>
        /// Delete all annotations from the document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse DeleteDocumentAnnotations (string name, string storage = null, string folder = null);

        /// <summary>
        /// Delete all annotations from the document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> DeleteDocumentAnnotationsWithHttpInfo (string name, string storage = null, string folder = null);
        /// <summary>
        /// Delete all link annotations from the document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse DeleteDocumentLinkAnnotations (string name, string storage = null, string folder = null);

        /// <summary>
        /// Delete all link annotations from the document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> DeleteDocumentLinkAnnotationsWithHttpInfo (string name, string storage = null, string folder = null);
        /// <summary>
        /// Delete document field by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fieldName">The field name/</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse DeleteField (string name, string fieldName, string storage = null, string folder = null);

        /// <summary>
        /// Delete document field by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fieldName">The field name/</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> DeleteFieldWithHttpInfo (string name, string fieldName, string storage = null, string folder = null);
        /// <summary>
        /// Delete image from document page.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse DeleteImage (string name, string imageId, string storage = null, string folder = null);

        /// <summary>
        /// Delete image from document page.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> DeleteImageWithHttpInfo (string name, string imageId, string storage = null, string folder = null);
        /// <summary>
        /// Delete document page link annotation by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="linkId">The link ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse DeleteLinkAnnotation (string name, string linkId, string storage = null, string folder = null);

        /// <summary>
        /// Delete document page link annotation by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="linkId">The link ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> DeleteLinkAnnotationWithHttpInfo (string name, string linkId, string storage = null, string folder = null);
        /// <summary>
        /// Delete document page by its number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse DeletePage (string name, int? pageNumber, string storage = null, string folder = null);

        /// <summary>
        /// Delete document page by its number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> DeletePageWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null);
        /// <summary>
        /// Delete all annotations from the page
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse DeletePageAnnotations (string name, int? pageNumber, string storage = null, string folder = null);

        /// <summary>
        /// Delete all annotations from the page
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> DeletePageAnnotationsWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null);
        /// <summary>
        /// Delete all link annotations from the page
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse DeletePageLinkAnnotations (string name, int? pageNumber, string storage = null, string folder = null);

        /// <summary>
        /// Delete all link annotations from the page
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> DeletePageLinkAnnotationsWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null);
        /// <summary>
        /// Delete custom document properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse DeleteProperties (string name, string storage = null, string folder = null);

        /// <summary>
        /// Delete custom document properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> DeletePropertiesWithHttpInfo (string name, string storage = null, string folder = null);
        /// <summary>
        /// Delete document property.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="propertyName"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse DeleteProperty (string name, string propertyName, string storage = null, string folder = null);

        /// <summary>
        /// Delete document property.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="propertyName"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> DeletePropertyWithHttpInfo (string name, string propertyName, string storage = null, string folder = null);
        /// <summary>
        /// Read document page circle annotation by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>CircleAnnotationResponse</returns>
        CircleAnnotationResponse GetCircleAnnotation (string name, string annotationId, string storage = null, string folder = null);

        /// <summary>
        /// Read document page circle annotation by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of CircleAnnotationResponse</returns>
        ApiResponse<CircleAnnotationResponse> GetCircleAnnotationWithHttpInfo (string name, string annotationId, string storage = null, string folder = null);
        /// <summary>
        /// Read common document info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>DocumentResponse</returns>
        DocumentResponse GetDocument (string name, string storage = null, string folder = null);

        /// <summary>
        /// Read common document info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of DocumentResponse</returns>
        ApiResponse<DocumentResponse> GetDocumentWithHttpInfo (string name, string storage = null, string folder = null);
        /// <summary>
        /// Read documant page annotations. Returns only FreeTextAnnotations, TextAnnotations, other annotations will implemented next releases.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AnnotationsInfoResponse</returns>
        AnnotationsInfoResponse GetDocumentAnnotations (string name, string storage = null, string folder = null);

        /// <summary>
        /// Read documant page annotations. Returns only FreeTextAnnotations, TextAnnotations, other annotations will implemented next releases.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AnnotationsInfoResponse</returns>
        ApiResponse<AnnotationsInfoResponse> GetDocumentAnnotationsWithHttpInfo (string name, string storage = null, string folder = null);
        /// <summary>
        /// Read document attachment info by its index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="attachmentIndex">The attachment index.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AttachmentResponse</returns>
        AttachmentResponse GetDocumentAttachmentByIndex (string name, int? attachmentIndex, string storage = null, string folder = null);

        /// <summary>
        /// Read document attachment info by its index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="attachmentIndex">The attachment index.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AttachmentResponse</returns>
        ApiResponse<AttachmentResponse> GetDocumentAttachmentByIndexWithHttpInfo (string name, int? attachmentIndex, string storage = null, string folder = null);
        /// <summary>
        /// Read document attachments info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AttachmentsResponse</returns>
        AttachmentsResponse GetDocumentAttachments (string name, string storage = null, string folder = null);

        /// <summary>
        /// Read document attachments info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AttachmentsResponse</returns>
        ApiResponse<AttachmentsResponse> GetDocumentAttachmentsWithHttpInfo (string name, string storage = null, string folder = null);
        /// <summary>
        /// Read document bookmark/bookmarks (including children).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="bookmarkPath">The bookmark path. Leave it empty if you want to get all the bookmarks in the document. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetDocumentBookmarks (string name, string bookmarkPath = null, string storage = null, string folder = null);

        /// <summary>
        /// Read document bookmark/bookmarks (including children).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="bookmarkPath">The bookmark path. Leave it empty if you want to get all the bookmarks in the document. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetDocumentBookmarksWithHttpInfo (string name, string bookmarkPath = null, string storage = null, string folder = null);
        /// <summary>
        /// Read document circle annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>CircleAnnotationsResponse</returns>
        CircleAnnotationsResponse GetDocumentCircleAnnotations (string name, string storage = null, string folder = null);

        /// <summary>
        /// Read document circle annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of CircleAnnotationsResponse</returns>
        ApiResponse<CircleAnnotationsResponse> GetDocumentCircleAnnotationsWithHttpInfo (string name, string storage = null, string folder = null);
        /// <summary>
        /// Read document free text annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>FreeTextAnnotationsResponse</returns>
        FreeTextAnnotationsResponse GetDocumentFreeTextAnnotations (string name, string storage = null, string folder = null);

        /// <summary>
        /// Read document free text annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of FreeTextAnnotationsResponse</returns>
        ApiResponse<FreeTextAnnotationsResponse> GetDocumentFreeTextAnnotationsWithHttpInfo (string name, string storage = null, string folder = null);
        /// <summary>
        /// Read document line annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>LineAnnotationsResponse</returns>
        LineAnnotationsResponse GetDocumentLineAnnotations (string name, string storage = null, string folder = null);

        /// <summary>
        /// Read document line annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of LineAnnotationsResponse</returns>
        ApiResponse<LineAnnotationsResponse> GetDocumentLineAnnotationsWithHttpInfo (string name, string storage = null, string folder = null);
        /// <summary>
        /// Read document polyline annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>PolyLineAnnotationsResponse</returns>
        PolyLineAnnotationsResponse GetDocumentPolyLineAnnotations (string name, string storage = null, string folder = null);

        /// <summary>
        /// Read document polyline annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of PolyLineAnnotationsResponse</returns>
        ApiResponse<PolyLineAnnotationsResponse> GetDocumentPolyLineAnnotationsWithHttpInfo (string name, string storage = null, string folder = null);
        /// <summary>
        /// Read document polygon annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>PolygonAnnotationsResponse</returns>
        PolygonAnnotationsResponse GetDocumentPolygonAnnotations (string name, string storage = null, string folder = null);

        /// <summary>
        /// Read document polygon annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of PolygonAnnotationsResponse</returns>
        ApiResponse<PolygonAnnotationsResponse> GetDocumentPolygonAnnotationsWithHttpInfo (string name, string storage = null, string folder = null);
        /// <summary>
        /// Read document properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>DocumentPropertiesResponse</returns>
        DocumentPropertiesResponse GetDocumentProperties (string name, string storage = null, string folder = null);

        /// <summary>
        /// Read document properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of DocumentPropertiesResponse</returns>
        ApiResponse<DocumentPropertiesResponse> GetDocumentPropertiesWithHttpInfo (string name, string storage = null, string folder = null);
        /// <summary>
        /// Read document property by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="propertyName"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>DocumentPropertyResponse</returns>
        DocumentPropertyResponse GetDocumentProperty (string name, string propertyName, string storage = null, string folder = null);

        /// <summary>
        /// Read document property by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="propertyName"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of DocumentPropertyResponse</returns>
        ApiResponse<DocumentPropertyResponse> GetDocumentPropertyWithHttpInfo (string name, string propertyName, string storage = null, string folder = null);
        /// <summary>
        /// Read document square annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SquareAnnotationsResponse</returns>
        SquareAnnotationsResponse GetDocumentSquareAnnotations (string name, string storage = null, string folder = null);

        /// <summary>
        /// Read document square annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SquareAnnotationsResponse</returns>
        ApiResponse<SquareAnnotationsResponse> GetDocumentSquareAnnotationsWithHttpInfo (string name, string storage = null, string folder = null);
        /// <summary>
        /// Read document text annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>TextAnnotationsResponse</returns>
        TextAnnotationsResponse GetDocumentTextAnnotations (string name, string storage = null, string folder = null);

        /// <summary>
        /// Read document text annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of TextAnnotationsResponse</returns>
        ApiResponse<TextAnnotationsResponse> GetDocumentTextAnnotationsWithHttpInfo (string name, string storage = null, string folder = null);
        /// <summary>
        /// Download a specific file 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path of the file including the file name and extension e.g. /file.ext</param>
        /// <param name="versionId">File&#39;s version (optional)</param>
        /// <param name="storage">User&#39;s storage name (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetDownload (string path, string versionId = null, string storage = null);

        /// <summary>
        /// Download a specific file 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path of the file including the file name and extension e.g. /file.ext</param>
        /// <param name="versionId">File&#39;s version (optional)</param>
        /// <param name="storage">User&#39;s storage name (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetDownloadWithHttpInfo (string path, string versionId = null, string storage = null);
        /// <summary>
        /// Download document attachment content by its index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="attachmentIndex">The attachment index.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetDownloadDocumentAttachmentByIndex (string name, int? attachmentIndex, string storage = null, string folder = null);

        /// <summary>
        /// Download document attachment content by its index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="attachmentIndex">The attachment index.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetDownloadDocumentAttachmentByIndexWithHttpInfo (string name, int? attachmentIndex, string storage = null, string folder = null);
        /// <summary>
        /// Convert EPUB file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.epub)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetEpubInStorageToPdf (string srcPath, string storage = null);

        /// <summary>
        /// Convert EPUB file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.epub)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetEpubInStorageToPdfWithHttpInfo (string srcPath, string storage = null);
        /// <summary>
        /// Get document field by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fieldName">The field name/</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>FieldResponse</returns>
        FieldResponse GetField (string name, string fieldName, string storage = null, string folder = null);

        /// <summary>
        /// Get document field by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fieldName">The field name/</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of FieldResponse</returns>
        ApiResponse<FieldResponse> GetFieldWithHttpInfo (string name, string fieldName, string storage = null, string folder = null);
        /// <summary>
        /// Get document fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>FieldsResponse</returns>
        FieldsResponse GetFields (string name, string storage = null, string folder = null);

        /// <summary>
        /// Get document fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of FieldsResponse</returns>
        ApiResponse<FieldsResponse> GetFieldsWithHttpInfo (string name, string storage = null, string folder = null);
        /// <summary>
        /// Read document page free text annotation by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>FreeTextAnnotationResponse</returns>
        FreeTextAnnotationResponse GetFreeTextAnnotation (string name, string annotationId, string storage = null, string folder = null);

        /// <summary>
        /// Read document page free text annotation by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of FreeTextAnnotationResponse</returns>
        ApiResponse<FreeTextAnnotationResponse> GetFreeTextAnnotationWithHttpInfo (string name, string annotationId, string storage = null, string folder = null);
        /// <summary>
        /// Convert HTML file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.zip)</param>
        /// <param name="htmlFileName">Name of HTML file in ZIP.</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetHtmlInStorageToPdf (string srcPath, string htmlFileName, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string storage = null);

        /// <summary>
        /// Convert HTML file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.zip)</param>
        /// <param name="htmlFileName">Name of HTML file in ZIP.</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetHtmlInStorageToPdfWithHttpInfo (string srcPath, string htmlFileName, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string storage = null);
        /// <summary>
        /// Read document image by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ImageResponse</returns>
        ImageResponse GetImage (string name, string imageId, string storage = null, string folder = null);

        /// <summary>
        /// Read document image by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of ImageResponse</returns>
        ApiResponse<ImageResponse> GetImageWithHttpInfo (string name, string imageId, string storage = null, string folder = null);
        /// <summary>
        /// Extract document image in GIF format
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetImageExtractAsGif (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null);

        /// <summary>
        /// Extract document image in GIF format
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetImageExtractAsGifWithHttpInfo (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null);
        /// <summary>
        /// Extract document image in JPEG format
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetImageExtractAsJpeg (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null);

        /// <summary>
        /// Extract document image in JPEG format
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetImageExtractAsJpegWithHttpInfo (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null);
        /// <summary>
        /// Extract document image in PNG format
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetImageExtractAsPng (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null);

        /// <summary>
        /// Extract document image in PNG format
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetImageExtractAsPngWithHttpInfo (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null);
        /// <summary>
        /// Extract document image in TIFF format
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetImageExtractAsTiff (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null);

        /// <summary>
        /// Extract document image in TIFF format
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetImageExtractAsTiffWithHttpInfo (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null);
        /// <summary>
        /// Read document images.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ImagesResponse</returns>
        ImagesResponse GetImages (string name, int? pageNumber, string storage = null, string folder = null);

        /// <summary>
        /// Read document images.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of ImagesResponse</returns>
        ApiResponse<ImagesResponse> GetImagesWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null);
        /// <summary>
        /// Convert LaTeX file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.tex)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetLaTeXInStorageToPdf (string srcPath, string storage = null);

        /// <summary>
        /// Convert LaTeX file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.tex)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetLaTeXInStorageToPdfWithHttpInfo (string srcPath, string storage = null);
        /// <summary>
        /// Read document page line annotation by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>LineAnnotationResponse</returns>
        LineAnnotationResponse GetLineAnnotation (string name, string annotationId, string storage = null, string folder = null);

        /// <summary>
        /// Read document page line annotation by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of LineAnnotationResponse</returns>
        ApiResponse<LineAnnotationResponse> GetLineAnnotationWithHttpInfo (string name, string annotationId, string storage = null, string folder = null);
        /// <summary>
        /// Read document link annotation by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="linkId">The link ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>LinkAnnotationResponse</returns>
        LinkAnnotationResponse GetLinkAnnotation (string name, string linkId, string storage = null, string folder = null);

        /// <summary>
        /// Read document link annotation by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="linkId">The link ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of LinkAnnotationResponse</returns>
        ApiResponse<LinkAnnotationResponse> GetLinkAnnotationWithHttpInfo (string name, string linkId, string storage = null, string folder = null);
        /// <summary>
        /// Convert MHT file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.mht)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetMhtInStorageToPdf (string srcPath, string storage = null);

        /// <summary>
        /// Convert MHT file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.mht)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetMhtInStorageToPdfWithHttpInfo (string srcPath, string storage = null);
        /// <summary>
        /// Read document page info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>DocumentPageResponse</returns>
        DocumentPageResponse GetPage (string name, int? pageNumber, string storage = null, string folder = null);

        /// <summary>
        /// Read document page info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of DocumentPageResponse</returns>
        ApiResponse<DocumentPageResponse> GetPageWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null);
        /// <summary>
        /// Read documant page annotations. Returns only FreeTextAnnotations, TextAnnotations, other annotations will implemented next releases.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AnnotationsInfoResponse</returns>
        AnnotationsInfoResponse GetPageAnnotations (string name, int? pageNumber, string storage = null, string folder = null);

        /// <summary>
        /// Read documant page annotations. Returns only FreeTextAnnotations, TextAnnotations, other annotations will implemented next releases.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AnnotationsInfoResponse</returns>
        ApiResponse<AnnotationsInfoResponse> GetPageAnnotationsWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null);
        /// <summary>
        /// Read document page circle annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>CircleAnnotationsResponse</returns>
        CircleAnnotationsResponse GetPageCircleAnnotations (string name, int? pageNumber, string storage = null, string folder = null);

        /// <summary>
        /// Read document page circle annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of CircleAnnotationsResponse</returns>
        ApiResponse<CircleAnnotationsResponse> GetPageCircleAnnotationsWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null);
        /// <summary>
        /// Convert document page to Bmp image and return resulting file in response.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetPageConvertToBmp (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string storage = null);

        /// <summary>
        /// Convert document page to Bmp image and return resulting file in response.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetPageConvertToBmpWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string storage = null);
        /// <summary>
        /// Convert document page to Emf image and return resulting file in response.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetPageConvertToEmf (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string storage = null);

        /// <summary>
        /// Convert document page to Emf image and return resulting file in response.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetPageConvertToEmfWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string storage = null);
        /// <summary>
        /// Convert document page to Gif image and return resulting file in response.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetPageConvertToGif (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string storage = null);

        /// <summary>
        /// Convert document page to Gif image and return resulting file in response.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetPageConvertToGifWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string storage = null);
        /// <summary>
        /// Convert document page to Jpeg image and return resulting file in response.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetPageConvertToJpeg (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string storage = null);

        /// <summary>
        /// Convert document page to Jpeg image and return resulting file in response.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetPageConvertToJpegWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string storage = null);
        /// <summary>
        /// Convert document page to Png image and return resulting file in response.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetPageConvertToPng (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string storage = null);

        /// <summary>
        /// Convert document page to Png image and return resulting file in response.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetPageConvertToPngWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string storage = null);
        /// <summary>
        /// Convert document page to Tiff image  and return resulting file in response.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetPageConvertToTiff (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string storage = null);

        /// <summary>
        /// Convert document page to Tiff image  and return resulting file in response.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetPageConvertToTiffWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string storage = null);
        /// <summary>
        /// Read document page free text annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>FreeTextAnnotationsResponse</returns>
        FreeTextAnnotationsResponse GetPageFreeTextAnnotations (string name, int? pageNumber, string storage = null, string folder = null);

        /// <summary>
        /// Read document page free text annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of FreeTextAnnotationsResponse</returns>
        ApiResponse<FreeTextAnnotationsResponse> GetPageFreeTextAnnotationsWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null);
        /// <summary>
        /// Read document page line annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>LineAnnotationsResponse</returns>
        LineAnnotationsResponse GetPageLineAnnotations (string name, int? pageNumber, string storage = null, string folder = null);

        /// <summary>
        /// Read document page line annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of LineAnnotationsResponse</returns>
        ApiResponse<LineAnnotationsResponse> GetPageLineAnnotationsWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null);
        /// <summary>
        /// Read document page link annotation by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="linkId">The link ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>LinkAnnotationResponse</returns>
        LinkAnnotationResponse GetPageLinkAnnotation (string name, int? pageNumber, string linkId, string storage = null, string folder = null);

        /// <summary>
        /// Read document page link annotation by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="linkId">The link ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of LinkAnnotationResponse</returns>
        ApiResponse<LinkAnnotationResponse> GetPageLinkAnnotationWithHttpInfo (string name, int? pageNumber, string linkId, string storage = null, string folder = null);
        /// <summary>
        /// Read document page link annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>LinkAnnotationsResponse</returns>
        LinkAnnotationsResponse GetPageLinkAnnotations (string name, int? pageNumber, string storage = null, string folder = null);

        /// <summary>
        /// Read document page link annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of LinkAnnotationsResponse</returns>
        ApiResponse<LinkAnnotationsResponse> GetPageLinkAnnotationsWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null);
        /// <summary>
        /// Read document page polyline annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>PolyLineAnnotationsResponse</returns>
        PolyLineAnnotationsResponse GetPagePolyLineAnnotations (string name, int? pageNumber, string storage = null, string folder = null);

        /// <summary>
        /// Read document page polyline annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of PolyLineAnnotationsResponse</returns>
        ApiResponse<PolyLineAnnotationsResponse> GetPagePolyLineAnnotationsWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null);
        /// <summary>
        /// Read document page polygon annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>PolygonAnnotationsResponse</returns>
        PolygonAnnotationsResponse GetPagePolygonAnnotations (string name, int? pageNumber, string storage = null, string folder = null);

        /// <summary>
        /// Read document page polygon annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of PolygonAnnotationsResponse</returns>
        ApiResponse<PolygonAnnotationsResponse> GetPagePolygonAnnotationsWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null);
        /// <summary>
        /// Read document page square annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SquareAnnotationsResponse</returns>
        SquareAnnotationsResponse GetPageSquareAnnotations (string name, int? pageNumber, string storage = null, string folder = null);

        /// <summary>
        /// Read document page square annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SquareAnnotationsResponse</returns>
        ApiResponse<SquareAnnotationsResponse> GetPageSquareAnnotationsWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null);
        /// <summary>
        /// Read page text items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">Number of page (starting from 1).</param>
        /// <param name="LLX"></param>
        /// <param name="LLY"></param>
        /// <param name="URX"></param>
        /// <param name="URY"></param>
        /// <param name="format">List of formats for search. (optional)</param>
        /// <param name="regex">Formats are specified as a regular expression. (optional)</param>
        /// <param name="splitRects">Split result fragments (default is true). (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>TextRectsResponse</returns>
        TextRectsResponse GetPageText (string name, int? pageNumber, double? LLX, double? LLY, double? URX, double? URY, List<string> format = null, string regex = null, bool? splitRects = null, string folder = null, string storage = null);

        /// <summary>
        /// Read page text items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">Number of page (starting from 1).</param>
        /// <param name="LLX"></param>
        /// <param name="LLY"></param>
        /// <param name="URX"></param>
        /// <param name="URY"></param>
        /// <param name="format">List of formats for search. (optional)</param>
        /// <param name="regex">Formats are specified as a regular expression. (optional)</param>
        /// <param name="splitRects">Split result fragments (default is true). (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of TextRectsResponse</returns>
        ApiResponse<TextRectsResponse> GetPageTextWithHttpInfo (string name, int? pageNumber, double? LLX, double? LLY, double? URX, double? URY, List<string> format = null, string regex = null, bool? splitRects = null, string folder = null, string storage = null);
        /// <summary>
        /// Read document page text annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>TextAnnotationsResponse</returns>
        TextAnnotationsResponse GetPageTextAnnotations (string name, int? pageNumber, string storage = null, string folder = null);

        /// <summary>
        /// Read document page text annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of TextAnnotationsResponse</returns>
        ApiResponse<TextAnnotationsResponse> GetPageTextAnnotationsWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null);
        /// <summary>
        /// Read document pages info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>DocumentPagesResponse</returns>
        DocumentPagesResponse GetPages (string name, string storage = null, string folder = null);

        /// <summary>
        /// Read document pages info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of DocumentPagesResponse</returns>
        ApiResponse<DocumentPagesResponse> GetPagesWithHttpInfo (string name, string storage = null, string folder = null);
        /// <summary>
        /// Convert PCL file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.pcl)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetPclInStorageToPdf (string srcPath, string storage = null);

        /// <summary>
        /// Convert PCL file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.pcl)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetPclInStorageToPdfWithHttpInfo (string srcPath, string storage = null);
        /// <summary>
        /// Converts PDF document (located on storage) to DOC format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="addReturnToLineEnd">Add return to line end. (optional)</param>
        /// <param name="format">Allows to specify .doc or .docx file format. (optional)</param>
        /// <param name="imageResolutionX">Image resolution X. (optional)</param>
        /// <param name="imageResolutionY">Image resolution Y. (optional)</param>
        /// <param name="maxDistanceBetweenTextLines">Max distance between text lines. (optional)</param>
        /// <param name="mode">Allows to control how a PDF document is converted into a word processing document. (optional)</param>
        /// <param name="recognizeBullets">Recognize bullets. (optional)</param>
        /// <param name="relativeHorizontalProximity">Relative horizontal proximity. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetPdfInStorageToDoc (string name, bool? addReturnToLineEnd = null, string format = null, int? imageResolutionX = null, int? imageResolutionY = null, double? maxDistanceBetweenTextLines = null, string mode = null, bool? recognizeBullets = null, double? relativeHorizontalProximity = null, string folder = null, string storage = null);

        /// <summary>
        /// Converts PDF document (located on storage) to DOC format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="addReturnToLineEnd">Add return to line end. (optional)</param>
        /// <param name="format">Allows to specify .doc or .docx file format. (optional)</param>
        /// <param name="imageResolutionX">Image resolution X. (optional)</param>
        /// <param name="imageResolutionY">Image resolution Y. (optional)</param>
        /// <param name="maxDistanceBetweenTextLines">Max distance between text lines. (optional)</param>
        /// <param name="mode">Allows to control how a PDF document is converted into a word processing document. (optional)</param>
        /// <param name="recognizeBullets">Recognize bullets. (optional)</param>
        /// <param name="relativeHorizontalProximity">Relative horizontal proximity. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetPdfInStorageToDocWithHttpInfo (string name, bool? addReturnToLineEnd = null, string format = null, int? imageResolutionX = null, int? imageResolutionY = null, double? maxDistanceBetweenTextLines = null, string mode = null, bool? recognizeBullets = null, double? relativeHorizontalProximity = null, string folder = null, string storage = null);
        /// <summary>
        /// Converts PDF document (located on storage) to EPUB format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="contentRecognitionMode">?roperty tunes conversion for this or that desirable method of recognition of content. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetPdfInStorageToEpub (string name, string contentRecognitionMode = null, string folder = null, string storage = null);

        /// <summary>
        /// Converts PDF document (located on storage) to EPUB format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="contentRecognitionMode">?roperty tunes conversion for this or that desirable method of recognition of content. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetPdfInStorageToEpubWithHttpInfo (string name, string contentRecognitionMode = null, string folder = null, string storage = null);
        /// <summary>
        /// Converts PDF document (located on storage) to Html format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="additionalMarginWidthInPoints">Defines width of margin that will be forcibly left around that output HTML-areas. (optional)</param>
        /// <param name="compressSvgGraphicsIfAny">The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)</param>
        /// <param name="convertMarkedContentToLayers">If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)</param>
        /// <param name="defaultFontName">Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)</param>
        /// <param name="documentType">Result document type. (optional)</param>
        /// <param name="fixedLayout">The value indicating whether that HTML is created as fixed layout. (optional)</param>
        /// <param name="imageResolution">Resolution for image rendering. (optional)</param>
        /// <param name="minimalLineWidth">This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)</param>
        /// <param name="preventGlyphsGrouping">This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)</param>
        /// <param name="splitCssIntoPages">When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)</param>
        /// <param name="splitIntoPages">The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)</param>
        /// <param name="useZOrder">If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)</param>
        /// <param name="antialiasingProcessing">The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)</param>
        /// <param name="cssClassNamesPrefix">When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)</param>
        /// <param name="explicitListOfSavedPages">With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)</param>
        /// <param name="fontEncodingStrategy">Defines encoding special rule to tune PDF decoding for current document. (optional)</param>
        /// <param name="fontSavingMode">Defines font saving mode that will be used during saving of PDF to desirable format. (optional)</param>
        /// <param name="htmlMarkupGenerationMode">Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)</param>
        /// <param name="lettersPositioningMethod">The mode of positioning of letters in words in result HTML. (optional)</param>
        /// <param name="pagesFlowTypeDependsOnViewersScreenSize">If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)</param>
        /// <param name="partsEmbeddingMode">It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)</param>
        /// <param name="rasterImagesSavingMode">Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)</param>
        /// <param name="removeEmptyAreasOnTopAndBottom">Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)</param>
        /// <param name="saveShadowedTextsAsTransparentTexts">Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)</param>
        /// <param name="saveTransparentTexts">Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)</param>
        /// <param name="specialFolderForAllImages">The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="specialFolderForSvgImages">The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="trySaveTextUnderliningAndStrikeoutingInCss">PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetPdfInStorageToHtml (string name, int? additionalMarginWidthInPoints = null, bool? compressSvgGraphicsIfAny = null, bool? convertMarkedContentToLayers = null, string defaultFontName = null, string documentType = null, bool? fixedLayout = null, int? imageResolution = null, int? minimalLineWidth = null, bool? preventGlyphsGrouping = null, bool? splitCssIntoPages = null, bool? splitIntoPages = null, bool? useZOrder = null, string antialiasingProcessing = null, string cssClassNamesPrefix = null, List<int?> explicitListOfSavedPages = null, string fontEncodingStrategy = null, string fontSavingMode = null, string htmlMarkupGenerationMode = null, string lettersPositioningMethod = null, bool? pagesFlowTypeDependsOnViewersScreenSize = null, string partsEmbeddingMode = null, string rasterImagesSavingMode = null, bool? removeEmptyAreasOnTopAndBottom = null, bool? saveShadowedTextsAsTransparentTexts = null, bool? saveTransparentTexts = null, string specialFolderForAllImages = null, string specialFolderForSvgImages = null, bool? trySaveTextUnderliningAndStrikeoutingInCss = null, string folder = null, string storage = null);

        /// <summary>
        /// Converts PDF document (located on storage) to Html format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="additionalMarginWidthInPoints">Defines width of margin that will be forcibly left around that output HTML-areas. (optional)</param>
        /// <param name="compressSvgGraphicsIfAny">The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)</param>
        /// <param name="convertMarkedContentToLayers">If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)</param>
        /// <param name="defaultFontName">Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)</param>
        /// <param name="documentType">Result document type. (optional)</param>
        /// <param name="fixedLayout">The value indicating whether that HTML is created as fixed layout. (optional)</param>
        /// <param name="imageResolution">Resolution for image rendering. (optional)</param>
        /// <param name="minimalLineWidth">This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)</param>
        /// <param name="preventGlyphsGrouping">This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)</param>
        /// <param name="splitCssIntoPages">When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)</param>
        /// <param name="splitIntoPages">The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)</param>
        /// <param name="useZOrder">If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)</param>
        /// <param name="antialiasingProcessing">The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)</param>
        /// <param name="cssClassNamesPrefix">When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)</param>
        /// <param name="explicitListOfSavedPages">With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)</param>
        /// <param name="fontEncodingStrategy">Defines encoding special rule to tune PDF decoding for current document. (optional)</param>
        /// <param name="fontSavingMode">Defines font saving mode that will be used during saving of PDF to desirable format. (optional)</param>
        /// <param name="htmlMarkupGenerationMode">Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)</param>
        /// <param name="lettersPositioningMethod">The mode of positioning of letters in words in result HTML. (optional)</param>
        /// <param name="pagesFlowTypeDependsOnViewersScreenSize">If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)</param>
        /// <param name="partsEmbeddingMode">It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)</param>
        /// <param name="rasterImagesSavingMode">Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)</param>
        /// <param name="removeEmptyAreasOnTopAndBottom">Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)</param>
        /// <param name="saveShadowedTextsAsTransparentTexts">Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)</param>
        /// <param name="saveTransparentTexts">Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)</param>
        /// <param name="specialFolderForAllImages">The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="specialFolderForSvgImages">The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="trySaveTextUnderliningAndStrikeoutingInCss">PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetPdfInStorageToHtmlWithHttpInfo (string name, int? additionalMarginWidthInPoints = null, bool? compressSvgGraphicsIfAny = null, bool? convertMarkedContentToLayers = null, string defaultFontName = null, string documentType = null, bool? fixedLayout = null, int? imageResolution = null, int? minimalLineWidth = null, bool? preventGlyphsGrouping = null, bool? splitCssIntoPages = null, bool? splitIntoPages = null, bool? useZOrder = null, string antialiasingProcessing = null, string cssClassNamesPrefix = null, List<int?> explicitListOfSavedPages = null, string fontEncodingStrategy = null, string fontSavingMode = null, string htmlMarkupGenerationMode = null, string lettersPositioningMethod = null, bool? pagesFlowTypeDependsOnViewersScreenSize = null, string partsEmbeddingMode = null, string rasterImagesSavingMode = null, bool? removeEmptyAreasOnTopAndBottom = null, bool? saveShadowedTextsAsTransparentTexts = null, bool? saveTransparentTexts = null, string specialFolderForAllImages = null, string specialFolderForSvgImages = null, bool? trySaveTextUnderliningAndStrikeoutingInCss = null, string folder = null, string storage = null);
        /// <summary>
        /// Converts PDF document (located on storage) to LaTeX format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pagesCount">Pages count. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetPdfInStorageToLaTeX (string name, int? pagesCount = null, string folder = null, string storage = null);

        /// <summary>
        /// Converts PDF document (located on storage) to LaTeX format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pagesCount">Pages count. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetPdfInStorageToLaTeXWithHttpInfo (string name, int? pagesCount = null, string folder = null, string storage = null);
        /// <summary>
        /// Converts PDF document (located on storage) to MOBIXML format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetPdfInStorageToMobiXml (string name, string folder = null, string storage = null);

        /// <summary>
        /// Converts PDF document (located on storage) to MOBIXML format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetPdfInStorageToMobiXmlWithHttpInfo (string name, string folder = null, string storage = null);
        /// <summary>
        /// Converts PDF document (located on storage) to PdfA format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="type">Type of PdfA format.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetPdfInStorageToPdfA (string name, string type, string folder = null, string storage = null);

        /// <summary>
        /// Converts PDF document (located on storage) to PdfA format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="type">Type of PdfA format.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetPdfInStorageToPdfAWithHttpInfo (string name, string type, string folder = null, string storage = null);
        /// <summary>
        /// Converts PDF document (located on storage) to PPTX format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="separateImages">Separate images. (optional)</param>
        /// <param name="slidesAsImages">Slides as images. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetPdfInStorageToPptx (string name, bool? separateImages = null, bool? slidesAsImages = null, string folder = null, string storage = null);

        /// <summary>
        /// Converts PDF document (located on storage) to PPTX format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="separateImages">Separate images. (optional)</param>
        /// <param name="slidesAsImages">Slides as images. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetPdfInStorageToPptxWithHttpInfo (string name, bool? separateImages = null, bool? slidesAsImages = null, string folder = null, string storage = null);
        /// <summary>
        /// Converts PDF document (located on storage) to SVG format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="compressOutputToZipArchive">Specifies whether output will be created as one zip-archive. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetPdfInStorageToSvg (string name, bool? compressOutputToZipArchive = null, string folder = null, string storage = null);

        /// <summary>
        /// Converts PDF document (located on storage) to SVG format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="compressOutputToZipArchive">Specifies whether output will be created as one zip-archive. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetPdfInStorageToSvgWithHttpInfo (string name, bool? compressOutputToZipArchive = null, string folder = null, string storage = null);
        /// <summary>
        /// Converts PDF document (located on storage) to TIFF format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="brightness">Image brightness. (optional)</param>
        /// <param name="compression">Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)</param>
        /// <param name="colorDepth">Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)</param>
        /// <param name="leftMargin">Left image margin. (optional)</param>
        /// <param name="rightMargin">Right image margin. (optional)</param>
        /// <param name="topMargin">Top image margin. (optional)</param>
        /// <param name="bottomMargin">Bottom image margin. (optional)</param>
        /// <param name="orientation">Image orientation. Possible values are: None, Landscape, Portait. (optional)</param>
        /// <param name="skipBlankPages">Skip blank pages flag. (optional)</param>
        /// <param name="width">Image width. (optional)</param>
        /// <param name="height">Image height. (optional)</param>
        /// <param name="xResolution">Horizontal resolution. (optional)</param>
        /// <param name="yResolution">Vertical resolution. (optional)</param>
        /// <param name="pageIndex">Start page to export. (optional)</param>
        /// <param name="pageCount">Number of pages to export. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetPdfInStorageToTiff (string name, double? brightness = null, string compression = null, string colorDepth = null, int? leftMargin = null, int? rightMargin = null, int? topMargin = null, int? bottomMargin = null, string orientation = null, bool? skipBlankPages = null, int? width = null, int? height = null, int? xResolution = null, int? yResolution = null, int? pageIndex = null, int? pageCount = null, string folder = null, string storage = null);

        /// <summary>
        /// Converts PDF document (located on storage) to TIFF format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="brightness">Image brightness. (optional)</param>
        /// <param name="compression">Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)</param>
        /// <param name="colorDepth">Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)</param>
        /// <param name="leftMargin">Left image margin. (optional)</param>
        /// <param name="rightMargin">Right image margin. (optional)</param>
        /// <param name="topMargin">Top image margin. (optional)</param>
        /// <param name="bottomMargin">Bottom image margin. (optional)</param>
        /// <param name="orientation">Image orientation. Possible values are: None, Landscape, Portait. (optional)</param>
        /// <param name="skipBlankPages">Skip blank pages flag. (optional)</param>
        /// <param name="width">Image width. (optional)</param>
        /// <param name="height">Image height. (optional)</param>
        /// <param name="xResolution">Horizontal resolution. (optional)</param>
        /// <param name="yResolution">Vertical resolution. (optional)</param>
        /// <param name="pageIndex">Start page to export. (optional)</param>
        /// <param name="pageCount">Number of pages to export. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetPdfInStorageToTiffWithHttpInfo (string name, double? brightness = null, string compression = null, string colorDepth = null, int? leftMargin = null, int? rightMargin = null, int? topMargin = null, int? bottomMargin = null, string orientation = null, bool? skipBlankPages = null, int? width = null, int? height = null, int? xResolution = null, int? yResolution = null, int? pageIndex = null, int? pageCount = null, string folder = null, string storage = null);
        /// <summary>
        /// Converts PDF document (located on storage) to XLS format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="insertBlankColumnAtFirst">Insert blank column at first (optional)</param>
        /// <param name="minimizeTheNumberOfWorksheets">Minimize the number of worksheets (optional)</param>
        /// <param name="scaleFactor">Scale factor (optional)</param>
        /// <param name="uniformWorksheets">Uniform worksheets (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetPdfInStorageToXls (string name, bool? insertBlankColumnAtFirst = null, bool? minimizeTheNumberOfWorksheets = null, double? scaleFactor = null, bool? uniformWorksheets = null, string folder = null, string storage = null);

        /// <summary>
        /// Converts PDF document (located on storage) to XLS format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="insertBlankColumnAtFirst">Insert blank column at first (optional)</param>
        /// <param name="minimizeTheNumberOfWorksheets">Minimize the number of worksheets (optional)</param>
        /// <param name="scaleFactor">Scale factor (optional)</param>
        /// <param name="uniformWorksheets">Uniform worksheets (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetPdfInStorageToXlsWithHttpInfo (string name, bool? insertBlankColumnAtFirst = null, bool? minimizeTheNumberOfWorksheets = null, double? scaleFactor = null, bool? uniformWorksheets = null, string folder = null, string storage = null);
        /// <summary>
        /// Converts PDF document (located on storage) to XML format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetPdfInStorageToXml (string name, string folder = null, string storage = null);

        /// <summary>
        /// Converts PDF document (located on storage) to XML format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetPdfInStorageToXmlWithHttpInfo (string name, string folder = null, string storage = null);
        /// <summary>
        /// Converts PDF document (located on storage) to XPS format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetPdfInStorageToXps (string name, string folder = null, string storage = null);

        /// <summary>
        /// Converts PDF document (located on storage) to XPS format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetPdfInStorageToXpsWithHttpInfo (string name, string folder = null, string storage = null);
        /// <summary>
        /// Read document page polyline annotation by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>PolyLineAnnotationResponse</returns>
        PolyLineAnnotationResponse GetPolyLineAnnotation (string name, string annotationId, string storage = null, string folder = null);

        /// <summary>
        /// Read document page polyline annotation by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of PolyLineAnnotationResponse</returns>
        ApiResponse<PolyLineAnnotationResponse> GetPolyLineAnnotationWithHttpInfo (string name, string annotationId, string storage = null, string folder = null);
        /// <summary>
        /// Read document page polygon annotation by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>PolygonAnnotationResponse</returns>
        PolygonAnnotationResponse GetPolygonAnnotation (string name, string annotationId, string storage = null, string folder = null);

        /// <summary>
        /// Read document page polygon annotation by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of PolygonAnnotationResponse</returns>
        ApiResponse<PolygonAnnotationResponse> GetPolygonAnnotationWithHttpInfo (string name, string annotationId, string storage = null, string folder = null);
        /// <summary>
        /// Convert PS file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.ps)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetPsInStorageToPdf (string srcPath, string storage = null);

        /// <summary>
        /// Convert PS file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.ps)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetPsInStorageToPdfWithHttpInfo (string srcPath, string storage = null);
        /// <summary>
        /// Read document page square annotation by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SquareAnnotationResponse</returns>
        SquareAnnotationResponse GetSquareAnnotation (string name, string annotationId, string storage = null, string folder = null);

        /// <summary>
        /// Read document page square annotation by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SquareAnnotationResponse</returns>
        ApiResponse<SquareAnnotationResponse> GetSquareAnnotationWithHttpInfo (string name, string annotationId, string storage = null, string folder = null);
        /// <summary>
        /// Convert SVG file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.svg)</param>
        /// <param name="adjustPageSize">Adjust page size (optional)</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetSvgInStorageToPdf (string srcPath, bool? adjustPageSize = null, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string storage = null);

        /// <summary>
        /// Convert SVG file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.svg)</param>
        /// <param name="adjustPageSize">Adjust page size (optional)</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetSvgInStorageToPdfWithHttpInfo (string srcPath, bool? adjustPageSize = null, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string storage = null);
        /// <summary>
        /// Read document text.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="LLX"></param>
        /// <param name="LLY"></param>
        /// <param name="URX"></param>
        /// <param name="URY"></param>
        /// <param name="format">List of formats for search. (optional)</param>
        /// <param name="regex">Formats are specified as a regular expression. (optional)</param>
        /// <param name="splitRects">Split result fragments (default is true). (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>TextRectsResponse</returns>
        TextRectsResponse GetText (string name, double? LLX, double? LLY, double? URX, double? URY, List<string> format = null, string regex = null, bool? splitRects = null, string folder = null, string storage = null);

        /// <summary>
        /// Read document text.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="LLX"></param>
        /// <param name="LLY"></param>
        /// <param name="URX"></param>
        /// <param name="URY"></param>
        /// <param name="format">List of formats for search. (optional)</param>
        /// <param name="regex">Formats are specified as a regular expression. (optional)</param>
        /// <param name="splitRects">Split result fragments (default is true). (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of TextRectsResponse</returns>
        ApiResponse<TextRectsResponse> GetTextWithHttpInfo (string name, double? LLX, double? LLY, double? URX, double? URY, List<string> format = null, string regex = null, bool? splitRects = null, string folder = null, string storage = null);
        /// <summary>
        /// Read document page text annotation by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>TextAnnotationResponse</returns>
        TextAnnotationResponse GetTextAnnotation (string name, string annotationId, string storage = null, string folder = null);

        /// <summary>
        /// Read document page text annotation by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of TextAnnotationResponse</returns>
        ApiResponse<TextAnnotationResponse> GetTextAnnotationWithHttpInfo (string name, string annotationId, string storage = null, string folder = null);
        /// <summary>
        /// Verify signature document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="signName">Sign name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SignatureVerifyResponse</returns>
        SignatureVerifyResponse GetVerifySignature (string name, string signName, string storage = null, string folder = null);

        /// <summary>
        /// Verify signature document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="signName">Sign name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SignatureVerifyResponse</returns>
        ApiResponse<SignatureVerifyResponse> GetVerifySignatureWithHttpInfo (string name, string signName, string storage = null, string folder = null);
        /// <summary>
        /// Convert web page to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">Source url</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetWebInStorageToPdf (string url, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string storage = null);

        /// <summary>
        /// Convert web page to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">Source url</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetWebInStorageToPdfWithHttpInfo (string url, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string storage = null);
        /// <summary>
        /// Get number of words per document page.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>WordCountResponse</returns>
        WordCountResponse GetWordsPerPage (string name, string storage = null, string folder = null);

        /// <summary>
        /// Get number of words per document page.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of WordCountResponse</returns>
        ApiResponse<WordCountResponse> GetWordsPerPageWithHttpInfo (string name, string storage = null, string folder = null);
        /// <summary>
        /// Converts PDF document which contatins XFA form (located on storage) to PDF with AcroForm and returns resulting file response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetXfaPdfInStorageToAcroForm (string name, string folder = null, string storage = null);

        /// <summary>
        /// Converts PDF document which contatins XFA form (located on storage) to PDF with AcroForm and returns resulting file response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetXfaPdfInStorageToAcroFormWithHttpInfo (string name, string folder = null, string storage = null);
        /// <summary>
        /// Convert XML file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xml)</param>
        /// <param name="xslFilePath">Full XSL source filename (ex. /folder1/folder2/template.xsl) (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetXmlInStorageToPdf (string srcPath, string xslFilePath = null, string storage = null);

        /// <summary>
        /// Convert XML file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xml)</param>
        /// <param name="xslFilePath">Full XSL source filename (ex. /folder1/folder2/template.xsl) (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetXmlInStorageToPdfWithHttpInfo (string srcPath, string xslFilePath = null, string storage = null);
        /// <summary>
        /// Convert XPS file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xps)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetXpsInStorageToPdf (string srcPath, string storage = null);

        /// <summary>
        /// Convert XPS file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xps)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetXpsInStorageToPdfWithHttpInfo (string srcPath, string storage = null);
        /// <summary>
        /// Convert XslFo file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xslfo)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetXslFoInStorageToPdf (string srcPath, string storage = null);

        /// <summary>
        /// Convert XslFo file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xslfo)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetXslFoInStorageToPdfWithHttpInfo (string srcPath, string storage = null);
        /// <summary>
        /// Append document to existing one.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The original document name.</param>
        /// <param name="appendDocument">with the append document data. (optional)</param>
        /// <param name="appendFile">Append file server path. (optional)</param>
        /// <param name="startPage">Appending start page. (optional, default to 0)</param>
        /// <param name="endPage">Appending end page. (optional, default to 0)</param>
        /// <param name="storage">The documents storage. (optional)</param>
        /// <param name="folder">The original document folder. (optional)</param>
        /// <returns>DocumentResponse</returns>
        DocumentResponse PostAppendDocument (string name, AppendDocument appendDocument = null, string appendFile = null, int? startPage = null, int? endPage = null, string storage = null, string folder = null);

        /// <summary>
        /// Append document to existing one.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The original document name.</param>
        /// <param name="appendDocument">with the append document data. (optional)</param>
        /// <param name="appendFile">Append file server path. (optional)</param>
        /// <param name="startPage">Appending start page. (optional, default to 0)</param>
        /// <param name="endPage">Appending end page. (optional, default to 0)</param>
        /// <param name="storage">The documents storage. (optional)</param>
        /// <param name="folder">The original document folder. (optional)</param>
        /// <returns>ApiResponse of DocumentResponse</returns>
        ApiResponse<DocumentResponse> PostAppendDocumentWithHttpInfo (string name, AppendDocument appendDocument = null, string appendFile = null, int? startPage = null, int? endPage = null, string storage = null, string folder = null);
        /// <summary>
        /// Create field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="page">Document page number.</param>
        /// <param name="field">with the field data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PostCreateField (string name, int? page, Field field = null, string storage = null, string folder = null);

        /// <summary>
        /// Create field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="page">Document page number.</param>
        /// <param name="field">with the field data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PostCreateFieldWithHttpInfo (string name, int? page, Field field = null, string storage = null, string folder = null);
        /// <summary>
        /// Document&#39;s replace text method.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="textReplace"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>TextReplaceResponse</returns>
        TextReplaceResponse PostDocumentTextReplace (string name, TextReplaceListRequest textReplace, string storage = null, string folder = null);

        /// <summary>
        /// Document&#39;s replace text method.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="textReplace"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of TextReplaceResponse</returns>
        ApiResponse<TextReplaceResponse> PostDocumentTextReplaceWithHttpInfo (string name, TextReplaceListRequest textReplace, string storage = null, string folder = null);
        /// <summary>
        /// Insert image to document page.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="llx">Coordinate lower left X.</param>
        /// <param name="lly">Coordinate lower left Y.</param>
        /// <param name="urx">Coordinate upper right X.</param>
        /// <param name="ury">Coordinate upper right Y.</param>
        /// <param name="imageFilePath">Path to image file if specified. Request content is used otherwise. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="image">Image file. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PostInsertImage (string name, int? pageNumber, double? llx, double? lly, double? urx, double? ury, string imageFilePath = null, string storage = null, string folder = null, System.IO.Stream image = null);

        /// <summary>
        /// Insert image to document page.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="llx">Coordinate lower left X.</param>
        /// <param name="lly">Coordinate lower left Y.</param>
        /// <param name="urx">Coordinate upper right X.</param>
        /// <param name="ury">Coordinate upper right Y.</param>
        /// <param name="imageFilePath">Path to image file if specified. Request content is used otherwise. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="image">Image file. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PostInsertImageWithHttpInfo (string name, int? pageNumber, double? llx, double? lly, double? urx, double? ury, string imageFilePath = null, string storage = null, string folder = null, System.IO.Stream image = null);
        /// <summary>
        /// Move page to new position.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="newIndex">The new page position/index.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PostMovePage (string name, int? pageNumber, int? newIndex, string storage = null, string folder = null);

        /// <summary>
        /// Move page to new position.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="newIndex">The new page position/index.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PostMovePageWithHttpInfo (string name, int? pageNumber, int? newIndex, string storage = null, string folder = null);
        /// <summary>
        /// Optimize document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="options">The optimization options. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PostOptimizeDocument (string name, OptimizeOptions options = null, string storage = null, string folder = null);

        /// <summary>
        /// Optimize document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="options">The optimization options. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PostOptimizeDocumentWithHttpInfo (string name, OptimizeOptions options = null, string storage = null, string folder = null);
        /// <summary>
        /// Add document page circle annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotations">The array of annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PostPageCircleAnnotations (string name, int? pageNumber, List<CircleAnnotation> annotations, string storage = null, string folder = null);

        /// <summary>
        /// Add document page circle annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotations">The array of annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PostPageCircleAnnotationsWithHttpInfo (string name, int? pageNumber, List<CircleAnnotation> annotations, string storage = null, string folder = null);
        /// <summary>
        /// Add document page free text annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotations">The array of annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PostPageFreeTextAnnotations (string name, int? pageNumber, List<FreeTextAnnotation> annotations, string storage = null, string folder = null);

        /// <summary>
        /// Add document page free text annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotations">The array of annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PostPageFreeTextAnnotationsWithHttpInfo (string name, int? pageNumber, List<FreeTextAnnotation> annotations, string storage = null, string folder = null);
        /// <summary>
        /// Add document page line annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotations">The array of annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PostPageLineAnnotations (string name, int? pageNumber, List<LineAnnotation> annotations, string storage = null, string folder = null);

        /// <summary>
        /// Add document page line annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotations">The array of annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PostPageLineAnnotationsWithHttpInfo (string name, int? pageNumber, List<LineAnnotation> annotations, string storage = null, string folder = null);
        /// <summary>
        /// Add document page link annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="links">Array of link anotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PostPageLinkAnnotations (string name, int? pageNumber, List<LinkAnnotation> links, string storage = null, string folder = null);

        /// <summary>
        /// Add document page link annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="links">Array of link anotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PostPageLinkAnnotationsWithHttpInfo (string name, int? pageNumber, List<LinkAnnotation> links, string storage = null, string folder = null);
        /// <summary>
        /// Add document page polyline annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotations">The array of annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PostPagePolyLineAnnotations (string name, int? pageNumber, List<PolyLineAnnotation> annotations, string storage = null, string folder = null);

        /// <summary>
        /// Add document page polyline annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotations">The array of annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PostPagePolyLineAnnotationsWithHttpInfo (string name, int? pageNumber, List<PolyLineAnnotation> annotations, string storage = null, string folder = null);
        /// <summary>
        /// Add document page polygon annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotations">The array of annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PostPagePolygonAnnotations (string name, int? pageNumber, List<PolygonAnnotation> annotations, string storage = null, string folder = null);

        /// <summary>
        /// Add document page polygon annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotations">The array of annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PostPagePolygonAnnotationsWithHttpInfo (string name, int? pageNumber, List<PolygonAnnotation> annotations, string storage = null, string folder = null);
        /// <summary>
        /// Add document page square annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotations">The array of annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PostPageSquareAnnotations (string name, int? pageNumber, List<SquareAnnotation> annotations, string storage = null, string folder = null);

        /// <summary>
        /// Add document page square annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotations">The array of annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PostPageSquareAnnotationsWithHttpInfo (string name, int? pageNumber, List<SquareAnnotation> annotations, string storage = null, string folder = null);
        /// <summary>
        /// Add document page text annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotations">The array of annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PostPageTextAnnotations (string name, int? pageNumber, List<TextAnnotation> annotations, string storage = null, string folder = null);

        /// <summary>
        /// Add document page text annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotations">The array of annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PostPageTextAnnotationsWithHttpInfo (string name, int? pageNumber, List<TextAnnotation> annotations, string storage = null, string folder = null);
        /// <summary>
        /// Page&#39;s replace text method.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="textReplaceListRequest"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>TextReplaceResponse</returns>
        TextReplaceResponse PostPageTextReplace (string name, int? pageNumber, TextReplaceListRequest textReplaceListRequest, string storage = null, string folder = null);

        /// <summary>
        /// Page&#39;s replace text method.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="textReplaceListRequest"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of TextReplaceResponse</returns>
        ApiResponse<TextReplaceResponse> PostPageTextReplaceWithHttpInfo (string name, int? pageNumber, TextReplaceListRequest textReplaceListRequest, string storage = null, string folder = null);
        /// <summary>
        /// Sign document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="signature">Signature object containing signature data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PostSignDocument (string name, Signature signature = null, string storage = null, string folder = null);

        /// <summary>
        /// Sign document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="signature">Signature object containing signature data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PostSignDocumentWithHttpInfo (string name, Signature signature = null, string storage = null, string folder = null);
        /// <summary>
        /// Sign page.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="signature">Signature object containing signature data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PostSignPage (string name, int? pageNumber, Signature signature = null, string storage = null, string folder = null);

        /// <summary>
        /// Sign page.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="signature">Signature object containing signature data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PostSignPageWithHttpInfo (string name, int? pageNumber, Signature signature = null, string storage = null, string folder = null);
        /// <summary>
        /// Split document to parts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="format">Resulting documents format. (optional)</param>
        /// <param name="from">Start page if defined. (optional)</param>
        /// <param name="to">End page if defined. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SplitResultResponse</returns>
        SplitResultResponse PostSplitDocument (string name, string format = null, int? from = null, int? to = null, string storage = null, string folder = null);

        /// <summary>
        /// Split document to parts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="format">Resulting documents format. (optional)</param>
        /// <param name="from">Start page if defined. (optional)</param>
        /// <param name="to">End page if defined. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SplitResultResponse</returns>
        ApiResponse<SplitResultResponse> PostSplitDocumentWithHttpInfo (string name, string format = null, int? from = null, int? to = null, string storage = null, string folder = null);
        /// <summary>
        /// Add new page to end of the document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>DocumentPagesResponse</returns>
        DocumentPagesResponse PutAddNewPage (string name, string storage = null, string folder = null);

        /// <summary>
        /// Add new page to end of the document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of DocumentPagesResponse</returns>
        ApiResponse<DocumentPagesResponse> PutAddNewPageWithHttpInfo (string name, string storage = null, string folder = null);
        /// <summary>
        /// Add text to PDF document page.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">Number of page (starting from 1).</param>
        /// <param name="paragraph">Paragraph data. (optional)</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PutAddText (string name, int? pageNumber, Paragraph paragraph = null, string folder = null, string storage = null);

        /// <summary>
        /// Add text to PDF document page.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">Number of page (starting from 1).</param>
        /// <param name="paragraph">Paragraph data. (optional)</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PutAddTextWithHttpInfo (string name, int? pageNumber, Paragraph paragraph = null, string folder = null, string storage = null);
        /// <summary>
        /// Replace document circle annotation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="annotation">Annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>CircleAnnotationResponse</returns>
        CircleAnnotationResponse PutCircleAnnotation (string name, string annotationId, CircleAnnotation annotation, string storage = null, string folder = null);

        /// <summary>
        /// Replace document circle annotation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="annotation">Annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of CircleAnnotationResponse</returns>
        ApiResponse<CircleAnnotationResponse> PutCircleAnnotationWithHttpInfo (string name, string annotationId, CircleAnnotation annotation, string storage = null, string folder = null);
        /// <summary>
        /// Upload a specific file 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext</param>
        /// <param name="file">File to upload</param>
        /// <param name="versionId">Source file&#39;s version (optional)</param>
        /// <param name="storage">User&#39;s storage name (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PutCreate (string path, System.IO.Stream file, string versionId = null, string storage = null);

        /// <summary>
        /// Upload a specific file 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext</param>
        /// <param name="file">File to upload</param>
        /// <param name="versionId">Source file&#39;s version (optional)</param>
        /// <param name="storage">User&#39;s storage name (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PutCreateWithHttpInfo (string path, System.IO.Stream file, string versionId = null, string storage = null);
        /// <summary>
        /// Create empty document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The new document folder. (optional)</param>
        /// <returns>DocumentResponse</returns>
        DocumentResponse PutCreateDocument (string name, string storage = null, string folder = null);

        /// <summary>
        /// Create empty document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The new document folder. (optional)</param>
        /// <returns>ApiResponse of DocumentResponse</returns>
        ApiResponse<DocumentResponse> PutCreateDocumentWithHttpInfo (string name, string storage = null, string folder = null);
        /// <summary>
        /// Convert EPUB file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.epub)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PutEpubInStorageToPdf (string name, string srcPath, string storage = null, string dstFolder = null);

        /// <summary>
        /// Convert EPUB file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.epub)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PutEpubInStorageToPdfWithHttpInfo (string name, string srcPath, string storage = null, string dstFolder = null);
        /// <summary>
        /// Flatten form fields in document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PutFieldsFlatten (string name, string storage = null, string folder = null);

        /// <summary>
        /// Flatten form fields in document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PutFieldsFlattenWithHttpInfo (string name, string storage = null, string folder = null);
        /// <summary>
        /// Replace document free text annotation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="annotation">Annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>FreeTextAnnotationResponse</returns>
        FreeTextAnnotationResponse PutFreeTextAnnotation (string name, string annotationId, FreeTextAnnotation annotation, string storage = null, string folder = null);

        /// <summary>
        /// Replace document free text annotation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="annotation">Annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of FreeTextAnnotationResponse</returns>
        ApiResponse<FreeTextAnnotationResponse> PutFreeTextAnnotationWithHttpInfo (string name, string annotationId, FreeTextAnnotation annotation, string storage = null, string folder = null);
        /// <summary>
        /// Convert HTML file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.zip)</param>
        /// <param name="htmlFileName">Name of HTML file in ZIP.</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PutHtmlInStorageToPdf (string name, string srcPath, string htmlFileName, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string dstFolder = null, string storage = null);

        /// <summary>
        /// Convert HTML file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.zip)</param>
        /// <param name="htmlFileName">Name of HTML file in ZIP.</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PutHtmlInStorageToPdfWithHttpInfo (string name, string srcPath, string htmlFileName, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string dstFolder = null, string storage = null);
        /// <summary>
        /// Extract document image in GIF format to folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PutImageExtractAsGif (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null);

        /// <summary>
        /// Extract document image in GIF format to folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PutImageExtractAsGifWithHttpInfo (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null);
        /// <summary>
        /// Extract document image in JPEG format to folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PutImageExtractAsJpeg (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null);

        /// <summary>
        /// Extract document image in JPEG format to folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PutImageExtractAsJpegWithHttpInfo (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null);
        /// <summary>
        /// Extract document image in PNG format to folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PutImageExtractAsPng (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null);

        /// <summary>
        /// Extract document image in PNG format to folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PutImageExtractAsPngWithHttpInfo (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null);
        /// <summary>
        /// Extract document image in TIFF format to folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PutImageExtractAsTiff (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null);

        /// <summary>
        /// Extract document image in TIFF format to folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PutImageExtractAsTiffWithHttpInfo (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null);
        /// <summary>
        /// Convert image file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageTemplates">Image templates</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PutImageInStorageToPdf (string name, ImageTemplatesRequest imageTemplates, string dstFolder = null, string storage = null);

        /// <summary>
        /// Convert image file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageTemplates">Image templates</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PutImageInStorageToPdfWithHttpInfo (string name, ImageTemplatesRequest imageTemplates, string dstFolder = null, string storage = null);
        /// <summary>
        /// Extract document images in GIF format to folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PutImagesExtractAsGif (string name, int? pageNumber, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null);

        /// <summary>
        /// Extract document images in GIF format to folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PutImagesExtractAsGifWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null);
        /// <summary>
        /// Extract document images in JPEG format to folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PutImagesExtractAsJpeg (string name, int? pageNumber, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null);

        /// <summary>
        /// Extract document images in JPEG format to folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PutImagesExtractAsJpegWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null);
        /// <summary>
        /// Extract document images in PNG format to folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PutImagesExtractAsPng (string name, int? pageNumber, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null);

        /// <summary>
        /// Extract document images in PNG format to folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PutImagesExtractAsPngWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null);
        /// <summary>
        /// Extract document images in TIFF format to folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PutImagesExtractAsTiff (string name, int? pageNumber, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null);

        /// <summary>
        /// Extract document images in TIFF format to folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PutImagesExtractAsTiffWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null);
        /// <summary>
        /// Convert LaTeX file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.tex)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PutLaTeXInStorageToPdf (string name, string srcPath, string dstFolder = null, string storage = null);

        /// <summary>
        /// Convert LaTeX file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.tex)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PutLaTeXInStorageToPdfWithHttpInfo (string name, string srcPath, string dstFolder = null, string storage = null);
        /// <summary>
        /// Replace document line annotation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="annotation">Annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>LineAnnotationResponse</returns>
        LineAnnotationResponse PutLineAnnotation (string name, string annotationId, LineAnnotation annotation, string storage = null, string folder = null);

        /// <summary>
        /// Replace document line annotation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="annotation">Annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of LineAnnotationResponse</returns>
        ApiResponse<LineAnnotationResponse> PutLineAnnotationWithHttpInfo (string name, string annotationId, LineAnnotation annotation, string storage = null, string folder = null);
        /// <summary>
        /// Replace document page link annotations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="linkId">The link ID.</param>
        /// <param name="link">Link anotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>LinkAnnotationResponse</returns>
        LinkAnnotationResponse PutLinkAnnotation (string name, string linkId, LinkAnnotation link, string storage = null, string folder = null);

        /// <summary>
        /// Replace document page link annotations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="linkId">The link ID.</param>
        /// <param name="link">Link anotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of LinkAnnotationResponse</returns>
        ApiResponse<LinkAnnotationResponse> PutLinkAnnotationWithHttpInfo (string name, string linkId, LinkAnnotation link, string storage = null, string folder = null);
        /// <summary>
        /// Merge a list of documents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Resulting documen name.</param>
        /// <param name="mergeDocuments">with a list of documents. (optional)</param>
        /// <param name="storage">Resulting document storage. (optional)</param>
        /// <param name="folder">Resulting document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream PutMergeDocuments (string name, MergeDocuments mergeDocuments = null, string storage = null, string folder = null);

        /// <summary>
        /// Merge a list of documents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Resulting documen name.</param>
        /// <param name="mergeDocuments">with a list of documents. (optional)</param>
        /// <param name="storage">Resulting document storage. (optional)</param>
        /// <param name="folder">Resulting document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> PutMergeDocumentsWithHttpInfo (string name, MergeDocuments mergeDocuments = null, string storage = null, string folder = null);
        /// <summary>
        /// Convert MHT file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.mht)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PutMhtInStorageToPdf (string name, string srcPath, string dstFolder = null, string storage = null);

        /// <summary>
        /// Convert MHT file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.mht)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PutMhtInStorageToPdfWithHttpInfo (string name, string srcPath, string dstFolder = null, string storage = null);
        /// <summary>
        /// Add page stamp.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="stamp">with data.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PutPageAddStamp (string name, int? pageNumber, Stamp stamp, string storage = null, string folder = null);

        /// <summary>
        /// Add page stamp.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="stamp">with data.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PutPageAddStampWithHttpInfo (string name, int? pageNumber, Stamp stamp, string storage = null, string folder = null);
        /// <summary>
        /// Convert document page to bmp image and upload resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PutPageConvertToBmp (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null, string storage = null);

        /// <summary>
        /// Convert document page to bmp image and upload resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PutPageConvertToBmpWithHttpInfo (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null, string storage = null);
        /// <summary>
        /// Convert document page to emf image and upload resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PutPageConvertToEmf (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null, string storage = null);

        /// <summary>
        /// Convert document page to emf image and upload resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PutPageConvertToEmfWithHttpInfo (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null, string storage = null);
        /// <summary>
        /// Convert document page to gif image and upload resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PutPageConvertToGif (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null, string storage = null);

        /// <summary>
        /// Convert document page to gif image and upload resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PutPageConvertToGifWithHttpInfo (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null, string storage = null);
        /// <summary>
        /// Convert document page to Jpeg image and upload resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PutPageConvertToJpeg (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null, string storage = null);

        /// <summary>
        /// Convert document page to Jpeg image and upload resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PutPageConvertToJpegWithHttpInfo (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null, string storage = null);
        /// <summary>
        /// Convert document page to png image and upload resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PutPageConvertToPng (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null, string storage = null);

        /// <summary>
        /// Convert document page to png image and upload resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PutPageConvertToPngWithHttpInfo (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null, string storage = null);
        /// <summary>
        /// Convert document page to Tiff image and upload resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PutPageConvertToTiff (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null, string storage = null);

        /// <summary>
        /// Convert document page to Tiff image and upload resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PutPageConvertToTiffWithHttpInfo (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null, string storage = null);
        /// <summary>
        /// Convert PCL file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.pcl)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PutPclInStorageToPdf (string name, string srcPath, string dstFolder = null, string storage = null);

        /// <summary>
        /// Convert PCL file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.pcl)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PutPclInStorageToPdfWithHttpInfo (string name, string srcPath, string dstFolder = null, string storage = null);
        /// <summary>
        /// Converts PDF document (in request content) to DOC format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.doc)</param>
        /// <param name="addReturnToLineEnd">Add return to line end. (optional)</param>
        /// <param name="format">Allows to specify .doc or .docx file format. (optional)</param>
        /// <param name="imageResolutionX">Image resolution X. (optional)</param>
        /// <param name="imageResolutionY">Image resolution Y. (optional)</param>
        /// <param name="maxDistanceBetweenTextLines">Max distance between text lines. (optional)</param>
        /// <param name="mode">Allows to control how a PDF document is converted into a word processing document. (optional)</param>
        /// <param name="recognizeBullets">Recognize bullets. (optional)</param>
        /// <param name="relativeHorizontalProximity">Relative horizontal proximity. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PutPdfInRequestToDoc (string outPath, bool? addReturnToLineEnd = null, string format = null, int? imageResolutionX = null, int? imageResolutionY = null, double? maxDistanceBetweenTextLines = null, string mode = null, bool? recognizeBullets = null, double? relativeHorizontalProximity = null, string storage = null, System.IO.Stream file = null);

        /// <summary>
        /// Converts PDF document (in request content) to DOC format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.doc)</param>
        /// <param name="addReturnToLineEnd">Add return to line end. (optional)</param>
        /// <param name="format">Allows to specify .doc or .docx file format. (optional)</param>
        /// <param name="imageResolutionX">Image resolution X. (optional)</param>
        /// <param name="imageResolutionY">Image resolution Y. (optional)</param>
        /// <param name="maxDistanceBetweenTextLines">Max distance between text lines. (optional)</param>
        /// <param name="mode">Allows to control how a PDF document is converted into a word processing document. (optional)</param>
        /// <param name="recognizeBullets">Recognize bullets. (optional)</param>
        /// <param name="relativeHorizontalProximity">Relative horizontal proximity. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PutPdfInRequestToDocWithHttpInfo (string outPath, bool? addReturnToLineEnd = null, string format = null, int? imageResolutionX = null, int? imageResolutionY = null, double? maxDistanceBetweenTextLines = null, string mode = null, bool? recognizeBullets = null, double? relativeHorizontalProximity = null, string storage = null, System.IO.Stream file = null);
        /// <summary>
        /// Converts PDF document (in request content) to EPUB format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.epub)</param>
        /// <param name="contentRecognitionMode">?roperty tunes conversion for this or that desirable method of recognition of content. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PutPdfInRequestToEpub (string outPath, string contentRecognitionMode = null, string storage = null, System.IO.Stream file = null);

        /// <summary>
        /// Converts PDF document (in request content) to EPUB format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.epub)</param>
        /// <param name="contentRecognitionMode">?roperty tunes conversion for this or that desirable method of recognition of content. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PutPdfInRequestToEpubWithHttpInfo (string outPath, string contentRecognitionMode = null, string storage = null, System.IO.Stream file = null);
        /// <summary>
        /// Converts PDF document (in request content) to Html format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.html)</param>
        /// <param name="additionalMarginWidthInPoints">Defines width of margin that will be forcibly left around that output HTML-areas. (optional)</param>
        /// <param name="compressSvgGraphicsIfAny">The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)</param>
        /// <param name="convertMarkedContentToLayers">If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)</param>
        /// <param name="defaultFontName">Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)</param>
        /// <param name="documentType">Result document type. (optional)</param>
        /// <param name="fixedLayout">The value indicating whether that HTML is created as fixed layout. (optional)</param>
        /// <param name="imageResolution">Resolution for image rendering. (optional)</param>
        /// <param name="minimalLineWidth">This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)</param>
        /// <param name="preventGlyphsGrouping">This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)</param>
        /// <param name="splitCssIntoPages">When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)</param>
        /// <param name="splitIntoPages">The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)</param>
        /// <param name="useZOrder">If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)</param>
        /// <param name="antialiasingProcessing">The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)</param>
        /// <param name="cssClassNamesPrefix">When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)</param>
        /// <param name="explicitListOfSavedPages">With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)</param>
        /// <param name="fontEncodingStrategy">Defines encoding special rule to tune PDF decoding for current document. (optional)</param>
        /// <param name="fontSavingMode">Defines font saving mode that will be used during saving of PDF to desirable format. (optional)</param>
        /// <param name="htmlMarkupGenerationMode">Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)</param>
        /// <param name="lettersPositioningMethod">The mode of positioning of letters in words in result HTML. (optional)</param>
        /// <param name="pagesFlowTypeDependsOnViewersScreenSize">If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)</param>
        /// <param name="partsEmbeddingMode">It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)</param>
        /// <param name="rasterImagesSavingMode">Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)</param>
        /// <param name="removeEmptyAreasOnTopAndBottom">Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)</param>
        /// <param name="saveShadowedTextsAsTransparentTexts">Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)</param>
        /// <param name="saveTransparentTexts">Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)</param>
        /// <param name="specialFolderForAllImages">The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="specialFolderForSvgImages">The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="trySaveTextUnderliningAndStrikeoutingInCss">PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PutPdfInRequestToHtml (string outPath, int? additionalMarginWidthInPoints = null, bool? compressSvgGraphicsIfAny = null, bool? convertMarkedContentToLayers = null, string defaultFontName = null, string documentType = null, bool? fixedLayout = null, int? imageResolution = null, int? minimalLineWidth = null, bool? preventGlyphsGrouping = null, bool? splitCssIntoPages = null, bool? splitIntoPages = null, bool? useZOrder = null, string antialiasingProcessing = null, string cssClassNamesPrefix = null, List<int?> explicitListOfSavedPages = null, string fontEncodingStrategy = null, string fontSavingMode = null, string htmlMarkupGenerationMode = null, string lettersPositioningMethod = null, bool? pagesFlowTypeDependsOnViewersScreenSize = null, string partsEmbeddingMode = null, string rasterImagesSavingMode = null, bool? removeEmptyAreasOnTopAndBottom = null, bool? saveShadowedTextsAsTransparentTexts = null, bool? saveTransparentTexts = null, string specialFolderForAllImages = null, string specialFolderForSvgImages = null, bool? trySaveTextUnderliningAndStrikeoutingInCss = null, string storage = null, System.IO.Stream file = null);

        /// <summary>
        /// Converts PDF document (in request content) to Html format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.html)</param>
        /// <param name="additionalMarginWidthInPoints">Defines width of margin that will be forcibly left around that output HTML-areas. (optional)</param>
        /// <param name="compressSvgGraphicsIfAny">The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)</param>
        /// <param name="convertMarkedContentToLayers">If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)</param>
        /// <param name="defaultFontName">Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)</param>
        /// <param name="documentType">Result document type. (optional)</param>
        /// <param name="fixedLayout">The value indicating whether that HTML is created as fixed layout. (optional)</param>
        /// <param name="imageResolution">Resolution for image rendering. (optional)</param>
        /// <param name="minimalLineWidth">This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)</param>
        /// <param name="preventGlyphsGrouping">This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)</param>
        /// <param name="splitCssIntoPages">When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)</param>
        /// <param name="splitIntoPages">The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)</param>
        /// <param name="useZOrder">If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)</param>
        /// <param name="antialiasingProcessing">The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)</param>
        /// <param name="cssClassNamesPrefix">When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)</param>
        /// <param name="explicitListOfSavedPages">With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)</param>
        /// <param name="fontEncodingStrategy">Defines encoding special rule to tune PDF decoding for current document. (optional)</param>
        /// <param name="fontSavingMode">Defines font saving mode that will be used during saving of PDF to desirable format. (optional)</param>
        /// <param name="htmlMarkupGenerationMode">Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)</param>
        /// <param name="lettersPositioningMethod">The mode of positioning of letters in words in result HTML. (optional)</param>
        /// <param name="pagesFlowTypeDependsOnViewersScreenSize">If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)</param>
        /// <param name="partsEmbeddingMode">It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)</param>
        /// <param name="rasterImagesSavingMode">Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)</param>
        /// <param name="removeEmptyAreasOnTopAndBottom">Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)</param>
        /// <param name="saveShadowedTextsAsTransparentTexts">Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)</param>
        /// <param name="saveTransparentTexts">Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)</param>
        /// <param name="specialFolderForAllImages">The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="specialFolderForSvgImages">The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="trySaveTextUnderliningAndStrikeoutingInCss">PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PutPdfInRequestToHtmlWithHttpInfo (string outPath, int? additionalMarginWidthInPoints = null, bool? compressSvgGraphicsIfAny = null, bool? convertMarkedContentToLayers = null, string defaultFontName = null, string documentType = null, bool? fixedLayout = null, int? imageResolution = null, int? minimalLineWidth = null, bool? preventGlyphsGrouping = null, bool? splitCssIntoPages = null, bool? splitIntoPages = null, bool? useZOrder = null, string antialiasingProcessing = null, string cssClassNamesPrefix = null, List<int?> explicitListOfSavedPages = null, string fontEncodingStrategy = null, string fontSavingMode = null, string htmlMarkupGenerationMode = null, string lettersPositioningMethod = null, bool? pagesFlowTypeDependsOnViewersScreenSize = null, string partsEmbeddingMode = null, string rasterImagesSavingMode = null, bool? removeEmptyAreasOnTopAndBottom = null, bool? saveShadowedTextsAsTransparentTexts = null, bool? saveTransparentTexts = null, string specialFolderForAllImages = null, string specialFolderForSvgImages = null, bool? trySaveTextUnderliningAndStrikeoutingInCss = null, string storage = null, System.IO.Stream file = null);
        /// <summary>
        /// Converts PDF document (in request content) to LaTeX format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tex)</param>
        /// <param name="pagesCount">Pages count. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PutPdfInRequestToLaTeX (string outPath, int? pagesCount = null, string storage = null, System.IO.Stream file = null);

        /// <summary>
        /// Converts PDF document (in request content) to LaTeX format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tex)</param>
        /// <param name="pagesCount">Pages count. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PutPdfInRequestToLaTeXWithHttpInfo (string outPath, int? pagesCount = null, string storage = null, System.IO.Stream file = null);
        /// <summary>
        /// Converts PDF document (in request content) to MOBIXML format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.mobixml)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PutPdfInRequestToMobiXml (string outPath, string storage = null, System.IO.Stream file = null);

        /// <summary>
        /// Converts PDF document (in request content) to MOBIXML format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.mobixml)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PutPdfInRequestToMobiXmlWithHttpInfo (string outPath, string storage = null, System.IO.Stream file = null);
        /// <summary>
        /// Converts PDF document (in request content) to PdfA format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="type">Type of PdfA format.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PutPdfInRequestToPdfA (string outPath, string type, string storage = null, System.IO.Stream file = null);

        /// <summary>
        /// Converts PDF document (in request content) to PdfA format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="type">Type of PdfA format.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PutPdfInRequestToPdfAWithHttpInfo (string outPath, string type, string storage = null, System.IO.Stream file = null);
        /// <summary>
        /// Converts PDF document (in request content) to PPTX format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pptx)</param>
        /// <param name="separateImages">Separate images. (optional)</param>
        /// <param name="slidesAsImages">Slides as images. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PutPdfInRequestToPptx (string outPath, bool? separateImages = null, bool? slidesAsImages = null, string storage = null, System.IO.Stream file = null);

        /// <summary>
        /// Converts PDF document (in request content) to PPTX format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pptx)</param>
        /// <param name="separateImages">Separate images. (optional)</param>
        /// <param name="slidesAsImages">Slides as images. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PutPdfInRequestToPptxWithHttpInfo (string outPath, bool? separateImages = null, bool? slidesAsImages = null, string storage = null, System.IO.Stream file = null);
        /// <summary>
        /// Converts PDF document (in request content) to SVG format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.svg)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PutPdfInRequestToSvg (string outPath, string storage = null, System.IO.Stream file = null);

        /// <summary>
        /// Converts PDF document (in request content) to SVG format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.svg)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PutPdfInRequestToSvgWithHttpInfo (string outPath, string storage = null, System.IO.Stream file = null);
        /// <summary>
        /// Converts PDF document (in request content) to TIFF format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tiff)</param>
        /// <param name="brightness">Image brightness. (optional)</param>
        /// <param name="compression">Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)</param>
        /// <param name="colorDepth">Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)</param>
        /// <param name="leftMargin">Left image margin. (optional)</param>
        /// <param name="rightMargin">Right image margin. (optional)</param>
        /// <param name="topMargin">Top image margin. (optional)</param>
        /// <param name="bottomMargin">Bottom image margin. (optional)</param>
        /// <param name="orientation">Image orientation. Possible values are: None, Landscape, Portait. (optional)</param>
        /// <param name="skipBlankPages">Skip blank pages flag. (optional)</param>
        /// <param name="width">Image width. (optional)</param>
        /// <param name="height">Image height. (optional)</param>
        /// <param name="xResolution">Horizontal resolution. (optional)</param>
        /// <param name="yResolution">Vertical resolution. (optional)</param>
        /// <param name="pageIndex">Start page to export. (optional)</param>
        /// <param name="pageCount">Number of pages to export. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PutPdfInRequestToTiff (string outPath, double? brightness = null, string compression = null, string colorDepth = null, int? leftMargin = null, int? rightMargin = null, int? topMargin = null, int? bottomMargin = null, string orientation = null, bool? skipBlankPages = null, int? width = null, int? height = null, int? xResolution = null, int? yResolution = null, int? pageIndex = null, int? pageCount = null, string storage = null, System.IO.Stream file = null);

        /// <summary>
        /// Converts PDF document (in request content) to TIFF format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tiff)</param>
        /// <param name="brightness">Image brightness. (optional)</param>
        /// <param name="compression">Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)</param>
        /// <param name="colorDepth">Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)</param>
        /// <param name="leftMargin">Left image margin. (optional)</param>
        /// <param name="rightMargin">Right image margin. (optional)</param>
        /// <param name="topMargin">Top image margin. (optional)</param>
        /// <param name="bottomMargin">Bottom image margin. (optional)</param>
        /// <param name="orientation">Image orientation. Possible values are: None, Landscape, Portait. (optional)</param>
        /// <param name="skipBlankPages">Skip blank pages flag. (optional)</param>
        /// <param name="width">Image width. (optional)</param>
        /// <param name="height">Image height. (optional)</param>
        /// <param name="xResolution">Horizontal resolution. (optional)</param>
        /// <param name="yResolution">Vertical resolution. (optional)</param>
        /// <param name="pageIndex">Start page to export. (optional)</param>
        /// <param name="pageCount">Number of pages to export. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PutPdfInRequestToTiffWithHttpInfo (string outPath, double? brightness = null, string compression = null, string colorDepth = null, int? leftMargin = null, int? rightMargin = null, int? topMargin = null, int? bottomMargin = null, string orientation = null, bool? skipBlankPages = null, int? width = null, int? height = null, int? xResolution = null, int? yResolution = null, int? pageIndex = null, int? pageCount = null, string storage = null, System.IO.Stream file = null);
        /// <summary>
        /// Converts PDF document (in request content) to XLS format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xls)</param>
        /// <param name="insertBlankColumnAtFirst">Insert blank column at first (optional)</param>
        /// <param name="minimizeTheNumberOfWorksheets">Minimize the number of worksheets (optional)</param>
        /// <param name="scaleFactor">Scale factor (optional)</param>
        /// <param name="uniformWorksheets">Uniform worksheets (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PutPdfInRequestToXls (string outPath, bool? insertBlankColumnAtFirst = null, bool? minimizeTheNumberOfWorksheets = null, double? scaleFactor = null, bool? uniformWorksheets = null, string storage = null, System.IO.Stream file = null);

        /// <summary>
        /// Converts PDF document (in request content) to XLS format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xls)</param>
        /// <param name="insertBlankColumnAtFirst">Insert blank column at first (optional)</param>
        /// <param name="minimizeTheNumberOfWorksheets">Minimize the number of worksheets (optional)</param>
        /// <param name="scaleFactor">Scale factor (optional)</param>
        /// <param name="uniformWorksheets">Uniform worksheets (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PutPdfInRequestToXlsWithHttpInfo (string outPath, bool? insertBlankColumnAtFirst = null, bool? minimizeTheNumberOfWorksheets = null, double? scaleFactor = null, bool? uniformWorksheets = null, string storage = null, System.IO.Stream file = null);
        /// <summary>
        /// Converts PDF document (in request content) to XML format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xml)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PutPdfInRequestToXml (string outPath, string storage = null, System.IO.Stream file = null);

        /// <summary>
        /// Converts PDF document (in request content) to XML format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xml)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PutPdfInRequestToXmlWithHttpInfo (string outPath, string storage = null, System.IO.Stream file = null);
        /// <summary>
        /// Converts PDF document (in request content) to XPS format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xps)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PutPdfInRequestToXps (string outPath, string storage = null, System.IO.Stream file = null);

        /// <summary>
        /// Converts PDF document (in request content) to XPS format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xps)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PutPdfInRequestToXpsWithHttpInfo (string outPath, string storage = null, System.IO.Stream file = null);
        /// <summary>
        /// Converts PDF document (located on storage) to DOC format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.doc)</param>
        /// <param name="addReturnToLineEnd">Add return to line end. (optional)</param>
        /// <param name="format">Allows to specify .doc or .docx file format. (optional)</param>
        /// <param name="imageResolutionX">Image resolution X. (optional)</param>
        /// <param name="imageResolutionY">Image resolution Y. (optional)</param>
        /// <param name="maxDistanceBetweenTextLines">Max distance between text lines. (optional)</param>
        /// <param name="mode">Allows to control how a PDF document is converted into a word processing document. (optional)</param>
        /// <param name="recognizeBullets">Recognize bullets. (optional)</param>
        /// <param name="relativeHorizontalProximity">Relative horizontal proximity. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PutPdfInStorageToDoc (string name, string outPath, bool? addReturnToLineEnd = null, string format = null, int? imageResolutionX = null, int? imageResolutionY = null, double? maxDistanceBetweenTextLines = null, string mode = null, bool? recognizeBullets = null, double? relativeHorizontalProximity = null, string folder = null, string storage = null);

        /// <summary>
        /// Converts PDF document (located on storage) to DOC format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.doc)</param>
        /// <param name="addReturnToLineEnd">Add return to line end. (optional)</param>
        /// <param name="format">Allows to specify .doc or .docx file format. (optional)</param>
        /// <param name="imageResolutionX">Image resolution X. (optional)</param>
        /// <param name="imageResolutionY">Image resolution Y. (optional)</param>
        /// <param name="maxDistanceBetweenTextLines">Max distance between text lines. (optional)</param>
        /// <param name="mode">Allows to control how a PDF document is converted into a word processing document. (optional)</param>
        /// <param name="recognizeBullets">Recognize bullets. (optional)</param>
        /// <param name="relativeHorizontalProximity">Relative horizontal proximity. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PutPdfInStorageToDocWithHttpInfo (string name, string outPath, bool? addReturnToLineEnd = null, string format = null, int? imageResolutionX = null, int? imageResolutionY = null, double? maxDistanceBetweenTextLines = null, string mode = null, bool? recognizeBullets = null, double? relativeHorizontalProximity = null, string folder = null, string storage = null);
        /// <summary>
        /// Converts PDF document (located on storage) to EPUB format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.epub)</param>
        /// <param name="contentRecognitionMode">?roperty tunes conversion for this or that desirable method of recognition of content. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PutPdfInStorageToEpub (string name, string outPath, string contentRecognitionMode = null, string folder = null, string storage = null);

        /// <summary>
        /// Converts PDF document (located on storage) to EPUB format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.epub)</param>
        /// <param name="contentRecognitionMode">?roperty tunes conversion for this or that desirable method of recognition of content. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PutPdfInStorageToEpubWithHttpInfo (string name, string outPath, string contentRecognitionMode = null, string folder = null, string storage = null);
        /// <summary>
        /// Converts PDF document (located on storage) to Html format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.html)</param>
        /// <param name="additionalMarginWidthInPoints">Defines width of margin that will be forcibly left around that output HTML-areas. (optional)</param>
        /// <param name="compressSvgGraphicsIfAny">The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)</param>
        /// <param name="convertMarkedContentToLayers">If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)</param>
        /// <param name="defaultFontName">Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)</param>
        /// <param name="documentType">Result document type. (optional)</param>
        /// <param name="fixedLayout">The value indicating whether that HTML is created as fixed layout. (optional)</param>
        /// <param name="imageResolution">Resolution for image rendering. (optional)</param>
        /// <param name="minimalLineWidth">This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)</param>
        /// <param name="preventGlyphsGrouping">This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)</param>
        /// <param name="splitCssIntoPages">When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)</param>
        /// <param name="splitIntoPages">The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)</param>
        /// <param name="useZOrder">If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)</param>
        /// <param name="antialiasingProcessing">The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)</param>
        /// <param name="cssClassNamesPrefix">When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)</param>
        /// <param name="explicitListOfSavedPages">With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)</param>
        /// <param name="fontEncodingStrategy">Defines encoding special rule to tune PDF decoding for current document. (optional)</param>
        /// <param name="fontSavingMode">Defines font saving mode that will be used during saving of PDF to desirable format. (optional)</param>
        /// <param name="htmlMarkupGenerationMode">Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)</param>
        /// <param name="lettersPositioningMethod">The mode of positioning of letters in words in result HTML. (optional)</param>
        /// <param name="pagesFlowTypeDependsOnViewersScreenSize">If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)</param>
        /// <param name="partsEmbeddingMode">It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)</param>
        /// <param name="rasterImagesSavingMode">Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)</param>
        /// <param name="removeEmptyAreasOnTopAndBottom">Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)</param>
        /// <param name="saveShadowedTextsAsTransparentTexts">Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)</param>
        /// <param name="saveTransparentTexts">Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)</param>
        /// <param name="specialFolderForAllImages">The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="specialFolderForSvgImages">The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="trySaveTextUnderliningAndStrikeoutingInCss">PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PutPdfInStorageToHtml (string name, string outPath, int? additionalMarginWidthInPoints = null, bool? compressSvgGraphicsIfAny = null, bool? convertMarkedContentToLayers = null, string defaultFontName = null, string documentType = null, bool? fixedLayout = null, int? imageResolution = null, int? minimalLineWidth = null, bool? preventGlyphsGrouping = null, bool? splitCssIntoPages = null, bool? splitIntoPages = null, bool? useZOrder = null, string antialiasingProcessing = null, string cssClassNamesPrefix = null, List<int?> explicitListOfSavedPages = null, string fontEncodingStrategy = null, string fontSavingMode = null, string htmlMarkupGenerationMode = null, string lettersPositioningMethod = null, bool? pagesFlowTypeDependsOnViewersScreenSize = null, string partsEmbeddingMode = null, string rasterImagesSavingMode = null, bool? removeEmptyAreasOnTopAndBottom = null, bool? saveShadowedTextsAsTransparentTexts = null, bool? saveTransparentTexts = null, string specialFolderForAllImages = null, string specialFolderForSvgImages = null, bool? trySaveTextUnderliningAndStrikeoutingInCss = null, string folder = null, string storage = null);

        /// <summary>
        /// Converts PDF document (located on storage) to Html format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.html)</param>
        /// <param name="additionalMarginWidthInPoints">Defines width of margin that will be forcibly left around that output HTML-areas. (optional)</param>
        /// <param name="compressSvgGraphicsIfAny">The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)</param>
        /// <param name="convertMarkedContentToLayers">If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)</param>
        /// <param name="defaultFontName">Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)</param>
        /// <param name="documentType">Result document type. (optional)</param>
        /// <param name="fixedLayout">The value indicating whether that HTML is created as fixed layout. (optional)</param>
        /// <param name="imageResolution">Resolution for image rendering. (optional)</param>
        /// <param name="minimalLineWidth">This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)</param>
        /// <param name="preventGlyphsGrouping">This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)</param>
        /// <param name="splitCssIntoPages">When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)</param>
        /// <param name="splitIntoPages">The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)</param>
        /// <param name="useZOrder">If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)</param>
        /// <param name="antialiasingProcessing">The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)</param>
        /// <param name="cssClassNamesPrefix">When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)</param>
        /// <param name="explicitListOfSavedPages">With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)</param>
        /// <param name="fontEncodingStrategy">Defines encoding special rule to tune PDF decoding for current document. (optional)</param>
        /// <param name="fontSavingMode">Defines font saving mode that will be used during saving of PDF to desirable format. (optional)</param>
        /// <param name="htmlMarkupGenerationMode">Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)</param>
        /// <param name="lettersPositioningMethod">The mode of positioning of letters in words in result HTML. (optional)</param>
        /// <param name="pagesFlowTypeDependsOnViewersScreenSize">If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)</param>
        /// <param name="partsEmbeddingMode">It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)</param>
        /// <param name="rasterImagesSavingMode">Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)</param>
        /// <param name="removeEmptyAreasOnTopAndBottom">Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)</param>
        /// <param name="saveShadowedTextsAsTransparentTexts">Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)</param>
        /// <param name="saveTransparentTexts">Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)</param>
        /// <param name="specialFolderForAllImages">The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="specialFolderForSvgImages">The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="trySaveTextUnderliningAndStrikeoutingInCss">PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PutPdfInStorageToHtmlWithHttpInfo (string name, string outPath, int? additionalMarginWidthInPoints = null, bool? compressSvgGraphicsIfAny = null, bool? convertMarkedContentToLayers = null, string defaultFontName = null, string documentType = null, bool? fixedLayout = null, int? imageResolution = null, int? minimalLineWidth = null, bool? preventGlyphsGrouping = null, bool? splitCssIntoPages = null, bool? splitIntoPages = null, bool? useZOrder = null, string antialiasingProcessing = null, string cssClassNamesPrefix = null, List<int?> explicitListOfSavedPages = null, string fontEncodingStrategy = null, string fontSavingMode = null, string htmlMarkupGenerationMode = null, string lettersPositioningMethod = null, bool? pagesFlowTypeDependsOnViewersScreenSize = null, string partsEmbeddingMode = null, string rasterImagesSavingMode = null, bool? removeEmptyAreasOnTopAndBottom = null, bool? saveShadowedTextsAsTransparentTexts = null, bool? saveTransparentTexts = null, string specialFolderForAllImages = null, string specialFolderForSvgImages = null, bool? trySaveTextUnderliningAndStrikeoutingInCss = null, string folder = null, string storage = null);
        /// <summary>
        /// Converts PDF document (located on storage) to LaTeX format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tex)</param>
        /// <param name="pagesCount">Pages count. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PutPdfInStorageToLaTeX (string name, string outPath, int? pagesCount = null, string folder = null, string storage = null);

        /// <summary>
        /// Converts PDF document (located on storage) to LaTeX format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tex)</param>
        /// <param name="pagesCount">Pages count. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PutPdfInStorageToLaTeXWithHttpInfo (string name, string outPath, int? pagesCount = null, string folder = null, string storage = null);
        /// <summary>
        /// Converts PDF document (located on storage) to MOBIXML format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.mobixml)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PutPdfInStorageToMobiXml (string name, string outPath, string folder = null, string storage = null);

        /// <summary>
        /// Converts PDF document (located on storage) to MOBIXML format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.mobixml)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PutPdfInStorageToMobiXmlWithHttpInfo (string name, string outPath, string folder = null, string storage = null);
        /// <summary>
        /// Converts PDF document (located on storage) to PdfA format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="type">Type of PdfA format.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PutPdfInStorageToPdfA (string name, string outPath, string type, string folder = null, string storage = null);

        /// <summary>
        /// Converts PDF document (located on storage) to PdfA format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="type">Type of PdfA format.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PutPdfInStorageToPdfAWithHttpInfo (string name, string outPath, string type, string folder = null, string storage = null);
        /// <summary>
        /// Converts PDF document (located on storage) to PPTX format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pptx)</param>
        /// <param name="separateImages">Separate images. (optional)</param>
        /// <param name="slidesAsImages">Slides as images. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PutPdfInStorageToPptx (string name, string outPath, bool? separateImages = null, bool? slidesAsImages = null, string folder = null, string storage = null);

        /// <summary>
        /// Converts PDF document (located on storage) to PPTX format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pptx)</param>
        /// <param name="separateImages">Separate images. (optional)</param>
        /// <param name="slidesAsImages">Slides as images. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PutPdfInStorageToPptxWithHttpInfo (string name, string outPath, bool? separateImages = null, bool? slidesAsImages = null, string folder = null, string storage = null);
        /// <summary>
        /// Converts PDF document (located on storage) to SVG format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.svg)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PutPdfInStorageToSvg (string name, string outPath, string folder = null, string storage = null);

        /// <summary>
        /// Converts PDF document (located on storage) to SVG format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.svg)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PutPdfInStorageToSvgWithHttpInfo (string name, string outPath, string folder = null, string storage = null);
        /// <summary>
        /// Converts PDF document (located on storage) to TIFF format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tiff)</param>
        /// <param name="brightness">Image brightness. (optional)</param>
        /// <param name="compression">Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)</param>
        /// <param name="colorDepth">Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)</param>
        /// <param name="leftMargin">Left image margin. (optional)</param>
        /// <param name="rightMargin">Right image margin. (optional)</param>
        /// <param name="topMargin">Top image margin. (optional)</param>
        /// <param name="bottomMargin">Bottom image margin. (optional)</param>
        /// <param name="orientation">Image orientation. Possible values are: None, Landscape, Portait. (optional)</param>
        /// <param name="skipBlankPages">Skip blank pages flag. (optional)</param>
        /// <param name="width">Image width. (optional)</param>
        /// <param name="height">Image height. (optional)</param>
        /// <param name="xResolution">Horizontal resolution. (optional)</param>
        /// <param name="yResolution">Vertical resolution. (optional)</param>
        /// <param name="pageIndex">Start page to export. (optional)</param>
        /// <param name="pageCount">Number of pages to export. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PutPdfInStorageToTiff (string name, string outPath, double? brightness = null, string compression = null, string colorDepth = null, int? leftMargin = null, int? rightMargin = null, int? topMargin = null, int? bottomMargin = null, string orientation = null, bool? skipBlankPages = null, int? width = null, int? height = null, int? xResolution = null, int? yResolution = null, int? pageIndex = null, int? pageCount = null, string folder = null, string storage = null);

        /// <summary>
        /// Converts PDF document (located on storage) to TIFF format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tiff)</param>
        /// <param name="brightness">Image brightness. (optional)</param>
        /// <param name="compression">Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)</param>
        /// <param name="colorDepth">Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)</param>
        /// <param name="leftMargin">Left image margin. (optional)</param>
        /// <param name="rightMargin">Right image margin. (optional)</param>
        /// <param name="topMargin">Top image margin. (optional)</param>
        /// <param name="bottomMargin">Bottom image margin. (optional)</param>
        /// <param name="orientation">Image orientation. Possible values are: None, Landscape, Portait. (optional)</param>
        /// <param name="skipBlankPages">Skip blank pages flag. (optional)</param>
        /// <param name="width">Image width. (optional)</param>
        /// <param name="height">Image height. (optional)</param>
        /// <param name="xResolution">Horizontal resolution. (optional)</param>
        /// <param name="yResolution">Vertical resolution. (optional)</param>
        /// <param name="pageIndex">Start page to export. (optional)</param>
        /// <param name="pageCount">Number of pages to export. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PutPdfInStorageToTiffWithHttpInfo (string name, string outPath, double? brightness = null, string compression = null, string colorDepth = null, int? leftMargin = null, int? rightMargin = null, int? topMargin = null, int? bottomMargin = null, string orientation = null, bool? skipBlankPages = null, int? width = null, int? height = null, int? xResolution = null, int? yResolution = null, int? pageIndex = null, int? pageCount = null, string folder = null, string storage = null);
        /// <summary>
        /// Converts PDF document (located on storage) to XLS format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xls)</param>
        /// <param name="insertBlankColumnAtFirst">Insert blank column at first (optional)</param>
        /// <param name="minimizeTheNumberOfWorksheets">Minimize the number of worksheets (optional)</param>
        /// <param name="scaleFactor">Scale factor (optional)</param>
        /// <param name="uniformWorksheets">Uniform worksheets (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PutPdfInStorageToXls (string name, string outPath, bool? insertBlankColumnAtFirst = null, bool? minimizeTheNumberOfWorksheets = null, double? scaleFactor = null, bool? uniformWorksheets = null, string folder = null, string storage = null);

        /// <summary>
        /// Converts PDF document (located on storage) to XLS format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xls)</param>
        /// <param name="insertBlankColumnAtFirst">Insert blank column at first (optional)</param>
        /// <param name="minimizeTheNumberOfWorksheets">Minimize the number of worksheets (optional)</param>
        /// <param name="scaleFactor">Scale factor (optional)</param>
        /// <param name="uniformWorksheets">Uniform worksheets (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PutPdfInStorageToXlsWithHttpInfo (string name, string outPath, bool? insertBlankColumnAtFirst = null, bool? minimizeTheNumberOfWorksheets = null, double? scaleFactor = null, bool? uniformWorksheets = null, string folder = null, string storage = null);
        /// <summary>
        /// Converts PDF document (located on storage) to XML format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xml)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PutPdfInStorageToXml (string name, string outPath, string folder = null, string storage = null);

        /// <summary>
        /// Converts PDF document (located on storage) to XML format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xml)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PutPdfInStorageToXmlWithHttpInfo (string name, string outPath, string folder = null, string storage = null);
        /// <summary>
        /// Converts PDF document (located on storage) to XPS format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xps)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PutPdfInStorageToXps (string name, string outPath, string folder = null, string storage = null);

        /// <summary>
        /// Converts PDF document (located on storage) to XPS format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xps)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PutPdfInStorageToXpsWithHttpInfo (string name, string outPath, string folder = null, string storage = null);
        /// <summary>
        /// Replace document polyline annotation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="annotation">Annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>PolyLineAnnotationResponse</returns>
        PolyLineAnnotationResponse PutPolyLineAnnotation (string name, string annotationId, PolyLineAnnotation annotation, string storage = null, string folder = null);

        /// <summary>
        /// Replace document polyline annotation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="annotation">Annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of PolyLineAnnotationResponse</returns>
        ApiResponse<PolyLineAnnotationResponse> PutPolyLineAnnotationWithHttpInfo (string name, string annotationId, PolyLineAnnotation annotation, string storage = null, string folder = null);
        /// <summary>
        /// Replace document polygon annotation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="annotation">Annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>PolygonAnnotationResponse</returns>
        PolygonAnnotationResponse PutPolygonAnnotation (string name, string annotationId, PolygonAnnotation annotation, string storage = null, string folder = null);

        /// <summary>
        /// Replace document polygon annotation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="annotation">Annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of PolygonAnnotationResponse</returns>
        ApiResponse<PolygonAnnotationResponse> PutPolygonAnnotationWithHttpInfo (string name, string annotationId, PolygonAnnotation annotation, string storage = null, string folder = null);
        /// <summary>
        /// Update privilege document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="privileges">Document privileges.  (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PutPrivileges (string name, DocumentPrivilege privileges = null, string storage = null, string folder = null);

        /// <summary>
        /// Update privilege document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="privileges">Document privileges.  (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PutPrivilegesWithHttpInfo (string name, DocumentPrivilege privileges = null, string storage = null, string folder = null);
        /// <summary>
        /// Convert PS file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.ps)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PutPsInStorageToPdf (string name, string srcPath, string dstFolder = null, string storage = null);

        /// <summary>
        /// Convert PS file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.ps)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PutPsInStorageToPdfWithHttpInfo (string name, string srcPath, string dstFolder = null, string storage = null);
        /// <summary>
        /// Replace document image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">The image ID.</param>
        /// <param name="imageFilePath">Path to image file if specified. Request content is used otherwise. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="image">Image file. (optional)</param>
        /// <returns>ImageResponse</returns>
        ImageResponse PutReplaceImage (string name, string imageId, string imageFilePath = null, string storage = null, string folder = null, System.IO.Stream image = null);

        /// <summary>
        /// Replace document image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">The image ID.</param>
        /// <param name="imageFilePath">Path to image file if specified. Request content is used otherwise. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="image">Image file. (optional)</param>
        /// <returns>ApiResponse of ImageResponse</returns>
        ApiResponse<ImageResponse> PutReplaceImageWithHttpInfo (string name, string imageId, string imageFilePath = null, string storage = null, string folder = null, System.IO.Stream image = null);
        /// <summary>
        /// Create searchable PDF document. Generate OCR layer for images in input PDF document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="lang">language for OCR engine. Possible values: eng, ara, bel, ben, bul, ces, dan, deu, ell, fin, fra, heb, hin, ind, isl, ita, jpn, kor, nld, nor, pol, por, ron, rus, spa, swe, tha, tur, ukr, vie, chi_sim, chi_tra or thier combination e.g. eng,rus  (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PutSearchableDocument (string name, string storage = null, string folder = null, string lang = null);

        /// <summary>
        /// Create searchable PDF document. Generate OCR layer for images in input PDF document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="lang">language for OCR engine. Possible values: eng, ara, bel, ben, bul, ces, dan, deu, ell, fin, fra, heb, hin, ind, isl, ita, jpn, kor, nld, nor, pol, por, ron, rus, spa, swe, tha, tur, ukr, vie, chi_sim, chi_tra or thier combination e.g. eng,rus  (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PutSearchableDocumentWithHttpInfo (string name, string storage = null, string folder = null, string lang = null);
        /// <summary>
        /// Add/update document property.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="propertyName"></param>
        /// <param name="value"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>DocumentPropertyResponse</returns>
        DocumentPropertyResponse PutSetProperty (string name, string propertyName, string value, string storage = null, string folder = null);

        /// <summary>
        /// Add/update document property.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="propertyName"></param>
        /// <param name="value"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of DocumentPropertyResponse</returns>
        ApiResponse<DocumentPropertyResponse> PutSetPropertyWithHttpInfo (string name, string propertyName, string value, string storage = null, string folder = null);
        /// <summary>
        /// Replace document square annotation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="annotation">Annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SquareAnnotationResponse</returns>
        SquareAnnotationResponse PutSquareAnnotation (string name, string annotationId, SquareAnnotation annotation, string storage = null, string folder = null);

        /// <summary>
        /// Replace document square annotation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="annotation">Annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SquareAnnotationResponse</returns>
        ApiResponse<SquareAnnotationResponse> PutSquareAnnotationWithHttpInfo (string name, string annotationId, SquareAnnotation annotation, string storage = null, string folder = null);
        /// <summary>
        /// Convert SVG file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.svg)</param>
        /// <param name="adjustPageSize">Adjust page size (optional)</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PutSvgInStorageToPdf (string name, string srcPath, bool? adjustPageSize = null, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string dstFolder = null, string storage = null);

        /// <summary>
        /// Convert SVG file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.svg)</param>
        /// <param name="adjustPageSize">Adjust page size (optional)</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PutSvgInStorageToPdfWithHttpInfo (string name, string srcPath, bool? adjustPageSize = null, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string dstFolder = null, string storage = null);
        /// <summary>
        /// Replace document text annotation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="annotation">Annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>TextAnnotationResponse</returns>
        TextAnnotationResponse PutTextAnnotation (string name, string annotationId, TextAnnotation annotation, string storage = null, string folder = null);

        /// <summary>
        /// Replace document text annotation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="annotation">Annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of TextAnnotationResponse</returns>
        ApiResponse<TextAnnotationResponse> PutTextAnnotationWithHttpInfo (string name, string annotationId, TextAnnotation annotation, string storage = null, string folder = null);
        /// <summary>
        /// Update field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fieldName">The name of a field to be updated.</param>
        /// <param name="field">with the field data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>FieldResponse</returns>
        FieldResponse PutUpdateField (string name, string fieldName, Field field = null, string storage = null, string folder = null);

        /// <summary>
        /// Update field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fieldName">The name of a field to be updated.</param>
        /// <param name="field">with the field data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of FieldResponse</returns>
        ApiResponse<FieldResponse> PutUpdateFieldWithHttpInfo (string name, string fieldName, Field field = null, string storage = null, string folder = null);
        /// <summary>
        /// Update fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fields">with the fields data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>FieldsResponse</returns>
        FieldsResponse PutUpdateFields (string name, Fields fields = null, string storage = null, string folder = null);

        /// <summary>
        /// Update fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fields">with the fields data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of FieldsResponse</returns>
        ApiResponse<FieldsResponse> PutUpdateFieldsWithHttpInfo (string name, Fields fields = null, string storage = null, string folder = null);
        /// <summary>
        /// Convert web page to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="url">Source url</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PutWebInStorageToPdf (string name, string url, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string dstFolder = null, string storage = null);

        /// <summary>
        /// Convert web page to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="url">Source url</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PutWebInStorageToPdfWithHttpInfo (string name, string url, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string dstFolder = null, string storage = null);
        /// <summary>
        /// Converts PDF document which contatins XFA form (in request content) to PDF with AcroForm and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PutXfaPdfInRequestToAcroForm (string outPath, string storage = null, System.IO.Stream file = null);

        /// <summary>
        /// Converts PDF document which contatins XFA form (in request content) to PDF with AcroForm and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PutXfaPdfInRequestToAcroFormWithHttpInfo (string outPath, string storage = null, System.IO.Stream file = null);
        /// <summary>
        /// Converts PDF document which contatins XFA form (located on storage) to PDF with AcroForm and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PutXfaPdfInStorageToAcroForm (string name, string outPath, string folder = null, string storage = null);

        /// <summary>
        /// Converts PDF document which contatins XFA form (located on storage) to PDF with AcroForm and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PutXfaPdfInStorageToAcroFormWithHttpInfo (string name, string outPath, string folder = null, string storage = null);
        /// <summary>
        /// Convert XML file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xml)</param>
        /// <param name="xslFilePath">Full XSL source filename (ex. /folder1/folder2/template.xsl) (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PutXmlInStorageToPdf (string name, string srcPath, string xslFilePath = null, string dstFolder = null, string storage = null);

        /// <summary>
        /// Convert XML file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xml)</param>
        /// <param name="xslFilePath">Full XSL source filename (ex. /folder1/folder2/template.xsl) (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PutXmlInStorageToPdfWithHttpInfo (string name, string srcPath, string xslFilePath = null, string dstFolder = null, string storage = null);
        /// <summary>
        /// Convert XPS file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xps)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PutXpsInStorageToPdf (string name, string srcPath, string dstFolder = null, string storage = null);

        /// <summary>
        /// Convert XPS file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xps)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PutXpsInStorageToPdfWithHttpInfo (string name, string srcPath, string dstFolder = null, string storage = null);
        /// <summary>
        /// Convert XslFo file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xpsfo)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        AsposeResponse PutXslFoInStorageToPdf (string name, string srcPath, string dstFolder = null, string storage = null);

        /// <summary>
        /// Convert XslFo file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xpsfo)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        ApiResponse<AsposeResponse> PutXslFoInStorageToPdfWithHttpInfo (string name, string srcPath, string dstFolder = null, string storage = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete document annotation by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> DeleteAnnotationAsync (string name, string annotationId, string storage = null, string folder = null);

        /// <summary>
        /// Delete document annotation by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> DeleteAnnotationAsyncWithHttpInfo (string name, string annotationId, string storage = null, string folder = null);
        /// <summary>
        /// Delete all annotations from the document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> DeleteDocumentAnnotationsAsync (string name, string storage = null, string folder = null);

        /// <summary>
        /// Delete all annotations from the document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> DeleteDocumentAnnotationsAsyncWithHttpInfo (string name, string storage = null, string folder = null);
        /// <summary>
        /// Delete all link annotations from the document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> DeleteDocumentLinkAnnotationsAsync (string name, string storage = null, string folder = null);

        /// <summary>
        /// Delete all link annotations from the document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> DeleteDocumentLinkAnnotationsAsyncWithHttpInfo (string name, string storage = null, string folder = null);
        /// <summary>
        /// Delete document field by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fieldName">The field name/</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> DeleteFieldAsync (string name, string fieldName, string storage = null, string folder = null);

        /// <summary>
        /// Delete document field by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fieldName">The field name/</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> DeleteFieldAsyncWithHttpInfo (string name, string fieldName, string storage = null, string folder = null);
        /// <summary>
        /// Delete image from document page.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> DeleteImageAsync (string name, string imageId, string storage = null, string folder = null);

        /// <summary>
        /// Delete image from document page.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> DeleteImageAsyncWithHttpInfo (string name, string imageId, string storage = null, string folder = null);
        /// <summary>
        /// Delete document page link annotation by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="linkId">The link ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> DeleteLinkAnnotationAsync (string name, string linkId, string storage = null, string folder = null);

        /// <summary>
        /// Delete document page link annotation by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="linkId">The link ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> DeleteLinkAnnotationAsyncWithHttpInfo (string name, string linkId, string storage = null, string folder = null);
        /// <summary>
        /// Delete document page by its number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> DeletePageAsync (string name, int? pageNumber, string storage = null, string folder = null);

        /// <summary>
        /// Delete document page by its number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> DeletePageAsyncWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null);
        /// <summary>
        /// Delete all annotations from the page
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> DeletePageAnnotationsAsync (string name, int? pageNumber, string storage = null, string folder = null);

        /// <summary>
        /// Delete all annotations from the page
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> DeletePageAnnotationsAsyncWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null);
        /// <summary>
        /// Delete all link annotations from the page
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> DeletePageLinkAnnotationsAsync (string name, int? pageNumber, string storage = null, string folder = null);

        /// <summary>
        /// Delete all link annotations from the page
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> DeletePageLinkAnnotationsAsyncWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null);
        /// <summary>
        /// Delete custom document properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> DeletePropertiesAsync (string name, string storage = null, string folder = null);

        /// <summary>
        /// Delete custom document properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> DeletePropertiesAsyncWithHttpInfo (string name, string storage = null, string folder = null);
        /// <summary>
        /// Delete document property.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="propertyName"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> DeletePropertyAsync (string name, string propertyName, string storage = null, string folder = null);

        /// <summary>
        /// Delete document property.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="propertyName"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> DeletePropertyAsyncWithHttpInfo (string name, string propertyName, string storage = null, string folder = null);
        /// <summary>
        /// Read document page circle annotation by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of CircleAnnotationResponse</returns>
        System.Threading.Tasks.Task<CircleAnnotationResponse> GetCircleAnnotationAsync (string name, string annotationId, string storage = null, string folder = null);

        /// <summary>
        /// Read document page circle annotation by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (CircleAnnotationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CircleAnnotationResponse>> GetCircleAnnotationAsyncWithHttpInfo (string name, string annotationId, string storage = null, string folder = null);
        /// <summary>
        /// Read common document info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of DocumentResponse</returns>
        System.Threading.Tasks.Task<DocumentResponse> GetDocumentAsync (string name, string storage = null, string folder = null);

        /// <summary>
        /// Read common document info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (DocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentResponse>> GetDocumentAsyncWithHttpInfo (string name, string storage = null, string folder = null);
        /// <summary>
        /// Read documant page annotations. Returns only FreeTextAnnotations, TextAnnotations, other annotations will implemented next releases.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AnnotationsInfoResponse</returns>
        System.Threading.Tasks.Task<AnnotationsInfoResponse> GetDocumentAnnotationsAsync (string name, string storage = null, string folder = null);

        /// <summary>
        /// Read documant page annotations. Returns only FreeTextAnnotations, TextAnnotations, other annotations will implemented next releases.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AnnotationsInfoResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnnotationsInfoResponse>> GetDocumentAnnotationsAsyncWithHttpInfo (string name, string storage = null, string folder = null);
        /// <summary>
        /// Read document attachment info by its index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="attachmentIndex">The attachment index.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AttachmentResponse</returns>
        System.Threading.Tasks.Task<AttachmentResponse> GetDocumentAttachmentByIndexAsync (string name, int? attachmentIndex, string storage = null, string folder = null);

        /// <summary>
        /// Read document attachment info by its index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="attachmentIndex">The attachment index.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AttachmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttachmentResponse>> GetDocumentAttachmentByIndexAsyncWithHttpInfo (string name, int? attachmentIndex, string storage = null, string folder = null);
        /// <summary>
        /// Read document attachments info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AttachmentsResponse</returns>
        System.Threading.Tasks.Task<AttachmentsResponse> GetDocumentAttachmentsAsync (string name, string storage = null, string folder = null);

        /// <summary>
        /// Read document attachments info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AttachmentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttachmentsResponse>> GetDocumentAttachmentsAsyncWithHttpInfo (string name, string storage = null, string folder = null);
        /// <summary>
        /// Read document bookmark/bookmarks (including children).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="bookmarkPath">The bookmark path. Leave it empty if you want to get all the bookmarks in the document. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetDocumentBookmarksAsync (string name, string bookmarkPath = null, string storage = null, string folder = null);

        /// <summary>
        /// Read document bookmark/bookmarks (including children).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="bookmarkPath">The bookmark path. Leave it empty if you want to get all the bookmarks in the document. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetDocumentBookmarksAsyncWithHttpInfo (string name, string bookmarkPath = null, string storage = null, string folder = null);
        /// <summary>
        /// Read document circle annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of CircleAnnotationsResponse</returns>
        System.Threading.Tasks.Task<CircleAnnotationsResponse> GetDocumentCircleAnnotationsAsync (string name, string storage = null, string folder = null);

        /// <summary>
        /// Read document circle annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (CircleAnnotationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CircleAnnotationsResponse>> GetDocumentCircleAnnotationsAsyncWithHttpInfo (string name, string storage = null, string folder = null);
        /// <summary>
        /// Read document free text annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of FreeTextAnnotationsResponse</returns>
        System.Threading.Tasks.Task<FreeTextAnnotationsResponse> GetDocumentFreeTextAnnotationsAsync (string name, string storage = null, string folder = null);

        /// <summary>
        /// Read document free text annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (FreeTextAnnotationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FreeTextAnnotationsResponse>> GetDocumentFreeTextAnnotationsAsyncWithHttpInfo (string name, string storage = null, string folder = null);
        /// <summary>
        /// Read document line annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of LineAnnotationsResponse</returns>
        System.Threading.Tasks.Task<LineAnnotationsResponse> GetDocumentLineAnnotationsAsync (string name, string storage = null, string folder = null);

        /// <summary>
        /// Read document line annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (LineAnnotationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LineAnnotationsResponse>> GetDocumentLineAnnotationsAsyncWithHttpInfo (string name, string storage = null, string folder = null);
        /// <summary>
        /// Read document polyline annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of PolyLineAnnotationsResponse</returns>
        System.Threading.Tasks.Task<PolyLineAnnotationsResponse> GetDocumentPolyLineAnnotationsAsync (string name, string storage = null, string folder = null);

        /// <summary>
        /// Read document polyline annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (PolyLineAnnotationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolyLineAnnotationsResponse>> GetDocumentPolyLineAnnotationsAsyncWithHttpInfo (string name, string storage = null, string folder = null);
        /// <summary>
        /// Read document polygon annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of PolygonAnnotationsResponse</returns>
        System.Threading.Tasks.Task<PolygonAnnotationsResponse> GetDocumentPolygonAnnotationsAsync (string name, string storage = null, string folder = null);

        /// <summary>
        /// Read document polygon annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (PolygonAnnotationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolygonAnnotationsResponse>> GetDocumentPolygonAnnotationsAsyncWithHttpInfo (string name, string storage = null, string folder = null);
        /// <summary>
        /// Read document properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of DocumentPropertiesResponse</returns>
        System.Threading.Tasks.Task<DocumentPropertiesResponse> GetDocumentPropertiesAsync (string name, string storage = null, string folder = null);

        /// <summary>
        /// Read document properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (DocumentPropertiesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentPropertiesResponse>> GetDocumentPropertiesAsyncWithHttpInfo (string name, string storage = null, string folder = null);
        /// <summary>
        /// Read document property by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="propertyName"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of DocumentPropertyResponse</returns>
        System.Threading.Tasks.Task<DocumentPropertyResponse> GetDocumentPropertyAsync (string name, string propertyName, string storage = null, string folder = null);

        /// <summary>
        /// Read document property by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="propertyName"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (DocumentPropertyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentPropertyResponse>> GetDocumentPropertyAsyncWithHttpInfo (string name, string propertyName, string storage = null, string folder = null);
        /// <summary>
        /// Read document square annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SquareAnnotationsResponse</returns>
        System.Threading.Tasks.Task<SquareAnnotationsResponse> GetDocumentSquareAnnotationsAsync (string name, string storage = null, string folder = null);

        /// <summary>
        /// Read document square annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SquareAnnotationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SquareAnnotationsResponse>> GetDocumentSquareAnnotationsAsyncWithHttpInfo (string name, string storage = null, string folder = null);
        /// <summary>
        /// Read document text annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of TextAnnotationsResponse</returns>
        System.Threading.Tasks.Task<TextAnnotationsResponse> GetDocumentTextAnnotationsAsync (string name, string storage = null, string folder = null);

        /// <summary>
        /// Read document text annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (TextAnnotationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TextAnnotationsResponse>> GetDocumentTextAnnotationsAsyncWithHttpInfo (string name, string storage = null, string folder = null);
        /// <summary>
        /// Download a specific file 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path of the file including the file name and extension e.g. /file.ext</param>
        /// <param name="versionId">File&#39;s version (optional)</param>
        /// <param name="storage">User&#39;s storage name (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetDownloadAsync (string path, string versionId = null, string storage = null);

        /// <summary>
        /// Download a specific file 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path of the file including the file name and extension e.g. /file.ext</param>
        /// <param name="versionId">File&#39;s version (optional)</param>
        /// <param name="storage">User&#39;s storage name (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetDownloadAsyncWithHttpInfo (string path, string versionId = null, string storage = null);
        /// <summary>
        /// Download document attachment content by its index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="attachmentIndex">The attachment index.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetDownloadDocumentAttachmentByIndexAsync (string name, int? attachmentIndex, string storage = null, string folder = null);

        /// <summary>
        /// Download document attachment content by its index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="attachmentIndex">The attachment index.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetDownloadDocumentAttachmentByIndexAsyncWithHttpInfo (string name, int? attachmentIndex, string storage = null, string folder = null);
        /// <summary>
        /// Convert EPUB file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.epub)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetEpubInStorageToPdfAsync (string srcPath, string storage = null);

        /// <summary>
        /// Convert EPUB file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.epub)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetEpubInStorageToPdfAsyncWithHttpInfo (string srcPath, string storage = null);
        /// <summary>
        /// Get document field by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fieldName">The field name/</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of FieldResponse</returns>
        System.Threading.Tasks.Task<FieldResponse> GetFieldAsync (string name, string fieldName, string storage = null, string folder = null);

        /// <summary>
        /// Get document field by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fieldName">The field name/</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (FieldResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FieldResponse>> GetFieldAsyncWithHttpInfo (string name, string fieldName, string storage = null, string folder = null);
        /// <summary>
        /// Get document fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of FieldsResponse</returns>
        System.Threading.Tasks.Task<FieldsResponse> GetFieldsAsync (string name, string storage = null, string folder = null);

        /// <summary>
        /// Get document fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (FieldsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FieldsResponse>> GetFieldsAsyncWithHttpInfo (string name, string storage = null, string folder = null);
        /// <summary>
        /// Read document page free text annotation by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of FreeTextAnnotationResponse</returns>
        System.Threading.Tasks.Task<FreeTextAnnotationResponse> GetFreeTextAnnotationAsync (string name, string annotationId, string storage = null, string folder = null);

        /// <summary>
        /// Read document page free text annotation by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (FreeTextAnnotationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FreeTextAnnotationResponse>> GetFreeTextAnnotationAsyncWithHttpInfo (string name, string annotationId, string storage = null, string folder = null);
        /// <summary>
        /// Convert HTML file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.zip)</param>
        /// <param name="htmlFileName">Name of HTML file in ZIP.</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetHtmlInStorageToPdfAsync (string srcPath, string htmlFileName, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string storage = null);

        /// <summary>
        /// Convert HTML file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.zip)</param>
        /// <param name="htmlFileName">Name of HTML file in ZIP.</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetHtmlInStorageToPdfAsyncWithHttpInfo (string srcPath, string htmlFileName, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string storage = null);
        /// <summary>
        /// Read document image by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ImageResponse</returns>
        System.Threading.Tasks.Task<ImageResponse> GetImageAsync (string name, string imageId, string storage = null, string folder = null);

        /// <summary>
        /// Read document image by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (ImageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImageResponse>> GetImageAsyncWithHttpInfo (string name, string imageId, string storage = null, string folder = null);
        /// <summary>
        /// Extract document image in GIF format
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetImageExtractAsGifAsync (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null);

        /// <summary>
        /// Extract document image in GIF format
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetImageExtractAsGifAsyncWithHttpInfo (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null);
        /// <summary>
        /// Extract document image in JPEG format
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetImageExtractAsJpegAsync (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null);

        /// <summary>
        /// Extract document image in JPEG format
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetImageExtractAsJpegAsyncWithHttpInfo (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null);
        /// <summary>
        /// Extract document image in PNG format
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetImageExtractAsPngAsync (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null);

        /// <summary>
        /// Extract document image in PNG format
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetImageExtractAsPngAsyncWithHttpInfo (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null);
        /// <summary>
        /// Extract document image in TIFF format
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetImageExtractAsTiffAsync (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null);

        /// <summary>
        /// Extract document image in TIFF format
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetImageExtractAsTiffAsyncWithHttpInfo (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null);
        /// <summary>
        /// Read document images.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ImagesResponse</returns>
        System.Threading.Tasks.Task<ImagesResponse> GetImagesAsync (string name, int? pageNumber, string storage = null, string folder = null);

        /// <summary>
        /// Read document images.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (ImagesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImagesResponse>> GetImagesAsyncWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null);
        /// <summary>
        /// Convert LaTeX file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.tex)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetLaTeXInStorageToPdfAsync (string srcPath, string storage = null);

        /// <summary>
        /// Convert LaTeX file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.tex)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetLaTeXInStorageToPdfAsyncWithHttpInfo (string srcPath, string storage = null);
        /// <summary>
        /// Read document page line annotation by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of LineAnnotationResponse</returns>
        System.Threading.Tasks.Task<LineAnnotationResponse> GetLineAnnotationAsync (string name, string annotationId, string storage = null, string folder = null);

        /// <summary>
        /// Read document page line annotation by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (LineAnnotationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LineAnnotationResponse>> GetLineAnnotationAsyncWithHttpInfo (string name, string annotationId, string storage = null, string folder = null);
        /// <summary>
        /// Read document link annotation by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="linkId">The link ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of LinkAnnotationResponse</returns>
        System.Threading.Tasks.Task<LinkAnnotationResponse> GetLinkAnnotationAsync (string name, string linkId, string storage = null, string folder = null);

        /// <summary>
        /// Read document link annotation by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="linkId">The link ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (LinkAnnotationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LinkAnnotationResponse>> GetLinkAnnotationAsyncWithHttpInfo (string name, string linkId, string storage = null, string folder = null);
        /// <summary>
        /// Convert MHT file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.mht)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetMhtInStorageToPdfAsync (string srcPath, string storage = null);

        /// <summary>
        /// Convert MHT file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.mht)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetMhtInStorageToPdfAsyncWithHttpInfo (string srcPath, string storage = null);
        /// <summary>
        /// Read document page info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of DocumentPageResponse</returns>
        System.Threading.Tasks.Task<DocumentPageResponse> GetPageAsync (string name, int? pageNumber, string storage = null, string folder = null);

        /// <summary>
        /// Read document page info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (DocumentPageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentPageResponse>> GetPageAsyncWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null);
        /// <summary>
        /// Read documant page annotations. Returns only FreeTextAnnotations, TextAnnotations, other annotations will implemented next releases.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AnnotationsInfoResponse</returns>
        System.Threading.Tasks.Task<AnnotationsInfoResponse> GetPageAnnotationsAsync (string name, int? pageNumber, string storage = null, string folder = null);

        /// <summary>
        /// Read documant page annotations. Returns only FreeTextAnnotations, TextAnnotations, other annotations will implemented next releases.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AnnotationsInfoResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnnotationsInfoResponse>> GetPageAnnotationsAsyncWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null);
        /// <summary>
        /// Read document page circle annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of CircleAnnotationsResponse</returns>
        System.Threading.Tasks.Task<CircleAnnotationsResponse> GetPageCircleAnnotationsAsync (string name, int? pageNumber, string storage = null, string folder = null);

        /// <summary>
        /// Read document page circle annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (CircleAnnotationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CircleAnnotationsResponse>> GetPageCircleAnnotationsAsyncWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null);
        /// <summary>
        /// Convert document page to Bmp image and return resulting file in response.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetPageConvertToBmpAsync (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string storage = null);

        /// <summary>
        /// Convert document page to Bmp image and return resulting file in response.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPageConvertToBmpAsyncWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string storage = null);
        /// <summary>
        /// Convert document page to Emf image and return resulting file in response.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetPageConvertToEmfAsync (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string storage = null);

        /// <summary>
        /// Convert document page to Emf image and return resulting file in response.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPageConvertToEmfAsyncWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string storage = null);
        /// <summary>
        /// Convert document page to Gif image and return resulting file in response.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetPageConvertToGifAsync (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string storage = null);

        /// <summary>
        /// Convert document page to Gif image and return resulting file in response.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPageConvertToGifAsyncWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string storage = null);
        /// <summary>
        /// Convert document page to Jpeg image and return resulting file in response.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetPageConvertToJpegAsync (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string storage = null);

        /// <summary>
        /// Convert document page to Jpeg image and return resulting file in response.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPageConvertToJpegAsyncWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string storage = null);
        /// <summary>
        /// Convert document page to Png image and return resulting file in response.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetPageConvertToPngAsync (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string storage = null);

        /// <summary>
        /// Convert document page to Png image and return resulting file in response.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPageConvertToPngAsyncWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string storage = null);
        /// <summary>
        /// Convert document page to Tiff image  and return resulting file in response.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetPageConvertToTiffAsync (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string storage = null);

        /// <summary>
        /// Convert document page to Tiff image  and return resulting file in response.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPageConvertToTiffAsyncWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string storage = null);
        /// <summary>
        /// Read document page free text annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of FreeTextAnnotationsResponse</returns>
        System.Threading.Tasks.Task<FreeTextAnnotationsResponse> GetPageFreeTextAnnotationsAsync (string name, int? pageNumber, string storage = null, string folder = null);

        /// <summary>
        /// Read document page free text annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (FreeTextAnnotationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FreeTextAnnotationsResponse>> GetPageFreeTextAnnotationsAsyncWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null);
        /// <summary>
        /// Read document page line annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of LineAnnotationsResponse</returns>
        System.Threading.Tasks.Task<LineAnnotationsResponse> GetPageLineAnnotationsAsync (string name, int? pageNumber, string storage = null, string folder = null);

        /// <summary>
        /// Read document page line annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (LineAnnotationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LineAnnotationsResponse>> GetPageLineAnnotationsAsyncWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null);
        /// <summary>
        /// Read document page link annotation by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="linkId">The link ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of LinkAnnotationResponse</returns>
        System.Threading.Tasks.Task<LinkAnnotationResponse> GetPageLinkAnnotationAsync (string name, int? pageNumber, string linkId, string storage = null, string folder = null);

        /// <summary>
        /// Read document page link annotation by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="linkId">The link ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (LinkAnnotationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LinkAnnotationResponse>> GetPageLinkAnnotationAsyncWithHttpInfo (string name, int? pageNumber, string linkId, string storage = null, string folder = null);
        /// <summary>
        /// Read document page link annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of LinkAnnotationsResponse</returns>
        System.Threading.Tasks.Task<LinkAnnotationsResponse> GetPageLinkAnnotationsAsync (string name, int? pageNumber, string storage = null, string folder = null);

        /// <summary>
        /// Read document page link annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (LinkAnnotationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LinkAnnotationsResponse>> GetPageLinkAnnotationsAsyncWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null);
        /// <summary>
        /// Read document page polyline annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of PolyLineAnnotationsResponse</returns>
        System.Threading.Tasks.Task<PolyLineAnnotationsResponse> GetPagePolyLineAnnotationsAsync (string name, int? pageNumber, string storage = null, string folder = null);

        /// <summary>
        /// Read document page polyline annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (PolyLineAnnotationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolyLineAnnotationsResponse>> GetPagePolyLineAnnotationsAsyncWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null);
        /// <summary>
        /// Read document page polygon annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of PolygonAnnotationsResponse</returns>
        System.Threading.Tasks.Task<PolygonAnnotationsResponse> GetPagePolygonAnnotationsAsync (string name, int? pageNumber, string storage = null, string folder = null);

        /// <summary>
        /// Read document page polygon annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (PolygonAnnotationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolygonAnnotationsResponse>> GetPagePolygonAnnotationsAsyncWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null);
        /// <summary>
        /// Read document page square annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SquareAnnotationsResponse</returns>
        System.Threading.Tasks.Task<SquareAnnotationsResponse> GetPageSquareAnnotationsAsync (string name, int? pageNumber, string storage = null, string folder = null);

        /// <summary>
        /// Read document page square annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SquareAnnotationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SquareAnnotationsResponse>> GetPageSquareAnnotationsAsyncWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null);
        /// <summary>
        /// Read page text items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">Number of page (starting from 1).</param>
        /// <param name="LLX"></param>
        /// <param name="LLY"></param>
        /// <param name="URX"></param>
        /// <param name="URY"></param>
        /// <param name="format">List of formats for search. (optional)</param>
        /// <param name="regex">Formats are specified as a regular expression. (optional)</param>
        /// <param name="splitRects">Split result fragments (default is true). (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of TextRectsResponse</returns>
        System.Threading.Tasks.Task<TextRectsResponse> GetPageTextAsync (string name, int? pageNumber, double? LLX, double? LLY, double? URX, double? URY, List<string> format = null, string regex = null, bool? splitRects = null, string folder = null, string storage = null);

        /// <summary>
        /// Read page text items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">Number of page (starting from 1).</param>
        /// <param name="LLX"></param>
        /// <param name="LLY"></param>
        /// <param name="URX"></param>
        /// <param name="URY"></param>
        /// <param name="format">List of formats for search. (optional)</param>
        /// <param name="regex">Formats are specified as a regular expression. (optional)</param>
        /// <param name="splitRects">Split result fragments (default is true). (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (TextRectsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TextRectsResponse>> GetPageTextAsyncWithHttpInfo (string name, int? pageNumber, double? LLX, double? LLY, double? URX, double? URY, List<string> format = null, string regex = null, bool? splitRects = null, string folder = null, string storage = null);
        /// <summary>
        /// Read document page text annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of TextAnnotationsResponse</returns>
        System.Threading.Tasks.Task<TextAnnotationsResponse> GetPageTextAnnotationsAsync (string name, int? pageNumber, string storage = null, string folder = null);

        /// <summary>
        /// Read document page text annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (TextAnnotationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TextAnnotationsResponse>> GetPageTextAnnotationsAsyncWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null);
        /// <summary>
        /// Read document pages info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of DocumentPagesResponse</returns>
        System.Threading.Tasks.Task<DocumentPagesResponse> GetPagesAsync (string name, string storage = null, string folder = null);

        /// <summary>
        /// Read document pages info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (DocumentPagesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentPagesResponse>> GetPagesAsyncWithHttpInfo (string name, string storage = null, string folder = null);
        /// <summary>
        /// Convert PCL file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.pcl)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetPclInStorageToPdfAsync (string srcPath, string storage = null);

        /// <summary>
        /// Convert PCL file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.pcl)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPclInStorageToPdfAsyncWithHttpInfo (string srcPath, string storage = null);
        /// <summary>
        /// Converts PDF document (located on storage) to DOC format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="addReturnToLineEnd">Add return to line end. (optional)</param>
        /// <param name="format">Allows to specify .doc or .docx file format. (optional)</param>
        /// <param name="imageResolutionX">Image resolution X. (optional)</param>
        /// <param name="imageResolutionY">Image resolution Y. (optional)</param>
        /// <param name="maxDistanceBetweenTextLines">Max distance between text lines. (optional)</param>
        /// <param name="mode">Allows to control how a PDF document is converted into a word processing document. (optional)</param>
        /// <param name="recognizeBullets">Recognize bullets. (optional)</param>
        /// <param name="relativeHorizontalProximity">Relative horizontal proximity. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetPdfInStorageToDocAsync (string name, bool? addReturnToLineEnd = null, string format = null, int? imageResolutionX = null, int? imageResolutionY = null, double? maxDistanceBetweenTextLines = null, string mode = null, bool? recognizeBullets = null, double? relativeHorizontalProximity = null, string folder = null, string storage = null);

        /// <summary>
        /// Converts PDF document (located on storage) to DOC format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="addReturnToLineEnd">Add return to line end. (optional)</param>
        /// <param name="format">Allows to specify .doc or .docx file format. (optional)</param>
        /// <param name="imageResolutionX">Image resolution X. (optional)</param>
        /// <param name="imageResolutionY">Image resolution Y. (optional)</param>
        /// <param name="maxDistanceBetweenTextLines">Max distance between text lines. (optional)</param>
        /// <param name="mode">Allows to control how a PDF document is converted into a word processing document. (optional)</param>
        /// <param name="recognizeBullets">Recognize bullets. (optional)</param>
        /// <param name="relativeHorizontalProximity">Relative horizontal proximity. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPdfInStorageToDocAsyncWithHttpInfo (string name, bool? addReturnToLineEnd = null, string format = null, int? imageResolutionX = null, int? imageResolutionY = null, double? maxDistanceBetweenTextLines = null, string mode = null, bool? recognizeBullets = null, double? relativeHorizontalProximity = null, string folder = null, string storage = null);
        /// <summary>
        /// Converts PDF document (located on storage) to EPUB format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="contentRecognitionMode">?roperty tunes conversion for this or that desirable method of recognition of content. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetPdfInStorageToEpubAsync (string name, string contentRecognitionMode = null, string folder = null, string storage = null);

        /// <summary>
        /// Converts PDF document (located on storage) to EPUB format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="contentRecognitionMode">?roperty tunes conversion for this or that desirable method of recognition of content. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPdfInStorageToEpubAsyncWithHttpInfo (string name, string contentRecognitionMode = null, string folder = null, string storage = null);
        /// <summary>
        /// Converts PDF document (located on storage) to Html format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="additionalMarginWidthInPoints">Defines width of margin that will be forcibly left around that output HTML-areas. (optional)</param>
        /// <param name="compressSvgGraphicsIfAny">The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)</param>
        /// <param name="convertMarkedContentToLayers">If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)</param>
        /// <param name="defaultFontName">Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)</param>
        /// <param name="documentType">Result document type. (optional)</param>
        /// <param name="fixedLayout">The value indicating whether that HTML is created as fixed layout. (optional)</param>
        /// <param name="imageResolution">Resolution for image rendering. (optional)</param>
        /// <param name="minimalLineWidth">This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)</param>
        /// <param name="preventGlyphsGrouping">This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)</param>
        /// <param name="splitCssIntoPages">When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)</param>
        /// <param name="splitIntoPages">The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)</param>
        /// <param name="useZOrder">If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)</param>
        /// <param name="antialiasingProcessing">The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)</param>
        /// <param name="cssClassNamesPrefix">When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)</param>
        /// <param name="explicitListOfSavedPages">With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)</param>
        /// <param name="fontEncodingStrategy">Defines encoding special rule to tune PDF decoding for current document. (optional)</param>
        /// <param name="fontSavingMode">Defines font saving mode that will be used during saving of PDF to desirable format. (optional)</param>
        /// <param name="htmlMarkupGenerationMode">Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)</param>
        /// <param name="lettersPositioningMethod">The mode of positioning of letters in words in result HTML. (optional)</param>
        /// <param name="pagesFlowTypeDependsOnViewersScreenSize">If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)</param>
        /// <param name="partsEmbeddingMode">It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)</param>
        /// <param name="rasterImagesSavingMode">Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)</param>
        /// <param name="removeEmptyAreasOnTopAndBottom">Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)</param>
        /// <param name="saveShadowedTextsAsTransparentTexts">Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)</param>
        /// <param name="saveTransparentTexts">Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)</param>
        /// <param name="specialFolderForAllImages">The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="specialFolderForSvgImages">The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="trySaveTextUnderliningAndStrikeoutingInCss">PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetPdfInStorageToHtmlAsync (string name, int? additionalMarginWidthInPoints = null, bool? compressSvgGraphicsIfAny = null, bool? convertMarkedContentToLayers = null, string defaultFontName = null, string documentType = null, bool? fixedLayout = null, int? imageResolution = null, int? minimalLineWidth = null, bool? preventGlyphsGrouping = null, bool? splitCssIntoPages = null, bool? splitIntoPages = null, bool? useZOrder = null, string antialiasingProcessing = null, string cssClassNamesPrefix = null, List<int?> explicitListOfSavedPages = null, string fontEncodingStrategy = null, string fontSavingMode = null, string htmlMarkupGenerationMode = null, string lettersPositioningMethod = null, bool? pagesFlowTypeDependsOnViewersScreenSize = null, string partsEmbeddingMode = null, string rasterImagesSavingMode = null, bool? removeEmptyAreasOnTopAndBottom = null, bool? saveShadowedTextsAsTransparentTexts = null, bool? saveTransparentTexts = null, string specialFolderForAllImages = null, string specialFolderForSvgImages = null, bool? trySaveTextUnderliningAndStrikeoutingInCss = null, string folder = null, string storage = null);

        /// <summary>
        /// Converts PDF document (located on storage) to Html format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="additionalMarginWidthInPoints">Defines width of margin that will be forcibly left around that output HTML-areas. (optional)</param>
        /// <param name="compressSvgGraphicsIfAny">The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)</param>
        /// <param name="convertMarkedContentToLayers">If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)</param>
        /// <param name="defaultFontName">Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)</param>
        /// <param name="documentType">Result document type. (optional)</param>
        /// <param name="fixedLayout">The value indicating whether that HTML is created as fixed layout. (optional)</param>
        /// <param name="imageResolution">Resolution for image rendering. (optional)</param>
        /// <param name="minimalLineWidth">This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)</param>
        /// <param name="preventGlyphsGrouping">This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)</param>
        /// <param name="splitCssIntoPages">When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)</param>
        /// <param name="splitIntoPages">The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)</param>
        /// <param name="useZOrder">If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)</param>
        /// <param name="antialiasingProcessing">The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)</param>
        /// <param name="cssClassNamesPrefix">When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)</param>
        /// <param name="explicitListOfSavedPages">With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)</param>
        /// <param name="fontEncodingStrategy">Defines encoding special rule to tune PDF decoding for current document. (optional)</param>
        /// <param name="fontSavingMode">Defines font saving mode that will be used during saving of PDF to desirable format. (optional)</param>
        /// <param name="htmlMarkupGenerationMode">Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)</param>
        /// <param name="lettersPositioningMethod">The mode of positioning of letters in words in result HTML. (optional)</param>
        /// <param name="pagesFlowTypeDependsOnViewersScreenSize">If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)</param>
        /// <param name="partsEmbeddingMode">It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)</param>
        /// <param name="rasterImagesSavingMode">Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)</param>
        /// <param name="removeEmptyAreasOnTopAndBottom">Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)</param>
        /// <param name="saveShadowedTextsAsTransparentTexts">Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)</param>
        /// <param name="saveTransparentTexts">Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)</param>
        /// <param name="specialFolderForAllImages">The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="specialFolderForSvgImages">The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="trySaveTextUnderliningAndStrikeoutingInCss">PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPdfInStorageToHtmlAsyncWithHttpInfo (string name, int? additionalMarginWidthInPoints = null, bool? compressSvgGraphicsIfAny = null, bool? convertMarkedContentToLayers = null, string defaultFontName = null, string documentType = null, bool? fixedLayout = null, int? imageResolution = null, int? minimalLineWidth = null, bool? preventGlyphsGrouping = null, bool? splitCssIntoPages = null, bool? splitIntoPages = null, bool? useZOrder = null, string antialiasingProcessing = null, string cssClassNamesPrefix = null, List<int?> explicitListOfSavedPages = null, string fontEncodingStrategy = null, string fontSavingMode = null, string htmlMarkupGenerationMode = null, string lettersPositioningMethod = null, bool? pagesFlowTypeDependsOnViewersScreenSize = null, string partsEmbeddingMode = null, string rasterImagesSavingMode = null, bool? removeEmptyAreasOnTopAndBottom = null, bool? saveShadowedTextsAsTransparentTexts = null, bool? saveTransparentTexts = null, string specialFolderForAllImages = null, string specialFolderForSvgImages = null, bool? trySaveTextUnderliningAndStrikeoutingInCss = null, string folder = null, string storage = null);
        /// <summary>
        /// Converts PDF document (located on storage) to LaTeX format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pagesCount">Pages count. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetPdfInStorageToLaTeXAsync (string name, int? pagesCount = null, string folder = null, string storage = null);

        /// <summary>
        /// Converts PDF document (located on storage) to LaTeX format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pagesCount">Pages count. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPdfInStorageToLaTeXAsyncWithHttpInfo (string name, int? pagesCount = null, string folder = null, string storage = null);
        /// <summary>
        /// Converts PDF document (located on storage) to MOBIXML format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetPdfInStorageToMobiXmlAsync (string name, string folder = null, string storage = null);

        /// <summary>
        /// Converts PDF document (located on storage) to MOBIXML format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPdfInStorageToMobiXmlAsyncWithHttpInfo (string name, string folder = null, string storage = null);
        /// <summary>
        /// Converts PDF document (located on storage) to PdfA format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="type">Type of PdfA format.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetPdfInStorageToPdfAAsync (string name, string type, string folder = null, string storage = null);

        /// <summary>
        /// Converts PDF document (located on storage) to PdfA format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="type">Type of PdfA format.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPdfInStorageToPdfAAsyncWithHttpInfo (string name, string type, string folder = null, string storage = null);
        /// <summary>
        /// Converts PDF document (located on storage) to PPTX format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="separateImages">Separate images. (optional)</param>
        /// <param name="slidesAsImages">Slides as images. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetPdfInStorageToPptxAsync (string name, bool? separateImages = null, bool? slidesAsImages = null, string folder = null, string storage = null);

        /// <summary>
        /// Converts PDF document (located on storage) to PPTX format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="separateImages">Separate images. (optional)</param>
        /// <param name="slidesAsImages">Slides as images. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPdfInStorageToPptxAsyncWithHttpInfo (string name, bool? separateImages = null, bool? slidesAsImages = null, string folder = null, string storage = null);
        /// <summary>
        /// Converts PDF document (located on storage) to SVG format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="compressOutputToZipArchive">Specifies whether output will be created as one zip-archive. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetPdfInStorageToSvgAsync (string name, bool? compressOutputToZipArchive = null, string folder = null, string storage = null);

        /// <summary>
        /// Converts PDF document (located on storage) to SVG format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="compressOutputToZipArchive">Specifies whether output will be created as one zip-archive. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPdfInStorageToSvgAsyncWithHttpInfo (string name, bool? compressOutputToZipArchive = null, string folder = null, string storage = null);
        /// <summary>
        /// Converts PDF document (located on storage) to TIFF format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="brightness">Image brightness. (optional)</param>
        /// <param name="compression">Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)</param>
        /// <param name="colorDepth">Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)</param>
        /// <param name="leftMargin">Left image margin. (optional)</param>
        /// <param name="rightMargin">Right image margin. (optional)</param>
        /// <param name="topMargin">Top image margin. (optional)</param>
        /// <param name="bottomMargin">Bottom image margin. (optional)</param>
        /// <param name="orientation">Image orientation. Possible values are: None, Landscape, Portait. (optional)</param>
        /// <param name="skipBlankPages">Skip blank pages flag. (optional)</param>
        /// <param name="width">Image width. (optional)</param>
        /// <param name="height">Image height. (optional)</param>
        /// <param name="xResolution">Horizontal resolution. (optional)</param>
        /// <param name="yResolution">Vertical resolution. (optional)</param>
        /// <param name="pageIndex">Start page to export. (optional)</param>
        /// <param name="pageCount">Number of pages to export. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetPdfInStorageToTiffAsync (string name, double? brightness = null, string compression = null, string colorDepth = null, int? leftMargin = null, int? rightMargin = null, int? topMargin = null, int? bottomMargin = null, string orientation = null, bool? skipBlankPages = null, int? width = null, int? height = null, int? xResolution = null, int? yResolution = null, int? pageIndex = null, int? pageCount = null, string folder = null, string storage = null);

        /// <summary>
        /// Converts PDF document (located on storage) to TIFF format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="brightness">Image brightness. (optional)</param>
        /// <param name="compression">Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)</param>
        /// <param name="colorDepth">Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)</param>
        /// <param name="leftMargin">Left image margin. (optional)</param>
        /// <param name="rightMargin">Right image margin. (optional)</param>
        /// <param name="topMargin">Top image margin. (optional)</param>
        /// <param name="bottomMargin">Bottom image margin. (optional)</param>
        /// <param name="orientation">Image orientation. Possible values are: None, Landscape, Portait. (optional)</param>
        /// <param name="skipBlankPages">Skip blank pages flag. (optional)</param>
        /// <param name="width">Image width. (optional)</param>
        /// <param name="height">Image height. (optional)</param>
        /// <param name="xResolution">Horizontal resolution. (optional)</param>
        /// <param name="yResolution">Vertical resolution. (optional)</param>
        /// <param name="pageIndex">Start page to export. (optional)</param>
        /// <param name="pageCount">Number of pages to export. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPdfInStorageToTiffAsyncWithHttpInfo (string name, double? brightness = null, string compression = null, string colorDepth = null, int? leftMargin = null, int? rightMargin = null, int? topMargin = null, int? bottomMargin = null, string orientation = null, bool? skipBlankPages = null, int? width = null, int? height = null, int? xResolution = null, int? yResolution = null, int? pageIndex = null, int? pageCount = null, string folder = null, string storage = null);
        /// <summary>
        /// Converts PDF document (located on storage) to XLS format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="insertBlankColumnAtFirst">Insert blank column at first (optional)</param>
        /// <param name="minimizeTheNumberOfWorksheets">Minimize the number of worksheets (optional)</param>
        /// <param name="scaleFactor">Scale factor (optional)</param>
        /// <param name="uniformWorksheets">Uniform worksheets (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetPdfInStorageToXlsAsync (string name, bool? insertBlankColumnAtFirst = null, bool? minimizeTheNumberOfWorksheets = null, double? scaleFactor = null, bool? uniformWorksheets = null, string folder = null, string storage = null);

        /// <summary>
        /// Converts PDF document (located on storage) to XLS format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="insertBlankColumnAtFirst">Insert blank column at first (optional)</param>
        /// <param name="minimizeTheNumberOfWorksheets">Minimize the number of worksheets (optional)</param>
        /// <param name="scaleFactor">Scale factor (optional)</param>
        /// <param name="uniformWorksheets">Uniform worksheets (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPdfInStorageToXlsAsyncWithHttpInfo (string name, bool? insertBlankColumnAtFirst = null, bool? minimizeTheNumberOfWorksheets = null, double? scaleFactor = null, bool? uniformWorksheets = null, string folder = null, string storage = null);
        /// <summary>
        /// Converts PDF document (located on storage) to XML format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetPdfInStorageToXmlAsync (string name, string folder = null, string storage = null);

        /// <summary>
        /// Converts PDF document (located on storage) to XML format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPdfInStorageToXmlAsyncWithHttpInfo (string name, string folder = null, string storage = null);
        /// <summary>
        /// Converts PDF document (located on storage) to XPS format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetPdfInStorageToXpsAsync (string name, string folder = null, string storage = null);

        /// <summary>
        /// Converts PDF document (located on storage) to XPS format and returns resulting file in response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPdfInStorageToXpsAsyncWithHttpInfo (string name, string folder = null, string storage = null);
        /// <summary>
        /// Read document page polyline annotation by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of PolyLineAnnotationResponse</returns>
        System.Threading.Tasks.Task<PolyLineAnnotationResponse> GetPolyLineAnnotationAsync (string name, string annotationId, string storage = null, string folder = null);

        /// <summary>
        /// Read document page polyline annotation by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (PolyLineAnnotationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolyLineAnnotationResponse>> GetPolyLineAnnotationAsyncWithHttpInfo (string name, string annotationId, string storage = null, string folder = null);
        /// <summary>
        /// Read document page polygon annotation by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of PolygonAnnotationResponse</returns>
        System.Threading.Tasks.Task<PolygonAnnotationResponse> GetPolygonAnnotationAsync (string name, string annotationId, string storage = null, string folder = null);

        /// <summary>
        /// Read document page polygon annotation by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (PolygonAnnotationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolygonAnnotationResponse>> GetPolygonAnnotationAsyncWithHttpInfo (string name, string annotationId, string storage = null, string folder = null);
        /// <summary>
        /// Convert PS file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.ps)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetPsInStorageToPdfAsync (string srcPath, string storage = null);

        /// <summary>
        /// Convert PS file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.ps)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPsInStorageToPdfAsyncWithHttpInfo (string srcPath, string storage = null);
        /// <summary>
        /// Read document page square annotation by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SquareAnnotationResponse</returns>
        System.Threading.Tasks.Task<SquareAnnotationResponse> GetSquareAnnotationAsync (string name, string annotationId, string storage = null, string folder = null);

        /// <summary>
        /// Read document page square annotation by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SquareAnnotationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SquareAnnotationResponse>> GetSquareAnnotationAsyncWithHttpInfo (string name, string annotationId, string storage = null, string folder = null);
        /// <summary>
        /// Convert SVG file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.svg)</param>
        /// <param name="adjustPageSize">Adjust page size (optional)</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetSvgInStorageToPdfAsync (string srcPath, bool? adjustPageSize = null, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string storage = null);

        /// <summary>
        /// Convert SVG file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.svg)</param>
        /// <param name="adjustPageSize">Adjust page size (optional)</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetSvgInStorageToPdfAsyncWithHttpInfo (string srcPath, bool? adjustPageSize = null, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string storage = null);
        /// <summary>
        /// Read document text.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="LLX"></param>
        /// <param name="LLY"></param>
        /// <param name="URX"></param>
        /// <param name="URY"></param>
        /// <param name="format">List of formats for search. (optional)</param>
        /// <param name="regex">Formats are specified as a regular expression. (optional)</param>
        /// <param name="splitRects">Split result fragments (default is true). (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of TextRectsResponse</returns>
        System.Threading.Tasks.Task<TextRectsResponse> GetTextAsync (string name, double? LLX, double? LLY, double? URX, double? URY, List<string> format = null, string regex = null, bool? splitRects = null, string folder = null, string storage = null);

        /// <summary>
        /// Read document text.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="LLX"></param>
        /// <param name="LLY"></param>
        /// <param name="URX"></param>
        /// <param name="URY"></param>
        /// <param name="format">List of formats for search. (optional)</param>
        /// <param name="regex">Formats are specified as a regular expression. (optional)</param>
        /// <param name="splitRects">Split result fragments (default is true). (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (TextRectsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TextRectsResponse>> GetTextAsyncWithHttpInfo (string name, double? LLX, double? LLY, double? URX, double? URY, List<string> format = null, string regex = null, bool? splitRects = null, string folder = null, string storage = null);
        /// <summary>
        /// Read document page text annotation by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of TextAnnotationResponse</returns>
        System.Threading.Tasks.Task<TextAnnotationResponse> GetTextAnnotationAsync (string name, string annotationId, string storage = null, string folder = null);

        /// <summary>
        /// Read document page text annotation by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (TextAnnotationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TextAnnotationResponse>> GetTextAnnotationAsyncWithHttpInfo (string name, string annotationId, string storage = null, string folder = null);
        /// <summary>
        /// Verify signature document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="signName">Sign name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SignatureVerifyResponse</returns>
        System.Threading.Tasks.Task<SignatureVerifyResponse> GetVerifySignatureAsync (string name, string signName, string storage = null, string folder = null);

        /// <summary>
        /// Verify signature document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="signName">Sign name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SignatureVerifyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SignatureVerifyResponse>> GetVerifySignatureAsyncWithHttpInfo (string name, string signName, string storage = null, string folder = null);
        /// <summary>
        /// Convert web page to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">Source url</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetWebInStorageToPdfAsync (string url, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string storage = null);

        /// <summary>
        /// Convert web page to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">Source url</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetWebInStorageToPdfAsyncWithHttpInfo (string url, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string storage = null);
        /// <summary>
        /// Get number of words per document page.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of WordCountResponse</returns>
        System.Threading.Tasks.Task<WordCountResponse> GetWordsPerPageAsync (string name, string storage = null, string folder = null);

        /// <summary>
        /// Get number of words per document page.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (WordCountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WordCountResponse>> GetWordsPerPageAsyncWithHttpInfo (string name, string storage = null, string folder = null);
        /// <summary>
        /// Converts PDF document which contatins XFA form (located on storage) to PDF with AcroForm and returns resulting file response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetXfaPdfInStorageToAcroFormAsync (string name, string folder = null, string storage = null);

        /// <summary>
        /// Converts PDF document which contatins XFA form (located on storage) to PDF with AcroForm and returns resulting file response content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetXfaPdfInStorageToAcroFormAsyncWithHttpInfo (string name, string folder = null, string storage = null);
        /// <summary>
        /// Convert XML file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xml)</param>
        /// <param name="xslFilePath">Full XSL source filename (ex. /folder1/folder2/template.xsl) (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetXmlInStorageToPdfAsync (string srcPath, string xslFilePath = null, string storage = null);

        /// <summary>
        /// Convert XML file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xml)</param>
        /// <param name="xslFilePath">Full XSL source filename (ex. /folder1/folder2/template.xsl) (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetXmlInStorageToPdfAsyncWithHttpInfo (string srcPath, string xslFilePath = null, string storage = null);
        /// <summary>
        /// Convert XPS file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xps)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetXpsInStorageToPdfAsync (string srcPath, string storage = null);

        /// <summary>
        /// Convert XPS file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xps)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetXpsInStorageToPdfAsyncWithHttpInfo (string srcPath, string storage = null);
        /// <summary>
        /// Convert XslFo file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xslfo)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetXslFoInStorageToPdfAsync (string srcPath, string storage = null);

        /// <summary>
        /// Convert XslFo file (located on storage) to PDF format and return resulting file in response. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xslfo)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetXslFoInStorageToPdfAsyncWithHttpInfo (string srcPath, string storage = null);
        /// <summary>
        /// Append document to existing one.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The original document name.</param>
        /// <param name="appendDocument">with the append document data. (optional)</param>
        /// <param name="appendFile">Append file server path. (optional)</param>
        /// <param name="startPage">Appending start page. (optional, default to 0)</param>
        /// <param name="endPage">Appending end page. (optional, default to 0)</param>
        /// <param name="storage">The documents storage. (optional)</param>
        /// <param name="folder">The original document folder. (optional)</param>
        /// <returns>Task of DocumentResponse</returns>
        System.Threading.Tasks.Task<DocumentResponse> PostAppendDocumentAsync (string name, AppendDocument appendDocument = null, string appendFile = null, int? startPage = null, int? endPage = null, string storage = null, string folder = null);

        /// <summary>
        /// Append document to existing one.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The original document name.</param>
        /// <param name="appendDocument">with the append document data. (optional)</param>
        /// <param name="appendFile">Append file server path. (optional)</param>
        /// <param name="startPage">Appending start page. (optional, default to 0)</param>
        /// <param name="endPage">Appending end page. (optional, default to 0)</param>
        /// <param name="storage">The documents storage. (optional)</param>
        /// <param name="folder">The original document folder. (optional)</param>
        /// <returns>Task of ApiResponse (DocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentResponse>> PostAppendDocumentAsyncWithHttpInfo (string name, AppendDocument appendDocument = null, string appendFile = null, int? startPage = null, int? endPage = null, string storage = null, string folder = null);
        /// <summary>
        /// Create field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="page">Document page number.</param>
        /// <param name="field">with the field data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PostCreateFieldAsync (string name, int? page, Field field = null, string storage = null, string folder = null);

        /// <summary>
        /// Create field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="page">Document page number.</param>
        /// <param name="field">with the field data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PostCreateFieldAsyncWithHttpInfo (string name, int? page, Field field = null, string storage = null, string folder = null);
        /// <summary>
        /// Document&#39;s replace text method.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="textReplace"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of TextReplaceResponse</returns>
        System.Threading.Tasks.Task<TextReplaceResponse> PostDocumentTextReplaceAsync (string name, TextReplaceListRequest textReplace, string storage = null, string folder = null);

        /// <summary>
        /// Document&#39;s replace text method.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="textReplace"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (TextReplaceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TextReplaceResponse>> PostDocumentTextReplaceAsyncWithHttpInfo (string name, TextReplaceListRequest textReplace, string storage = null, string folder = null);
        /// <summary>
        /// Insert image to document page.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="llx">Coordinate lower left X.</param>
        /// <param name="lly">Coordinate lower left Y.</param>
        /// <param name="urx">Coordinate upper right X.</param>
        /// <param name="ury">Coordinate upper right Y.</param>
        /// <param name="imageFilePath">Path to image file if specified. Request content is used otherwise. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="image">Image file. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PostInsertImageAsync (string name, int? pageNumber, double? llx, double? lly, double? urx, double? ury, string imageFilePath = null, string storage = null, string folder = null, System.IO.Stream image = null);

        /// <summary>
        /// Insert image to document page.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="llx">Coordinate lower left X.</param>
        /// <param name="lly">Coordinate lower left Y.</param>
        /// <param name="urx">Coordinate upper right X.</param>
        /// <param name="ury">Coordinate upper right Y.</param>
        /// <param name="imageFilePath">Path to image file if specified. Request content is used otherwise. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="image">Image file. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PostInsertImageAsyncWithHttpInfo (string name, int? pageNumber, double? llx, double? lly, double? urx, double? ury, string imageFilePath = null, string storage = null, string folder = null, System.IO.Stream image = null);
        /// <summary>
        /// Move page to new position.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="newIndex">The new page position/index.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PostMovePageAsync (string name, int? pageNumber, int? newIndex, string storage = null, string folder = null);

        /// <summary>
        /// Move page to new position.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="newIndex">The new page position/index.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PostMovePageAsyncWithHttpInfo (string name, int? pageNumber, int? newIndex, string storage = null, string folder = null);
        /// <summary>
        /// Optimize document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="options">The optimization options. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PostOptimizeDocumentAsync (string name, OptimizeOptions options = null, string storage = null, string folder = null);

        /// <summary>
        /// Optimize document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="options">The optimization options. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PostOptimizeDocumentAsyncWithHttpInfo (string name, OptimizeOptions options = null, string storage = null, string folder = null);
        /// <summary>
        /// Add document page circle annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotations">The array of annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PostPageCircleAnnotationsAsync (string name, int? pageNumber, List<CircleAnnotation> annotations, string storage = null, string folder = null);

        /// <summary>
        /// Add document page circle annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotations">The array of annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PostPageCircleAnnotationsAsyncWithHttpInfo (string name, int? pageNumber, List<CircleAnnotation> annotations, string storage = null, string folder = null);
        /// <summary>
        /// Add document page free text annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotations">The array of annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PostPageFreeTextAnnotationsAsync (string name, int? pageNumber, List<FreeTextAnnotation> annotations, string storage = null, string folder = null);

        /// <summary>
        /// Add document page free text annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotations">The array of annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PostPageFreeTextAnnotationsAsyncWithHttpInfo (string name, int? pageNumber, List<FreeTextAnnotation> annotations, string storage = null, string folder = null);
        /// <summary>
        /// Add document page line annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotations">The array of annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PostPageLineAnnotationsAsync (string name, int? pageNumber, List<LineAnnotation> annotations, string storage = null, string folder = null);

        /// <summary>
        /// Add document page line annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotations">The array of annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PostPageLineAnnotationsAsyncWithHttpInfo (string name, int? pageNumber, List<LineAnnotation> annotations, string storage = null, string folder = null);
        /// <summary>
        /// Add document page link annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="links">Array of link anotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PostPageLinkAnnotationsAsync (string name, int? pageNumber, List<LinkAnnotation> links, string storage = null, string folder = null);

        /// <summary>
        /// Add document page link annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="links">Array of link anotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PostPageLinkAnnotationsAsyncWithHttpInfo (string name, int? pageNumber, List<LinkAnnotation> links, string storage = null, string folder = null);
        /// <summary>
        /// Add document page polyline annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotations">The array of annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PostPagePolyLineAnnotationsAsync (string name, int? pageNumber, List<PolyLineAnnotation> annotations, string storage = null, string folder = null);

        /// <summary>
        /// Add document page polyline annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotations">The array of annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PostPagePolyLineAnnotationsAsyncWithHttpInfo (string name, int? pageNumber, List<PolyLineAnnotation> annotations, string storage = null, string folder = null);
        /// <summary>
        /// Add document page polygon annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotations">The array of annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PostPagePolygonAnnotationsAsync (string name, int? pageNumber, List<PolygonAnnotation> annotations, string storage = null, string folder = null);

        /// <summary>
        /// Add document page polygon annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotations">The array of annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PostPagePolygonAnnotationsAsyncWithHttpInfo (string name, int? pageNumber, List<PolygonAnnotation> annotations, string storage = null, string folder = null);
        /// <summary>
        /// Add document page square annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotations">The array of annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PostPageSquareAnnotationsAsync (string name, int? pageNumber, List<SquareAnnotation> annotations, string storage = null, string folder = null);

        /// <summary>
        /// Add document page square annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotations">The array of annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PostPageSquareAnnotationsAsyncWithHttpInfo (string name, int? pageNumber, List<SquareAnnotation> annotations, string storage = null, string folder = null);
        /// <summary>
        /// Add document page text annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotations">The array of annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PostPageTextAnnotationsAsync (string name, int? pageNumber, List<TextAnnotation> annotations, string storage = null, string folder = null);

        /// <summary>
        /// Add document page text annotations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotations">The array of annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PostPageTextAnnotationsAsyncWithHttpInfo (string name, int? pageNumber, List<TextAnnotation> annotations, string storage = null, string folder = null);
        /// <summary>
        /// Page&#39;s replace text method.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="textReplaceListRequest"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of TextReplaceResponse</returns>
        System.Threading.Tasks.Task<TextReplaceResponse> PostPageTextReplaceAsync (string name, int? pageNumber, TextReplaceListRequest textReplaceListRequest, string storage = null, string folder = null);

        /// <summary>
        /// Page&#39;s replace text method.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="textReplaceListRequest"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (TextReplaceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TextReplaceResponse>> PostPageTextReplaceAsyncWithHttpInfo (string name, int? pageNumber, TextReplaceListRequest textReplaceListRequest, string storage = null, string folder = null);
        /// <summary>
        /// Sign document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="signature">Signature object containing signature data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PostSignDocumentAsync (string name, Signature signature = null, string storage = null, string folder = null);

        /// <summary>
        /// Sign document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="signature">Signature object containing signature data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PostSignDocumentAsyncWithHttpInfo (string name, Signature signature = null, string storage = null, string folder = null);
        /// <summary>
        /// Sign page.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="signature">Signature object containing signature data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PostSignPageAsync (string name, int? pageNumber, Signature signature = null, string storage = null, string folder = null);

        /// <summary>
        /// Sign page.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="signature">Signature object containing signature data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PostSignPageAsyncWithHttpInfo (string name, int? pageNumber, Signature signature = null, string storage = null, string folder = null);
        /// <summary>
        /// Split document to parts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="format">Resulting documents format. (optional)</param>
        /// <param name="from">Start page if defined. (optional)</param>
        /// <param name="to">End page if defined. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SplitResultResponse</returns>
        System.Threading.Tasks.Task<SplitResultResponse> PostSplitDocumentAsync (string name, string format = null, int? from = null, int? to = null, string storage = null, string folder = null);

        /// <summary>
        /// Split document to parts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="format">Resulting documents format. (optional)</param>
        /// <param name="from">Start page if defined. (optional)</param>
        /// <param name="to">End page if defined. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SplitResultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SplitResultResponse>> PostSplitDocumentAsyncWithHttpInfo (string name, string format = null, int? from = null, int? to = null, string storage = null, string folder = null);
        /// <summary>
        /// Add new page to end of the document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of DocumentPagesResponse</returns>
        System.Threading.Tasks.Task<DocumentPagesResponse> PutAddNewPageAsync (string name, string storage = null, string folder = null);

        /// <summary>
        /// Add new page to end of the document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (DocumentPagesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentPagesResponse>> PutAddNewPageAsyncWithHttpInfo (string name, string storage = null, string folder = null);
        /// <summary>
        /// Add text to PDF document page.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">Number of page (starting from 1).</param>
        /// <param name="paragraph">Paragraph data. (optional)</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PutAddTextAsync (string name, int? pageNumber, Paragraph paragraph = null, string folder = null, string storage = null);

        /// <summary>
        /// Add text to PDF document page.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">Number of page (starting from 1).</param>
        /// <param name="paragraph">Paragraph data. (optional)</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutAddTextAsyncWithHttpInfo (string name, int? pageNumber, Paragraph paragraph = null, string folder = null, string storage = null);
        /// <summary>
        /// Replace document circle annotation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="annotation">Annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of CircleAnnotationResponse</returns>
        System.Threading.Tasks.Task<CircleAnnotationResponse> PutCircleAnnotationAsync (string name, string annotationId, CircleAnnotation annotation, string storage = null, string folder = null);

        /// <summary>
        /// Replace document circle annotation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="annotation">Annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (CircleAnnotationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CircleAnnotationResponse>> PutCircleAnnotationAsyncWithHttpInfo (string name, string annotationId, CircleAnnotation annotation, string storage = null, string folder = null);
        /// <summary>
        /// Upload a specific file 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext</param>
        /// <param name="file">File to upload</param>
        /// <param name="versionId">Source file&#39;s version (optional)</param>
        /// <param name="storage">User&#39;s storage name (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PutCreateAsync (string path, System.IO.Stream file, string versionId = null, string storage = null);

        /// <summary>
        /// Upload a specific file 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext</param>
        /// <param name="file">File to upload</param>
        /// <param name="versionId">Source file&#39;s version (optional)</param>
        /// <param name="storage">User&#39;s storage name (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutCreateAsyncWithHttpInfo (string path, System.IO.Stream file, string versionId = null, string storage = null);
        /// <summary>
        /// Create empty document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The new document folder. (optional)</param>
        /// <returns>Task of DocumentResponse</returns>
        System.Threading.Tasks.Task<DocumentResponse> PutCreateDocumentAsync (string name, string storage = null, string folder = null);

        /// <summary>
        /// Create empty document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The new document folder. (optional)</param>
        /// <returns>Task of ApiResponse (DocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentResponse>> PutCreateDocumentAsyncWithHttpInfo (string name, string storage = null, string folder = null);
        /// <summary>
        /// Convert EPUB file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.epub)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PutEpubInStorageToPdfAsync (string name, string srcPath, string storage = null, string dstFolder = null);

        /// <summary>
        /// Convert EPUB file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.epub)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutEpubInStorageToPdfAsyncWithHttpInfo (string name, string srcPath, string storage = null, string dstFolder = null);
        /// <summary>
        /// Flatten form fields in document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PutFieldsFlattenAsync (string name, string storage = null, string folder = null);

        /// <summary>
        /// Flatten form fields in document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutFieldsFlattenAsyncWithHttpInfo (string name, string storage = null, string folder = null);
        /// <summary>
        /// Replace document free text annotation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="annotation">Annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of FreeTextAnnotationResponse</returns>
        System.Threading.Tasks.Task<FreeTextAnnotationResponse> PutFreeTextAnnotationAsync (string name, string annotationId, FreeTextAnnotation annotation, string storage = null, string folder = null);

        /// <summary>
        /// Replace document free text annotation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="annotation">Annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (FreeTextAnnotationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FreeTextAnnotationResponse>> PutFreeTextAnnotationAsyncWithHttpInfo (string name, string annotationId, FreeTextAnnotation annotation, string storage = null, string folder = null);
        /// <summary>
        /// Convert HTML file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.zip)</param>
        /// <param name="htmlFileName">Name of HTML file in ZIP.</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PutHtmlInStorageToPdfAsync (string name, string srcPath, string htmlFileName, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string dstFolder = null, string storage = null);

        /// <summary>
        /// Convert HTML file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.zip)</param>
        /// <param name="htmlFileName">Name of HTML file in ZIP.</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutHtmlInStorageToPdfAsyncWithHttpInfo (string name, string srcPath, string htmlFileName, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string dstFolder = null, string storage = null);
        /// <summary>
        /// Extract document image in GIF format to folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PutImageExtractAsGifAsync (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null);

        /// <summary>
        /// Extract document image in GIF format to folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutImageExtractAsGifAsyncWithHttpInfo (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null);
        /// <summary>
        /// Extract document image in JPEG format to folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PutImageExtractAsJpegAsync (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null);

        /// <summary>
        /// Extract document image in JPEG format to folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutImageExtractAsJpegAsyncWithHttpInfo (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null);
        /// <summary>
        /// Extract document image in PNG format to folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PutImageExtractAsPngAsync (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null);

        /// <summary>
        /// Extract document image in PNG format to folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutImageExtractAsPngAsyncWithHttpInfo (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null);
        /// <summary>
        /// Extract document image in TIFF format to folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PutImageExtractAsTiffAsync (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null);

        /// <summary>
        /// Extract document image in TIFF format to folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutImageExtractAsTiffAsyncWithHttpInfo (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null);
        /// <summary>
        /// Convert image file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageTemplates">Image templates</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PutImageInStorageToPdfAsync (string name, ImageTemplatesRequest imageTemplates, string dstFolder = null, string storage = null);

        /// <summary>
        /// Convert image file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageTemplates">Image templates</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutImageInStorageToPdfAsyncWithHttpInfo (string name, ImageTemplatesRequest imageTemplates, string dstFolder = null, string storage = null);
        /// <summary>
        /// Extract document images in GIF format to folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PutImagesExtractAsGifAsync (string name, int? pageNumber, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null);

        /// <summary>
        /// Extract document images in GIF format to folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutImagesExtractAsGifAsyncWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null);
        /// <summary>
        /// Extract document images in JPEG format to folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PutImagesExtractAsJpegAsync (string name, int? pageNumber, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null);

        /// <summary>
        /// Extract document images in JPEG format to folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutImagesExtractAsJpegAsyncWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null);
        /// <summary>
        /// Extract document images in PNG format to folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PutImagesExtractAsPngAsync (string name, int? pageNumber, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null);

        /// <summary>
        /// Extract document images in PNG format to folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutImagesExtractAsPngAsyncWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null);
        /// <summary>
        /// Extract document images in TIFF format to folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PutImagesExtractAsTiffAsync (string name, int? pageNumber, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null);

        /// <summary>
        /// Extract document images in TIFF format to folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutImagesExtractAsTiffAsyncWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null);
        /// <summary>
        /// Convert LaTeX file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.tex)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PutLaTeXInStorageToPdfAsync (string name, string srcPath, string dstFolder = null, string storage = null);

        /// <summary>
        /// Convert LaTeX file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.tex)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutLaTeXInStorageToPdfAsyncWithHttpInfo (string name, string srcPath, string dstFolder = null, string storage = null);
        /// <summary>
        /// Replace document line annotation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="annotation">Annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of LineAnnotationResponse</returns>
        System.Threading.Tasks.Task<LineAnnotationResponse> PutLineAnnotationAsync (string name, string annotationId, LineAnnotation annotation, string storage = null, string folder = null);

        /// <summary>
        /// Replace document line annotation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="annotation">Annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (LineAnnotationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LineAnnotationResponse>> PutLineAnnotationAsyncWithHttpInfo (string name, string annotationId, LineAnnotation annotation, string storage = null, string folder = null);
        /// <summary>
        /// Replace document page link annotations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="linkId">The link ID.</param>
        /// <param name="link">Link anotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of LinkAnnotationResponse</returns>
        System.Threading.Tasks.Task<LinkAnnotationResponse> PutLinkAnnotationAsync (string name, string linkId, LinkAnnotation link, string storage = null, string folder = null);

        /// <summary>
        /// Replace document page link annotations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="linkId">The link ID.</param>
        /// <param name="link">Link anotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (LinkAnnotationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LinkAnnotationResponse>> PutLinkAnnotationAsyncWithHttpInfo (string name, string linkId, LinkAnnotation link, string storage = null, string folder = null);
        /// <summary>
        /// Merge a list of documents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Resulting documen name.</param>
        /// <param name="mergeDocuments">with a list of documents. (optional)</param>
        /// <param name="storage">Resulting document storage. (optional)</param>
        /// <param name="folder">Resulting document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> PutMergeDocumentsAsync (string name, MergeDocuments mergeDocuments = null, string storage = null, string folder = null);

        /// <summary>
        /// Merge a list of documents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Resulting documen name.</param>
        /// <param name="mergeDocuments">with a list of documents. (optional)</param>
        /// <param name="storage">Resulting document storage. (optional)</param>
        /// <param name="folder">Resulting document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> PutMergeDocumentsAsyncWithHttpInfo (string name, MergeDocuments mergeDocuments = null, string storage = null, string folder = null);
        /// <summary>
        /// Convert MHT file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.mht)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PutMhtInStorageToPdfAsync (string name, string srcPath, string dstFolder = null, string storage = null);

        /// <summary>
        /// Convert MHT file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.mht)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutMhtInStorageToPdfAsyncWithHttpInfo (string name, string srcPath, string dstFolder = null, string storage = null);
        /// <summary>
        /// Add page stamp.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="stamp">with data.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PutPageAddStampAsync (string name, int? pageNumber, Stamp stamp, string storage = null, string folder = null);

        /// <summary>
        /// Add page stamp.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="stamp">with data.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPageAddStampAsyncWithHttpInfo (string name, int? pageNumber, Stamp stamp, string storage = null, string folder = null);
        /// <summary>
        /// Convert document page to bmp image and upload resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PutPageConvertToBmpAsync (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null, string storage = null);

        /// <summary>
        /// Convert document page to bmp image and upload resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPageConvertToBmpAsyncWithHttpInfo (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null, string storage = null);
        /// <summary>
        /// Convert document page to emf image and upload resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PutPageConvertToEmfAsync (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null, string storage = null);

        /// <summary>
        /// Convert document page to emf image and upload resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPageConvertToEmfAsyncWithHttpInfo (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null, string storage = null);
        /// <summary>
        /// Convert document page to gif image and upload resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PutPageConvertToGifAsync (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null, string storage = null);

        /// <summary>
        /// Convert document page to gif image and upload resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPageConvertToGifAsyncWithHttpInfo (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null, string storage = null);
        /// <summary>
        /// Convert document page to Jpeg image and upload resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PutPageConvertToJpegAsync (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null, string storage = null);

        /// <summary>
        /// Convert document page to Jpeg image and upload resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPageConvertToJpegAsyncWithHttpInfo (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null, string storage = null);
        /// <summary>
        /// Convert document page to png image and upload resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PutPageConvertToPngAsync (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null, string storage = null);

        /// <summary>
        /// Convert document page to png image and upload resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPageConvertToPngAsyncWithHttpInfo (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null, string storage = null);
        /// <summary>
        /// Convert document page to Tiff image and upload resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PutPageConvertToTiffAsync (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null, string storage = null);

        /// <summary>
        /// Convert document page to Tiff image and upload resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPageConvertToTiffAsyncWithHttpInfo (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null, string storage = null);
        /// <summary>
        /// Convert PCL file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.pcl)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PutPclInStorageToPdfAsync (string name, string srcPath, string dstFolder = null, string storage = null);

        /// <summary>
        /// Convert PCL file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.pcl)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPclInStorageToPdfAsyncWithHttpInfo (string name, string srcPath, string dstFolder = null, string storage = null);
        /// <summary>
        /// Converts PDF document (in request content) to DOC format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.doc)</param>
        /// <param name="addReturnToLineEnd">Add return to line end. (optional)</param>
        /// <param name="format">Allows to specify .doc or .docx file format. (optional)</param>
        /// <param name="imageResolutionX">Image resolution X. (optional)</param>
        /// <param name="imageResolutionY">Image resolution Y. (optional)</param>
        /// <param name="maxDistanceBetweenTextLines">Max distance between text lines. (optional)</param>
        /// <param name="mode">Allows to control how a PDF document is converted into a word processing document. (optional)</param>
        /// <param name="recognizeBullets">Recognize bullets. (optional)</param>
        /// <param name="relativeHorizontalProximity">Relative horizontal proximity. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PutPdfInRequestToDocAsync (string outPath, bool? addReturnToLineEnd = null, string format = null, int? imageResolutionX = null, int? imageResolutionY = null, double? maxDistanceBetweenTextLines = null, string mode = null, bool? recognizeBullets = null, double? relativeHorizontalProximity = null, string storage = null, System.IO.Stream file = null);

        /// <summary>
        /// Converts PDF document (in request content) to DOC format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.doc)</param>
        /// <param name="addReturnToLineEnd">Add return to line end. (optional)</param>
        /// <param name="format">Allows to specify .doc or .docx file format. (optional)</param>
        /// <param name="imageResolutionX">Image resolution X. (optional)</param>
        /// <param name="imageResolutionY">Image resolution Y. (optional)</param>
        /// <param name="maxDistanceBetweenTextLines">Max distance between text lines. (optional)</param>
        /// <param name="mode">Allows to control how a PDF document is converted into a word processing document. (optional)</param>
        /// <param name="recognizeBullets">Recognize bullets. (optional)</param>
        /// <param name="relativeHorizontalProximity">Relative horizontal proximity. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPdfInRequestToDocAsyncWithHttpInfo (string outPath, bool? addReturnToLineEnd = null, string format = null, int? imageResolutionX = null, int? imageResolutionY = null, double? maxDistanceBetweenTextLines = null, string mode = null, bool? recognizeBullets = null, double? relativeHorizontalProximity = null, string storage = null, System.IO.Stream file = null);
        /// <summary>
        /// Converts PDF document (in request content) to EPUB format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.epub)</param>
        /// <param name="contentRecognitionMode">?roperty tunes conversion for this or that desirable method of recognition of content. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PutPdfInRequestToEpubAsync (string outPath, string contentRecognitionMode = null, string storage = null, System.IO.Stream file = null);

        /// <summary>
        /// Converts PDF document (in request content) to EPUB format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.epub)</param>
        /// <param name="contentRecognitionMode">?roperty tunes conversion for this or that desirable method of recognition of content. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPdfInRequestToEpubAsyncWithHttpInfo (string outPath, string contentRecognitionMode = null, string storage = null, System.IO.Stream file = null);
        /// <summary>
        /// Converts PDF document (in request content) to Html format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.html)</param>
        /// <param name="additionalMarginWidthInPoints">Defines width of margin that will be forcibly left around that output HTML-areas. (optional)</param>
        /// <param name="compressSvgGraphicsIfAny">The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)</param>
        /// <param name="convertMarkedContentToLayers">If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)</param>
        /// <param name="defaultFontName">Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)</param>
        /// <param name="documentType">Result document type. (optional)</param>
        /// <param name="fixedLayout">The value indicating whether that HTML is created as fixed layout. (optional)</param>
        /// <param name="imageResolution">Resolution for image rendering. (optional)</param>
        /// <param name="minimalLineWidth">This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)</param>
        /// <param name="preventGlyphsGrouping">This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)</param>
        /// <param name="splitCssIntoPages">When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)</param>
        /// <param name="splitIntoPages">The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)</param>
        /// <param name="useZOrder">If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)</param>
        /// <param name="antialiasingProcessing">The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)</param>
        /// <param name="cssClassNamesPrefix">When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)</param>
        /// <param name="explicitListOfSavedPages">With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)</param>
        /// <param name="fontEncodingStrategy">Defines encoding special rule to tune PDF decoding for current document. (optional)</param>
        /// <param name="fontSavingMode">Defines font saving mode that will be used during saving of PDF to desirable format. (optional)</param>
        /// <param name="htmlMarkupGenerationMode">Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)</param>
        /// <param name="lettersPositioningMethod">The mode of positioning of letters in words in result HTML. (optional)</param>
        /// <param name="pagesFlowTypeDependsOnViewersScreenSize">If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)</param>
        /// <param name="partsEmbeddingMode">It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)</param>
        /// <param name="rasterImagesSavingMode">Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)</param>
        /// <param name="removeEmptyAreasOnTopAndBottom">Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)</param>
        /// <param name="saveShadowedTextsAsTransparentTexts">Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)</param>
        /// <param name="saveTransparentTexts">Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)</param>
        /// <param name="specialFolderForAllImages">The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="specialFolderForSvgImages">The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="trySaveTextUnderliningAndStrikeoutingInCss">PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PutPdfInRequestToHtmlAsync (string outPath, int? additionalMarginWidthInPoints = null, bool? compressSvgGraphicsIfAny = null, bool? convertMarkedContentToLayers = null, string defaultFontName = null, string documentType = null, bool? fixedLayout = null, int? imageResolution = null, int? minimalLineWidth = null, bool? preventGlyphsGrouping = null, bool? splitCssIntoPages = null, bool? splitIntoPages = null, bool? useZOrder = null, string antialiasingProcessing = null, string cssClassNamesPrefix = null, List<int?> explicitListOfSavedPages = null, string fontEncodingStrategy = null, string fontSavingMode = null, string htmlMarkupGenerationMode = null, string lettersPositioningMethod = null, bool? pagesFlowTypeDependsOnViewersScreenSize = null, string partsEmbeddingMode = null, string rasterImagesSavingMode = null, bool? removeEmptyAreasOnTopAndBottom = null, bool? saveShadowedTextsAsTransparentTexts = null, bool? saveTransparentTexts = null, string specialFolderForAllImages = null, string specialFolderForSvgImages = null, bool? trySaveTextUnderliningAndStrikeoutingInCss = null, string storage = null, System.IO.Stream file = null);

        /// <summary>
        /// Converts PDF document (in request content) to Html format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.html)</param>
        /// <param name="additionalMarginWidthInPoints">Defines width of margin that will be forcibly left around that output HTML-areas. (optional)</param>
        /// <param name="compressSvgGraphicsIfAny">The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)</param>
        /// <param name="convertMarkedContentToLayers">If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)</param>
        /// <param name="defaultFontName">Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)</param>
        /// <param name="documentType">Result document type. (optional)</param>
        /// <param name="fixedLayout">The value indicating whether that HTML is created as fixed layout. (optional)</param>
        /// <param name="imageResolution">Resolution for image rendering. (optional)</param>
        /// <param name="minimalLineWidth">This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)</param>
        /// <param name="preventGlyphsGrouping">This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)</param>
        /// <param name="splitCssIntoPages">When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)</param>
        /// <param name="splitIntoPages">The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)</param>
        /// <param name="useZOrder">If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)</param>
        /// <param name="antialiasingProcessing">The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)</param>
        /// <param name="cssClassNamesPrefix">When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)</param>
        /// <param name="explicitListOfSavedPages">With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)</param>
        /// <param name="fontEncodingStrategy">Defines encoding special rule to tune PDF decoding for current document. (optional)</param>
        /// <param name="fontSavingMode">Defines font saving mode that will be used during saving of PDF to desirable format. (optional)</param>
        /// <param name="htmlMarkupGenerationMode">Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)</param>
        /// <param name="lettersPositioningMethod">The mode of positioning of letters in words in result HTML. (optional)</param>
        /// <param name="pagesFlowTypeDependsOnViewersScreenSize">If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)</param>
        /// <param name="partsEmbeddingMode">It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)</param>
        /// <param name="rasterImagesSavingMode">Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)</param>
        /// <param name="removeEmptyAreasOnTopAndBottom">Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)</param>
        /// <param name="saveShadowedTextsAsTransparentTexts">Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)</param>
        /// <param name="saveTransparentTexts">Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)</param>
        /// <param name="specialFolderForAllImages">The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="specialFolderForSvgImages">The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="trySaveTextUnderliningAndStrikeoutingInCss">PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPdfInRequestToHtmlAsyncWithHttpInfo (string outPath, int? additionalMarginWidthInPoints = null, bool? compressSvgGraphicsIfAny = null, bool? convertMarkedContentToLayers = null, string defaultFontName = null, string documentType = null, bool? fixedLayout = null, int? imageResolution = null, int? minimalLineWidth = null, bool? preventGlyphsGrouping = null, bool? splitCssIntoPages = null, bool? splitIntoPages = null, bool? useZOrder = null, string antialiasingProcessing = null, string cssClassNamesPrefix = null, List<int?> explicitListOfSavedPages = null, string fontEncodingStrategy = null, string fontSavingMode = null, string htmlMarkupGenerationMode = null, string lettersPositioningMethod = null, bool? pagesFlowTypeDependsOnViewersScreenSize = null, string partsEmbeddingMode = null, string rasterImagesSavingMode = null, bool? removeEmptyAreasOnTopAndBottom = null, bool? saveShadowedTextsAsTransparentTexts = null, bool? saveTransparentTexts = null, string specialFolderForAllImages = null, string specialFolderForSvgImages = null, bool? trySaveTextUnderliningAndStrikeoutingInCss = null, string storage = null, System.IO.Stream file = null);
        /// <summary>
        /// Converts PDF document (in request content) to LaTeX format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tex)</param>
        /// <param name="pagesCount">Pages count. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PutPdfInRequestToLaTeXAsync (string outPath, int? pagesCount = null, string storage = null, System.IO.Stream file = null);

        /// <summary>
        /// Converts PDF document (in request content) to LaTeX format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tex)</param>
        /// <param name="pagesCount">Pages count. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPdfInRequestToLaTeXAsyncWithHttpInfo (string outPath, int? pagesCount = null, string storage = null, System.IO.Stream file = null);
        /// <summary>
        /// Converts PDF document (in request content) to MOBIXML format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.mobixml)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PutPdfInRequestToMobiXmlAsync (string outPath, string storage = null, System.IO.Stream file = null);

        /// <summary>
        /// Converts PDF document (in request content) to MOBIXML format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.mobixml)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPdfInRequestToMobiXmlAsyncWithHttpInfo (string outPath, string storage = null, System.IO.Stream file = null);
        /// <summary>
        /// Converts PDF document (in request content) to PdfA format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="type">Type of PdfA format.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PutPdfInRequestToPdfAAsync (string outPath, string type, string storage = null, System.IO.Stream file = null);

        /// <summary>
        /// Converts PDF document (in request content) to PdfA format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="type">Type of PdfA format.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPdfInRequestToPdfAAsyncWithHttpInfo (string outPath, string type, string storage = null, System.IO.Stream file = null);
        /// <summary>
        /// Converts PDF document (in request content) to PPTX format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pptx)</param>
        /// <param name="separateImages">Separate images. (optional)</param>
        /// <param name="slidesAsImages">Slides as images. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PutPdfInRequestToPptxAsync (string outPath, bool? separateImages = null, bool? slidesAsImages = null, string storage = null, System.IO.Stream file = null);

        /// <summary>
        /// Converts PDF document (in request content) to PPTX format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pptx)</param>
        /// <param name="separateImages">Separate images. (optional)</param>
        /// <param name="slidesAsImages">Slides as images. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPdfInRequestToPptxAsyncWithHttpInfo (string outPath, bool? separateImages = null, bool? slidesAsImages = null, string storage = null, System.IO.Stream file = null);
        /// <summary>
        /// Converts PDF document (in request content) to SVG format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.svg)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PutPdfInRequestToSvgAsync (string outPath, string storage = null, System.IO.Stream file = null);

        /// <summary>
        /// Converts PDF document (in request content) to SVG format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.svg)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPdfInRequestToSvgAsyncWithHttpInfo (string outPath, string storage = null, System.IO.Stream file = null);
        /// <summary>
        /// Converts PDF document (in request content) to TIFF format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tiff)</param>
        /// <param name="brightness">Image brightness. (optional)</param>
        /// <param name="compression">Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)</param>
        /// <param name="colorDepth">Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)</param>
        /// <param name="leftMargin">Left image margin. (optional)</param>
        /// <param name="rightMargin">Right image margin. (optional)</param>
        /// <param name="topMargin">Top image margin. (optional)</param>
        /// <param name="bottomMargin">Bottom image margin. (optional)</param>
        /// <param name="orientation">Image orientation. Possible values are: None, Landscape, Portait. (optional)</param>
        /// <param name="skipBlankPages">Skip blank pages flag. (optional)</param>
        /// <param name="width">Image width. (optional)</param>
        /// <param name="height">Image height. (optional)</param>
        /// <param name="xResolution">Horizontal resolution. (optional)</param>
        /// <param name="yResolution">Vertical resolution. (optional)</param>
        /// <param name="pageIndex">Start page to export. (optional)</param>
        /// <param name="pageCount">Number of pages to export. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PutPdfInRequestToTiffAsync (string outPath, double? brightness = null, string compression = null, string colorDepth = null, int? leftMargin = null, int? rightMargin = null, int? topMargin = null, int? bottomMargin = null, string orientation = null, bool? skipBlankPages = null, int? width = null, int? height = null, int? xResolution = null, int? yResolution = null, int? pageIndex = null, int? pageCount = null, string storage = null, System.IO.Stream file = null);

        /// <summary>
        /// Converts PDF document (in request content) to TIFF format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tiff)</param>
        /// <param name="brightness">Image brightness. (optional)</param>
        /// <param name="compression">Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)</param>
        /// <param name="colorDepth">Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)</param>
        /// <param name="leftMargin">Left image margin. (optional)</param>
        /// <param name="rightMargin">Right image margin. (optional)</param>
        /// <param name="topMargin">Top image margin. (optional)</param>
        /// <param name="bottomMargin">Bottom image margin. (optional)</param>
        /// <param name="orientation">Image orientation. Possible values are: None, Landscape, Portait. (optional)</param>
        /// <param name="skipBlankPages">Skip blank pages flag. (optional)</param>
        /// <param name="width">Image width. (optional)</param>
        /// <param name="height">Image height. (optional)</param>
        /// <param name="xResolution">Horizontal resolution. (optional)</param>
        /// <param name="yResolution">Vertical resolution. (optional)</param>
        /// <param name="pageIndex">Start page to export. (optional)</param>
        /// <param name="pageCount">Number of pages to export. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPdfInRequestToTiffAsyncWithHttpInfo (string outPath, double? brightness = null, string compression = null, string colorDepth = null, int? leftMargin = null, int? rightMargin = null, int? topMargin = null, int? bottomMargin = null, string orientation = null, bool? skipBlankPages = null, int? width = null, int? height = null, int? xResolution = null, int? yResolution = null, int? pageIndex = null, int? pageCount = null, string storage = null, System.IO.Stream file = null);
        /// <summary>
        /// Converts PDF document (in request content) to XLS format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xls)</param>
        /// <param name="insertBlankColumnAtFirst">Insert blank column at first (optional)</param>
        /// <param name="minimizeTheNumberOfWorksheets">Minimize the number of worksheets (optional)</param>
        /// <param name="scaleFactor">Scale factor (optional)</param>
        /// <param name="uniformWorksheets">Uniform worksheets (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PutPdfInRequestToXlsAsync (string outPath, bool? insertBlankColumnAtFirst = null, bool? minimizeTheNumberOfWorksheets = null, double? scaleFactor = null, bool? uniformWorksheets = null, string storage = null, System.IO.Stream file = null);

        /// <summary>
        /// Converts PDF document (in request content) to XLS format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xls)</param>
        /// <param name="insertBlankColumnAtFirst">Insert blank column at first (optional)</param>
        /// <param name="minimizeTheNumberOfWorksheets">Minimize the number of worksheets (optional)</param>
        /// <param name="scaleFactor">Scale factor (optional)</param>
        /// <param name="uniformWorksheets">Uniform worksheets (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPdfInRequestToXlsAsyncWithHttpInfo (string outPath, bool? insertBlankColumnAtFirst = null, bool? minimizeTheNumberOfWorksheets = null, double? scaleFactor = null, bool? uniformWorksheets = null, string storage = null, System.IO.Stream file = null);
        /// <summary>
        /// Converts PDF document (in request content) to XML format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xml)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PutPdfInRequestToXmlAsync (string outPath, string storage = null, System.IO.Stream file = null);

        /// <summary>
        /// Converts PDF document (in request content) to XML format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xml)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPdfInRequestToXmlAsyncWithHttpInfo (string outPath, string storage = null, System.IO.Stream file = null);
        /// <summary>
        /// Converts PDF document (in request content) to XPS format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xps)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PutPdfInRequestToXpsAsync (string outPath, string storage = null, System.IO.Stream file = null);

        /// <summary>
        /// Converts PDF document (in request content) to XPS format and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xps)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPdfInRequestToXpsAsyncWithHttpInfo (string outPath, string storage = null, System.IO.Stream file = null);
        /// <summary>
        /// Converts PDF document (located on storage) to DOC format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.doc)</param>
        /// <param name="addReturnToLineEnd">Add return to line end. (optional)</param>
        /// <param name="format">Allows to specify .doc or .docx file format. (optional)</param>
        /// <param name="imageResolutionX">Image resolution X. (optional)</param>
        /// <param name="imageResolutionY">Image resolution Y. (optional)</param>
        /// <param name="maxDistanceBetweenTextLines">Max distance between text lines. (optional)</param>
        /// <param name="mode">Allows to control how a PDF document is converted into a word processing document. (optional)</param>
        /// <param name="recognizeBullets">Recognize bullets. (optional)</param>
        /// <param name="relativeHorizontalProximity">Relative horizontal proximity. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PutPdfInStorageToDocAsync (string name, string outPath, bool? addReturnToLineEnd = null, string format = null, int? imageResolutionX = null, int? imageResolutionY = null, double? maxDistanceBetweenTextLines = null, string mode = null, bool? recognizeBullets = null, double? relativeHorizontalProximity = null, string folder = null, string storage = null);

        /// <summary>
        /// Converts PDF document (located on storage) to DOC format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.doc)</param>
        /// <param name="addReturnToLineEnd">Add return to line end. (optional)</param>
        /// <param name="format">Allows to specify .doc or .docx file format. (optional)</param>
        /// <param name="imageResolutionX">Image resolution X. (optional)</param>
        /// <param name="imageResolutionY">Image resolution Y. (optional)</param>
        /// <param name="maxDistanceBetweenTextLines">Max distance between text lines. (optional)</param>
        /// <param name="mode">Allows to control how a PDF document is converted into a word processing document. (optional)</param>
        /// <param name="recognizeBullets">Recognize bullets. (optional)</param>
        /// <param name="relativeHorizontalProximity">Relative horizontal proximity. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPdfInStorageToDocAsyncWithHttpInfo (string name, string outPath, bool? addReturnToLineEnd = null, string format = null, int? imageResolutionX = null, int? imageResolutionY = null, double? maxDistanceBetweenTextLines = null, string mode = null, bool? recognizeBullets = null, double? relativeHorizontalProximity = null, string folder = null, string storage = null);
        /// <summary>
        /// Converts PDF document (located on storage) to EPUB format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.epub)</param>
        /// <param name="contentRecognitionMode">?roperty tunes conversion for this or that desirable method of recognition of content. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PutPdfInStorageToEpubAsync (string name, string outPath, string contentRecognitionMode = null, string folder = null, string storage = null);

        /// <summary>
        /// Converts PDF document (located on storage) to EPUB format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.epub)</param>
        /// <param name="contentRecognitionMode">?roperty tunes conversion for this or that desirable method of recognition of content. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPdfInStorageToEpubAsyncWithHttpInfo (string name, string outPath, string contentRecognitionMode = null, string folder = null, string storage = null);
        /// <summary>
        /// Converts PDF document (located on storage) to Html format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.html)</param>
        /// <param name="additionalMarginWidthInPoints">Defines width of margin that will be forcibly left around that output HTML-areas. (optional)</param>
        /// <param name="compressSvgGraphicsIfAny">The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)</param>
        /// <param name="convertMarkedContentToLayers">If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)</param>
        /// <param name="defaultFontName">Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)</param>
        /// <param name="documentType">Result document type. (optional)</param>
        /// <param name="fixedLayout">The value indicating whether that HTML is created as fixed layout. (optional)</param>
        /// <param name="imageResolution">Resolution for image rendering. (optional)</param>
        /// <param name="minimalLineWidth">This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)</param>
        /// <param name="preventGlyphsGrouping">This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)</param>
        /// <param name="splitCssIntoPages">When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)</param>
        /// <param name="splitIntoPages">The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)</param>
        /// <param name="useZOrder">If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)</param>
        /// <param name="antialiasingProcessing">The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)</param>
        /// <param name="cssClassNamesPrefix">When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)</param>
        /// <param name="explicitListOfSavedPages">With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)</param>
        /// <param name="fontEncodingStrategy">Defines encoding special rule to tune PDF decoding for current document. (optional)</param>
        /// <param name="fontSavingMode">Defines font saving mode that will be used during saving of PDF to desirable format. (optional)</param>
        /// <param name="htmlMarkupGenerationMode">Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)</param>
        /// <param name="lettersPositioningMethod">The mode of positioning of letters in words in result HTML. (optional)</param>
        /// <param name="pagesFlowTypeDependsOnViewersScreenSize">If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)</param>
        /// <param name="partsEmbeddingMode">It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)</param>
        /// <param name="rasterImagesSavingMode">Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)</param>
        /// <param name="removeEmptyAreasOnTopAndBottom">Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)</param>
        /// <param name="saveShadowedTextsAsTransparentTexts">Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)</param>
        /// <param name="saveTransparentTexts">Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)</param>
        /// <param name="specialFolderForAllImages">The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="specialFolderForSvgImages">The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="trySaveTextUnderliningAndStrikeoutingInCss">PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PutPdfInStorageToHtmlAsync (string name, string outPath, int? additionalMarginWidthInPoints = null, bool? compressSvgGraphicsIfAny = null, bool? convertMarkedContentToLayers = null, string defaultFontName = null, string documentType = null, bool? fixedLayout = null, int? imageResolution = null, int? minimalLineWidth = null, bool? preventGlyphsGrouping = null, bool? splitCssIntoPages = null, bool? splitIntoPages = null, bool? useZOrder = null, string antialiasingProcessing = null, string cssClassNamesPrefix = null, List<int?> explicitListOfSavedPages = null, string fontEncodingStrategy = null, string fontSavingMode = null, string htmlMarkupGenerationMode = null, string lettersPositioningMethod = null, bool? pagesFlowTypeDependsOnViewersScreenSize = null, string partsEmbeddingMode = null, string rasterImagesSavingMode = null, bool? removeEmptyAreasOnTopAndBottom = null, bool? saveShadowedTextsAsTransparentTexts = null, bool? saveTransparentTexts = null, string specialFolderForAllImages = null, string specialFolderForSvgImages = null, bool? trySaveTextUnderliningAndStrikeoutingInCss = null, string folder = null, string storage = null);

        /// <summary>
        /// Converts PDF document (located on storage) to Html format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.html)</param>
        /// <param name="additionalMarginWidthInPoints">Defines width of margin that will be forcibly left around that output HTML-areas. (optional)</param>
        /// <param name="compressSvgGraphicsIfAny">The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)</param>
        /// <param name="convertMarkedContentToLayers">If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)</param>
        /// <param name="defaultFontName">Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)</param>
        /// <param name="documentType">Result document type. (optional)</param>
        /// <param name="fixedLayout">The value indicating whether that HTML is created as fixed layout. (optional)</param>
        /// <param name="imageResolution">Resolution for image rendering. (optional)</param>
        /// <param name="minimalLineWidth">This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)</param>
        /// <param name="preventGlyphsGrouping">This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)</param>
        /// <param name="splitCssIntoPages">When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)</param>
        /// <param name="splitIntoPages">The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)</param>
        /// <param name="useZOrder">If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)</param>
        /// <param name="antialiasingProcessing">The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)</param>
        /// <param name="cssClassNamesPrefix">When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)</param>
        /// <param name="explicitListOfSavedPages">With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)</param>
        /// <param name="fontEncodingStrategy">Defines encoding special rule to tune PDF decoding for current document. (optional)</param>
        /// <param name="fontSavingMode">Defines font saving mode that will be used during saving of PDF to desirable format. (optional)</param>
        /// <param name="htmlMarkupGenerationMode">Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)</param>
        /// <param name="lettersPositioningMethod">The mode of positioning of letters in words in result HTML. (optional)</param>
        /// <param name="pagesFlowTypeDependsOnViewersScreenSize">If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)</param>
        /// <param name="partsEmbeddingMode">It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)</param>
        /// <param name="rasterImagesSavingMode">Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)</param>
        /// <param name="removeEmptyAreasOnTopAndBottom">Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)</param>
        /// <param name="saveShadowedTextsAsTransparentTexts">Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)</param>
        /// <param name="saveTransparentTexts">Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)</param>
        /// <param name="specialFolderForAllImages">The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="specialFolderForSvgImages">The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="trySaveTextUnderliningAndStrikeoutingInCss">PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPdfInStorageToHtmlAsyncWithHttpInfo (string name, string outPath, int? additionalMarginWidthInPoints = null, bool? compressSvgGraphicsIfAny = null, bool? convertMarkedContentToLayers = null, string defaultFontName = null, string documentType = null, bool? fixedLayout = null, int? imageResolution = null, int? minimalLineWidth = null, bool? preventGlyphsGrouping = null, bool? splitCssIntoPages = null, bool? splitIntoPages = null, bool? useZOrder = null, string antialiasingProcessing = null, string cssClassNamesPrefix = null, List<int?> explicitListOfSavedPages = null, string fontEncodingStrategy = null, string fontSavingMode = null, string htmlMarkupGenerationMode = null, string lettersPositioningMethod = null, bool? pagesFlowTypeDependsOnViewersScreenSize = null, string partsEmbeddingMode = null, string rasterImagesSavingMode = null, bool? removeEmptyAreasOnTopAndBottom = null, bool? saveShadowedTextsAsTransparentTexts = null, bool? saveTransparentTexts = null, string specialFolderForAllImages = null, string specialFolderForSvgImages = null, bool? trySaveTextUnderliningAndStrikeoutingInCss = null, string folder = null, string storage = null);
        /// <summary>
        /// Converts PDF document (located on storage) to LaTeX format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tex)</param>
        /// <param name="pagesCount">Pages count. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PutPdfInStorageToLaTeXAsync (string name, string outPath, int? pagesCount = null, string folder = null, string storage = null);

        /// <summary>
        /// Converts PDF document (located on storage) to LaTeX format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tex)</param>
        /// <param name="pagesCount">Pages count. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPdfInStorageToLaTeXAsyncWithHttpInfo (string name, string outPath, int? pagesCount = null, string folder = null, string storage = null);
        /// <summary>
        /// Converts PDF document (located on storage) to MOBIXML format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.mobixml)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PutPdfInStorageToMobiXmlAsync (string name, string outPath, string folder = null, string storage = null);

        /// <summary>
        /// Converts PDF document (located on storage) to MOBIXML format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.mobixml)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPdfInStorageToMobiXmlAsyncWithHttpInfo (string name, string outPath, string folder = null, string storage = null);
        /// <summary>
        /// Converts PDF document (located on storage) to PdfA format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="type">Type of PdfA format.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PutPdfInStorageToPdfAAsync (string name, string outPath, string type, string folder = null, string storage = null);

        /// <summary>
        /// Converts PDF document (located on storage) to PdfA format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="type">Type of PdfA format.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPdfInStorageToPdfAAsyncWithHttpInfo (string name, string outPath, string type, string folder = null, string storage = null);
        /// <summary>
        /// Converts PDF document (located on storage) to PPTX format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pptx)</param>
        /// <param name="separateImages">Separate images. (optional)</param>
        /// <param name="slidesAsImages">Slides as images. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PutPdfInStorageToPptxAsync (string name, string outPath, bool? separateImages = null, bool? slidesAsImages = null, string folder = null, string storage = null);

        /// <summary>
        /// Converts PDF document (located on storage) to PPTX format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pptx)</param>
        /// <param name="separateImages">Separate images. (optional)</param>
        /// <param name="slidesAsImages">Slides as images. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPdfInStorageToPptxAsyncWithHttpInfo (string name, string outPath, bool? separateImages = null, bool? slidesAsImages = null, string folder = null, string storage = null);
        /// <summary>
        /// Converts PDF document (located on storage) to SVG format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.svg)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PutPdfInStorageToSvgAsync (string name, string outPath, string folder = null, string storage = null);

        /// <summary>
        /// Converts PDF document (located on storage) to SVG format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.svg)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPdfInStorageToSvgAsyncWithHttpInfo (string name, string outPath, string folder = null, string storage = null);
        /// <summary>
        /// Converts PDF document (located on storage) to TIFF format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tiff)</param>
        /// <param name="brightness">Image brightness. (optional)</param>
        /// <param name="compression">Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)</param>
        /// <param name="colorDepth">Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)</param>
        /// <param name="leftMargin">Left image margin. (optional)</param>
        /// <param name="rightMargin">Right image margin. (optional)</param>
        /// <param name="topMargin">Top image margin. (optional)</param>
        /// <param name="bottomMargin">Bottom image margin. (optional)</param>
        /// <param name="orientation">Image orientation. Possible values are: None, Landscape, Portait. (optional)</param>
        /// <param name="skipBlankPages">Skip blank pages flag. (optional)</param>
        /// <param name="width">Image width. (optional)</param>
        /// <param name="height">Image height. (optional)</param>
        /// <param name="xResolution">Horizontal resolution. (optional)</param>
        /// <param name="yResolution">Vertical resolution. (optional)</param>
        /// <param name="pageIndex">Start page to export. (optional)</param>
        /// <param name="pageCount">Number of pages to export. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PutPdfInStorageToTiffAsync (string name, string outPath, double? brightness = null, string compression = null, string colorDepth = null, int? leftMargin = null, int? rightMargin = null, int? topMargin = null, int? bottomMargin = null, string orientation = null, bool? skipBlankPages = null, int? width = null, int? height = null, int? xResolution = null, int? yResolution = null, int? pageIndex = null, int? pageCount = null, string folder = null, string storage = null);

        /// <summary>
        /// Converts PDF document (located on storage) to TIFF format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tiff)</param>
        /// <param name="brightness">Image brightness. (optional)</param>
        /// <param name="compression">Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)</param>
        /// <param name="colorDepth">Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)</param>
        /// <param name="leftMargin">Left image margin. (optional)</param>
        /// <param name="rightMargin">Right image margin. (optional)</param>
        /// <param name="topMargin">Top image margin. (optional)</param>
        /// <param name="bottomMargin">Bottom image margin. (optional)</param>
        /// <param name="orientation">Image orientation. Possible values are: None, Landscape, Portait. (optional)</param>
        /// <param name="skipBlankPages">Skip blank pages flag. (optional)</param>
        /// <param name="width">Image width. (optional)</param>
        /// <param name="height">Image height. (optional)</param>
        /// <param name="xResolution">Horizontal resolution. (optional)</param>
        /// <param name="yResolution">Vertical resolution. (optional)</param>
        /// <param name="pageIndex">Start page to export. (optional)</param>
        /// <param name="pageCount">Number of pages to export. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPdfInStorageToTiffAsyncWithHttpInfo (string name, string outPath, double? brightness = null, string compression = null, string colorDepth = null, int? leftMargin = null, int? rightMargin = null, int? topMargin = null, int? bottomMargin = null, string orientation = null, bool? skipBlankPages = null, int? width = null, int? height = null, int? xResolution = null, int? yResolution = null, int? pageIndex = null, int? pageCount = null, string folder = null, string storage = null);
        /// <summary>
        /// Converts PDF document (located on storage) to XLS format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xls)</param>
        /// <param name="insertBlankColumnAtFirst">Insert blank column at first (optional)</param>
        /// <param name="minimizeTheNumberOfWorksheets">Minimize the number of worksheets (optional)</param>
        /// <param name="scaleFactor">Scale factor (optional)</param>
        /// <param name="uniformWorksheets">Uniform worksheets (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PutPdfInStorageToXlsAsync (string name, string outPath, bool? insertBlankColumnAtFirst = null, bool? minimizeTheNumberOfWorksheets = null, double? scaleFactor = null, bool? uniformWorksheets = null, string folder = null, string storage = null);

        /// <summary>
        /// Converts PDF document (located on storage) to XLS format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xls)</param>
        /// <param name="insertBlankColumnAtFirst">Insert blank column at first (optional)</param>
        /// <param name="minimizeTheNumberOfWorksheets">Minimize the number of worksheets (optional)</param>
        /// <param name="scaleFactor">Scale factor (optional)</param>
        /// <param name="uniformWorksheets">Uniform worksheets (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPdfInStorageToXlsAsyncWithHttpInfo (string name, string outPath, bool? insertBlankColumnAtFirst = null, bool? minimizeTheNumberOfWorksheets = null, double? scaleFactor = null, bool? uniformWorksheets = null, string folder = null, string storage = null);
        /// <summary>
        /// Converts PDF document (located on storage) to XML format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xml)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PutPdfInStorageToXmlAsync (string name, string outPath, string folder = null, string storage = null);

        /// <summary>
        /// Converts PDF document (located on storage) to XML format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xml)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPdfInStorageToXmlAsyncWithHttpInfo (string name, string outPath, string folder = null, string storage = null);
        /// <summary>
        /// Converts PDF document (located on storage) to XPS format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xps)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PutPdfInStorageToXpsAsync (string name, string outPath, string folder = null, string storage = null);

        /// <summary>
        /// Converts PDF document (located on storage) to XPS format and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xps)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPdfInStorageToXpsAsyncWithHttpInfo (string name, string outPath, string folder = null, string storage = null);
        /// <summary>
        /// Replace document polyline annotation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="annotation">Annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of PolyLineAnnotationResponse</returns>
        System.Threading.Tasks.Task<PolyLineAnnotationResponse> PutPolyLineAnnotationAsync (string name, string annotationId, PolyLineAnnotation annotation, string storage = null, string folder = null);

        /// <summary>
        /// Replace document polyline annotation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="annotation">Annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (PolyLineAnnotationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolyLineAnnotationResponse>> PutPolyLineAnnotationAsyncWithHttpInfo (string name, string annotationId, PolyLineAnnotation annotation, string storage = null, string folder = null);
        /// <summary>
        /// Replace document polygon annotation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="annotation">Annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of PolygonAnnotationResponse</returns>
        System.Threading.Tasks.Task<PolygonAnnotationResponse> PutPolygonAnnotationAsync (string name, string annotationId, PolygonAnnotation annotation, string storage = null, string folder = null);

        /// <summary>
        /// Replace document polygon annotation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="annotation">Annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (PolygonAnnotationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolygonAnnotationResponse>> PutPolygonAnnotationAsyncWithHttpInfo (string name, string annotationId, PolygonAnnotation annotation, string storage = null, string folder = null);
        /// <summary>
        /// Update privilege document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="privileges">Document privileges.  (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PutPrivilegesAsync (string name, DocumentPrivilege privileges = null, string storage = null, string folder = null);

        /// <summary>
        /// Update privilege document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="privileges">Document privileges.  (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPrivilegesAsyncWithHttpInfo (string name, DocumentPrivilege privileges = null, string storage = null, string folder = null);
        /// <summary>
        /// Convert PS file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.ps)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PutPsInStorageToPdfAsync (string name, string srcPath, string dstFolder = null, string storage = null);

        /// <summary>
        /// Convert PS file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.ps)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPsInStorageToPdfAsyncWithHttpInfo (string name, string srcPath, string dstFolder = null, string storage = null);
        /// <summary>
        /// Replace document image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">The image ID.</param>
        /// <param name="imageFilePath">Path to image file if specified. Request content is used otherwise. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="image">Image file. (optional)</param>
        /// <returns>Task of ImageResponse</returns>
        System.Threading.Tasks.Task<ImageResponse> PutReplaceImageAsync (string name, string imageId, string imageFilePath = null, string storage = null, string folder = null, System.IO.Stream image = null);

        /// <summary>
        /// Replace document image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">The image ID.</param>
        /// <param name="imageFilePath">Path to image file if specified. Request content is used otherwise. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="image">Image file. (optional)</param>
        /// <returns>Task of ApiResponse (ImageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImageResponse>> PutReplaceImageAsyncWithHttpInfo (string name, string imageId, string imageFilePath = null, string storage = null, string folder = null, System.IO.Stream image = null);
        /// <summary>
        /// Create searchable PDF document. Generate OCR layer for images in input PDF document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="lang">language for OCR engine. Possible values: eng, ara, bel, ben, bul, ces, dan, deu, ell, fin, fra, heb, hin, ind, isl, ita, jpn, kor, nld, nor, pol, por, ron, rus, spa, swe, tha, tur, ukr, vie, chi_sim, chi_tra or thier combination e.g. eng,rus  (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PutSearchableDocumentAsync (string name, string storage = null, string folder = null, string lang = null);

        /// <summary>
        /// Create searchable PDF document. Generate OCR layer for images in input PDF document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="lang">language for OCR engine. Possible values: eng, ara, bel, ben, bul, ces, dan, deu, ell, fin, fra, heb, hin, ind, isl, ita, jpn, kor, nld, nor, pol, por, ron, rus, spa, swe, tha, tur, ukr, vie, chi_sim, chi_tra or thier combination e.g. eng,rus  (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutSearchableDocumentAsyncWithHttpInfo (string name, string storage = null, string folder = null, string lang = null);
        /// <summary>
        /// Add/update document property.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="propertyName"></param>
        /// <param name="value"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of DocumentPropertyResponse</returns>
        System.Threading.Tasks.Task<DocumentPropertyResponse> PutSetPropertyAsync (string name, string propertyName, string value, string storage = null, string folder = null);

        /// <summary>
        /// Add/update document property.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="propertyName"></param>
        /// <param name="value"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (DocumentPropertyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentPropertyResponse>> PutSetPropertyAsyncWithHttpInfo (string name, string propertyName, string value, string storage = null, string folder = null);
        /// <summary>
        /// Replace document square annotation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="annotation">Annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SquareAnnotationResponse</returns>
        System.Threading.Tasks.Task<SquareAnnotationResponse> PutSquareAnnotationAsync (string name, string annotationId, SquareAnnotation annotation, string storage = null, string folder = null);

        /// <summary>
        /// Replace document square annotation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="annotation">Annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SquareAnnotationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SquareAnnotationResponse>> PutSquareAnnotationAsyncWithHttpInfo (string name, string annotationId, SquareAnnotation annotation, string storage = null, string folder = null);
        /// <summary>
        /// Convert SVG file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.svg)</param>
        /// <param name="adjustPageSize">Adjust page size (optional)</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PutSvgInStorageToPdfAsync (string name, string srcPath, bool? adjustPageSize = null, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string dstFolder = null, string storage = null);

        /// <summary>
        /// Convert SVG file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.svg)</param>
        /// <param name="adjustPageSize">Adjust page size (optional)</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutSvgInStorageToPdfAsyncWithHttpInfo (string name, string srcPath, bool? adjustPageSize = null, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string dstFolder = null, string storage = null);
        /// <summary>
        /// Replace document text annotation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="annotation">Annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of TextAnnotationResponse</returns>
        System.Threading.Tasks.Task<TextAnnotationResponse> PutTextAnnotationAsync (string name, string annotationId, TextAnnotation annotation, string storage = null, string folder = null);

        /// <summary>
        /// Replace document text annotation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="annotation">Annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (TextAnnotationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TextAnnotationResponse>> PutTextAnnotationAsyncWithHttpInfo (string name, string annotationId, TextAnnotation annotation, string storage = null, string folder = null);
        /// <summary>
        /// Update field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fieldName">The name of a field to be updated.</param>
        /// <param name="field">with the field data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of FieldResponse</returns>
        System.Threading.Tasks.Task<FieldResponse> PutUpdateFieldAsync (string name, string fieldName, Field field = null, string storage = null, string folder = null);

        /// <summary>
        /// Update field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fieldName">The name of a field to be updated.</param>
        /// <param name="field">with the field data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (FieldResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FieldResponse>> PutUpdateFieldAsyncWithHttpInfo (string name, string fieldName, Field field = null, string storage = null, string folder = null);
        /// <summary>
        /// Update fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fields">with the fields data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of FieldsResponse</returns>
        System.Threading.Tasks.Task<FieldsResponse> PutUpdateFieldsAsync (string name, Fields fields = null, string storage = null, string folder = null);

        /// <summary>
        /// Update fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fields">with the fields data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (FieldsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FieldsResponse>> PutUpdateFieldsAsyncWithHttpInfo (string name, Fields fields = null, string storage = null, string folder = null);
        /// <summary>
        /// Convert web page to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="url">Source url</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PutWebInStorageToPdfAsync (string name, string url, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string dstFolder = null, string storage = null);

        /// <summary>
        /// Convert web page to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="url">Source url</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutWebInStorageToPdfAsyncWithHttpInfo (string name, string url, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string dstFolder = null, string storage = null);
        /// <summary>
        /// Converts PDF document which contatins XFA form (in request content) to PDF with AcroForm and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PutXfaPdfInRequestToAcroFormAsync (string outPath, string storage = null, System.IO.Stream file = null);

        /// <summary>
        /// Converts PDF document which contatins XFA form (in request content) to PDF with AcroForm and uploads resulting file to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutXfaPdfInRequestToAcroFormAsyncWithHttpInfo (string outPath, string storage = null, System.IO.Stream file = null);
        /// <summary>
        /// Converts PDF document which contatins XFA form (located on storage) to PDF with AcroForm and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PutXfaPdfInStorageToAcroFormAsync (string name, string outPath, string folder = null, string storage = null);

        /// <summary>
        /// Converts PDF document which contatins XFA form (located on storage) to PDF with AcroForm and uploads resulting file to storage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutXfaPdfInStorageToAcroFormAsyncWithHttpInfo (string name, string outPath, string folder = null, string storage = null);
        /// <summary>
        /// Convert XML file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xml)</param>
        /// <param name="xslFilePath">Full XSL source filename (ex. /folder1/folder2/template.xsl) (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PutXmlInStorageToPdfAsync (string name, string srcPath, string xslFilePath = null, string dstFolder = null, string storage = null);

        /// <summary>
        /// Convert XML file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xml)</param>
        /// <param name="xslFilePath">Full XSL source filename (ex. /folder1/folder2/template.xsl) (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutXmlInStorageToPdfAsyncWithHttpInfo (string name, string srcPath, string xslFilePath = null, string dstFolder = null, string storage = null);
        /// <summary>
        /// Convert XPS file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xps)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PutXpsInStorageToPdfAsync (string name, string srcPath, string dstFolder = null, string storage = null);

        /// <summary>
        /// Convert XPS file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xps)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutXpsInStorageToPdfAsyncWithHttpInfo (string name, string srcPath, string dstFolder = null, string storage = null);
        /// <summary>
        /// Convert XslFo file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xpsfo)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        System.Threading.Tasks.Task<AsposeResponse> PutXslFoInStorageToPdfAsync (string name, string srcPath, string dstFolder = null, string storage = null);

        /// <summary>
        /// Convert XslFo file (located on storage) to PDF format and upload resulting file to storage. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xpsfo)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutXslFoInStorageToPdfAsyncWithHttpInfo (string name, string srcPath, string dstFolder = null, string storage = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PdfApi : IPdfApi
    {
        private Aspose.Pdf.Cloud.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PdfApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PdfApi(string apiKey, string appSid)
            : this(new Configuration(apiKey, appSid ))
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PdfApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PdfApi(Configuration configuration)
        {
            if (configuration == null)
            {
                throw new ArgumentNullException("configuration");
            }
            
            Configuration = configuration;
            ApiClient = new ApiClient(Configuration);           
            ExceptionFactory = Aspose.Pdf.Cloud.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ApiClient ApiClient {get; set;}

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Aspose.Pdf.Cloud.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete document annotation by ID 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse DeleteAnnotation (string name, string annotationId, string storage = null, string folder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = DeleteAnnotationWithHttpInfo(name, annotationId, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete document annotation by ID 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > DeleteAnnotationWithHttpInfo (string name, string annotationId, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->DeleteAnnotation");
            // verify the required parameter 'annotationId' is set
            if (annotationId == null)
                throw new ApiException(400, "Missing required parameter 'annotationId' when calling PdfApi->DeleteAnnotation");

            var localVarPath = "/pdf/{name}/annotations/{annotationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (annotationId != null) localVarPathParams.Add("annotationId", ApiClient.ParameterToString(annotationId)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Delete document annotation by ID 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> DeleteAnnotationAsync (string name, string annotationId, string storage = null, string folder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await DeleteAnnotationAsyncWithHttpInfo(name, annotationId, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete document annotation by ID 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> DeleteAnnotationAsyncWithHttpInfo (string name, string annotationId, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->DeleteAnnotation");
            // verify the required parameter 'annotationId' is set
            if (annotationId == null)
                throw new ApiException(400, "Missing required parameter 'annotationId' when calling PdfApi->DeleteAnnotation");

            var localVarPath = "/pdf/{name}/annotations/{annotationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (annotationId != null) localVarPathParams.Add("annotationId", ApiClient.ParameterToString(annotationId)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Delete all annotations from the document 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse DeleteDocumentAnnotations (string name, string storage = null, string folder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = DeleteDocumentAnnotationsWithHttpInfo(name, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete all annotations from the document 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > DeleteDocumentAnnotationsWithHttpInfo (string name, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->DeleteDocumentAnnotations");

            var localVarPath = "/pdf/{name}/annotations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDocumentAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Delete all annotations from the document 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> DeleteDocumentAnnotationsAsync (string name, string storage = null, string folder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await DeleteDocumentAnnotationsAsyncWithHttpInfo(name, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete all annotations from the document 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> DeleteDocumentAnnotationsAsyncWithHttpInfo (string name, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->DeleteDocumentAnnotations");

            var localVarPath = "/pdf/{name}/annotations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDocumentAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Delete all link annotations from the document 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse DeleteDocumentLinkAnnotations (string name, string storage = null, string folder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = DeleteDocumentLinkAnnotationsWithHttpInfo(name, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete all link annotations from the document 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > DeleteDocumentLinkAnnotationsWithHttpInfo (string name, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->DeleteDocumentLinkAnnotations");

            var localVarPath = "/pdf/{name}/links";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDocumentLinkAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Delete all link annotations from the document 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> DeleteDocumentLinkAnnotationsAsync (string name, string storage = null, string folder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await DeleteDocumentLinkAnnotationsAsyncWithHttpInfo(name, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete all link annotations from the document 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> DeleteDocumentLinkAnnotationsAsyncWithHttpInfo (string name, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->DeleteDocumentLinkAnnotations");

            var localVarPath = "/pdf/{name}/links";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDocumentLinkAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Delete document field by name. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fieldName">The field name/</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse DeleteField (string name, string fieldName, string storage = null, string folder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = DeleteFieldWithHttpInfo(name, fieldName, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete document field by name. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fieldName">The field name/</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > DeleteFieldWithHttpInfo (string name, string fieldName, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->DeleteField");
            // verify the required parameter 'fieldName' is set
            if (fieldName == null)
                throw new ApiException(400, "Missing required parameter 'fieldName' when calling PdfApi->DeleteField");

            var localVarPath = "/pdf/{name}/fields/{fieldName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (fieldName != null) localVarPathParams.Add("fieldName", ApiClient.ParameterToString(fieldName)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Delete document field by name. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fieldName">The field name/</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> DeleteFieldAsync (string name, string fieldName, string storage = null, string folder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await DeleteFieldAsyncWithHttpInfo(name, fieldName, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete document field by name. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fieldName">The field name/</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> DeleteFieldAsyncWithHttpInfo (string name, string fieldName, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->DeleteField");
            // verify the required parameter 'fieldName' is set
            if (fieldName == null)
                throw new ApiException(400, "Missing required parameter 'fieldName' when calling PdfApi->DeleteField");

            var localVarPath = "/pdf/{name}/fields/{fieldName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (fieldName != null) localVarPathParams.Add("fieldName", ApiClient.ParameterToString(fieldName)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Delete image from document page. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse DeleteImage (string name, string imageId, string storage = null, string folder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = DeleteImageWithHttpInfo(name, imageId, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete image from document page. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > DeleteImageWithHttpInfo (string name, string imageId, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->DeleteImage");
            // verify the required parameter 'imageId' is set
            if (imageId == null)
                throw new ApiException(400, "Missing required parameter 'imageId' when calling PdfApi->DeleteImage");

            var localVarPath = "/pdf/{name}/images/{imageId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (imageId != null) localVarPathParams.Add("imageId", ApiClient.ParameterToString(imageId)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Delete image from document page. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> DeleteImageAsync (string name, string imageId, string storage = null, string folder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await DeleteImageAsyncWithHttpInfo(name, imageId, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete image from document page. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> DeleteImageAsyncWithHttpInfo (string name, string imageId, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->DeleteImage");
            // verify the required parameter 'imageId' is set
            if (imageId == null)
                throw new ApiException(400, "Missing required parameter 'imageId' when calling PdfApi->DeleteImage");

            var localVarPath = "/pdf/{name}/images/{imageId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (imageId != null) localVarPathParams.Add("imageId", ApiClient.ParameterToString(imageId)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Delete document page link annotation by ID 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="linkId">The link ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse DeleteLinkAnnotation (string name, string linkId, string storage = null, string folder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = DeleteLinkAnnotationWithHttpInfo(name, linkId, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete document page link annotation by ID 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="linkId">The link ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > DeleteLinkAnnotationWithHttpInfo (string name, string linkId, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->DeleteLinkAnnotation");
            // verify the required parameter 'linkId' is set
            if (linkId == null)
                throw new ApiException(400, "Missing required parameter 'linkId' when calling PdfApi->DeleteLinkAnnotation");

            var localVarPath = "/pdf/{name}/links/{linkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (linkId != null) localVarPathParams.Add("linkId", ApiClient.ParameterToString(linkId)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteLinkAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Delete document page link annotation by ID 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="linkId">The link ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> DeleteLinkAnnotationAsync (string name, string linkId, string storage = null, string folder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await DeleteLinkAnnotationAsyncWithHttpInfo(name, linkId, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete document page link annotation by ID 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="linkId">The link ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> DeleteLinkAnnotationAsyncWithHttpInfo (string name, string linkId, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->DeleteLinkAnnotation");
            // verify the required parameter 'linkId' is set
            if (linkId == null)
                throw new ApiException(400, "Missing required parameter 'linkId' when calling PdfApi->DeleteLinkAnnotation");

            var localVarPath = "/pdf/{name}/links/{linkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (linkId != null) localVarPathParams.Add("linkId", ApiClient.ParameterToString(linkId)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteLinkAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Delete document page by its number. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse DeletePage (string name, int? pageNumber, string storage = null, string folder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = DeletePageWithHttpInfo(name, pageNumber, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete document page by its number. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > DeletePageWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->DeletePage");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->DeletePage");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Delete document page by its number. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> DeletePageAsync (string name, int? pageNumber, string storage = null, string folder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await DeletePageAsyncWithHttpInfo(name, pageNumber, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete document page by its number. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> DeletePageAsyncWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->DeletePage");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->DeletePage");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Delete all annotations from the page 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse DeletePageAnnotations (string name, int? pageNumber, string storage = null, string folder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = DeletePageAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete all annotations from the page 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > DeletePageAnnotationsWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->DeletePageAnnotations");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->DeletePageAnnotations");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePageAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Delete all annotations from the page 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> DeletePageAnnotationsAsync (string name, int? pageNumber, string storage = null, string folder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await DeletePageAnnotationsAsyncWithHttpInfo(name, pageNumber, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete all annotations from the page 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> DeletePageAnnotationsAsyncWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->DeletePageAnnotations");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->DeletePageAnnotations");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePageAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Delete all link annotations from the page 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse DeletePageLinkAnnotations (string name, int? pageNumber, string storage = null, string folder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = DeletePageLinkAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete all link annotations from the page 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > DeletePageLinkAnnotationsWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->DeletePageLinkAnnotations");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->DeletePageLinkAnnotations");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/links";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePageLinkAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Delete all link annotations from the page 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> DeletePageLinkAnnotationsAsync (string name, int? pageNumber, string storage = null, string folder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await DeletePageLinkAnnotationsAsyncWithHttpInfo(name, pageNumber, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete all link annotations from the page 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> DeletePageLinkAnnotationsAsyncWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->DeletePageLinkAnnotations");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->DeletePageLinkAnnotations");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/links";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePageLinkAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Delete custom document properties. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse DeleteProperties (string name, string storage = null, string folder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = DeletePropertiesWithHttpInfo(name, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete custom document properties. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > DeletePropertiesWithHttpInfo (string name, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->DeleteProperties");

            var localVarPath = "/pdf/{name}/documentproperties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Delete custom document properties. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> DeletePropertiesAsync (string name, string storage = null, string folder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await DeletePropertiesAsyncWithHttpInfo(name, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete custom document properties. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> DeletePropertiesAsyncWithHttpInfo (string name, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->DeleteProperties");

            var localVarPath = "/pdf/{name}/documentproperties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Delete document property. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="propertyName"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse DeleteProperty (string name, string propertyName, string storage = null, string folder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = DeletePropertyWithHttpInfo(name, propertyName, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete document property. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="propertyName"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > DeletePropertyWithHttpInfo (string name, string propertyName, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->DeleteProperty");
            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
                throw new ApiException(400, "Missing required parameter 'propertyName' when calling PdfApi->DeleteProperty");

            var localVarPath = "/pdf/{name}/documentproperties/{propertyName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (propertyName != null) localVarPathParams.Add("propertyName", ApiClient.ParameterToString(propertyName)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProperty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Delete document property. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="propertyName"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> DeletePropertyAsync (string name, string propertyName, string storage = null, string folder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await DeletePropertyAsyncWithHttpInfo(name, propertyName, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete document property. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="propertyName"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> DeletePropertyAsyncWithHttpInfo (string name, string propertyName, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->DeleteProperty");
            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
                throw new ApiException(400, "Missing required parameter 'propertyName' when calling PdfApi->DeleteProperty");

            var localVarPath = "/pdf/{name}/documentproperties/{propertyName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (propertyName != null) localVarPathParams.Add("propertyName", ApiClient.ParameterToString(propertyName)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProperty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Read document page circle annotation by ID. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>CircleAnnotationResponse</returns>
        public CircleAnnotationResponse GetCircleAnnotation (string name, string annotationId, string storage = null, string folder = null)
        {
             ApiResponse<CircleAnnotationResponse> localVarResponse = GetCircleAnnotationWithHttpInfo(name, annotationId, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document page circle annotation by ID. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of CircleAnnotationResponse</returns>
        public ApiResponse< CircleAnnotationResponse > GetCircleAnnotationWithHttpInfo (string name, string annotationId, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetCircleAnnotation");
            // verify the required parameter 'annotationId' is set
            if (annotationId == null)
                throw new ApiException(400, "Missing required parameter 'annotationId' when calling PdfApi->GetCircleAnnotation");

            var localVarPath = "/pdf/{name}/annotations/circle/{annotationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (annotationId != null) localVarPathParams.Add("annotationId", ApiClient.ParameterToString(annotationId)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCircleAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CircleAnnotationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CircleAnnotationResponse) ApiClient.Deserialize(localVarResponse, typeof(CircleAnnotationResponse)));
        }

        /// <summary>
        /// Read document page circle annotation by ID. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of CircleAnnotationResponse</returns>
        public async System.Threading.Tasks.Task<CircleAnnotationResponse> GetCircleAnnotationAsync (string name, string annotationId, string storage = null, string folder = null)
        {
             ApiResponse<CircleAnnotationResponse> localVarResponse = await GetCircleAnnotationAsyncWithHttpInfo(name, annotationId, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document page circle annotation by ID. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (CircleAnnotationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CircleAnnotationResponse>> GetCircleAnnotationAsyncWithHttpInfo (string name, string annotationId, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetCircleAnnotation");
            // verify the required parameter 'annotationId' is set
            if (annotationId == null)
                throw new ApiException(400, "Missing required parameter 'annotationId' when calling PdfApi->GetCircleAnnotation");

            var localVarPath = "/pdf/{name}/annotations/circle/{annotationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (annotationId != null) localVarPathParams.Add("annotationId", ApiClient.ParameterToString(annotationId)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCircleAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CircleAnnotationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CircleAnnotationResponse) ApiClient.Deserialize(localVarResponse, typeof(CircleAnnotationResponse)));
        }

        /// <summary>
        /// Read common document info. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>DocumentResponse</returns>
        public DocumentResponse GetDocument (string name, string storage = null, string folder = null)
        {
             ApiResponse<DocumentResponse> localVarResponse = GetDocumentWithHttpInfo(name, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read common document info. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of DocumentResponse</returns>
        public ApiResponse< DocumentResponse > GetDocumentWithHttpInfo (string name, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetDocument");

            var localVarPath = "/pdf/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentResponse) ApiClient.Deserialize(localVarResponse, typeof(DocumentResponse)));
        }

        /// <summary>
        /// Read common document info. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of DocumentResponse</returns>
        public async System.Threading.Tasks.Task<DocumentResponse> GetDocumentAsync (string name, string storage = null, string folder = null)
        {
             ApiResponse<DocumentResponse> localVarResponse = await GetDocumentAsyncWithHttpInfo(name, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read common document info. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (DocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentResponse>> GetDocumentAsyncWithHttpInfo (string name, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetDocument");

            var localVarPath = "/pdf/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentResponse) ApiClient.Deserialize(localVarResponse, typeof(DocumentResponse)));
        }

        /// <summary>
        /// Read documant page annotations. Returns only FreeTextAnnotations, TextAnnotations, other annotations will implemented next releases. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AnnotationsInfoResponse</returns>
        public AnnotationsInfoResponse GetDocumentAnnotations (string name, string storage = null, string folder = null)
        {
             ApiResponse<AnnotationsInfoResponse> localVarResponse = GetDocumentAnnotationsWithHttpInfo(name, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read documant page annotations. Returns only FreeTextAnnotations, TextAnnotations, other annotations will implemented next releases. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AnnotationsInfoResponse</returns>
        public ApiResponse< AnnotationsInfoResponse > GetDocumentAnnotationsWithHttpInfo (string name, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetDocumentAnnotations");

            var localVarPath = "/pdf/{name}/annotations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnnotationsInfoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnnotationsInfoResponse) ApiClient.Deserialize(localVarResponse, typeof(AnnotationsInfoResponse)));
        }

        /// <summary>
        /// Read documant page annotations. Returns only FreeTextAnnotations, TextAnnotations, other annotations will implemented next releases. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AnnotationsInfoResponse</returns>
        public async System.Threading.Tasks.Task<AnnotationsInfoResponse> GetDocumentAnnotationsAsync (string name, string storage = null, string folder = null)
        {
             ApiResponse<AnnotationsInfoResponse> localVarResponse = await GetDocumentAnnotationsAsyncWithHttpInfo(name, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read documant page annotations. Returns only FreeTextAnnotations, TextAnnotations, other annotations will implemented next releases. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AnnotationsInfoResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AnnotationsInfoResponse>> GetDocumentAnnotationsAsyncWithHttpInfo (string name, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetDocumentAnnotations");

            var localVarPath = "/pdf/{name}/annotations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnnotationsInfoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnnotationsInfoResponse) ApiClient.Deserialize(localVarResponse, typeof(AnnotationsInfoResponse)));
        }

        /// <summary>
        /// Read document attachment info by its index. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="attachmentIndex">The attachment index.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AttachmentResponse</returns>
        public AttachmentResponse GetDocumentAttachmentByIndex (string name, int? attachmentIndex, string storage = null, string folder = null)
        {
             ApiResponse<AttachmentResponse> localVarResponse = GetDocumentAttachmentByIndexWithHttpInfo(name, attachmentIndex, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document attachment info by its index. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="attachmentIndex">The attachment index.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AttachmentResponse</returns>
        public ApiResponse< AttachmentResponse > GetDocumentAttachmentByIndexWithHttpInfo (string name, int? attachmentIndex, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetDocumentAttachmentByIndex");
            // verify the required parameter 'attachmentIndex' is set
            if (attachmentIndex == null)
                throw new ApiException(400, "Missing required parameter 'attachmentIndex' when calling PdfApi->GetDocumentAttachmentByIndex");

            var localVarPath = "/pdf/{name}/attachments/{attachmentIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (attachmentIndex != null) localVarPathParams.Add("attachmentIndex", ApiClient.ParameterToString(attachmentIndex)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentAttachmentByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AttachmentResponse) ApiClient.Deserialize(localVarResponse, typeof(AttachmentResponse)));
        }

        /// <summary>
        /// Read document attachment info by its index. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="attachmentIndex">The attachment index.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AttachmentResponse</returns>
        public async System.Threading.Tasks.Task<AttachmentResponse> GetDocumentAttachmentByIndexAsync (string name, int? attachmentIndex, string storage = null, string folder = null)
        {
             ApiResponse<AttachmentResponse> localVarResponse = await GetDocumentAttachmentByIndexAsyncWithHttpInfo(name, attachmentIndex, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document attachment info by its index. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="attachmentIndex">The attachment index.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AttachmentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AttachmentResponse>> GetDocumentAttachmentByIndexAsyncWithHttpInfo (string name, int? attachmentIndex, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetDocumentAttachmentByIndex");
            // verify the required parameter 'attachmentIndex' is set
            if (attachmentIndex == null)
                throw new ApiException(400, "Missing required parameter 'attachmentIndex' when calling PdfApi->GetDocumentAttachmentByIndex");

            var localVarPath = "/pdf/{name}/attachments/{attachmentIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (attachmentIndex != null) localVarPathParams.Add("attachmentIndex", ApiClient.ParameterToString(attachmentIndex)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentAttachmentByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AttachmentResponse) ApiClient.Deserialize(localVarResponse, typeof(AttachmentResponse)));
        }

        /// <summary>
        /// Read document attachments info. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AttachmentsResponse</returns>
        public AttachmentsResponse GetDocumentAttachments (string name, string storage = null, string folder = null)
        {
             ApiResponse<AttachmentsResponse> localVarResponse = GetDocumentAttachmentsWithHttpInfo(name, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document attachments info. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AttachmentsResponse</returns>
        public ApiResponse< AttachmentsResponse > GetDocumentAttachmentsWithHttpInfo (string name, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetDocumentAttachments");

            var localVarPath = "/pdf/{name}/attachments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentAttachments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AttachmentsResponse) ApiClient.Deserialize(localVarResponse, typeof(AttachmentsResponse)));
        }

        /// <summary>
        /// Read document attachments info. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AttachmentsResponse</returns>
        public async System.Threading.Tasks.Task<AttachmentsResponse> GetDocumentAttachmentsAsync (string name, string storage = null, string folder = null)
        {
             ApiResponse<AttachmentsResponse> localVarResponse = await GetDocumentAttachmentsAsyncWithHttpInfo(name, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document attachments info. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AttachmentsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AttachmentsResponse>> GetDocumentAttachmentsAsyncWithHttpInfo (string name, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetDocumentAttachments");

            var localVarPath = "/pdf/{name}/attachments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentAttachments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AttachmentsResponse) ApiClient.Deserialize(localVarResponse, typeof(AttachmentsResponse)));
        }

        /// <summary>
        /// Read document bookmark/bookmarks (including children). 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="bookmarkPath">The bookmark path. Leave it empty if you want to get all the bookmarks in the document. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetDocumentBookmarks (string name, string bookmarkPath = null, string storage = null, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetDocumentBookmarksWithHttpInfo(name, bookmarkPath, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document bookmark/bookmarks (including children). 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="bookmarkPath">The bookmark path. Leave it empty if you want to get all the bookmarks in the document. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetDocumentBookmarksWithHttpInfo (string name, string bookmarkPath = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetDocumentBookmarks");

            var localVarPath = "/pdf/{name}/bookmarks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (bookmarkPath != null) localVarQueryParams.Add("bookmarkPath", ApiClient.ParameterToString(bookmarkPath)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentBookmarks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Read document bookmark/bookmarks (including children). 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="bookmarkPath">The bookmark path. Leave it empty if you want to get all the bookmarks in the document. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetDocumentBookmarksAsync (string name, string bookmarkPath = null, string storage = null, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetDocumentBookmarksAsyncWithHttpInfo(name, bookmarkPath, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document bookmark/bookmarks (including children). 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="bookmarkPath">The bookmark path. Leave it empty if you want to get all the bookmarks in the document. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetDocumentBookmarksAsyncWithHttpInfo (string name, string bookmarkPath = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetDocumentBookmarks");

            var localVarPath = "/pdf/{name}/bookmarks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (bookmarkPath != null) localVarQueryParams.Add("bookmarkPath", ApiClient.ParameterToString(bookmarkPath)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentBookmarks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Read document circle annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>CircleAnnotationsResponse</returns>
        public CircleAnnotationsResponse GetDocumentCircleAnnotations (string name, string storage = null, string folder = null)
        {
             ApiResponse<CircleAnnotationsResponse> localVarResponse = GetDocumentCircleAnnotationsWithHttpInfo(name, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document circle annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of CircleAnnotationsResponse</returns>
        public ApiResponse< CircleAnnotationsResponse > GetDocumentCircleAnnotationsWithHttpInfo (string name, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetDocumentCircleAnnotations");

            var localVarPath = "/pdf/{name}/annotations/circle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentCircleAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CircleAnnotationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CircleAnnotationsResponse) ApiClient.Deserialize(localVarResponse, typeof(CircleAnnotationsResponse)));
        }

        /// <summary>
        /// Read document circle annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of CircleAnnotationsResponse</returns>
        public async System.Threading.Tasks.Task<CircleAnnotationsResponse> GetDocumentCircleAnnotationsAsync (string name, string storage = null, string folder = null)
        {
             ApiResponse<CircleAnnotationsResponse> localVarResponse = await GetDocumentCircleAnnotationsAsyncWithHttpInfo(name, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document circle annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (CircleAnnotationsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CircleAnnotationsResponse>> GetDocumentCircleAnnotationsAsyncWithHttpInfo (string name, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetDocumentCircleAnnotations");

            var localVarPath = "/pdf/{name}/annotations/circle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentCircleAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CircleAnnotationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CircleAnnotationsResponse) ApiClient.Deserialize(localVarResponse, typeof(CircleAnnotationsResponse)));
        }

        /// <summary>
        /// Read document free text annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>FreeTextAnnotationsResponse</returns>
        public FreeTextAnnotationsResponse GetDocumentFreeTextAnnotations (string name, string storage = null, string folder = null)
        {
             ApiResponse<FreeTextAnnotationsResponse> localVarResponse = GetDocumentFreeTextAnnotationsWithHttpInfo(name, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document free text annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of FreeTextAnnotationsResponse</returns>
        public ApiResponse< FreeTextAnnotationsResponse > GetDocumentFreeTextAnnotationsWithHttpInfo (string name, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetDocumentFreeTextAnnotations");

            var localVarPath = "/pdf/{name}/annotations/freetext";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentFreeTextAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FreeTextAnnotationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FreeTextAnnotationsResponse) ApiClient.Deserialize(localVarResponse, typeof(FreeTextAnnotationsResponse)));
        }

        /// <summary>
        /// Read document free text annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of FreeTextAnnotationsResponse</returns>
        public async System.Threading.Tasks.Task<FreeTextAnnotationsResponse> GetDocumentFreeTextAnnotationsAsync (string name, string storage = null, string folder = null)
        {
             ApiResponse<FreeTextAnnotationsResponse> localVarResponse = await GetDocumentFreeTextAnnotationsAsyncWithHttpInfo(name, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document free text annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (FreeTextAnnotationsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FreeTextAnnotationsResponse>> GetDocumentFreeTextAnnotationsAsyncWithHttpInfo (string name, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetDocumentFreeTextAnnotations");

            var localVarPath = "/pdf/{name}/annotations/freetext";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentFreeTextAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FreeTextAnnotationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FreeTextAnnotationsResponse) ApiClient.Deserialize(localVarResponse, typeof(FreeTextAnnotationsResponse)));
        }

        /// <summary>
        /// Read document line annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>LineAnnotationsResponse</returns>
        public LineAnnotationsResponse GetDocumentLineAnnotations (string name, string storage = null, string folder = null)
        {
             ApiResponse<LineAnnotationsResponse> localVarResponse = GetDocumentLineAnnotationsWithHttpInfo(name, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document line annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of LineAnnotationsResponse</returns>
        public ApiResponse< LineAnnotationsResponse > GetDocumentLineAnnotationsWithHttpInfo (string name, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetDocumentLineAnnotations");

            var localVarPath = "/pdf/{name}/annotations/line";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentLineAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LineAnnotationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LineAnnotationsResponse) ApiClient.Deserialize(localVarResponse, typeof(LineAnnotationsResponse)));
        }

        /// <summary>
        /// Read document line annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of LineAnnotationsResponse</returns>
        public async System.Threading.Tasks.Task<LineAnnotationsResponse> GetDocumentLineAnnotationsAsync (string name, string storage = null, string folder = null)
        {
             ApiResponse<LineAnnotationsResponse> localVarResponse = await GetDocumentLineAnnotationsAsyncWithHttpInfo(name, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document line annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (LineAnnotationsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LineAnnotationsResponse>> GetDocumentLineAnnotationsAsyncWithHttpInfo (string name, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetDocumentLineAnnotations");

            var localVarPath = "/pdf/{name}/annotations/line";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentLineAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LineAnnotationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LineAnnotationsResponse) ApiClient.Deserialize(localVarResponse, typeof(LineAnnotationsResponse)));
        }

        /// <summary>
        /// Read document polyline annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>PolyLineAnnotationsResponse</returns>
        public PolyLineAnnotationsResponse GetDocumentPolyLineAnnotations (string name, string storage = null, string folder = null)
        {
             ApiResponse<PolyLineAnnotationsResponse> localVarResponse = GetDocumentPolyLineAnnotationsWithHttpInfo(name, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document polyline annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of PolyLineAnnotationsResponse</returns>
        public ApiResponse< PolyLineAnnotationsResponse > GetDocumentPolyLineAnnotationsWithHttpInfo (string name, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetDocumentPolyLineAnnotations");

            var localVarPath = "/pdf/{name}/annotations/polyline";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentPolyLineAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolyLineAnnotationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PolyLineAnnotationsResponse) ApiClient.Deserialize(localVarResponse, typeof(PolyLineAnnotationsResponse)));
        }

        /// <summary>
        /// Read document polyline annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of PolyLineAnnotationsResponse</returns>
        public async System.Threading.Tasks.Task<PolyLineAnnotationsResponse> GetDocumentPolyLineAnnotationsAsync (string name, string storage = null, string folder = null)
        {
             ApiResponse<PolyLineAnnotationsResponse> localVarResponse = await GetDocumentPolyLineAnnotationsAsyncWithHttpInfo(name, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document polyline annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (PolyLineAnnotationsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PolyLineAnnotationsResponse>> GetDocumentPolyLineAnnotationsAsyncWithHttpInfo (string name, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetDocumentPolyLineAnnotations");

            var localVarPath = "/pdf/{name}/annotations/polyline";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentPolyLineAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolyLineAnnotationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PolyLineAnnotationsResponse) ApiClient.Deserialize(localVarResponse, typeof(PolyLineAnnotationsResponse)));
        }

        /// <summary>
        /// Read document polygon annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>PolygonAnnotationsResponse</returns>
        public PolygonAnnotationsResponse GetDocumentPolygonAnnotations (string name, string storage = null, string folder = null)
        {
             ApiResponse<PolygonAnnotationsResponse> localVarResponse = GetDocumentPolygonAnnotationsWithHttpInfo(name, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document polygon annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of PolygonAnnotationsResponse</returns>
        public ApiResponse< PolygonAnnotationsResponse > GetDocumentPolygonAnnotationsWithHttpInfo (string name, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetDocumentPolygonAnnotations");

            var localVarPath = "/pdf/{name}/annotations/polygon";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentPolygonAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolygonAnnotationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PolygonAnnotationsResponse) ApiClient.Deserialize(localVarResponse, typeof(PolygonAnnotationsResponse)));
        }

        /// <summary>
        /// Read document polygon annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of PolygonAnnotationsResponse</returns>
        public async System.Threading.Tasks.Task<PolygonAnnotationsResponse> GetDocumentPolygonAnnotationsAsync (string name, string storage = null, string folder = null)
        {
             ApiResponse<PolygonAnnotationsResponse> localVarResponse = await GetDocumentPolygonAnnotationsAsyncWithHttpInfo(name, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document polygon annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (PolygonAnnotationsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PolygonAnnotationsResponse>> GetDocumentPolygonAnnotationsAsyncWithHttpInfo (string name, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetDocumentPolygonAnnotations");

            var localVarPath = "/pdf/{name}/annotations/polygon";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentPolygonAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolygonAnnotationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PolygonAnnotationsResponse) ApiClient.Deserialize(localVarResponse, typeof(PolygonAnnotationsResponse)));
        }

        /// <summary>
        /// Read document properties. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>DocumentPropertiesResponse</returns>
        public DocumentPropertiesResponse GetDocumentProperties (string name, string storage = null, string folder = null)
        {
             ApiResponse<DocumentPropertiesResponse> localVarResponse = GetDocumentPropertiesWithHttpInfo(name, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document properties. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of DocumentPropertiesResponse</returns>
        public ApiResponse< DocumentPropertiesResponse > GetDocumentPropertiesWithHttpInfo (string name, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetDocumentProperties");

            var localVarPath = "/pdf/{name}/documentproperties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentPropertiesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentPropertiesResponse) ApiClient.Deserialize(localVarResponse, typeof(DocumentPropertiesResponse)));
        }

        /// <summary>
        /// Read document properties. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of DocumentPropertiesResponse</returns>
        public async System.Threading.Tasks.Task<DocumentPropertiesResponse> GetDocumentPropertiesAsync (string name, string storage = null, string folder = null)
        {
             ApiResponse<DocumentPropertiesResponse> localVarResponse = await GetDocumentPropertiesAsyncWithHttpInfo(name, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document properties. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (DocumentPropertiesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentPropertiesResponse>> GetDocumentPropertiesAsyncWithHttpInfo (string name, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetDocumentProperties");

            var localVarPath = "/pdf/{name}/documentproperties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentPropertiesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentPropertiesResponse) ApiClient.Deserialize(localVarResponse, typeof(DocumentPropertiesResponse)));
        }

        /// <summary>
        /// Read document property by name. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="propertyName"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>DocumentPropertyResponse</returns>
        public DocumentPropertyResponse GetDocumentProperty (string name, string propertyName, string storage = null, string folder = null)
        {
             ApiResponse<DocumentPropertyResponse> localVarResponse = GetDocumentPropertyWithHttpInfo(name, propertyName, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document property by name. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="propertyName"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of DocumentPropertyResponse</returns>
        public ApiResponse< DocumentPropertyResponse > GetDocumentPropertyWithHttpInfo (string name, string propertyName, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetDocumentProperty");
            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
                throw new ApiException(400, "Missing required parameter 'propertyName' when calling PdfApi->GetDocumentProperty");

            var localVarPath = "/pdf/{name}/documentproperties/{propertyName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (propertyName != null) localVarPathParams.Add("propertyName", ApiClient.ParameterToString(propertyName)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentProperty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentPropertyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentPropertyResponse) ApiClient.Deserialize(localVarResponse, typeof(DocumentPropertyResponse)));
        }

        /// <summary>
        /// Read document property by name. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="propertyName"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of DocumentPropertyResponse</returns>
        public async System.Threading.Tasks.Task<DocumentPropertyResponse> GetDocumentPropertyAsync (string name, string propertyName, string storage = null, string folder = null)
        {
             ApiResponse<DocumentPropertyResponse> localVarResponse = await GetDocumentPropertyAsyncWithHttpInfo(name, propertyName, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document property by name. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="propertyName"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (DocumentPropertyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentPropertyResponse>> GetDocumentPropertyAsyncWithHttpInfo (string name, string propertyName, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetDocumentProperty");
            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
                throw new ApiException(400, "Missing required parameter 'propertyName' when calling PdfApi->GetDocumentProperty");

            var localVarPath = "/pdf/{name}/documentproperties/{propertyName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (propertyName != null) localVarPathParams.Add("propertyName", ApiClient.ParameterToString(propertyName)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentProperty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentPropertyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentPropertyResponse) ApiClient.Deserialize(localVarResponse, typeof(DocumentPropertyResponse)));
        }

        /// <summary>
        /// Read document square annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SquareAnnotationsResponse</returns>
        public SquareAnnotationsResponse GetDocumentSquareAnnotations (string name, string storage = null, string folder = null)
        {
             ApiResponse<SquareAnnotationsResponse> localVarResponse = GetDocumentSquareAnnotationsWithHttpInfo(name, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document square annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SquareAnnotationsResponse</returns>
        public ApiResponse< SquareAnnotationsResponse > GetDocumentSquareAnnotationsWithHttpInfo (string name, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetDocumentSquareAnnotations");

            var localVarPath = "/pdf/{name}/annotations/square";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentSquareAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SquareAnnotationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SquareAnnotationsResponse) ApiClient.Deserialize(localVarResponse, typeof(SquareAnnotationsResponse)));
        }

        /// <summary>
        /// Read document square annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SquareAnnotationsResponse</returns>
        public async System.Threading.Tasks.Task<SquareAnnotationsResponse> GetDocumentSquareAnnotationsAsync (string name, string storage = null, string folder = null)
        {
             ApiResponse<SquareAnnotationsResponse> localVarResponse = await GetDocumentSquareAnnotationsAsyncWithHttpInfo(name, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document square annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SquareAnnotationsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SquareAnnotationsResponse>> GetDocumentSquareAnnotationsAsyncWithHttpInfo (string name, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetDocumentSquareAnnotations");

            var localVarPath = "/pdf/{name}/annotations/square";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentSquareAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SquareAnnotationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SquareAnnotationsResponse) ApiClient.Deserialize(localVarResponse, typeof(SquareAnnotationsResponse)));
        }

        /// <summary>
        /// Read document text annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>TextAnnotationsResponse</returns>
        public TextAnnotationsResponse GetDocumentTextAnnotations (string name, string storage = null, string folder = null)
        {
             ApiResponse<TextAnnotationsResponse> localVarResponse = GetDocumentTextAnnotationsWithHttpInfo(name, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document text annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of TextAnnotationsResponse</returns>
        public ApiResponse< TextAnnotationsResponse > GetDocumentTextAnnotationsWithHttpInfo (string name, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetDocumentTextAnnotations");

            var localVarPath = "/pdf/{name}/annotations/text";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentTextAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextAnnotationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TextAnnotationsResponse) ApiClient.Deserialize(localVarResponse, typeof(TextAnnotationsResponse)));
        }

        /// <summary>
        /// Read document text annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of TextAnnotationsResponse</returns>
        public async System.Threading.Tasks.Task<TextAnnotationsResponse> GetDocumentTextAnnotationsAsync (string name, string storage = null, string folder = null)
        {
             ApiResponse<TextAnnotationsResponse> localVarResponse = await GetDocumentTextAnnotationsAsyncWithHttpInfo(name, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document text annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (TextAnnotationsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TextAnnotationsResponse>> GetDocumentTextAnnotationsAsyncWithHttpInfo (string name, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetDocumentTextAnnotations");

            var localVarPath = "/pdf/{name}/annotations/text";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentTextAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextAnnotationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TextAnnotationsResponse) ApiClient.Deserialize(localVarResponse, typeof(TextAnnotationsResponse)));
        }

        /// <summary>
        /// Download a specific file  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path of the file including the file name and extension e.g. /file.ext</param>
        /// <param name="versionId">File&#39;s version (optional)</param>
        /// <param name="storage">User&#39;s storage name (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetDownload (string path, string versionId = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetDownloadWithHttpInfo(path, versionId, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Download a specific file  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path of the file including the file name and extension e.g. /file.ext</param>
        /// <param name="versionId">File&#39;s version (optional)</param>
        /// <param name="storage">User&#39;s storage name (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetDownloadWithHttpInfo (string path, string versionId = null, string storage = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling PdfApi->GetDownload");

            var localVarPath = "/storage/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarQueryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            if (versionId != null) localVarQueryParams.Add("versionId", ApiClient.ParameterToString(versionId)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDownload", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Download a specific file  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path of the file including the file name and extension e.g. /file.ext</param>
        /// <param name="versionId">File&#39;s version (optional)</param>
        /// <param name="storage">User&#39;s storage name (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetDownloadAsync (string path, string versionId = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetDownloadAsyncWithHttpInfo(path, versionId, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Download a specific file  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path of the file including the file name and extension e.g. /file.ext</param>
        /// <param name="versionId">File&#39;s version (optional)</param>
        /// <param name="storage">User&#39;s storage name (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetDownloadAsyncWithHttpInfo (string path, string versionId = null, string storage = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling PdfApi->GetDownload");

            var localVarPath = "/storage/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarQueryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            if (versionId != null) localVarQueryParams.Add("versionId", ApiClient.ParameterToString(versionId)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDownload", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Download document attachment content by its index. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="attachmentIndex">The attachment index.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetDownloadDocumentAttachmentByIndex (string name, int? attachmentIndex, string storage = null, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetDownloadDocumentAttachmentByIndexWithHttpInfo(name, attachmentIndex, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Download document attachment content by its index. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="attachmentIndex">The attachment index.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetDownloadDocumentAttachmentByIndexWithHttpInfo (string name, int? attachmentIndex, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetDownloadDocumentAttachmentByIndex");
            // verify the required parameter 'attachmentIndex' is set
            if (attachmentIndex == null)
                throw new ApiException(400, "Missing required parameter 'attachmentIndex' when calling PdfApi->GetDownloadDocumentAttachmentByIndex");

            var localVarPath = "/pdf/{name}/attachments/{attachmentIndex}/download";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (attachmentIndex != null) localVarPathParams.Add("attachmentIndex", ApiClient.ParameterToString(attachmentIndex)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDownloadDocumentAttachmentByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Download document attachment content by its index. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="attachmentIndex">The attachment index.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetDownloadDocumentAttachmentByIndexAsync (string name, int? attachmentIndex, string storage = null, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetDownloadDocumentAttachmentByIndexAsyncWithHttpInfo(name, attachmentIndex, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Download document attachment content by its index. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="attachmentIndex">The attachment index.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetDownloadDocumentAttachmentByIndexAsyncWithHttpInfo (string name, int? attachmentIndex, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetDownloadDocumentAttachmentByIndex");
            // verify the required parameter 'attachmentIndex' is set
            if (attachmentIndex == null)
                throw new ApiException(400, "Missing required parameter 'attachmentIndex' when calling PdfApi->GetDownloadDocumentAttachmentByIndex");

            var localVarPath = "/pdf/{name}/attachments/{attachmentIndex}/download";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (attachmentIndex != null) localVarPathParams.Add("attachmentIndex", ApiClient.ParameterToString(attachmentIndex)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDownloadDocumentAttachmentByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert EPUB file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.epub)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetEpubInStorageToPdf (string srcPath, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetEpubInStorageToPdfWithHttpInfo(srcPath, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert EPUB file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.epub)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetEpubInStorageToPdfWithHttpInfo (string srcPath, string storage = null)
        {
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->GetEpubInStorageToPdf");

            var localVarPath = "/pdf/create/epub";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEpubInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert EPUB file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.epub)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetEpubInStorageToPdfAsync (string srcPath, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetEpubInStorageToPdfAsyncWithHttpInfo(srcPath, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert EPUB file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.epub)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetEpubInStorageToPdfAsyncWithHttpInfo (string srcPath, string storage = null)
        {
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->GetEpubInStorageToPdf");

            var localVarPath = "/pdf/create/epub";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEpubInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get document field by name. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fieldName">The field name/</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>FieldResponse</returns>
        public FieldResponse GetField (string name, string fieldName, string storage = null, string folder = null)
        {
             ApiResponse<FieldResponse> localVarResponse = GetFieldWithHttpInfo(name, fieldName, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get document field by name. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fieldName">The field name/</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of FieldResponse</returns>
        public ApiResponse< FieldResponse > GetFieldWithHttpInfo (string name, string fieldName, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetField");
            // verify the required parameter 'fieldName' is set
            if (fieldName == null)
                throw new ApiException(400, "Missing required parameter 'fieldName' when calling PdfApi->GetField");

            var localVarPath = "/pdf/{name}/fields/{fieldName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (fieldName != null) localVarPathParams.Add("fieldName", ApiClient.ParameterToString(fieldName)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldResponse) ApiClient.Deserialize(localVarResponse, typeof(FieldResponse)));
        }

        /// <summary>
        /// Get document field by name. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fieldName">The field name/</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of FieldResponse</returns>
        public async System.Threading.Tasks.Task<FieldResponse> GetFieldAsync (string name, string fieldName, string storage = null, string folder = null)
        {
             ApiResponse<FieldResponse> localVarResponse = await GetFieldAsyncWithHttpInfo(name, fieldName, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get document field by name. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fieldName">The field name/</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (FieldResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FieldResponse>> GetFieldAsyncWithHttpInfo (string name, string fieldName, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetField");
            // verify the required parameter 'fieldName' is set
            if (fieldName == null)
                throw new ApiException(400, "Missing required parameter 'fieldName' when calling PdfApi->GetField");

            var localVarPath = "/pdf/{name}/fields/{fieldName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (fieldName != null) localVarPathParams.Add("fieldName", ApiClient.ParameterToString(fieldName)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldResponse) ApiClient.Deserialize(localVarResponse, typeof(FieldResponse)));
        }

        /// <summary>
        /// Get document fields. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>FieldsResponse</returns>
        public FieldsResponse GetFields (string name, string storage = null, string folder = null)
        {
             ApiResponse<FieldsResponse> localVarResponse = GetFieldsWithHttpInfo(name, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get document fields. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of FieldsResponse</returns>
        public ApiResponse< FieldsResponse > GetFieldsWithHttpInfo (string name, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetFields");

            var localVarPath = "/pdf/{name}/fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldsResponse) ApiClient.Deserialize(localVarResponse, typeof(FieldsResponse)));
        }

        /// <summary>
        /// Get document fields. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of FieldsResponse</returns>
        public async System.Threading.Tasks.Task<FieldsResponse> GetFieldsAsync (string name, string storage = null, string folder = null)
        {
             ApiResponse<FieldsResponse> localVarResponse = await GetFieldsAsyncWithHttpInfo(name, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get document fields. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (FieldsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FieldsResponse>> GetFieldsAsyncWithHttpInfo (string name, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetFields");

            var localVarPath = "/pdf/{name}/fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldsResponse) ApiClient.Deserialize(localVarResponse, typeof(FieldsResponse)));
        }

        /// <summary>
        /// Read document page free text annotation by ID. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>FreeTextAnnotationResponse</returns>
        public FreeTextAnnotationResponse GetFreeTextAnnotation (string name, string annotationId, string storage = null, string folder = null)
        {
             ApiResponse<FreeTextAnnotationResponse> localVarResponse = GetFreeTextAnnotationWithHttpInfo(name, annotationId, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document page free text annotation by ID. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of FreeTextAnnotationResponse</returns>
        public ApiResponse< FreeTextAnnotationResponse > GetFreeTextAnnotationWithHttpInfo (string name, string annotationId, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetFreeTextAnnotation");
            // verify the required parameter 'annotationId' is set
            if (annotationId == null)
                throw new ApiException(400, "Missing required parameter 'annotationId' when calling PdfApi->GetFreeTextAnnotation");

            var localVarPath = "/pdf/{name}/annotations/freetext/{annotationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (annotationId != null) localVarPathParams.Add("annotationId", ApiClient.ParameterToString(annotationId)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFreeTextAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FreeTextAnnotationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FreeTextAnnotationResponse) ApiClient.Deserialize(localVarResponse, typeof(FreeTextAnnotationResponse)));
        }

        /// <summary>
        /// Read document page free text annotation by ID. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of FreeTextAnnotationResponse</returns>
        public async System.Threading.Tasks.Task<FreeTextAnnotationResponse> GetFreeTextAnnotationAsync (string name, string annotationId, string storage = null, string folder = null)
        {
             ApiResponse<FreeTextAnnotationResponse> localVarResponse = await GetFreeTextAnnotationAsyncWithHttpInfo(name, annotationId, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document page free text annotation by ID. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (FreeTextAnnotationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FreeTextAnnotationResponse>> GetFreeTextAnnotationAsyncWithHttpInfo (string name, string annotationId, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetFreeTextAnnotation");
            // verify the required parameter 'annotationId' is set
            if (annotationId == null)
                throw new ApiException(400, "Missing required parameter 'annotationId' when calling PdfApi->GetFreeTextAnnotation");

            var localVarPath = "/pdf/{name}/annotations/freetext/{annotationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (annotationId != null) localVarPathParams.Add("annotationId", ApiClient.ParameterToString(annotationId)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFreeTextAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FreeTextAnnotationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FreeTextAnnotationResponse) ApiClient.Deserialize(localVarResponse, typeof(FreeTextAnnotationResponse)));
        }

        /// <summary>
        /// Convert HTML file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.zip)</param>
        /// <param name="htmlFileName">Name of HTML file in ZIP.</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetHtmlInStorageToPdf (string srcPath, string htmlFileName, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetHtmlInStorageToPdfWithHttpInfo(srcPath, htmlFileName, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert HTML file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.zip)</param>
        /// <param name="htmlFileName">Name of HTML file in ZIP.</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetHtmlInStorageToPdfWithHttpInfo (string srcPath, string htmlFileName, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string storage = null)
        {
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->GetHtmlInStorageToPdf");
            // verify the required parameter 'htmlFileName' is set
            if (htmlFileName == null)
                throw new ApiException(400, "Missing required parameter 'htmlFileName' when calling PdfApi->GetHtmlInStorageToPdf");

            var localVarPath = "/pdf/create/html";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (htmlFileName != null) localVarQueryParams.Add("htmlFileName", ApiClient.ParameterToString(htmlFileName)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (isLandscape != null) localVarQueryParams.Add("isLandscape", ApiClient.ParameterToString(isLandscape)); // query parameter
            if (marginLeft != null) localVarQueryParams.Add("marginLeft", ApiClient.ParameterToString(marginLeft)); // query parameter
            if (marginBottom != null) localVarQueryParams.Add("marginBottom", ApiClient.ParameterToString(marginBottom)); // query parameter
            if (marginRight != null) localVarQueryParams.Add("marginRight", ApiClient.ParameterToString(marginRight)); // query parameter
            if (marginTop != null) localVarQueryParams.Add("marginTop", ApiClient.ParameterToString(marginTop)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHtmlInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert HTML file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.zip)</param>
        /// <param name="htmlFileName">Name of HTML file in ZIP.</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetHtmlInStorageToPdfAsync (string srcPath, string htmlFileName, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetHtmlInStorageToPdfAsyncWithHttpInfo(srcPath, htmlFileName, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert HTML file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.zip)</param>
        /// <param name="htmlFileName">Name of HTML file in ZIP.</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetHtmlInStorageToPdfAsyncWithHttpInfo (string srcPath, string htmlFileName, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string storage = null)
        {
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->GetHtmlInStorageToPdf");
            // verify the required parameter 'htmlFileName' is set
            if (htmlFileName == null)
                throw new ApiException(400, "Missing required parameter 'htmlFileName' when calling PdfApi->GetHtmlInStorageToPdf");

            var localVarPath = "/pdf/create/html";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (htmlFileName != null) localVarQueryParams.Add("htmlFileName", ApiClient.ParameterToString(htmlFileName)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (isLandscape != null) localVarQueryParams.Add("isLandscape", ApiClient.ParameterToString(isLandscape)); // query parameter
            if (marginLeft != null) localVarQueryParams.Add("marginLeft", ApiClient.ParameterToString(marginLeft)); // query parameter
            if (marginBottom != null) localVarQueryParams.Add("marginBottom", ApiClient.ParameterToString(marginBottom)); // query parameter
            if (marginRight != null) localVarQueryParams.Add("marginRight", ApiClient.ParameterToString(marginRight)); // query parameter
            if (marginTop != null) localVarQueryParams.Add("marginTop", ApiClient.ParameterToString(marginTop)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHtmlInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Read document image by ID. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ImageResponse</returns>
        public ImageResponse GetImage (string name, string imageId, string storage = null, string folder = null)
        {
             ApiResponse<ImageResponse> localVarResponse = GetImageWithHttpInfo(name, imageId, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document image by ID. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of ImageResponse</returns>
        public ApiResponse< ImageResponse > GetImageWithHttpInfo (string name, string imageId, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetImage");
            // verify the required parameter 'imageId' is set
            if (imageId == null)
                throw new ApiException(400, "Missing required parameter 'imageId' when calling PdfApi->GetImage");

            var localVarPath = "/pdf/{name}/images/{imageId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (imageId != null) localVarPathParams.Add("imageId", ApiClient.ParameterToString(imageId)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ImageResponse) ApiClient.Deserialize(localVarResponse, typeof(ImageResponse)));
        }

        /// <summary>
        /// Read document image by ID. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ImageResponse</returns>
        public async System.Threading.Tasks.Task<ImageResponse> GetImageAsync (string name, string imageId, string storage = null, string folder = null)
        {
             ApiResponse<ImageResponse> localVarResponse = await GetImageAsyncWithHttpInfo(name, imageId, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document image by ID. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (ImageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ImageResponse>> GetImageAsyncWithHttpInfo (string name, string imageId, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetImage");
            // verify the required parameter 'imageId' is set
            if (imageId == null)
                throw new ApiException(400, "Missing required parameter 'imageId' when calling PdfApi->GetImage");

            var localVarPath = "/pdf/{name}/images/{imageId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (imageId != null) localVarPathParams.Add("imageId", ApiClient.ParameterToString(imageId)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ImageResponse) ApiClient.Deserialize(localVarResponse, typeof(ImageResponse)));
        }

        /// <summary>
        /// Extract document image in GIF format 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetImageExtractAsGif (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetImageExtractAsGifWithHttpInfo(name, imageId, width, height, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Extract document image in GIF format 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetImageExtractAsGifWithHttpInfo (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetImageExtractAsGif");
            // verify the required parameter 'imageId' is set
            if (imageId == null)
                throw new ApiException(400, "Missing required parameter 'imageId' when calling PdfApi->GetImageExtractAsGif");

            var localVarPath = "/pdf/{name}/images/{imageId}/extract/gif";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (imageId != null) localVarPathParams.Add("imageId", ApiClient.ParameterToString(imageId)); // path parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetImageExtractAsGif", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Extract document image in GIF format 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetImageExtractAsGifAsync (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetImageExtractAsGifAsyncWithHttpInfo(name, imageId, width, height, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Extract document image in GIF format 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetImageExtractAsGifAsyncWithHttpInfo (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetImageExtractAsGif");
            // verify the required parameter 'imageId' is set
            if (imageId == null)
                throw new ApiException(400, "Missing required parameter 'imageId' when calling PdfApi->GetImageExtractAsGif");

            var localVarPath = "/pdf/{name}/images/{imageId}/extract/gif";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (imageId != null) localVarPathParams.Add("imageId", ApiClient.ParameterToString(imageId)); // path parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetImageExtractAsGif", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Extract document image in JPEG format 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetImageExtractAsJpeg (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetImageExtractAsJpegWithHttpInfo(name, imageId, width, height, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Extract document image in JPEG format 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetImageExtractAsJpegWithHttpInfo (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetImageExtractAsJpeg");
            // verify the required parameter 'imageId' is set
            if (imageId == null)
                throw new ApiException(400, "Missing required parameter 'imageId' when calling PdfApi->GetImageExtractAsJpeg");

            var localVarPath = "/pdf/{name}/images/{imageId}/extract/jpeg";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (imageId != null) localVarPathParams.Add("imageId", ApiClient.ParameterToString(imageId)); // path parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetImageExtractAsJpeg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Extract document image in JPEG format 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetImageExtractAsJpegAsync (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetImageExtractAsJpegAsyncWithHttpInfo(name, imageId, width, height, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Extract document image in JPEG format 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetImageExtractAsJpegAsyncWithHttpInfo (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetImageExtractAsJpeg");
            // verify the required parameter 'imageId' is set
            if (imageId == null)
                throw new ApiException(400, "Missing required parameter 'imageId' when calling PdfApi->GetImageExtractAsJpeg");

            var localVarPath = "/pdf/{name}/images/{imageId}/extract/jpeg";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (imageId != null) localVarPathParams.Add("imageId", ApiClient.ParameterToString(imageId)); // path parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetImageExtractAsJpeg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Extract document image in PNG format 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetImageExtractAsPng (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetImageExtractAsPngWithHttpInfo(name, imageId, width, height, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Extract document image in PNG format 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetImageExtractAsPngWithHttpInfo (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetImageExtractAsPng");
            // verify the required parameter 'imageId' is set
            if (imageId == null)
                throw new ApiException(400, "Missing required parameter 'imageId' when calling PdfApi->GetImageExtractAsPng");

            var localVarPath = "/pdf/{name}/images/{imageId}/extract/png";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (imageId != null) localVarPathParams.Add("imageId", ApiClient.ParameterToString(imageId)); // path parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetImageExtractAsPng", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Extract document image in PNG format 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetImageExtractAsPngAsync (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetImageExtractAsPngAsyncWithHttpInfo(name, imageId, width, height, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Extract document image in PNG format 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetImageExtractAsPngAsyncWithHttpInfo (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetImageExtractAsPng");
            // verify the required parameter 'imageId' is set
            if (imageId == null)
                throw new ApiException(400, "Missing required parameter 'imageId' when calling PdfApi->GetImageExtractAsPng");

            var localVarPath = "/pdf/{name}/images/{imageId}/extract/png";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (imageId != null) localVarPathParams.Add("imageId", ApiClient.ParameterToString(imageId)); // path parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetImageExtractAsPng", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Extract document image in TIFF format 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetImageExtractAsTiff (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetImageExtractAsTiffWithHttpInfo(name, imageId, width, height, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Extract document image in TIFF format 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetImageExtractAsTiffWithHttpInfo (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetImageExtractAsTiff");
            // verify the required parameter 'imageId' is set
            if (imageId == null)
                throw new ApiException(400, "Missing required parameter 'imageId' when calling PdfApi->GetImageExtractAsTiff");

            var localVarPath = "/pdf/{name}/images/{imageId}/extract/tiff";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (imageId != null) localVarPathParams.Add("imageId", ApiClient.ParameterToString(imageId)); // path parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetImageExtractAsTiff", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Extract document image in TIFF format 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetImageExtractAsTiffAsync (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetImageExtractAsTiffAsyncWithHttpInfo(name, imageId, width, height, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Extract document image in TIFF format 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetImageExtractAsTiffAsyncWithHttpInfo (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetImageExtractAsTiff");
            // verify the required parameter 'imageId' is set
            if (imageId == null)
                throw new ApiException(400, "Missing required parameter 'imageId' when calling PdfApi->GetImageExtractAsTiff");

            var localVarPath = "/pdf/{name}/images/{imageId}/extract/tiff";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (imageId != null) localVarPathParams.Add("imageId", ApiClient.ParameterToString(imageId)); // path parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetImageExtractAsTiff", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Read document images. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ImagesResponse</returns>
        public ImagesResponse GetImages (string name, int? pageNumber, string storage = null, string folder = null)
        {
             ApiResponse<ImagesResponse> localVarResponse = GetImagesWithHttpInfo(name, pageNumber, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document images. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of ImagesResponse</returns>
        public ApiResponse< ImagesResponse > GetImagesWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetImages");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetImages");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/images";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetImages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ImagesResponse) ApiClient.Deserialize(localVarResponse, typeof(ImagesResponse)));
        }

        /// <summary>
        /// Read document images. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ImagesResponse</returns>
        public async System.Threading.Tasks.Task<ImagesResponse> GetImagesAsync (string name, int? pageNumber, string storage = null, string folder = null)
        {
             ApiResponse<ImagesResponse> localVarResponse = await GetImagesAsyncWithHttpInfo(name, pageNumber, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document images. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (ImagesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ImagesResponse>> GetImagesAsyncWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetImages");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetImages");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/images";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetImages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ImagesResponse) ApiClient.Deserialize(localVarResponse, typeof(ImagesResponse)));
        }

        /// <summary>
        /// Convert LaTeX file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.tex)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetLaTeXInStorageToPdf (string srcPath, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetLaTeXInStorageToPdfWithHttpInfo(srcPath, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert LaTeX file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.tex)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetLaTeXInStorageToPdfWithHttpInfo (string srcPath, string storage = null)
        {
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->GetLaTeXInStorageToPdf");

            var localVarPath = "/pdf/create/latex";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLaTeXInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert LaTeX file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.tex)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetLaTeXInStorageToPdfAsync (string srcPath, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetLaTeXInStorageToPdfAsyncWithHttpInfo(srcPath, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert LaTeX file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.tex)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetLaTeXInStorageToPdfAsyncWithHttpInfo (string srcPath, string storage = null)
        {
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->GetLaTeXInStorageToPdf");

            var localVarPath = "/pdf/create/latex";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLaTeXInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Read document page line annotation by ID. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>LineAnnotationResponse</returns>
        public LineAnnotationResponse GetLineAnnotation (string name, string annotationId, string storage = null, string folder = null)
        {
             ApiResponse<LineAnnotationResponse> localVarResponse = GetLineAnnotationWithHttpInfo(name, annotationId, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document page line annotation by ID. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of LineAnnotationResponse</returns>
        public ApiResponse< LineAnnotationResponse > GetLineAnnotationWithHttpInfo (string name, string annotationId, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetLineAnnotation");
            // verify the required parameter 'annotationId' is set
            if (annotationId == null)
                throw new ApiException(400, "Missing required parameter 'annotationId' when calling PdfApi->GetLineAnnotation");

            var localVarPath = "/pdf/{name}/annotations/line/{annotationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (annotationId != null) localVarPathParams.Add("annotationId", ApiClient.ParameterToString(annotationId)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLineAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LineAnnotationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LineAnnotationResponse) ApiClient.Deserialize(localVarResponse, typeof(LineAnnotationResponse)));
        }

        /// <summary>
        /// Read document page line annotation by ID. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of LineAnnotationResponse</returns>
        public async System.Threading.Tasks.Task<LineAnnotationResponse> GetLineAnnotationAsync (string name, string annotationId, string storage = null, string folder = null)
        {
             ApiResponse<LineAnnotationResponse> localVarResponse = await GetLineAnnotationAsyncWithHttpInfo(name, annotationId, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document page line annotation by ID. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (LineAnnotationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LineAnnotationResponse>> GetLineAnnotationAsyncWithHttpInfo (string name, string annotationId, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetLineAnnotation");
            // verify the required parameter 'annotationId' is set
            if (annotationId == null)
                throw new ApiException(400, "Missing required parameter 'annotationId' when calling PdfApi->GetLineAnnotation");

            var localVarPath = "/pdf/{name}/annotations/line/{annotationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (annotationId != null) localVarPathParams.Add("annotationId", ApiClient.ParameterToString(annotationId)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLineAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LineAnnotationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LineAnnotationResponse) ApiClient.Deserialize(localVarResponse, typeof(LineAnnotationResponse)));
        }

        /// <summary>
        /// Read document link annotation by ID. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="linkId">The link ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>LinkAnnotationResponse</returns>
        public LinkAnnotationResponse GetLinkAnnotation (string name, string linkId, string storage = null, string folder = null)
        {
             ApiResponse<LinkAnnotationResponse> localVarResponse = GetLinkAnnotationWithHttpInfo(name, linkId, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document link annotation by ID. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="linkId">The link ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of LinkAnnotationResponse</returns>
        public ApiResponse< LinkAnnotationResponse > GetLinkAnnotationWithHttpInfo (string name, string linkId, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetLinkAnnotation");
            // verify the required parameter 'linkId' is set
            if (linkId == null)
                throw new ApiException(400, "Missing required parameter 'linkId' when calling PdfApi->GetLinkAnnotation");

            var localVarPath = "/pdf/{name}/links/{linkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (linkId != null) localVarPathParams.Add("linkId", ApiClient.ParameterToString(linkId)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLinkAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LinkAnnotationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LinkAnnotationResponse) ApiClient.Deserialize(localVarResponse, typeof(LinkAnnotationResponse)));
        }

        /// <summary>
        /// Read document link annotation by ID. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="linkId">The link ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of LinkAnnotationResponse</returns>
        public async System.Threading.Tasks.Task<LinkAnnotationResponse> GetLinkAnnotationAsync (string name, string linkId, string storage = null, string folder = null)
        {
             ApiResponse<LinkAnnotationResponse> localVarResponse = await GetLinkAnnotationAsyncWithHttpInfo(name, linkId, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document link annotation by ID. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="linkId">The link ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (LinkAnnotationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LinkAnnotationResponse>> GetLinkAnnotationAsyncWithHttpInfo (string name, string linkId, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetLinkAnnotation");
            // verify the required parameter 'linkId' is set
            if (linkId == null)
                throw new ApiException(400, "Missing required parameter 'linkId' when calling PdfApi->GetLinkAnnotation");

            var localVarPath = "/pdf/{name}/links/{linkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (linkId != null) localVarPathParams.Add("linkId", ApiClient.ParameterToString(linkId)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLinkAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LinkAnnotationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LinkAnnotationResponse) ApiClient.Deserialize(localVarResponse, typeof(LinkAnnotationResponse)));
        }

        /// <summary>
        /// Convert MHT file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.mht)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetMhtInStorageToPdf (string srcPath, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetMhtInStorageToPdfWithHttpInfo(srcPath, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert MHT file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.mht)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetMhtInStorageToPdfWithHttpInfo (string srcPath, string storage = null)
        {
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->GetMhtInStorageToPdf");

            var localVarPath = "/pdf/create/mht";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMhtInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert MHT file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.mht)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetMhtInStorageToPdfAsync (string srcPath, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetMhtInStorageToPdfAsyncWithHttpInfo(srcPath, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert MHT file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.mht)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetMhtInStorageToPdfAsyncWithHttpInfo (string srcPath, string storage = null)
        {
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->GetMhtInStorageToPdf");

            var localVarPath = "/pdf/create/mht";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMhtInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Read document page info. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>DocumentPageResponse</returns>
        public DocumentPageResponse GetPage (string name, int? pageNumber, string storage = null, string folder = null)
        {
             ApiResponse<DocumentPageResponse> localVarResponse = GetPageWithHttpInfo(name, pageNumber, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document page info. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of DocumentPageResponse</returns>
        public ApiResponse< DocumentPageResponse > GetPageWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPage");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPage");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentPageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentPageResponse) ApiClient.Deserialize(localVarResponse, typeof(DocumentPageResponse)));
        }

        /// <summary>
        /// Read document page info. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of DocumentPageResponse</returns>
        public async System.Threading.Tasks.Task<DocumentPageResponse> GetPageAsync (string name, int? pageNumber, string storage = null, string folder = null)
        {
             ApiResponse<DocumentPageResponse> localVarResponse = await GetPageAsyncWithHttpInfo(name, pageNumber, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document page info. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (DocumentPageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentPageResponse>> GetPageAsyncWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPage");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPage");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentPageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentPageResponse) ApiClient.Deserialize(localVarResponse, typeof(DocumentPageResponse)));
        }

        /// <summary>
        /// Read documant page annotations. Returns only FreeTextAnnotations, TextAnnotations, other annotations will implemented next releases. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AnnotationsInfoResponse</returns>
        public AnnotationsInfoResponse GetPageAnnotations (string name, int? pageNumber, string storage = null, string folder = null)
        {
             ApiResponse<AnnotationsInfoResponse> localVarResponse = GetPageAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read documant page annotations. Returns only FreeTextAnnotations, TextAnnotations, other annotations will implemented next releases. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AnnotationsInfoResponse</returns>
        public ApiResponse< AnnotationsInfoResponse > GetPageAnnotationsWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPageAnnotations");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPageAnnotations");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnnotationsInfoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnnotationsInfoResponse) ApiClient.Deserialize(localVarResponse, typeof(AnnotationsInfoResponse)));
        }

        /// <summary>
        /// Read documant page annotations. Returns only FreeTextAnnotations, TextAnnotations, other annotations will implemented next releases. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AnnotationsInfoResponse</returns>
        public async System.Threading.Tasks.Task<AnnotationsInfoResponse> GetPageAnnotationsAsync (string name, int? pageNumber, string storage = null, string folder = null)
        {
             ApiResponse<AnnotationsInfoResponse> localVarResponse = await GetPageAnnotationsAsyncWithHttpInfo(name, pageNumber, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read documant page annotations. Returns only FreeTextAnnotations, TextAnnotations, other annotations will implemented next releases. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AnnotationsInfoResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AnnotationsInfoResponse>> GetPageAnnotationsAsyncWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPageAnnotations");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPageAnnotations");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnnotationsInfoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnnotationsInfoResponse) ApiClient.Deserialize(localVarResponse, typeof(AnnotationsInfoResponse)));
        }

        /// <summary>
        /// Read document page circle annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>CircleAnnotationsResponse</returns>
        public CircleAnnotationsResponse GetPageCircleAnnotations (string name, int? pageNumber, string storage = null, string folder = null)
        {
             ApiResponse<CircleAnnotationsResponse> localVarResponse = GetPageCircleAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document page circle annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of CircleAnnotationsResponse</returns>
        public ApiResponse< CircleAnnotationsResponse > GetPageCircleAnnotationsWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPageCircleAnnotations");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPageCircleAnnotations");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/circle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageCircleAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CircleAnnotationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CircleAnnotationsResponse) ApiClient.Deserialize(localVarResponse, typeof(CircleAnnotationsResponse)));
        }

        /// <summary>
        /// Read document page circle annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of CircleAnnotationsResponse</returns>
        public async System.Threading.Tasks.Task<CircleAnnotationsResponse> GetPageCircleAnnotationsAsync (string name, int? pageNumber, string storage = null, string folder = null)
        {
             ApiResponse<CircleAnnotationsResponse> localVarResponse = await GetPageCircleAnnotationsAsyncWithHttpInfo(name, pageNumber, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document page circle annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (CircleAnnotationsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CircleAnnotationsResponse>> GetPageCircleAnnotationsAsyncWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPageCircleAnnotations");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPageCircleAnnotations");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/circle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageCircleAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CircleAnnotationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CircleAnnotationsResponse) ApiClient.Deserialize(localVarResponse, typeof(CircleAnnotationsResponse)));
        }

        /// <summary>
        /// Convert document page to Bmp image and return resulting file in response. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetPageConvertToBmp (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetPageConvertToBmpWithHttpInfo(name, pageNumber, width, height, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert document page to Bmp image and return resulting file in response. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetPageConvertToBmpWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPageConvertToBmp");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPageConvertToBmp");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/bmp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageConvertToBmp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert document page to Bmp image and return resulting file in response. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetPageConvertToBmpAsync (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetPageConvertToBmpAsyncWithHttpInfo(name, pageNumber, width, height, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert document page to Bmp image and return resulting file in response. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPageConvertToBmpAsyncWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPageConvertToBmp");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPageConvertToBmp");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/bmp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageConvertToBmp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert document page to Emf image and return resulting file in response. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetPageConvertToEmf (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetPageConvertToEmfWithHttpInfo(name, pageNumber, width, height, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert document page to Emf image and return resulting file in response. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetPageConvertToEmfWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPageConvertToEmf");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPageConvertToEmf");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/emf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageConvertToEmf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert document page to Emf image and return resulting file in response. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetPageConvertToEmfAsync (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetPageConvertToEmfAsyncWithHttpInfo(name, pageNumber, width, height, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert document page to Emf image and return resulting file in response. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPageConvertToEmfAsyncWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPageConvertToEmf");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPageConvertToEmf");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/emf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageConvertToEmf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert document page to Gif image and return resulting file in response. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetPageConvertToGif (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetPageConvertToGifWithHttpInfo(name, pageNumber, width, height, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert document page to Gif image and return resulting file in response. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetPageConvertToGifWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPageConvertToGif");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPageConvertToGif");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/gif";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageConvertToGif", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert document page to Gif image and return resulting file in response. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetPageConvertToGifAsync (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetPageConvertToGifAsyncWithHttpInfo(name, pageNumber, width, height, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert document page to Gif image and return resulting file in response. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPageConvertToGifAsyncWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPageConvertToGif");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPageConvertToGif");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/gif";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageConvertToGif", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert document page to Jpeg image and return resulting file in response. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetPageConvertToJpeg (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetPageConvertToJpegWithHttpInfo(name, pageNumber, width, height, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert document page to Jpeg image and return resulting file in response. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetPageConvertToJpegWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPageConvertToJpeg");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPageConvertToJpeg");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/jpeg";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageConvertToJpeg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert document page to Jpeg image and return resulting file in response. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetPageConvertToJpegAsync (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetPageConvertToJpegAsyncWithHttpInfo(name, pageNumber, width, height, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert document page to Jpeg image and return resulting file in response. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPageConvertToJpegAsyncWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPageConvertToJpeg");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPageConvertToJpeg");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/jpeg";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageConvertToJpeg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert document page to Png image and return resulting file in response. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetPageConvertToPng (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetPageConvertToPngWithHttpInfo(name, pageNumber, width, height, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert document page to Png image and return resulting file in response. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetPageConvertToPngWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPageConvertToPng");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPageConvertToPng");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/png";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageConvertToPng", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert document page to Png image and return resulting file in response. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetPageConvertToPngAsync (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetPageConvertToPngAsyncWithHttpInfo(name, pageNumber, width, height, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert document page to Png image and return resulting file in response. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPageConvertToPngAsyncWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPageConvertToPng");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPageConvertToPng");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/png";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageConvertToPng", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert document page to Tiff image  and return resulting file in response. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetPageConvertToTiff (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetPageConvertToTiffWithHttpInfo(name, pageNumber, width, height, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert document page to Tiff image  and return resulting file in response. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetPageConvertToTiffWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPageConvertToTiff");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPageConvertToTiff");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/tiff";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageConvertToTiff", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert document page to Tiff image  and return resulting file in response. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetPageConvertToTiffAsync (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetPageConvertToTiffAsyncWithHttpInfo(name, pageNumber, width, height, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert document page to Tiff image  and return resulting file in response. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPageConvertToTiffAsyncWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPageConvertToTiff");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPageConvertToTiff");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/tiff";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageConvertToTiff", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Read document page free text annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>FreeTextAnnotationsResponse</returns>
        public FreeTextAnnotationsResponse GetPageFreeTextAnnotations (string name, int? pageNumber, string storage = null, string folder = null)
        {
             ApiResponse<FreeTextAnnotationsResponse> localVarResponse = GetPageFreeTextAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document page free text annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of FreeTextAnnotationsResponse</returns>
        public ApiResponse< FreeTextAnnotationsResponse > GetPageFreeTextAnnotationsWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPageFreeTextAnnotations");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPageFreeTextAnnotations");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/freetext";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageFreeTextAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FreeTextAnnotationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FreeTextAnnotationsResponse) ApiClient.Deserialize(localVarResponse, typeof(FreeTextAnnotationsResponse)));
        }

        /// <summary>
        /// Read document page free text annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of FreeTextAnnotationsResponse</returns>
        public async System.Threading.Tasks.Task<FreeTextAnnotationsResponse> GetPageFreeTextAnnotationsAsync (string name, int? pageNumber, string storage = null, string folder = null)
        {
             ApiResponse<FreeTextAnnotationsResponse> localVarResponse = await GetPageFreeTextAnnotationsAsyncWithHttpInfo(name, pageNumber, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document page free text annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (FreeTextAnnotationsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FreeTextAnnotationsResponse>> GetPageFreeTextAnnotationsAsyncWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPageFreeTextAnnotations");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPageFreeTextAnnotations");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/freetext";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageFreeTextAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FreeTextAnnotationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FreeTextAnnotationsResponse) ApiClient.Deserialize(localVarResponse, typeof(FreeTextAnnotationsResponse)));
        }

        /// <summary>
        /// Read document page line annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>LineAnnotationsResponse</returns>
        public LineAnnotationsResponse GetPageLineAnnotations (string name, int? pageNumber, string storage = null, string folder = null)
        {
             ApiResponse<LineAnnotationsResponse> localVarResponse = GetPageLineAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document page line annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of LineAnnotationsResponse</returns>
        public ApiResponse< LineAnnotationsResponse > GetPageLineAnnotationsWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPageLineAnnotations");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPageLineAnnotations");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/line";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageLineAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LineAnnotationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LineAnnotationsResponse) ApiClient.Deserialize(localVarResponse, typeof(LineAnnotationsResponse)));
        }

        /// <summary>
        /// Read document page line annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of LineAnnotationsResponse</returns>
        public async System.Threading.Tasks.Task<LineAnnotationsResponse> GetPageLineAnnotationsAsync (string name, int? pageNumber, string storage = null, string folder = null)
        {
             ApiResponse<LineAnnotationsResponse> localVarResponse = await GetPageLineAnnotationsAsyncWithHttpInfo(name, pageNumber, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document page line annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (LineAnnotationsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LineAnnotationsResponse>> GetPageLineAnnotationsAsyncWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPageLineAnnotations");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPageLineAnnotations");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/line";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageLineAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LineAnnotationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LineAnnotationsResponse) ApiClient.Deserialize(localVarResponse, typeof(LineAnnotationsResponse)));
        }

        /// <summary>
        /// Read document page link annotation by ID. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="linkId">The link ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>LinkAnnotationResponse</returns>
        public LinkAnnotationResponse GetPageLinkAnnotation (string name, int? pageNumber, string linkId, string storage = null, string folder = null)
        {
             ApiResponse<LinkAnnotationResponse> localVarResponse = GetPageLinkAnnotationWithHttpInfo(name, pageNumber, linkId, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document page link annotation by ID. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="linkId">The link ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of LinkAnnotationResponse</returns>
        public ApiResponse< LinkAnnotationResponse > GetPageLinkAnnotationWithHttpInfo (string name, int? pageNumber, string linkId, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPageLinkAnnotation");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPageLinkAnnotation");
            // verify the required parameter 'linkId' is set
            if (linkId == null)
                throw new ApiException(400, "Missing required parameter 'linkId' when calling PdfApi->GetPageLinkAnnotation");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/links/{linkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (linkId != null) localVarPathParams.Add("linkId", ApiClient.ParameterToString(linkId)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageLinkAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LinkAnnotationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LinkAnnotationResponse) ApiClient.Deserialize(localVarResponse, typeof(LinkAnnotationResponse)));
        }

        /// <summary>
        /// Read document page link annotation by ID. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="linkId">The link ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of LinkAnnotationResponse</returns>
        public async System.Threading.Tasks.Task<LinkAnnotationResponse> GetPageLinkAnnotationAsync (string name, int? pageNumber, string linkId, string storage = null, string folder = null)
        {
             ApiResponse<LinkAnnotationResponse> localVarResponse = await GetPageLinkAnnotationAsyncWithHttpInfo(name, pageNumber, linkId, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document page link annotation by ID. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="linkId">The link ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (LinkAnnotationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LinkAnnotationResponse>> GetPageLinkAnnotationAsyncWithHttpInfo (string name, int? pageNumber, string linkId, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPageLinkAnnotation");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPageLinkAnnotation");
            // verify the required parameter 'linkId' is set
            if (linkId == null)
                throw new ApiException(400, "Missing required parameter 'linkId' when calling PdfApi->GetPageLinkAnnotation");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/links/{linkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (linkId != null) localVarPathParams.Add("linkId", ApiClient.ParameterToString(linkId)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageLinkAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LinkAnnotationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LinkAnnotationResponse) ApiClient.Deserialize(localVarResponse, typeof(LinkAnnotationResponse)));
        }

        /// <summary>
        /// Read document page link annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>LinkAnnotationsResponse</returns>
        public LinkAnnotationsResponse GetPageLinkAnnotations (string name, int? pageNumber, string storage = null, string folder = null)
        {
             ApiResponse<LinkAnnotationsResponse> localVarResponse = GetPageLinkAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document page link annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of LinkAnnotationsResponse</returns>
        public ApiResponse< LinkAnnotationsResponse > GetPageLinkAnnotationsWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPageLinkAnnotations");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPageLinkAnnotations");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/links";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageLinkAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LinkAnnotationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LinkAnnotationsResponse) ApiClient.Deserialize(localVarResponse, typeof(LinkAnnotationsResponse)));
        }

        /// <summary>
        /// Read document page link annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of LinkAnnotationsResponse</returns>
        public async System.Threading.Tasks.Task<LinkAnnotationsResponse> GetPageLinkAnnotationsAsync (string name, int? pageNumber, string storage = null, string folder = null)
        {
             ApiResponse<LinkAnnotationsResponse> localVarResponse = await GetPageLinkAnnotationsAsyncWithHttpInfo(name, pageNumber, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document page link annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (LinkAnnotationsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LinkAnnotationsResponse>> GetPageLinkAnnotationsAsyncWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPageLinkAnnotations");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPageLinkAnnotations");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/links";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageLinkAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LinkAnnotationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LinkAnnotationsResponse) ApiClient.Deserialize(localVarResponse, typeof(LinkAnnotationsResponse)));
        }

        /// <summary>
        /// Read document page polyline annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>PolyLineAnnotationsResponse</returns>
        public PolyLineAnnotationsResponse GetPagePolyLineAnnotations (string name, int? pageNumber, string storage = null, string folder = null)
        {
             ApiResponse<PolyLineAnnotationsResponse> localVarResponse = GetPagePolyLineAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document page polyline annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of PolyLineAnnotationsResponse</returns>
        public ApiResponse< PolyLineAnnotationsResponse > GetPagePolyLineAnnotationsWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPagePolyLineAnnotations");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPagePolyLineAnnotations");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/polyline";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPagePolyLineAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolyLineAnnotationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PolyLineAnnotationsResponse) ApiClient.Deserialize(localVarResponse, typeof(PolyLineAnnotationsResponse)));
        }

        /// <summary>
        /// Read document page polyline annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of PolyLineAnnotationsResponse</returns>
        public async System.Threading.Tasks.Task<PolyLineAnnotationsResponse> GetPagePolyLineAnnotationsAsync (string name, int? pageNumber, string storage = null, string folder = null)
        {
             ApiResponse<PolyLineAnnotationsResponse> localVarResponse = await GetPagePolyLineAnnotationsAsyncWithHttpInfo(name, pageNumber, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document page polyline annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (PolyLineAnnotationsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PolyLineAnnotationsResponse>> GetPagePolyLineAnnotationsAsyncWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPagePolyLineAnnotations");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPagePolyLineAnnotations");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/polyline";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPagePolyLineAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolyLineAnnotationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PolyLineAnnotationsResponse) ApiClient.Deserialize(localVarResponse, typeof(PolyLineAnnotationsResponse)));
        }

        /// <summary>
        /// Read document page polygon annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>PolygonAnnotationsResponse</returns>
        public PolygonAnnotationsResponse GetPagePolygonAnnotations (string name, int? pageNumber, string storage = null, string folder = null)
        {
             ApiResponse<PolygonAnnotationsResponse> localVarResponse = GetPagePolygonAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document page polygon annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of PolygonAnnotationsResponse</returns>
        public ApiResponse< PolygonAnnotationsResponse > GetPagePolygonAnnotationsWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPagePolygonAnnotations");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPagePolygonAnnotations");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/polygon";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPagePolygonAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolygonAnnotationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PolygonAnnotationsResponse) ApiClient.Deserialize(localVarResponse, typeof(PolygonAnnotationsResponse)));
        }

        /// <summary>
        /// Read document page polygon annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of PolygonAnnotationsResponse</returns>
        public async System.Threading.Tasks.Task<PolygonAnnotationsResponse> GetPagePolygonAnnotationsAsync (string name, int? pageNumber, string storage = null, string folder = null)
        {
             ApiResponse<PolygonAnnotationsResponse> localVarResponse = await GetPagePolygonAnnotationsAsyncWithHttpInfo(name, pageNumber, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document page polygon annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (PolygonAnnotationsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PolygonAnnotationsResponse>> GetPagePolygonAnnotationsAsyncWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPagePolygonAnnotations");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPagePolygonAnnotations");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/polygon";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPagePolygonAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolygonAnnotationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PolygonAnnotationsResponse) ApiClient.Deserialize(localVarResponse, typeof(PolygonAnnotationsResponse)));
        }

        /// <summary>
        /// Read document page square annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SquareAnnotationsResponse</returns>
        public SquareAnnotationsResponse GetPageSquareAnnotations (string name, int? pageNumber, string storage = null, string folder = null)
        {
             ApiResponse<SquareAnnotationsResponse> localVarResponse = GetPageSquareAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document page square annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SquareAnnotationsResponse</returns>
        public ApiResponse< SquareAnnotationsResponse > GetPageSquareAnnotationsWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPageSquareAnnotations");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPageSquareAnnotations");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/square";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageSquareAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SquareAnnotationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SquareAnnotationsResponse) ApiClient.Deserialize(localVarResponse, typeof(SquareAnnotationsResponse)));
        }

        /// <summary>
        /// Read document page square annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SquareAnnotationsResponse</returns>
        public async System.Threading.Tasks.Task<SquareAnnotationsResponse> GetPageSquareAnnotationsAsync (string name, int? pageNumber, string storage = null, string folder = null)
        {
             ApiResponse<SquareAnnotationsResponse> localVarResponse = await GetPageSquareAnnotationsAsyncWithHttpInfo(name, pageNumber, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document page square annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SquareAnnotationsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SquareAnnotationsResponse>> GetPageSquareAnnotationsAsyncWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPageSquareAnnotations");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPageSquareAnnotations");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/square";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageSquareAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SquareAnnotationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SquareAnnotationsResponse) ApiClient.Deserialize(localVarResponse, typeof(SquareAnnotationsResponse)));
        }

        /// <summary>
        /// Read page text items. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">Number of page (starting from 1).</param>
        /// <param name="LLX"></param>
        /// <param name="LLY"></param>
        /// <param name="URX"></param>
        /// <param name="URY"></param>
        /// <param name="format">List of formats for search. (optional)</param>
        /// <param name="regex">Formats are specified as a regular expression. (optional)</param>
        /// <param name="splitRects">Split result fragments (default is true). (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>TextRectsResponse</returns>
        public TextRectsResponse GetPageText (string name, int? pageNumber, double? LLX, double? LLY, double? URX, double? URY, List<string> format = null, string regex = null, bool? splitRects = null, string folder = null, string storage = null)
        {
             ApiResponse<TextRectsResponse> localVarResponse = GetPageTextWithHttpInfo(name, pageNumber, LLX, LLY, URX, URY, format, regex, splitRects, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read page text items. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">Number of page (starting from 1).</param>
        /// <param name="LLX"></param>
        /// <param name="LLY"></param>
        /// <param name="URX"></param>
        /// <param name="URY"></param>
        /// <param name="format">List of formats for search. (optional)</param>
        /// <param name="regex">Formats are specified as a regular expression. (optional)</param>
        /// <param name="splitRects">Split result fragments (default is true). (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of TextRectsResponse</returns>
        public ApiResponse< TextRectsResponse > GetPageTextWithHttpInfo (string name, int? pageNumber, double? LLX, double? LLY, double? URX, double? URY, List<string> format = null, string regex = null, bool? splitRects = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPageText");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPageText");
            // verify the required parameter 'LLX' is set
            if (LLX == null)
                throw new ApiException(400, "Missing required parameter 'LLX' when calling PdfApi->GetPageText");
            // verify the required parameter 'LLY' is set
            if (LLY == null)
                throw new ApiException(400, "Missing required parameter 'LLY' when calling PdfApi->GetPageText");
            // verify the required parameter 'URX' is set
            if (URX == null)
                throw new ApiException(400, "Missing required parameter 'URX' when calling PdfApi->GetPageText");
            // verify the required parameter 'URY' is set
            if (URY == null)
                throw new ApiException(400, "Missing required parameter 'URY' when calling PdfApi->GetPageText");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/text";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (format != null) localVarQueryParams.Add("format", ApiClient.ParameterToString(format)); // query parameter
            if (regex != null) localVarQueryParams.Add("regex", ApiClient.ParameterToString(regex)); // query parameter
            if (splitRects != null) localVarQueryParams.Add("splitRects", ApiClient.ParameterToString(splitRects)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (LLX != null) localVarQueryParams.Add("LLX", ApiClient.ParameterToString(LLX)); // query parameter
            if (LLY != null) localVarQueryParams.Add("LLY", ApiClient.ParameterToString(LLY)); // query parameter
            if (URX != null) localVarQueryParams.Add("URX", ApiClient.ParameterToString(URX)); // query parameter
            if (URY != null) localVarQueryParams.Add("URY", ApiClient.ParameterToString(URY)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageText", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextRectsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TextRectsResponse) ApiClient.Deserialize(localVarResponse, typeof(TextRectsResponse)));
        }

        /// <summary>
        /// Read page text items. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">Number of page (starting from 1).</param>
        /// <param name="LLX"></param>
        /// <param name="LLY"></param>
        /// <param name="URX"></param>
        /// <param name="URY"></param>
        /// <param name="format">List of formats for search. (optional)</param>
        /// <param name="regex">Formats are specified as a regular expression. (optional)</param>
        /// <param name="splitRects">Split result fragments (default is true). (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of TextRectsResponse</returns>
        public async System.Threading.Tasks.Task<TextRectsResponse> GetPageTextAsync (string name, int? pageNumber, double? LLX, double? LLY, double? URX, double? URY, List<string> format = null, string regex = null, bool? splitRects = null, string folder = null, string storage = null)
        {
             ApiResponse<TextRectsResponse> localVarResponse = await GetPageTextAsyncWithHttpInfo(name, pageNumber, LLX, LLY, URX, URY, format, regex, splitRects, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read page text items. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">Number of page (starting from 1).</param>
        /// <param name="LLX"></param>
        /// <param name="LLY"></param>
        /// <param name="URX"></param>
        /// <param name="URY"></param>
        /// <param name="format">List of formats for search. (optional)</param>
        /// <param name="regex">Formats are specified as a regular expression. (optional)</param>
        /// <param name="splitRects">Split result fragments (default is true). (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (TextRectsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TextRectsResponse>> GetPageTextAsyncWithHttpInfo (string name, int? pageNumber, double? LLX, double? LLY, double? URX, double? URY, List<string> format = null, string regex = null, bool? splitRects = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPageText");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPageText");
            // verify the required parameter 'LLX' is set
            if (LLX == null)
                throw new ApiException(400, "Missing required parameter 'LLX' when calling PdfApi->GetPageText");
            // verify the required parameter 'LLY' is set
            if (LLY == null)
                throw new ApiException(400, "Missing required parameter 'LLY' when calling PdfApi->GetPageText");
            // verify the required parameter 'URX' is set
            if (URX == null)
                throw new ApiException(400, "Missing required parameter 'URX' when calling PdfApi->GetPageText");
            // verify the required parameter 'URY' is set
            if (URY == null)
                throw new ApiException(400, "Missing required parameter 'URY' when calling PdfApi->GetPageText");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/text";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (format != null) localVarQueryParams.Add("format", ApiClient.ParameterToString(format)); // query parameter
            if (regex != null) localVarQueryParams.Add("regex", ApiClient.ParameterToString(regex)); // query parameter
            if (splitRects != null) localVarQueryParams.Add("splitRects", ApiClient.ParameterToString(splitRects)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (LLX != null) localVarQueryParams.Add("LLX", ApiClient.ParameterToString(LLX)); // query parameter
            if (LLY != null) localVarQueryParams.Add("LLY", ApiClient.ParameterToString(LLY)); // query parameter
            if (URX != null) localVarQueryParams.Add("URX", ApiClient.ParameterToString(URX)); // query parameter
            if (URY != null) localVarQueryParams.Add("URY", ApiClient.ParameterToString(URY)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageText", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextRectsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TextRectsResponse) ApiClient.Deserialize(localVarResponse, typeof(TextRectsResponse)));
        }

        /// <summary>
        /// Read document page text annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>TextAnnotationsResponse</returns>
        public TextAnnotationsResponse GetPageTextAnnotations (string name, int? pageNumber, string storage = null, string folder = null)
        {
             ApiResponse<TextAnnotationsResponse> localVarResponse = GetPageTextAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document page text annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of TextAnnotationsResponse</returns>
        public ApiResponse< TextAnnotationsResponse > GetPageTextAnnotationsWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPageTextAnnotations");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPageTextAnnotations");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/text";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageTextAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextAnnotationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TextAnnotationsResponse) ApiClient.Deserialize(localVarResponse, typeof(TextAnnotationsResponse)));
        }

        /// <summary>
        /// Read document page text annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of TextAnnotationsResponse</returns>
        public async System.Threading.Tasks.Task<TextAnnotationsResponse> GetPageTextAnnotationsAsync (string name, int? pageNumber, string storage = null, string folder = null)
        {
             ApiResponse<TextAnnotationsResponse> localVarResponse = await GetPageTextAnnotationsAsyncWithHttpInfo(name, pageNumber, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document page text annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (TextAnnotationsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TextAnnotationsResponse>> GetPageTextAnnotationsAsyncWithHttpInfo (string name, int? pageNumber, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPageTextAnnotations");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->GetPageTextAnnotations");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/text";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageTextAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextAnnotationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TextAnnotationsResponse) ApiClient.Deserialize(localVarResponse, typeof(TextAnnotationsResponse)));
        }

        /// <summary>
        /// Read document pages info. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>DocumentPagesResponse</returns>
        public DocumentPagesResponse GetPages (string name, string storage = null, string folder = null)
        {
             ApiResponse<DocumentPagesResponse> localVarResponse = GetPagesWithHttpInfo(name, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document pages info. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of DocumentPagesResponse</returns>
        public ApiResponse< DocumentPagesResponse > GetPagesWithHttpInfo (string name, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPages");

            var localVarPath = "/pdf/{name}/pages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentPagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentPagesResponse) ApiClient.Deserialize(localVarResponse, typeof(DocumentPagesResponse)));
        }

        /// <summary>
        /// Read document pages info. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of DocumentPagesResponse</returns>
        public async System.Threading.Tasks.Task<DocumentPagesResponse> GetPagesAsync (string name, string storage = null, string folder = null)
        {
             ApiResponse<DocumentPagesResponse> localVarResponse = await GetPagesAsyncWithHttpInfo(name, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document pages info. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (DocumentPagesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentPagesResponse>> GetPagesAsyncWithHttpInfo (string name, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPages");

            var localVarPath = "/pdf/{name}/pages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentPagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentPagesResponse) ApiClient.Deserialize(localVarResponse, typeof(DocumentPagesResponse)));
        }

        /// <summary>
        /// Convert PCL file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.pcl)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetPclInStorageToPdf (string srcPath, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetPclInStorageToPdfWithHttpInfo(srcPath, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert PCL file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.pcl)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetPclInStorageToPdfWithHttpInfo (string srcPath, string storage = null)
        {
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->GetPclInStorageToPdf");

            var localVarPath = "/pdf/create/pcl";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPclInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert PCL file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.pcl)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetPclInStorageToPdfAsync (string srcPath, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetPclInStorageToPdfAsyncWithHttpInfo(srcPath, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert PCL file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.pcl)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPclInStorageToPdfAsyncWithHttpInfo (string srcPath, string storage = null)
        {
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->GetPclInStorageToPdf");

            var localVarPath = "/pdf/create/pcl";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPclInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to DOC format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="addReturnToLineEnd">Add return to line end. (optional)</param>
        /// <param name="format">Allows to specify .doc or .docx file format. (optional)</param>
        /// <param name="imageResolutionX">Image resolution X. (optional)</param>
        /// <param name="imageResolutionY">Image resolution Y. (optional)</param>
        /// <param name="maxDistanceBetweenTextLines">Max distance between text lines. (optional)</param>
        /// <param name="mode">Allows to control how a PDF document is converted into a word processing document. (optional)</param>
        /// <param name="recognizeBullets">Recognize bullets. (optional)</param>
        /// <param name="relativeHorizontalProximity">Relative horizontal proximity. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetPdfInStorageToDoc (string name, bool? addReturnToLineEnd = null, string format = null, int? imageResolutionX = null, int? imageResolutionY = null, double? maxDistanceBetweenTextLines = null, string mode = null, bool? recognizeBullets = null, double? relativeHorizontalProximity = null, string folder = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetPdfInStorageToDocWithHttpInfo(name, addReturnToLineEnd, format, imageResolutionX, imageResolutionY, maxDistanceBetweenTextLines, mode, recognizeBullets, relativeHorizontalProximity, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (located on storage) to DOC format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="addReturnToLineEnd">Add return to line end. (optional)</param>
        /// <param name="format">Allows to specify .doc or .docx file format. (optional)</param>
        /// <param name="imageResolutionX">Image resolution X. (optional)</param>
        /// <param name="imageResolutionY">Image resolution Y. (optional)</param>
        /// <param name="maxDistanceBetweenTextLines">Max distance between text lines. (optional)</param>
        /// <param name="mode">Allows to control how a PDF document is converted into a word processing document. (optional)</param>
        /// <param name="recognizeBullets">Recognize bullets. (optional)</param>
        /// <param name="relativeHorizontalProximity">Relative horizontal proximity. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetPdfInStorageToDocWithHttpInfo (string name, bool? addReturnToLineEnd = null, string format = null, int? imageResolutionX = null, int? imageResolutionY = null, double? maxDistanceBetweenTextLines = null, string mode = null, bool? recognizeBullets = null, double? relativeHorizontalProximity = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPdfInStorageToDoc");

            var localVarPath = "/pdf/{name}/convert/doc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (addReturnToLineEnd != null) localVarQueryParams.Add("addReturnToLineEnd", ApiClient.ParameterToString(addReturnToLineEnd)); // query parameter
            if (format != null) localVarQueryParams.Add("format", ApiClient.ParameterToString(format)); // query parameter
            if (imageResolutionX != null) localVarQueryParams.Add("imageResolutionX", ApiClient.ParameterToString(imageResolutionX)); // query parameter
            if (imageResolutionY != null) localVarQueryParams.Add("imageResolutionY", ApiClient.ParameterToString(imageResolutionY)); // query parameter
            if (maxDistanceBetweenTextLines != null) localVarQueryParams.Add("maxDistanceBetweenTextLines", ApiClient.ParameterToString(maxDistanceBetweenTextLines)); // query parameter
            if (mode != null) localVarQueryParams.Add("mode", ApiClient.ParameterToString(mode)); // query parameter
            if (recognizeBullets != null) localVarQueryParams.Add("recognizeBullets", ApiClient.ParameterToString(recognizeBullets)); // query parameter
            if (relativeHorizontalProximity != null) localVarQueryParams.Add("relativeHorizontalProximity", ApiClient.ParameterToString(relativeHorizontalProximity)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfInStorageToDoc", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to DOC format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="addReturnToLineEnd">Add return to line end. (optional)</param>
        /// <param name="format">Allows to specify .doc or .docx file format. (optional)</param>
        /// <param name="imageResolutionX">Image resolution X. (optional)</param>
        /// <param name="imageResolutionY">Image resolution Y. (optional)</param>
        /// <param name="maxDistanceBetweenTextLines">Max distance between text lines. (optional)</param>
        /// <param name="mode">Allows to control how a PDF document is converted into a word processing document. (optional)</param>
        /// <param name="recognizeBullets">Recognize bullets. (optional)</param>
        /// <param name="relativeHorizontalProximity">Relative horizontal proximity. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetPdfInStorageToDocAsync (string name, bool? addReturnToLineEnd = null, string format = null, int? imageResolutionX = null, int? imageResolutionY = null, double? maxDistanceBetweenTextLines = null, string mode = null, bool? recognizeBullets = null, double? relativeHorizontalProximity = null, string folder = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetPdfInStorageToDocAsyncWithHttpInfo(name, addReturnToLineEnd, format, imageResolutionX, imageResolutionY, maxDistanceBetweenTextLines, mode, recognizeBullets, relativeHorizontalProximity, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (located on storage) to DOC format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="addReturnToLineEnd">Add return to line end. (optional)</param>
        /// <param name="format">Allows to specify .doc or .docx file format. (optional)</param>
        /// <param name="imageResolutionX">Image resolution X. (optional)</param>
        /// <param name="imageResolutionY">Image resolution Y. (optional)</param>
        /// <param name="maxDistanceBetweenTextLines">Max distance between text lines. (optional)</param>
        /// <param name="mode">Allows to control how a PDF document is converted into a word processing document. (optional)</param>
        /// <param name="recognizeBullets">Recognize bullets. (optional)</param>
        /// <param name="relativeHorizontalProximity">Relative horizontal proximity. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPdfInStorageToDocAsyncWithHttpInfo (string name, bool? addReturnToLineEnd = null, string format = null, int? imageResolutionX = null, int? imageResolutionY = null, double? maxDistanceBetweenTextLines = null, string mode = null, bool? recognizeBullets = null, double? relativeHorizontalProximity = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPdfInStorageToDoc");

            var localVarPath = "/pdf/{name}/convert/doc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (addReturnToLineEnd != null) localVarQueryParams.Add("addReturnToLineEnd", ApiClient.ParameterToString(addReturnToLineEnd)); // query parameter
            if (format != null) localVarQueryParams.Add("format", ApiClient.ParameterToString(format)); // query parameter
            if (imageResolutionX != null) localVarQueryParams.Add("imageResolutionX", ApiClient.ParameterToString(imageResolutionX)); // query parameter
            if (imageResolutionY != null) localVarQueryParams.Add("imageResolutionY", ApiClient.ParameterToString(imageResolutionY)); // query parameter
            if (maxDistanceBetweenTextLines != null) localVarQueryParams.Add("maxDistanceBetweenTextLines", ApiClient.ParameterToString(maxDistanceBetweenTextLines)); // query parameter
            if (mode != null) localVarQueryParams.Add("mode", ApiClient.ParameterToString(mode)); // query parameter
            if (recognizeBullets != null) localVarQueryParams.Add("recognizeBullets", ApiClient.ParameterToString(recognizeBullets)); // query parameter
            if (relativeHorizontalProximity != null) localVarQueryParams.Add("relativeHorizontalProximity", ApiClient.ParameterToString(relativeHorizontalProximity)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfInStorageToDoc", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to EPUB format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="contentRecognitionMode">?roperty tunes conversion for this or that desirable method of recognition of content. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetPdfInStorageToEpub (string name, string contentRecognitionMode = null, string folder = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetPdfInStorageToEpubWithHttpInfo(name, contentRecognitionMode, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (located on storage) to EPUB format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="contentRecognitionMode">?roperty tunes conversion for this or that desirable method of recognition of content. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetPdfInStorageToEpubWithHttpInfo (string name, string contentRecognitionMode = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPdfInStorageToEpub");

            var localVarPath = "/pdf/{name}/convert/epub";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (contentRecognitionMode != null) localVarQueryParams.Add("contentRecognitionMode", ApiClient.ParameterToString(contentRecognitionMode)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfInStorageToEpub", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to EPUB format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="contentRecognitionMode">?roperty tunes conversion for this or that desirable method of recognition of content. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetPdfInStorageToEpubAsync (string name, string contentRecognitionMode = null, string folder = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetPdfInStorageToEpubAsyncWithHttpInfo(name, contentRecognitionMode, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (located on storage) to EPUB format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="contentRecognitionMode">?roperty tunes conversion for this or that desirable method of recognition of content. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPdfInStorageToEpubAsyncWithHttpInfo (string name, string contentRecognitionMode = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPdfInStorageToEpub");

            var localVarPath = "/pdf/{name}/convert/epub";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (contentRecognitionMode != null) localVarQueryParams.Add("contentRecognitionMode", ApiClient.ParameterToString(contentRecognitionMode)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfInStorageToEpub", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to Html format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="additionalMarginWidthInPoints">Defines width of margin that will be forcibly left around that output HTML-areas. (optional)</param>
        /// <param name="compressSvgGraphicsIfAny">The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)</param>
        /// <param name="convertMarkedContentToLayers">If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)</param>
        /// <param name="defaultFontName">Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)</param>
        /// <param name="documentType">Result document type. (optional)</param>
        /// <param name="fixedLayout">The value indicating whether that HTML is created as fixed layout. (optional)</param>
        /// <param name="imageResolution">Resolution for image rendering. (optional)</param>
        /// <param name="minimalLineWidth">This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)</param>
        /// <param name="preventGlyphsGrouping">This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)</param>
        /// <param name="splitCssIntoPages">When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)</param>
        /// <param name="splitIntoPages">The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)</param>
        /// <param name="useZOrder">If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)</param>
        /// <param name="antialiasingProcessing">The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)</param>
        /// <param name="cssClassNamesPrefix">When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)</param>
        /// <param name="explicitListOfSavedPages">With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)</param>
        /// <param name="fontEncodingStrategy">Defines encoding special rule to tune PDF decoding for current document. (optional)</param>
        /// <param name="fontSavingMode">Defines font saving mode that will be used during saving of PDF to desirable format. (optional)</param>
        /// <param name="htmlMarkupGenerationMode">Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)</param>
        /// <param name="lettersPositioningMethod">The mode of positioning of letters in words in result HTML. (optional)</param>
        /// <param name="pagesFlowTypeDependsOnViewersScreenSize">If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)</param>
        /// <param name="partsEmbeddingMode">It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)</param>
        /// <param name="rasterImagesSavingMode">Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)</param>
        /// <param name="removeEmptyAreasOnTopAndBottom">Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)</param>
        /// <param name="saveShadowedTextsAsTransparentTexts">Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)</param>
        /// <param name="saveTransparentTexts">Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)</param>
        /// <param name="specialFolderForAllImages">The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="specialFolderForSvgImages">The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="trySaveTextUnderliningAndStrikeoutingInCss">PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetPdfInStorageToHtml (string name, int? additionalMarginWidthInPoints = null, bool? compressSvgGraphicsIfAny = null, bool? convertMarkedContentToLayers = null, string defaultFontName = null, string documentType = null, bool? fixedLayout = null, int? imageResolution = null, int? minimalLineWidth = null, bool? preventGlyphsGrouping = null, bool? splitCssIntoPages = null, bool? splitIntoPages = null, bool? useZOrder = null, string antialiasingProcessing = null, string cssClassNamesPrefix = null, List<int?> explicitListOfSavedPages = null, string fontEncodingStrategy = null, string fontSavingMode = null, string htmlMarkupGenerationMode = null, string lettersPositioningMethod = null, bool? pagesFlowTypeDependsOnViewersScreenSize = null, string partsEmbeddingMode = null, string rasterImagesSavingMode = null, bool? removeEmptyAreasOnTopAndBottom = null, bool? saveShadowedTextsAsTransparentTexts = null, bool? saveTransparentTexts = null, string specialFolderForAllImages = null, string specialFolderForSvgImages = null, bool? trySaveTextUnderliningAndStrikeoutingInCss = null, string folder = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetPdfInStorageToHtmlWithHttpInfo(name, additionalMarginWidthInPoints, compressSvgGraphicsIfAny, convertMarkedContentToLayers, defaultFontName, documentType, fixedLayout, imageResolution, minimalLineWidth, preventGlyphsGrouping, splitCssIntoPages, splitIntoPages, useZOrder, antialiasingProcessing, cssClassNamesPrefix, explicitListOfSavedPages, fontEncodingStrategy, fontSavingMode, htmlMarkupGenerationMode, lettersPositioningMethod, pagesFlowTypeDependsOnViewersScreenSize, partsEmbeddingMode, rasterImagesSavingMode, removeEmptyAreasOnTopAndBottom, saveShadowedTextsAsTransparentTexts, saveTransparentTexts, specialFolderForAllImages, specialFolderForSvgImages, trySaveTextUnderliningAndStrikeoutingInCss, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (located on storage) to Html format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="additionalMarginWidthInPoints">Defines width of margin that will be forcibly left around that output HTML-areas. (optional)</param>
        /// <param name="compressSvgGraphicsIfAny">The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)</param>
        /// <param name="convertMarkedContentToLayers">If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)</param>
        /// <param name="defaultFontName">Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)</param>
        /// <param name="documentType">Result document type. (optional)</param>
        /// <param name="fixedLayout">The value indicating whether that HTML is created as fixed layout. (optional)</param>
        /// <param name="imageResolution">Resolution for image rendering. (optional)</param>
        /// <param name="minimalLineWidth">This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)</param>
        /// <param name="preventGlyphsGrouping">This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)</param>
        /// <param name="splitCssIntoPages">When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)</param>
        /// <param name="splitIntoPages">The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)</param>
        /// <param name="useZOrder">If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)</param>
        /// <param name="antialiasingProcessing">The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)</param>
        /// <param name="cssClassNamesPrefix">When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)</param>
        /// <param name="explicitListOfSavedPages">With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)</param>
        /// <param name="fontEncodingStrategy">Defines encoding special rule to tune PDF decoding for current document. (optional)</param>
        /// <param name="fontSavingMode">Defines font saving mode that will be used during saving of PDF to desirable format. (optional)</param>
        /// <param name="htmlMarkupGenerationMode">Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)</param>
        /// <param name="lettersPositioningMethod">The mode of positioning of letters in words in result HTML. (optional)</param>
        /// <param name="pagesFlowTypeDependsOnViewersScreenSize">If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)</param>
        /// <param name="partsEmbeddingMode">It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)</param>
        /// <param name="rasterImagesSavingMode">Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)</param>
        /// <param name="removeEmptyAreasOnTopAndBottom">Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)</param>
        /// <param name="saveShadowedTextsAsTransparentTexts">Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)</param>
        /// <param name="saveTransparentTexts">Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)</param>
        /// <param name="specialFolderForAllImages">The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="specialFolderForSvgImages">The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="trySaveTextUnderliningAndStrikeoutingInCss">PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetPdfInStorageToHtmlWithHttpInfo (string name, int? additionalMarginWidthInPoints = null, bool? compressSvgGraphicsIfAny = null, bool? convertMarkedContentToLayers = null, string defaultFontName = null, string documentType = null, bool? fixedLayout = null, int? imageResolution = null, int? minimalLineWidth = null, bool? preventGlyphsGrouping = null, bool? splitCssIntoPages = null, bool? splitIntoPages = null, bool? useZOrder = null, string antialiasingProcessing = null, string cssClassNamesPrefix = null, List<int?> explicitListOfSavedPages = null, string fontEncodingStrategy = null, string fontSavingMode = null, string htmlMarkupGenerationMode = null, string lettersPositioningMethod = null, bool? pagesFlowTypeDependsOnViewersScreenSize = null, string partsEmbeddingMode = null, string rasterImagesSavingMode = null, bool? removeEmptyAreasOnTopAndBottom = null, bool? saveShadowedTextsAsTransparentTexts = null, bool? saveTransparentTexts = null, string specialFolderForAllImages = null, string specialFolderForSvgImages = null, bool? trySaveTextUnderliningAndStrikeoutingInCss = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPdfInStorageToHtml");

            var localVarPath = "/pdf/{name}/convert/html";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (additionalMarginWidthInPoints != null) localVarQueryParams.Add("additionalMarginWidthInPoints", ApiClient.ParameterToString(additionalMarginWidthInPoints)); // query parameter
            if (compressSvgGraphicsIfAny != null) localVarQueryParams.Add("compressSvgGraphicsIfAny", ApiClient.ParameterToString(compressSvgGraphicsIfAny)); // query parameter
            if (convertMarkedContentToLayers != null) localVarQueryParams.Add("convertMarkedContentToLayers", ApiClient.ParameterToString(convertMarkedContentToLayers)); // query parameter
            if (defaultFontName != null) localVarQueryParams.Add("defaultFontName", ApiClient.ParameterToString(defaultFontName)); // query parameter
            if (documentType != null) localVarQueryParams.Add("documentType", ApiClient.ParameterToString(documentType)); // query parameter
            if (fixedLayout != null) localVarQueryParams.Add("fixedLayout", ApiClient.ParameterToString(fixedLayout)); // query parameter
            if (imageResolution != null) localVarQueryParams.Add("imageResolution", ApiClient.ParameterToString(imageResolution)); // query parameter
            if (minimalLineWidth != null) localVarQueryParams.Add("minimalLineWidth", ApiClient.ParameterToString(minimalLineWidth)); // query parameter
            if (preventGlyphsGrouping != null) localVarQueryParams.Add("preventGlyphsGrouping", ApiClient.ParameterToString(preventGlyphsGrouping)); // query parameter
            if (splitCssIntoPages != null) localVarQueryParams.Add("splitCssIntoPages", ApiClient.ParameterToString(splitCssIntoPages)); // query parameter
            if (splitIntoPages != null) localVarQueryParams.Add("splitIntoPages", ApiClient.ParameterToString(splitIntoPages)); // query parameter
            if (useZOrder != null) localVarQueryParams.Add("useZOrder", ApiClient.ParameterToString(useZOrder)); // query parameter
            if (antialiasingProcessing != null) localVarQueryParams.Add("antialiasingProcessing", ApiClient.ParameterToString(antialiasingProcessing)); // query parameter
            if (cssClassNamesPrefix != null) localVarQueryParams.Add("cssClassNamesPrefix", ApiClient.ParameterToString(cssClassNamesPrefix)); // query parameter
            if (explicitListOfSavedPages != null) localVarQueryParams.Add("explicitListOfSavedPages", ApiClient.ParameterToString(explicitListOfSavedPages)); // query parameter
            if (fontEncodingStrategy != null) localVarQueryParams.Add("fontEncodingStrategy", ApiClient.ParameterToString(fontEncodingStrategy)); // query parameter
            if (fontSavingMode != null) localVarQueryParams.Add("fontSavingMode", ApiClient.ParameterToString(fontSavingMode)); // query parameter
            if (htmlMarkupGenerationMode != null) localVarQueryParams.Add("htmlMarkupGenerationMode", ApiClient.ParameterToString(htmlMarkupGenerationMode)); // query parameter
            if (lettersPositioningMethod != null) localVarQueryParams.Add("lettersPositioningMethod", ApiClient.ParameterToString(lettersPositioningMethod)); // query parameter
            if (pagesFlowTypeDependsOnViewersScreenSize != null) localVarQueryParams.Add("pagesFlowTypeDependsOnViewersScreenSize", ApiClient.ParameterToString(pagesFlowTypeDependsOnViewersScreenSize)); // query parameter
            if (partsEmbeddingMode != null) localVarQueryParams.Add("partsEmbeddingMode", ApiClient.ParameterToString(partsEmbeddingMode)); // query parameter
            if (rasterImagesSavingMode != null) localVarQueryParams.Add("rasterImagesSavingMode", ApiClient.ParameterToString(rasterImagesSavingMode)); // query parameter
            if (removeEmptyAreasOnTopAndBottom != null) localVarQueryParams.Add("removeEmptyAreasOnTopAndBottom", ApiClient.ParameterToString(removeEmptyAreasOnTopAndBottom)); // query parameter
            if (saveShadowedTextsAsTransparentTexts != null) localVarQueryParams.Add("saveShadowedTextsAsTransparentTexts", ApiClient.ParameterToString(saveShadowedTextsAsTransparentTexts)); // query parameter
            if (saveTransparentTexts != null) localVarQueryParams.Add("saveTransparentTexts", ApiClient.ParameterToString(saveTransparentTexts)); // query parameter
            if (specialFolderForAllImages != null) localVarQueryParams.Add("specialFolderForAllImages", ApiClient.ParameterToString(specialFolderForAllImages)); // query parameter
            if (specialFolderForSvgImages != null) localVarQueryParams.Add("specialFolderForSvgImages", ApiClient.ParameterToString(specialFolderForSvgImages)); // query parameter
            if (trySaveTextUnderliningAndStrikeoutingInCss != null) localVarQueryParams.Add("trySaveTextUnderliningAndStrikeoutingInCss", ApiClient.ParameterToString(trySaveTextUnderliningAndStrikeoutingInCss)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfInStorageToHtml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to Html format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="additionalMarginWidthInPoints">Defines width of margin that will be forcibly left around that output HTML-areas. (optional)</param>
        /// <param name="compressSvgGraphicsIfAny">The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)</param>
        /// <param name="convertMarkedContentToLayers">If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)</param>
        /// <param name="defaultFontName">Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)</param>
        /// <param name="documentType">Result document type. (optional)</param>
        /// <param name="fixedLayout">The value indicating whether that HTML is created as fixed layout. (optional)</param>
        /// <param name="imageResolution">Resolution for image rendering. (optional)</param>
        /// <param name="minimalLineWidth">This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)</param>
        /// <param name="preventGlyphsGrouping">This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)</param>
        /// <param name="splitCssIntoPages">When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)</param>
        /// <param name="splitIntoPages">The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)</param>
        /// <param name="useZOrder">If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)</param>
        /// <param name="antialiasingProcessing">The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)</param>
        /// <param name="cssClassNamesPrefix">When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)</param>
        /// <param name="explicitListOfSavedPages">With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)</param>
        /// <param name="fontEncodingStrategy">Defines encoding special rule to tune PDF decoding for current document. (optional)</param>
        /// <param name="fontSavingMode">Defines font saving mode that will be used during saving of PDF to desirable format. (optional)</param>
        /// <param name="htmlMarkupGenerationMode">Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)</param>
        /// <param name="lettersPositioningMethod">The mode of positioning of letters in words in result HTML. (optional)</param>
        /// <param name="pagesFlowTypeDependsOnViewersScreenSize">If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)</param>
        /// <param name="partsEmbeddingMode">It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)</param>
        /// <param name="rasterImagesSavingMode">Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)</param>
        /// <param name="removeEmptyAreasOnTopAndBottom">Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)</param>
        /// <param name="saveShadowedTextsAsTransparentTexts">Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)</param>
        /// <param name="saveTransparentTexts">Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)</param>
        /// <param name="specialFolderForAllImages">The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="specialFolderForSvgImages">The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="trySaveTextUnderliningAndStrikeoutingInCss">PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetPdfInStorageToHtmlAsync (string name, int? additionalMarginWidthInPoints = null, bool? compressSvgGraphicsIfAny = null, bool? convertMarkedContentToLayers = null, string defaultFontName = null, string documentType = null, bool? fixedLayout = null, int? imageResolution = null, int? minimalLineWidth = null, bool? preventGlyphsGrouping = null, bool? splitCssIntoPages = null, bool? splitIntoPages = null, bool? useZOrder = null, string antialiasingProcessing = null, string cssClassNamesPrefix = null, List<int?> explicitListOfSavedPages = null, string fontEncodingStrategy = null, string fontSavingMode = null, string htmlMarkupGenerationMode = null, string lettersPositioningMethod = null, bool? pagesFlowTypeDependsOnViewersScreenSize = null, string partsEmbeddingMode = null, string rasterImagesSavingMode = null, bool? removeEmptyAreasOnTopAndBottom = null, bool? saveShadowedTextsAsTransparentTexts = null, bool? saveTransparentTexts = null, string specialFolderForAllImages = null, string specialFolderForSvgImages = null, bool? trySaveTextUnderliningAndStrikeoutingInCss = null, string folder = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetPdfInStorageToHtmlAsyncWithHttpInfo(name, additionalMarginWidthInPoints, compressSvgGraphicsIfAny, convertMarkedContentToLayers, defaultFontName, documentType, fixedLayout, imageResolution, minimalLineWidth, preventGlyphsGrouping, splitCssIntoPages, splitIntoPages, useZOrder, antialiasingProcessing, cssClassNamesPrefix, explicitListOfSavedPages, fontEncodingStrategy, fontSavingMode, htmlMarkupGenerationMode, lettersPositioningMethod, pagesFlowTypeDependsOnViewersScreenSize, partsEmbeddingMode, rasterImagesSavingMode, removeEmptyAreasOnTopAndBottom, saveShadowedTextsAsTransparentTexts, saveTransparentTexts, specialFolderForAllImages, specialFolderForSvgImages, trySaveTextUnderliningAndStrikeoutingInCss, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (located on storage) to Html format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="additionalMarginWidthInPoints">Defines width of margin that will be forcibly left around that output HTML-areas. (optional)</param>
        /// <param name="compressSvgGraphicsIfAny">The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)</param>
        /// <param name="convertMarkedContentToLayers">If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)</param>
        /// <param name="defaultFontName">Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)</param>
        /// <param name="documentType">Result document type. (optional)</param>
        /// <param name="fixedLayout">The value indicating whether that HTML is created as fixed layout. (optional)</param>
        /// <param name="imageResolution">Resolution for image rendering. (optional)</param>
        /// <param name="minimalLineWidth">This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)</param>
        /// <param name="preventGlyphsGrouping">This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)</param>
        /// <param name="splitCssIntoPages">When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)</param>
        /// <param name="splitIntoPages">The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)</param>
        /// <param name="useZOrder">If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)</param>
        /// <param name="antialiasingProcessing">The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)</param>
        /// <param name="cssClassNamesPrefix">When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)</param>
        /// <param name="explicitListOfSavedPages">With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)</param>
        /// <param name="fontEncodingStrategy">Defines encoding special rule to tune PDF decoding for current document. (optional)</param>
        /// <param name="fontSavingMode">Defines font saving mode that will be used during saving of PDF to desirable format. (optional)</param>
        /// <param name="htmlMarkupGenerationMode">Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)</param>
        /// <param name="lettersPositioningMethod">The mode of positioning of letters in words in result HTML. (optional)</param>
        /// <param name="pagesFlowTypeDependsOnViewersScreenSize">If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)</param>
        /// <param name="partsEmbeddingMode">It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)</param>
        /// <param name="rasterImagesSavingMode">Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)</param>
        /// <param name="removeEmptyAreasOnTopAndBottom">Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)</param>
        /// <param name="saveShadowedTextsAsTransparentTexts">Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)</param>
        /// <param name="saveTransparentTexts">Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)</param>
        /// <param name="specialFolderForAllImages">The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="specialFolderForSvgImages">The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="trySaveTextUnderliningAndStrikeoutingInCss">PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPdfInStorageToHtmlAsyncWithHttpInfo (string name, int? additionalMarginWidthInPoints = null, bool? compressSvgGraphicsIfAny = null, bool? convertMarkedContentToLayers = null, string defaultFontName = null, string documentType = null, bool? fixedLayout = null, int? imageResolution = null, int? minimalLineWidth = null, bool? preventGlyphsGrouping = null, bool? splitCssIntoPages = null, bool? splitIntoPages = null, bool? useZOrder = null, string antialiasingProcessing = null, string cssClassNamesPrefix = null, List<int?> explicitListOfSavedPages = null, string fontEncodingStrategy = null, string fontSavingMode = null, string htmlMarkupGenerationMode = null, string lettersPositioningMethod = null, bool? pagesFlowTypeDependsOnViewersScreenSize = null, string partsEmbeddingMode = null, string rasterImagesSavingMode = null, bool? removeEmptyAreasOnTopAndBottom = null, bool? saveShadowedTextsAsTransparentTexts = null, bool? saveTransparentTexts = null, string specialFolderForAllImages = null, string specialFolderForSvgImages = null, bool? trySaveTextUnderliningAndStrikeoutingInCss = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPdfInStorageToHtml");

            var localVarPath = "/pdf/{name}/convert/html";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (additionalMarginWidthInPoints != null) localVarQueryParams.Add("additionalMarginWidthInPoints", ApiClient.ParameterToString(additionalMarginWidthInPoints)); // query parameter
            if (compressSvgGraphicsIfAny != null) localVarQueryParams.Add("compressSvgGraphicsIfAny", ApiClient.ParameterToString(compressSvgGraphicsIfAny)); // query parameter
            if (convertMarkedContentToLayers != null) localVarQueryParams.Add("convertMarkedContentToLayers", ApiClient.ParameterToString(convertMarkedContentToLayers)); // query parameter
            if (defaultFontName != null) localVarQueryParams.Add("defaultFontName", ApiClient.ParameterToString(defaultFontName)); // query parameter
            if (documentType != null) localVarQueryParams.Add("documentType", ApiClient.ParameterToString(documentType)); // query parameter
            if (fixedLayout != null) localVarQueryParams.Add("fixedLayout", ApiClient.ParameterToString(fixedLayout)); // query parameter
            if (imageResolution != null) localVarQueryParams.Add("imageResolution", ApiClient.ParameterToString(imageResolution)); // query parameter
            if (minimalLineWidth != null) localVarQueryParams.Add("minimalLineWidth", ApiClient.ParameterToString(minimalLineWidth)); // query parameter
            if (preventGlyphsGrouping != null) localVarQueryParams.Add("preventGlyphsGrouping", ApiClient.ParameterToString(preventGlyphsGrouping)); // query parameter
            if (splitCssIntoPages != null) localVarQueryParams.Add("splitCssIntoPages", ApiClient.ParameterToString(splitCssIntoPages)); // query parameter
            if (splitIntoPages != null) localVarQueryParams.Add("splitIntoPages", ApiClient.ParameterToString(splitIntoPages)); // query parameter
            if (useZOrder != null) localVarQueryParams.Add("useZOrder", ApiClient.ParameterToString(useZOrder)); // query parameter
            if (antialiasingProcessing != null) localVarQueryParams.Add("antialiasingProcessing", ApiClient.ParameterToString(antialiasingProcessing)); // query parameter
            if (cssClassNamesPrefix != null) localVarQueryParams.Add("cssClassNamesPrefix", ApiClient.ParameterToString(cssClassNamesPrefix)); // query parameter
            if (explicitListOfSavedPages != null) localVarQueryParams.Add("explicitListOfSavedPages", ApiClient.ParameterToString(explicitListOfSavedPages)); // query parameter
            if (fontEncodingStrategy != null) localVarQueryParams.Add("fontEncodingStrategy", ApiClient.ParameterToString(fontEncodingStrategy)); // query parameter
            if (fontSavingMode != null) localVarQueryParams.Add("fontSavingMode", ApiClient.ParameterToString(fontSavingMode)); // query parameter
            if (htmlMarkupGenerationMode != null) localVarQueryParams.Add("htmlMarkupGenerationMode", ApiClient.ParameterToString(htmlMarkupGenerationMode)); // query parameter
            if (lettersPositioningMethod != null) localVarQueryParams.Add("lettersPositioningMethod", ApiClient.ParameterToString(lettersPositioningMethod)); // query parameter
            if (pagesFlowTypeDependsOnViewersScreenSize != null) localVarQueryParams.Add("pagesFlowTypeDependsOnViewersScreenSize", ApiClient.ParameterToString(pagesFlowTypeDependsOnViewersScreenSize)); // query parameter
            if (partsEmbeddingMode != null) localVarQueryParams.Add("partsEmbeddingMode", ApiClient.ParameterToString(partsEmbeddingMode)); // query parameter
            if (rasterImagesSavingMode != null) localVarQueryParams.Add("rasterImagesSavingMode", ApiClient.ParameterToString(rasterImagesSavingMode)); // query parameter
            if (removeEmptyAreasOnTopAndBottom != null) localVarQueryParams.Add("removeEmptyAreasOnTopAndBottom", ApiClient.ParameterToString(removeEmptyAreasOnTopAndBottom)); // query parameter
            if (saveShadowedTextsAsTransparentTexts != null) localVarQueryParams.Add("saveShadowedTextsAsTransparentTexts", ApiClient.ParameterToString(saveShadowedTextsAsTransparentTexts)); // query parameter
            if (saveTransparentTexts != null) localVarQueryParams.Add("saveTransparentTexts", ApiClient.ParameterToString(saveTransparentTexts)); // query parameter
            if (specialFolderForAllImages != null) localVarQueryParams.Add("specialFolderForAllImages", ApiClient.ParameterToString(specialFolderForAllImages)); // query parameter
            if (specialFolderForSvgImages != null) localVarQueryParams.Add("specialFolderForSvgImages", ApiClient.ParameterToString(specialFolderForSvgImages)); // query parameter
            if (trySaveTextUnderliningAndStrikeoutingInCss != null) localVarQueryParams.Add("trySaveTextUnderliningAndStrikeoutingInCss", ApiClient.ParameterToString(trySaveTextUnderliningAndStrikeoutingInCss)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfInStorageToHtml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to LaTeX format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pagesCount">Pages count. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetPdfInStorageToLaTeX (string name, int? pagesCount = null, string folder = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetPdfInStorageToLaTeXWithHttpInfo(name, pagesCount, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (located on storage) to LaTeX format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pagesCount">Pages count. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetPdfInStorageToLaTeXWithHttpInfo (string name, int? pagesCount = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPdfInStorageToLaTeX");

            var localVarPath = "/pdf/{name}/convert/latex";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pagesCount != null) localVarQueryParams.Add("pagesCount", ApiClient.ParameterToString(pagesCount)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfInStorageToLaTeX", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to LaTeX format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pagesCount">Pages count. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetPdfInStorageToLaTeXAsync (string name, int? pagesCount = null, string folder = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetPdfInStorageToLaTeXAsyncWithHttpInfo(name, pagesCount, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (located on storage) to LaTeX format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pagesCount">Pages count. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPdfInStorageToLaTeXAsyncWithHttpInfo (string name, int? pagesCount = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPdfInStorageToLaTeX");

            var localVarPath = "/pdf/{name}/convert/latex";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pagesCount != null) localVarQueryParams.Add("pagesCount", ApiClient.ParameterToString(pagesCount)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfInStorageToLaTeX", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to MOBIXML format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetPdfInStorageToMobiXml (string name, string folder = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetPdfInStorageToMobiXmlWithHttpInfo(name, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (located on storage) to MOBIXML format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetPdfInStorageToMobiXmlWithHttpInfo (string name, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPdfInStorageToMobiXml");

            var localVarPath = "/pdf/{name}/convert/mobixml";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfInStorageToMobiXml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to MOBIXML format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetPdfInStorageToMobiXmlAsync (string name, string folder = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetPdfInStorageToMobiXmlAsyncWithHttpInfo(name, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (located on storage) to MOBIXML format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPdfInStorageToMobiXmlAsyncWithHttpInfo (string name, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPdfInStorageToMobiXml");

            var localVarPath = "/pdf/{name}/convert/mobixml";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfInStorageToMobiXml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to PdfA format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="type">Type of PdfA format.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetPdfInStorageToPdfA (string name, string type, string folder = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetPdfInStorageToPdfAWithHttpInfo(name, type, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (located on storage) to PdfA format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="type">Type of PdfA format.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetPdfInStorageToPdfAWithHttpInfo (string name, string type, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPdfInStorageToPdfA");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling PdfApi->GetPdfInStorageToPdfA");

            var localVarPath = "/pdf/{name}/convert/pdfa";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (type != null) localVarQueryParams.Add("type", ApiClient.ParameterToString(type)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfInStorageToPdfA", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to PdfA format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="type">Type of PdfA format.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetPdfInStorageToPdfAAsync (string name, string type, string folder = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetPdfInStorageToPdfAAsyncWithHttpInfo(name, type, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (located on storage) to PdfA format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="type">Type of PdfA format.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPdfInStorageToPdfAAsyncWithHttpInfo (string name, string type, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPdfInStorageToPdfA");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling PdfApi->GetPdfInStorageToPdfA");

            var localVarPath = "/pdf/{name}/convert/pdfa";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (type != null) localVarQueryParams.Add("type", ApiClient.ParameterToString(type)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfInStorageToPdfA", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to PPTX format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="separateImages">Separate images. (optional)</param>
        /// <param name="slidesAsImages">Slides as images. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetPdfInStorageToPptx (string name, bool? separateImages = null, bool? slidesAsImages = null, string folder = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetPdfInStorageToPptxWithHttpInfo(name, separateImages, slidesAsImages, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (located on storage) to PPTX format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="separateImages">Separate images. (optional)</param>
        /// <param name="slidesAsImages">Slides as images. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetPdfInStorageToPptxWithHttpInfo (string name, bool? separateImages = null, bool? slidesAsImages = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPdfInStorageToPptx");

            var localVarPath = "/pdf/{name}/convert/pptx";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (separateImages != null) localVarQueryParams.Add("separateImages", ApiClient.ParameterToString(separateImages)); // query parameter
            if (slidesAsImages != null) localVarQueryParams.Add("slidesAsImages", ApiClient.ParameterToString(slidesAsImages)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfInStorageToPptx", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to PPTX format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="separateImages">Separate images. (optional)</param>
        /// <param name="slidesAsImages">Slides as images. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetPdfInStorageToPptxAsync (string name, bool? separateImages = null, bool? slidesAsImages = null, string folder = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetPdfInStorageToPptxAsyncWithHttpInfo(name, separateImages, slidesAsImages, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (located on storage) to PPTX format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="separateImages">Separate images. (optional)</param>
        /// <param name="slidesAsImages">Slides as images. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPdfInStorageToPptxAsyncWithHttpInfo (string name, bool? separateImages = null, bool? slidesAsImages = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPdfInStorageToPptx");

            var localVarPath = "/pdf/{name}/convert/pptx";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (separateImages != null) localVarQueryParams.Add("separateImages", ApiClient.ParameterToString(separateImages)); // query parameter
            if (slidesAsImages != null) localVarQueryParams.Add("slidesAsImages", ApiClient.ParameterToString(slidesAsImages)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfInStorageToPptx", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to SVG format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="compressOutputToZipArchive">Specifies whether output will be created as one zip-archive. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetPdfInStorageToSvg (string name, bool? compressOutputToZipArchive = null, string folder = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetPdfInStorageToSvgWithHttpInfo(name, compressOutputToZipArchive, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (located on storage) to SVG format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="compressOutputToZipArchive">Specifies whether output will be created as one zip-archive. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetPdfInStorageToSvgWithHttpInfo (string name, bool? compressOutputToZipArchive = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPdfInStorageToSvg");

            var localVarPath = "/pdf/{name}/convert/svg";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (compressOutputToZipArchive != null) localVarQueryParams.Add("compressOutputToZipArchive", ApiClient.ParameterToString(compressOutputToZipArchive)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfInStorageToSvg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to SVG format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="compressOutputToZipArchive">Specifies whether output will be created as one zip-archive. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetPdfInStorageToSvgAsync (string name, bool? compressOutputToZipArchive = null, string folder = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetPdfInStorageToSvgAsyncWithHttpInfo(name, compressOutputToZipArchive, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (located on storage) to SVG format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="compressOutputToZipArchive">Specifies whether output will be created as one zip-archive. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPdfInStorageToSvgAsyncWithHttpInfo (string name, bool? compressOutputToZipArchive = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPdfInStorageToSvg");

            var localVarPath = "/pdf/{name}/convert/svg";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (compressOutputToZipArchive != null) localVarQueryParams.Add("compressOutputToZipArchive", ApiClient.ParameterToString(compressOutputToZipArchive)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfInStorageToSvg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to TIFF format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="brightness">Image brightness. (optional)</param>
        /// <param name="compression">Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)</param>
        /// <param name="colorDepth">Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)</param>
        /// <param name="leftMargin">Left image margin. (optional)</param>
        /// <param name="rightMargin">Right image margin. (optional)</param>
        /// <param name="topMargin">Top image margin. (optional)</param>
        /// <param name="bottomMargin">Bottom image margin. (optional)</param>
        /// <param name="orientation">Image orientation. Possible values are: None, Landscape, Portait. (optional)</param>
        /// <param name="skipBlankPages">Skip blank pages flag. (optional)</param>
        /// <param name="width">Image width. (optional)</param>
        /// <param name="height">Image height. (optional)</param>
        /// <param name="xResolution">Horizontal resolution. (optional)</param>
        /// <param name="yResolution">Vertical resolution. (optional)</param>
        /// <param name="pageIndex">Start page to export. (optional)</param>
        /// <param name="pageCount">Number of pages to export. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetPdfInStorageToTiff (string name, double? brightness = null, string compression = null, string colorDepth = null, int? leftMargin = null, int? rightMargin = null, int? topMargin = null, int? bottomMargin = null, string orientation = null, bool? skipBlankPages = null, int? width = null, int? height = null, int? xResolution = null, int? yResolution = null, int? pageIndex = null, int? pageCount = null, string folder = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetPdfInStorageToTiffWithHttpInfo(name, brightness, compression, colorDepth, leftMargin, rightMargin, topMargin, bottomMargin, orientation, skipBlankPages, width, height, xResolution, yResolution, pageIndex, pageCount, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (located on storage) to TIFF format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="brightness">Image brightness. (optional)</param>
        /// <param name="compression">Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)</param>
        /// <param name="colorDepth">Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)</param>
        /// <param name="leftMargin">Left image margin. (optional)</param>
        /// <param name="rightMargin">Right image margin. (optional)</param>
        /// <param name="topMargin">Top image margin. (optional)</param>
        /// <param name="bottomMargin">Bottom image margin. (optional)</param>
        /// <param name="orientation">Image orientation. Possible values are: None, Landscape, Portait. (optional)</param>
        /// <param name="skipBlankPages">Skip blank pages flag. (optional)</param>
        /// <param name="width">Image width. (optional)</param>
        /// <param name="height">Image height. (optional)</param>
        /// <param name="xResolution">Horizontal resolution. (optional)</param>
        /// <param name="yResolution">Vertical resolution. (optional)</param>
        /// <param name="pageIndex">Start page to export. (optional)</param>
        /// <param name="pageCount">Number of pages to export. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetPdfInStorageToTiffWithHttpInfo (string name, double? brightness = null, string compression = null, string colorDepth = null, int? leftMargin = null, int? rightMargin = null, int? topMargin = null, int? bottomMargin = null, string orientation = null, bool? skipBlankPages = null, int? width = null, int? height = null, int? xResolution = null, int? yResolution = null, int? pageIndex = null, int? pageCount = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPdfInStorageToTiff");

            var localVarPath = "/pdf/{name}/convert/tiff";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (brightness != null) localVarQueryParams.Add("brightness", ApiClient.ParameterToString(brightness)); // query parameter
            if (compression != null) localVarQueryParams.Add("compression", ApiClient.ParameterToString(compression)); // query parameter
            if (colorDepth != null) localVarQueryParams.Add("colorDepth", ApiClient.ParameterToString(colorDepth)); // query parameter
            if (leftMargin != null) localVarQueryParams.Add("leftMargin", ApiClient.ParameterToString(leftMargin)); // query parameter
            if (rightMargin != null) localVarQueryParams.Add("rightMargin", ApiClient.ParameterToString(rightMargin)); // query parameter
            if (topMargin != null) localVarQueryParams.Add("topMargin", ApiClient.ParameterToString(topMargin)); // query parameter
            if (bottomMargin != null) localVarQueryParams.Add("bottomMargin", ApiClient.ParameterToString(bottomMargin)); // query parameter
            if (orientation != null) localVarQueryParams.Add("orientation", ApiClient.ParameterToString(orientation)); // query parameter
            if (skipBlankPages != null) localVarQueryParams.Add("skipBlankPages", ApiClient.ParameterToString(skipBlankPages)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (xResolution != null) localVarQueryParams.Add("xResolution", ApiClient.ParameterToString(xResolution)); // query parameter
            if (yResolution != null) localVarQueryParams.Add("yResolution", ApiClient.ParameterToString(yResolution)); // query parameter
            if (pageIndex != null) localVarQueryParams.Add("pageIndex", ApiClient.ParameterToString(pageIndex)); // query parameter
            if (pageCount != null) localVarQueryParams.Add("pageCount", ApiClient.ParameterToString(pageCount)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfInStorageToTiff", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to TIFF format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="brightness">Image brightness. (optional)</param>
        /// <param name="compression">Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)</param>
        /// <param name="colorDepth">Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)</param>
        /// <param name="leftMargin">Left image margin. (optional)</param>
        /// <param name="rightMargin">Right image margin. (optional)</param>
        /// <param name="topMargin">Top image margin. (optional)</param>
        /// <param name="bottomMargin">Bottom image margin. (optional)</param>
        /// <param name="orientation">Image orientation. Possible values are: None, Landscape, Portait. (optional)</param>
        /// <param name="skipBlankPages">Skip blank pages flag. (optional)</param>
        /// <param name="width">Image width. (optional)</param>
        /// <param name="height">Image height. (optional)</param>
        /// <param name="xResolution">Horizontal resolution. (optional)</param>
        /// <param name="yResolution">Vertical resolution. (optional)</param>
        /// <param name="pageIndex">Start page to export. (optional)</param>
        /// <param name="pageCount">Number of pages to export. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetPdfInStorageToTiffAsync (string name, double? brightness = null, string compression = null, string colorDepth = null, int? leftMargin = null, int? rightMargin = null, int? topMargin = null, int? bottomMargin = null, string orientation = null, bool? skipBlankPages = null, int? width = null, int? height = null, int? xResolution = null, int? yResolution = null, int? pageIndex = null, int? pageCount = null, string folder = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetPdfInStorageToTiffAsyncWithHttpInfo(name, brightness, compression, colorDepth, leftMargin, rightMargin, topMargin, bottomMargin, orientation, skipBlankPages, width, height, xResolution, yResolution, pageIndex, pageCount, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (located on storage) to TIFF format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="brightness">Image brightness. (optional)</param>
        /// <param name="compression">Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)</param>
        /// <param name="colorDepth">Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)</param>
        /// <param name="leftMargin">Left image margin. (optional)</param>
        /// <param name="rightMargin">Right image margin. (optional)</param>
        /// <param name="topMargin">Top image margin. (optional)</param>
        /// <param name="bottomMargin">Bottom image margin. (optional)</param>
        /// <param name="orientation">Image orientation. Possible values are: None, Landscape, Portait. (optional)</param>
        /// <param name="skipBlankPages">Skip blank pages flag. (optional)</param>
        /// <param name="width">Image width. (optional)</param>
        /// <param name="height">Image height. (optional)</param>
        /// <param name="xResolution">Horizontal resolution. (optional)</param>
        /// <param name="yResolution">Vertical resolution. (optional)</param>
        /// <param name="pageIndex">Start page to export. (optional)</param>
        /// <param name="pageCount">Number of pages to export. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPdfInStorageToTiffAsyncWithHttpInfo (string name, double? brightness = null, string compression = null, string colorDepth = null, int? leftMargin = null, int? rightMargin = null, int? topMargin = null, int? bottomMargin = null, string orientation = null, bool? skipBlankPages = null, int? width = null, int? height = null, int? xResolution = null, int? yResolution = null, int? pageIndex = null, int? pageCount = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPdfInStorageToTiff");

            var localVarPath = "/pdf/{name}/convert/tiff";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (brightness != null) localVarQueryParams.Add("brightness", ApiClient.ParameterToString(brightness)); // query parameter
            if (compression != null) localVarQueryParams.Add("compression", ApiClient.ParameterToString(compression)); // query parameter
            if (colorDepth != null) localVarQueryParams.Add("colorDepth", ApiClient.ParameterToString(colorDepth)); // query parameter
            if (leftMargin != null) localVarQueryParams.Add("leftMargin", ApiClient.ParameterToString(leftMargin)); // query parameter
            if (rightMargin != null) localVarQueryParams.Add("rightMargin", ApiClient.ParameterToString(rightMargin)); // query parameter
            if (topMargin != null) localVarQueryParams.Add("topMargin", ApiClient.ParameterToString(topMargin)); // query parameter
            if (bottomMargin != null) localVarQueryParams.Add("bottomMargin", ApiClient.ParameterToString(bottomMargin)); // query parameter
            if (orientation != null) localVarQueryParams.Add("orientation", ApiClient.ParameterToString(orientation)); // query parameter
            if (skipBlankPages != null) localVarQueryParams.Add("skipBlankPages", ApiClient.ParameterToString(skipBlankPages)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (xResolution != null) localVarQueryParams.Add("xResolution", ApiClient.ParameterToString(xResolution)); // query parameter
            if (yResolution != null) localVarQueryParams.Add("yResolution", ApiClient.ParameterToString(yResolution)); // query parameter
            if (pageIndex != null) localVarQueryParams.Add("pageIndex", ApiClient.ParameterToString(pageIndex)); // query parameter
            if (pageCount != null) localVarQueryParams.Add("pageCount", ApiClient.ParameterToString(pageCount)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfInStorageToTiff", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to XLS format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="insertBlankColumnAtFirst">Insert blank column at first (optional)</param>
        /// <param name="minimizeTheNumberOfWorksheets">Minimize the number of worksheets (optional)</param>
        /// <param name="scaleFactor">Scale factor (optional)</param>
        /// <param name="uniformWorksheets">Uniform worksheets (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetPdfInStorageToXls (string name, bool? insertBlankColumnAtFirst = null, bool? minimizeTheNumberOfWorksheets = null, double? scaleFactor = null, bool? uniformWorksheets = null, string folder = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetPdfInStorageToXlsWithHttpInfo(name, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (located on storage) to XLS format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="insertBlankColumnAtFirst">Insert blank column at first (optional)</param>
        /// <param name="minimizeTheNumberOfWorksheets">Minimize the number of worksheets (optional)</param>
        /// <param name="scaleFactor">Scale factor (optional)</param>
        /// <param name="uniformWorksheets">Uniform worksheets (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetPdfInStorageToXlsWithHttpInfo (string name, bool? insertBlankColumnAtFirst = null, bool? minimizeTheNumberOfWorksheets = null, double? scaleFactor = null, bool? uniformWorksheets = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPdfInStorageToXls");

            var localVarPath = "/pdf/{name}/convert/xls";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (insertBlankColumnAtFirst != null) localVarQueryParams.Add("insertBlankColumnAtFirst", ApiClient.ParameterToString(insertBlankColumnAtFirst)); // query parameter
            if (minimizeTheNumberOfWorksheets != null) localVarQueryParams.Add("minimizeTheNumberOfWorksheets", ApiClient.ParameterToString(minimizeTheNumberOfWorksheets)); // query parameter
            if (scaleFactor != null) localVarQueryParams.Add("scaleFactor", ApiClient.ParameterToString(scaleFactor)); // query parameter
            if (uniformWorksheets != null) localVarQueryParams.Add("uniformWorksheets", ApiClient.ParameterToString(uniformWorksheets)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfInStorageToXls", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to XLS format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="insertBlankColumnAtFirst">Insert blank column at first (optional)</param>
        /// <param name="minimizeTheNumberOfWorksheets">Minimize the number of worksheets (optional)</param>
        /// <param name="scaleFactor">Scale factor (optional)</param>
        /// <param name="uniformWorksheets">Uniform worksheets (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetPdfInStorageToXlsAsync (string name, bool? insertBlankColumnAtFirst = null, bool? minimizeTheNumberOfWorksheets = null, double? scaleFactor = null, bool? uniformWorksheets = null, string folder = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetPdfInStorageToXlsAsyncWithHttpInfo(name, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (located on storage) to XLS format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="insertBlankColumnAtFirst">Insert blank column at first (optional)</param>
        /// <param name="minimizeTheNumberOfWorksheets">Minimize the number of worksheets (optional)</param>
        /// <param name="scaleFactor">Scale factor (optional)</param>
        /// <param name="uniformWorksheets">Uniform worksheets (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPdfInStorageToXlsAsyncWithHttpInfo (string name, bool? insertBlankColumnAtFirst = null, bool? minimizeTheNumberOfWorksheets = null, double? scaleFactor = null, bool? uniformWorksheets = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPdfInStorageToXls");

            var localVarPath = "/pdf/{name}/convert/xls";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (insertBlankColumnAtFirst != null) localVarQueryParams.Add("insertBlankColumnAtFirst", ApiClient.ParameterToString(insertBlankColumnAtFirst)); // query parameter
            if (minimizeTheNumberOfWorksheets != null) localVarQueryParams.Add("minimizeTheNumberOfWorksheets", ApiClient.ParameterToString(minimizeTheNumberOfWorksheets)); // query parameter
            if (scaleFactor != null) localVarQueryParams.Add("scaleFactor", ApiClient.ParameterToString(scaleFactor)); // query parameter
            if (uniformWorksheets != null) localVarQueryParams.Add("uniformWorksheets", ApiClient.ParameterToString(uniformWorksheets)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfInStorageToXls", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to XML format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetPdfInStorageToXml (string name, string folder = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetPdfInStorageToXmlWithHttpInfo(name, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (located on storage) to XML format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetPdfInStorageToXmlWithHttpInfo (string name, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPdfInStorageToXml");

            var localVarPath = "/pdf/{name}/convert/xml";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfInStorageToXml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to XML format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetPdfInStorageToXmlAsync (string name, string folder = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetPdfInStorageToXmlAsyncWithHttpInfo(name, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (located on storage) to XML format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPdfInStorageToXmlAsyncWithHttpInfo (string name, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPdfInStorageToXml");

            var localVarPath = "/pdf/{name}/convert/xml";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfInStorageToXml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to XPS format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetPdfInStorageToXps (string name, string folder = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetPdfInStorageToXpsWithHttpInfo(name, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (located on storage) to XPS format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetPdfInStorageToXpsWithHttpInfo (string name, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPdfInStorageToXps");

            var localVarPath = "/pdf/{name}/convert/xps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfInStorageToXps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to XPS format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetPdfInStorageToXpsAsync (string name, string folder = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetPdfInStorageToXpsAsyncWithHttpInfo(name, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (located on storage) to XPS format and returns resulting file in response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPdfInStorageToXpsAsyncWithHttpInfo (string name, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPdfInStorageToXps");

            var localVarPath = "/pdf/{name}/convert/xps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfInStorageToXps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Read document page polyline annotation by ID. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>PolyLineAnnotationResponse</returns>
        public PolyLineAnnotationResponse GetPolyLineAnnotation (string name, string annotationId, string storage = null, string folder = null)
        {
             ApiResponse<PolyLineAnnotationResponse> localVarResponse = GetPolyLineAnnotationWithHttpInfo(name, annotationId, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document page polyline annotation by ID. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of PolyLineAnnotationResponse</returns>
        public ApiResponse< PolyLineAnnotationResponse > GetPolyLineAnnotationWithHttpInfo (string name, string annotationId, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPolyLineAnnotation");
            // verify the required parameter 'annotationId' is set
            if (annotationId == null)
                throw new ApiException(400, "Missing required parameter 'annotationId' when calling PdfApi->GetPolyLineAnnotation");

            var localVarPath = "/pdf/{name}/annotations/polyline/{annotationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (annotationId != null) localVarPathParams.Add("annotationId", ApiClient.ParameterToString(annotationId)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPolyLineAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolyLineAnnotationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PolyLineAnnotationResponse) ApiClient.Deserialize(localVarResponse, typeof(PolyLineAnnotationResponse)));
        }

        /// <summary>
        /// Read document page polyline annotation by ID. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of PolyLineAnnotationResponse</returns>
        public async System.Threading.Tasks.Task<PolyLineAnnotationResponse> GetPolyLineAnnotationAsync (string name, string annotationId, string storage = null, string folder = null)
        {
             ApiResponse<PolyLineAnnotationResponse> localVarResponse = await GetPolyLineAnnotationAsyncWithHttpInfo(name, annotationId, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document page polyline annotation by ID. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (PolyLineAnnotationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PolyLineAnnotationResponse>> GetPolyLineAnnotationAsyncWithHttpInfo (string name, string annotationId, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPolyLineAnnotation");
            // verify the required parameter 'annotationId' is set
            if (annotationId == null)
                throw new ApiException(400, "Missing required parameter 'annotationId' when calling PdfApi->GetPolyLineAnnotation");

            var localVarPath = "/pdf/{name}/annotations/polyline/{annotationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (annotationId != null) localVarPathParams.Add("annotationId", ApiClient.ParameterToString(annotationId)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPolyLineAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolyLineAnnotationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PolyLineAnnotationResponse) ApiClient.Deserialize(localVarResponse, typeof(PolyLineAnnotationResponse)));
        }

        /// <summary>
        /// Read document page polygon annotation by ID. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>PolygonAnnotationResponse</returns>
        public PolygonAnnotationResponse GetPolygonAnnotation (string name, string annotationId, string storage = null, string folder = null)
        {
             ApiResponse<PolygonAnnotationResponse> localVarResponse = GetPolygonAnnotationWithHttpInfo(name, annotationId, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document page polygon annotation by ID. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of PolygonAnnotationResponse</returns>
        public ApiResponse< PolygonAnnotationResponse > GetPolygonAnnotationWithHttpInfo (string name, string annotationId, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPolygonAnnotation");
            // verify the required parameter 'annotationId' is set
            if (annotationId == null)
                throw new ApiException(400, "Missing required parameter 'annotationId' when calling PdfApi->GetPolygonAnnotation");

            var localVarPath = "/pdf/{name}/annotations/polygon/{annotationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (annotationId != null) localVarPathParams.Add("annotationId", ApiClient.ParameterToString(annotationId)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPolygonAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolygonAnnotationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PolygonAnnotationResponse) ApiClient.Deserialize(localVarResponse, typeof(PolygonAnnotationResponse)));
        }

        /// <summary>
        /// Read document page polygon annotation by ID. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of PolygonAnnotationResponse</returns>
        public async System.Threading.Tasks.Task<PolygonAnnotationResponse> GetPolygonAnnotationAsync (string name, string annotationId, string storage = null, string folder = null)
        {
             ApiResponse<PolygonAnnotationResponse> localVarResponse = await GetPolygonAnnotationAsyncWithHttpInfo(name, annotationId, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document page polygon annotation by ID. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (PolygonAnnotationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PolygonAnnotationResponse>> GetPolygonAnnotationAsyncWithHttpInfo (string name, string annotationId, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetPolygonAnnotation");
            // verify the required parameter 'annotationId' is set
            if (annotationId == null)
                throw new ApiException(400, "Missing required parameter 'annotationId' when calling PdfApi->GetPolygonAnnotation");

            var localVarPath = "/pdf/{name}/annotations/polygon/{annotationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (annotationId != null) localVarPathParams.Add("annotationId", ApiClient.ParameterToString(annotationId)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPolygonAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolygonAnnotationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PolygonAnnotationResponse) ApiClient.Deserialize(localVarResponse, typeof(PolygonAnnotationResponse)));
        }

        /// <summary>
        /// Convert PS file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.ps)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetPsInStorageToPdf (string srcPath, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetPsInStorageToPdfWithHttpInfo(srcPath, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert PS file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.ps)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetPsInStorageToPdfWithHttpInfo (string srcPath, string storage = null)
        {
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->GetPsInStorageToPdf");

            var localVarPath = "/pdf/create/ps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPsInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert PS file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.ps)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetPsInStorageToPdfAsync (string srcPath, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetPsInStorageToPdfAsyncWithHttpInfo(srcPath, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert PS file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.ps)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPsInStorageToPdfAsyncWithHttpInfo (string srcPath, string storage = null)
        {
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->GetPsInStorageToPdf");

            var localVarPath = "/pdf/create/ps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPsInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Read document page square annotation by ID. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SquareAnnotationResponse</returns>
        public SquareAnnotationResponse GetSquareAnnotation (string name, string annotationId, string storage = null, string folder = null)
        {
             ApiResponse<SquareAnnotationResponse> localVarResponse = GetSquareAnnotationWithHttpInfo(name, annotationId, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document page square annotation by ID. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SquareAnnotationResponse</returns>
        public ApiResponse< SquareAnnotationResponse > GetSquareAnnotationWithHttpInfo (string name, string annotationId, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetSquareAnnotation");
            // verify the required parameter 'annotationId' is set
            if (annotationId == null)
                throw new ApiException(400, "Missing required parameter 'annotationId' when calling PdfApi->GetSquareAnnotation");

            var localVarPath = "/pdf/{name}/annotations/square/{annotationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (annotationId != null) localVarPathParams.Add("annotationId", ApiClient.ParameterToString(annotationId)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSquareAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SquareAnnotationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SquareAnnotationResponse) ApiClient.Deserialize(localVarResponse, typeof(SquareAnnotationResponse)));
        }

        /// <summary>
        /// Read document page square annotation by ID. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SquareAnnotationResponse</returns>
        public async System.Threading.Tasks.Task<SquareAnnotationResponse> GetSquareAnnotationAsync (string name, string annotationId, string storage = null, string folder = null)
        {
             ApiResponse<SquareAnnotationResponse> localVarResponse = await GetSquareAnnotationAsyncWithHttpInfo(name, annotationId, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document page square annotation by ID. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SquareAnnotationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SquareAnnotationResponse>> GetSquareAnnotationAsyncWithHttpInfo (string name, string annotationId, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetSquareAnnotation");
            // verify the required parameter 'annotationId' is set
            if (annotationId == null)
                throw new ApiException(400, "Missing required parameter 'annotationId' when calling PdfApi->GetSquareAnnotation");

            var localVarPath = "/pdf/{name}/annotations/square/{annotationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (annotationId != null) localVarPathParams.Add("annotationId", ApiClient.ParameterToString(annotationId)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSquareAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SquareAnnotationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SquareAnnotationResponse) ApiClient.Deserialize(localVarResponse, typeof(SquareAnnotationResponse)));
        }

        /// <summary>
        /// Convert SVG file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.svg)</param>
        /// <param name="adjustPageSize">Adjust page size (optional)</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetSvgInStorageToPdf (string srcPath, bool? adjustPageSize = null, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetSvgInStorageToPdfWithHttpInfo(srcPath, adjustPageSize, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert SVG file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.svg)</param>
        /// <param name="adjustPageSize">Adjust page size (optional)</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetSvgInStorageToPdfWithHttpInfo (string srcPath, bool? adjustPageSize = null, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string storage = null)
        {
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->GetSvgInStorageToPdf");

            var localVarPath = "/pdf/create/svg";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (adjustPageSize != null) localVarQueryParams.Add("adjustPageSize", ApiClient.ParameterToString(adjustPageSize)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (isLandscape != null) localVarQueryParams.Add("isLandscape", ApiClient.ParameterToString(isLandscape)); // query parameter
            if (marginLeft != null) localVarQueryParams.Add("marginLeft", ApiClient.ParameterToString(marginLeft)); // query parameter
            if (marginBottom != null) localVarQueryParams.Add("marginBottom", ApiClient.ParameterToString(marginBottom)); // query parameter
            if (marginRight != null) localVarQueryParams.Add("marginRight", ApiClient.ParameterToString(marginRight)); // query parameter
            if (marginTop != null) localVarQueryParams.Add("marginTop", ApiClient.ParameterToString(marginTop)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSvgInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert SVG file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.svg)</param>
        /// <param name="adjustPageSize">Adjust page size (optional)</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetSvgInStorageToPdfAsync (string srcPath, bool? adjustPageSize = null, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetSvgInStorageToPdfAsyncWithHttpInfo(srcPath, adjustPageSize, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert SVG file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.svg)</param>
        /// <param name="adjustPageSize">Adjust page size (optional)</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetSvgInStorageToPdfAsyncWithHttpInfo (string srcPath, bool? adjustPageSize = null, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string storage = null)
        {
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->GetSvgInStorageToPdf");

            var localVarPath = "/pdf/create/svg";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (adjustPageSize != null) localVarQueryParams.Add("adjustPageSize", ApiClient.ParameterToString(adjustPageSize)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (isLandscape != null) localVarQueryParams.Add("isLandscape", ApiClient.ParameterToString(isLandscape)); // query parameter
            if (marginLeft != null) localVarQueryParams.Add("marginLeft", ApiClient.ParameterToString(marginLeft)); // query parameter
            if (marginBottom != null) localVarQueryParams.Add("marginBottom", ApiClient.ParameterToString(marginBottom)); // query parameter
            if (marginRight != null) localVarQueryParams.Add("marginRight", ApiClient.ParameterToString(marginRight)); // query parameter
            if (marginTop != null) localVarQueryParams.Add("marginTop", ApiClient.ParameterToString(marginTop)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSvgInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Read document text. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="LLX"></param>
        /// <param name="LLY"></param>
        /// <param name="URX"></param>
        /// <param name="URY"></param>
        /// <param name="format">List of formats for search. (optional)</param>
        /// <param name="regex">Formats are specified as a regular expression. (optional)</param>
        /// <param name="splitRects">Split result fragments (default is true). (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>TextRectsResponse</returns>
        public TextRectsResponse GetText (string name, double? LLX, double? LLY, double? URX, double? URY, List<string> format = null, string regex = null, bool? splitRects = null, string folder = null, string storage = null)
        {
             ApiResponse<TextRectsResponse> localVarResponse = GetTextWithHttpInfo(name, LLX, LLY, URX, URY, format, regex, splitRects, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document text. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="LLX"></param>
        /// <param name="LLY"></param>
        /// <param name="URX"></param>
        /// <param name="URY"></param>
        /// <param name="format">List of formats for search. (optional)</param>
        /// <param name="regex">Formats are specified as a regular expression. (optional)</param>
        /// <param name="splitRects">Split result fragments (default is true). (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of TextRectsResponse</returns>
        public ApiResponse< TextRectsResponse > GetTextWithHttpInfo (string name, double? LLX, double? LLY, double? URX, double? URY, List<string> format = null, string regex = null, bool? splitRects = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetText");
            // verify the required parameter 'LLX' is set
            if (LLX == null)
                throw new ApiException(400, "Missing required parameter 'LLX' when calling PdfApi->GetText");
            // verify the required parameter 'LLY' is set
            if (LLY == null)
                throw new ApiException(400, "Missing required parameter 'LLY' when calling PdfApi->GetText");
            // verify the required parameter 'URX' is set
            if (URX == null)
                throw new ApiException(400, "Missing required parameter 'URX' when calling PdfApi->GetText");
            // verify the required parameter 'URY' is set
            if (URY == null)
                throw new ApiException(400, "Missing required parameter 'URY' when calling PdfApi->GetText");

            var localVarPath = "/pdf/{name}/text";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (format != null) localVarQueryParams.Add("format", ApiClient.ParameterToString(format)); // query parameter
            if (regex != null) localVarQueryParams.Add("regex", ApiClient.ParameterToString(regex)); // query parameter
            if (splitRects != null) localVarQueryParams.Add("splitRects", ApiClient.ParameterToString(splitRects)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (LLX != null) localVarQueryParams.Add("LLX", ApiClient.ParameterToString(LLX)); // query parameter
            if (LLY != null) localVarQueryParams.Add("LLY", ApiClient.ParameterToString(LLY)); // query parameter
            if (URX != null) localVarQueryParams.Add("URX", ApiClient.ParameterToString(URX)); // query parameter
            if (URY != null) localVarQueryParams.Add("URY", ApiClient.ParameterToString(URY)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetText", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextRectsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TextRectsResponse) ApiClient.Deserialize(localVarResponse, typeof(TextRectsResponse)));
        }

        /// <summary>
        /// Read document text. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="LLX"></param>
        /// <param name="LLY"></param>
        /// <param name="URX"></param>
        /// <param name="URY"></param>
        /// <param name="format">List of formats for search. (optional)</param>
        /// <param name="regex">Formats are specified as a regular expression. (optional)</param>
        /// <param name="splitRects">Split result fragments (default is true). (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of TextRectsResponse</returns>
        public async System.Threading.Tasks.Task<TextRectsResponse> GetTextAsync (string name, double? LLX, double? LLY, double? URX, double? URY, List<string> format = null, string regex = null, bool? splitRects = null, string folder = null, string storage = null)
        {
             ApiResponse<TextRectsResponse> localVarResponse = await GetTextAsyncWithHttpInfo(name, LLX, LLY, URX, URY, format, regex, splitRects, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document text. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="LLX"></param>
        /// <param name="LLY"></param>
        /// <param name="URX"></param>
        /// <param name="URY"></param>
        /// <param name="format">List of formats for search. (optional)</param>
        /// <param name="regex">Formats are specified as a regular expression. (optional)</param>
        /// <param name="splitRects">Split result fragments (default is true). (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (TextRectsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TextRectsResponse>> GetTextAsyncWithHttpInfo (string name, double? LLX, double? LLY, double? URX, double? URY, List<string> format = null, string regex = null, bool? splitRects = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetText");
            // verify the required parameter 'LLX' is set
            if (LLX == null)
                throw new ApiException(400, "Missing required parameter 'LLX' when calling PdfApi->GetText");
            // verify the required parameter 'LLY' is set
            if (LLY == null)
                throw new ApiException(400, "Missing required parameter 'LLY' when calling PdfApi->GetText");
            // verify the required parameter 'URX' is set
            if (URX == null)
                throw new ApiException(400, "Missing required parameter 'URX' when calling PdfApi->GetText");
            // verify the required parameter 'URY' is set
            if (URY == null)
                throw new ApiException(400, "Missing required parameter 'URY' when calling PdfApi->GetText");

            var localVarPath = "/pdf/{name}/text";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (format != null) localVarQueryParams.Add("format", ApiClient.ParameterToString(format)); // query parameter
            if (regex != null) localVarQueryParams.Add("regex", ApiClient.ParameterToString(regex)); // query parameter
            if (splitRects != null) localVarQueryParams.Add("splitRects", ApiClient.ParameterToString(splitRects)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (LLX != null) localVarQueryParams.Add("LLX", ApiClient.ParameterToString(LLX)); // query parameter
            if (LLY != null) localVarQueryParams.Add("LLY", ApiClient.ParameterToString(LLY)); // query parameter
            if (URX != null) localVarQueryParams.Add("URX", ApiClient.ParameterToString(URX)); // query parameter
            if (URY != null) localVarQueryParams.Add("URY", ApiClient.ParameterToString(URY)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetText", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextRectsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TextRectsResponse) ApiClient.Deserialize(localVarResponse, typeof(TextRectsResponse)));
        }

        /// <summary>
        /// Read document page text annotation by ID. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>TextAnnotationResponse</returns>
        public TextAnnotationResponse GetTextAnnotation (string name, string annotationId, string storage = null, string folder = null)
        {
             ApiResponse<TextAnnotationResponse> localVarResponse = GetTextAnnotationWithHttpInfo(name, annotationId, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document page text annotation by ID. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of TextAnnotationResponse</returns>
        public ApiResponse< TextAnnotationResponse > GetTextAnnotationWithHttpInfo (string name, string annotationId, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetTextAnnotation");
            // verify the required parameter 'annotationId' is set
            if (annotationId == null)
                throw new ApiException(400, "Missing required parameter 'annotationId' when calling PdfApi->GetTextAnnotation");

            var localVarPath = "/pdf/{name}/annotations/text/{annotationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (annotationId != null) localVarPathParams.Add("annotationId", ApiClient.ParameterToString(annotationId)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTextAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextAnnotationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TextAnnotationResponse) ApiClient.Deserialize(localVarResponse, typeof(TextAnnotationResponse)));
        }

        /// <summary>
        /// Read document page text annotation by ID. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of TextAnnotationResponse</returns>
        public async System.Threading.Tasks.Task<TextAnnotationResponse> GetTextAnnotationAsync (string name, string annotationId, string storage = null, string folder = null)
        {
             ApiResponse<TextAnnotationResponse> localVarResponse = await GetTextAnnotationAsyncWithHttpInfo(name, annotationId, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document page text annotation by ID. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (TextAnnotationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TextAnnotationResponse>> GetTextAnnotationAsyncWithHttpInfo (string name, string annotationId, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetTextAnnotation");
            // verify the required parameter 'annotationId' is set
            if (annotationId == null)
                throw new ApiException(400, "Missing required parameter 'annotationId' when calling PdfApi->GetTextAnnotation");

            var localVarPath = "/pdf/{name}/annotations/text/{annotationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (annotationId != null) localVarPathParams.Add("annotationId", ApiClient.ParameterToString(annotationId)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTextAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextAnnotationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TextAnnotationResponse) ApiClient.Deserialize(localVarResponse, typeof(TextAnnotationResponse)));
        }

        /// <summary>
        /// Verify signature document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="signName">Sign name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SignatureVerifyResponse</returns>
        public SignatureVerifyResponse GetVerifySignature (string name, string signName, string storage = null, string folder = null)
        {
             ApiResponse<SignatureVerifyResponse> localVarResponse = GetVerifySignatureWithHttpInfo(name, signName, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Verify signature document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="signName">Sign name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SignatureVerifyResponse</returns>
        public ApiResponse< SignatureVerifyResponse > GetVerifySignatureWithHttpInfo (string name, string signName, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetVerifySignature");
            // verify the required parameter 'signName' is set
            if (signName == null)
                throw new ApiException(400, "Missing required parameter 'signName' when calling PdfApi->GetVerifySignature");

            var localVarPath = "/pdf/{name}/verifySignature";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (signName != null) localVarQueryParams.Add("signName", ApiClient.ParameterToString(signName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVerifySignature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SignatureVerifyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SignatureVerifyResponse) ApiClient.Deserialize(localVarResponse, typeof(SignatureVerifyResponse)));
        }

        /// <summary>
        /// Verify signature document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="signName">Sign name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SignatureVerifyResponse</returns>
        public async System.Threading.Tasks.Task<SignatureVerifyResponse> GetVerifySignatureAsync (string name, string signName, string storage = null, string folder = null)
        {
             ApiResponse<SignatureVerifyResponse> localVarResponse = await GetVerifySignatureAsyncWithHttpInfo(name, signName, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Verify signature document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="signName">Sign name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SignatureVerifyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SignatureVerifyResponse>> GetVerifySignatureAsyncWithHttpInfo (string name, string signName, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetVerifySignature");
            // verify the required parameter 'signName' is set
            if (signName == null)
                throw new ApiException(400, "Missing required parameter 'signName' when calling PdfApi->GetVerifySignature");

            var localVarPath = "/pdf/{name}/verifySignature";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (signName != null) localVarQueryParams.Add("signName", ApiClient.ParameterToString(signName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVerifySignature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SignatureVerifyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SignatureVerifyResponse) ApiClient.Deserialize(localVarResponse, typeof(SignatureVerifyResponse)));
        }

        /// <summary>
        /// Convert web page to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">Source url</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetWebInStorageToPdf (string url, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetWebInStorageToPdfWithHttpInfo(url, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert web page to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">Source url</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetWebInStorageToPdfWithHttpInfo (string url, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string storage = null)
        {
            // verify the required parameter 'url' is set
            if (url == null)
                throw new ApiException(400, "Missing required parameter 'url' when calling PdfApi->GetWebInStorageToPdf");

            var localVarPath = "/pdf/create/web";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (url != null) localVarQueryParams.Add("url", ApiClient.ParameterToString(url)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (isLandscape != null) localVarQueryParams.Add("isLandscape", ApiClient.ParameterToString(isLandscape)); // query parameter
            if (marginLeft != null) localVarQueryParams.Add("marginLeft", ApiClient.ParameterToString(marginLeft)); // query parameter
            if (marginBottom != null) localVarQueryParams.Add("marginBottom", ApiClient.ParameterToString(marginBottom)); // query parameter
            if (marginRight != null) localVarQueryParams.Add("marginRight", ApiClient.ParameterToString(marginRight)); // query parameter
            if (marginTop != null) localVarQueryParams.Add("marginTop", ApiClient.ParameterToString(marginTop)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert web page to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">Source url</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetWebInStorageToPdfAsync (string url, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetWebInStorageToPdfAsyncWithHttpInfo(url, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert web page to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">Source url</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetWebInStorageToPdfAsyncWithHttpInfo (string url, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string storage = null)
        {
            // verify the required parameter 'url' is set
            if (url == null)
                throw new ApiException(400, "Missing required parameter 'url' when calling PdfApi->GetWebInStorageToPdf");

            var localVarPath = "/pdf/create/web";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (url != null) localVarQueryParams.Add("url", ApiClient.ParameterToString(url)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (isLandscape != null) localVarQueryParams.Add("isLandscape", ApiClient.ParameterToString(isLandscape)); // query parameter
            if (marginLeft != null) localVarQueryParams.Add("marginLeft", ApiClient.ParameterToString(marginLeft)); // query parameter
            if (marginBottom != null) localVarQueryParams.Add("marginBottom", ApiClient.ParameterToString(marginBottom)); // query parameter
            if (marginRight != null) localVarQueryParams.Add("marginRight", ApiClient.ParameterToString(marginRight)); // query parameter
            if (marginTop != null) localVarQueryParams.Add("marginTop", ApiClient.ParameterToString(marginTop)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get number of words per document page. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>WordCountResponse</returns>
        public WordCountResponse GetWordsPerPage (string name, string storage = null, string folder = null)
        {
             ApiResponse<WordCountResponse> localVarResponse = GetWordsPerPageWithHttpInfo(name, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get number of words per document page. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of WordCountResponse</returns>
        public ApiResponse< WordCountResponse > GetWordsPerPageWithHttpInfo (string name, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetWordsPerPage");

            var localVarPath = "/pdf/{name}/pages/wordCount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWordsPerPage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WordCountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WordCountResponse) ApiClient.Deserialize(localVarResponse, typeof(WordCountResponse)));
        }

        /// <summary>
        /// Get number of words per document page. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of WordCountResponse</returns>
        public async System.Threading.Tasks.Task<WordCountResponse> GetWordsPerPageAsync (string name, string storage = null, string folder = null)
        {
             ApiResponse<WordCountResponse> localVarResponse = await GetWordsPerPageAsyncWithHttpInfo(name, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get number of words per document page. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (WordCountResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WordCountResponse>> GetWordsPerPageAsyncWithHttpInfo (string name, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetWordsPerPage");

            var localVarPath = "/pdf/{name}/pages/wordCount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWordsPerPage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WordCountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WordCountResponse) ApiClient.Deserialize(localVarResponse, typeof(WordCountResponse)));
        }

        /// <summary>
        /// Converts PDF document which contatins XFA form (located on storage) to PDF with AcroForm and returns resulting file response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetXfaPdfInStorageToAcroForm (string name, string folder = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetXfaPdfInStorageToAcroFormWithHttpInfo(name, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document which contatins XFA form (located on storage) to PDF with AcroForm and returns resulting file response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetXfaPdfInStorageToAcroFormWithHttpInfo (string name, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetXfaPdfInStorageToAcroForm");

            var localVarPath = "/pdf/{name}/convert/xfatoacroform";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetXfaPdfInStorageToAcroForm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Converts PDF document which contatins XFA form (located on storage) to PDF with AcroForm and returns resulting file response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetXfaPdfInStorageToAcroFormAsync (string name, string folder = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetXfaPdfInStorageToAcroFormAsyncWithHttpInfo(name, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document which contatins XFA form (located on storage) to PDF with AcroForm and returns resulting file response content 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetXfaPdfInStorageToAcroFormAsyncWithHttpInfo (string name, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->GetXfaPdfInStorageToAcroForm");

            var localVarPath = "/pdf/{name}/convert/xfatoacroform";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetXfaPdfInStorageToAcroForm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert XML file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xml)</param>
        /// <param name="xslFilePath">Full XSL source filename (ex. /folder1/folder2/template.xsl) (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetXmlInStorageToPdf (string srcPath, string xslFilePath = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetXmlInStorageToPdfWithHttpInfo(srcPath, xslFilePath, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert XML file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xml)</param>
        /// <param name="xslFilePath">Full XSL source filename (ex. /folder1/folder2/template.xsl) (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetXmlInStorageToPdfWithHttpInfo (string srcPath, string xslFilePath = null, string storage = null)
        {
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->GetXmlInStorageToPdf");

            var localVarPath = "/pdf/create/xml";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (xslFilePath != null) localVarQueryParams.Add("xslFilePath", ApiClient.ParameterToString(xslFilePath)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetXmlInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert XML file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xml)</param>
        /// <param name="xslFilePath">Full XSL source filename (ex. /folder1/folder2/template.xsl) (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetXmlInStorageToPdfAsync (string srcPath, string xslFilePath = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetXmlInStorageToPdfAsyncWithHttpInfo(srcPath, xslFilePath, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert XML file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xml)</param>
        /// <param name="xslFilePath">Full XSL source filename (ex. /folder1/folder2/template.xsl) (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetXmlInStorageToPdfAsyncWithHttpInfo (string srcPath, string xslFilePath = null, string storage = null)
        {
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->GetXmlInStorageToPdf");

            var localVarPath = "/pdf/create/xml";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (xslFilePath != null) localVarQueryParams.Add("xslFilePath", ApiClient.ParameterToString(xslFilePath)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetXmlInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert XPS file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xps)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetXpsInStorageToPdf (string srcPath, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetXpsInStorageToPdfWithHttpInfo(srcPath, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert XPS file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xps)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetXpsInStorageToPdfWithHttpInfo (string srcPath, string storage = null)
        {
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->GetXpsInStorageToPdf");

            var localVarPath = "/pdf/create/xps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetXpsInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert XPS file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xps)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetXpsInStorageToPdfAsync (string srcPath, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetXpsInStorageToPdfAsyncWithHttpInfo(srcPath, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert XPS file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xps)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetXpsInStorageToPdfAsyncWithHttpInfo (string srcPath, string storage = null)
        {
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->GetXpsInStorageToPdf");

            var localVarPath = "/pdf/create/xps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetXpsInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert XslFo file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xslfo)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetXslFoInStorageToPdf (string srcPath, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetXslFoInStorageToPdfWithHttpInfo(srcPath, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert XslFo file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xslfo)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetXslFoInStorageToPdfWithHttpInfo (string srcPath, string storage = null)
        {
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->GetXslFoInStorageToPdf");

            var localVarPath = "/pdf/create/xslfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetXslFoInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert XslFo file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xslfo)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetXslFoInStorageToPdfAsync (string srcPath, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetXslFoInStorageToPdfAsyncWithHttpInfo(srcPath, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert XslFo file (located on storage) to PDF format and return resulting file in response.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xslfo)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetXslFoInStorageToPdfAsyncWithHttpInfo (string srcPath, string storage = null)
        {
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->GetXslFoInStorageToPdf");

            var localVarPath = "/pdf/create/xslfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetXslFoInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Append document to existing one. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The original document name.</param>
        /// <param name="appendDocument">with the append document data. (optional)</param>
        /// <param name="appendFile">Append file server path. (optional)</param>
        /// <param name="startPage">Appending start page. (optional, default to 0)</param>
        /// <param name="endPage">Appending end page. (optional, default to 0)</param>
        /// <param name="storage">The documents storage. (optional)</param>
        /// <param name="folder">The original document folder. (optional)</param>
        /// <returns>DocumentResponse</returns>
        public DocumentResponse PostAppendDocument (string name, AppendDocument appendDocument = null, string appendFile = null, int? startPage = null, int? endPage = null, string storage = null, string folder = null)
        {
             ApiResponse<DocumentResponse> localVarResponse = PostAppendDocumentWithHttpInfo(name, appendDocument, appendFile, startPage, endPage, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Append document to existing one. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The original document name.</param>
        /// <param name="appendDocument">with the append document data. (optional)</param>
        /// <param name="appendFile">Append file server path. (optional)</param>
        /// <param name="startPage">Appending start page. (optional, default to 0)</param>
        /// <param name="endPage">Appending end page. (optional, default to 0)</param>
        /// <param name="storage">The documents storage. (optional)</param>
        /// <param name="folder">The original document folder. (optional)</param>
        /// <returns>ApiResponse of DocumentResponse</returns>
        public ApiResponse< DocumentResponse > PostAppendDocumentWithHttpInfo (string name, AppendDocument appendDocument = null, string appendFile = null, int? startPage = null, int? endPage = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostAppendDocument");

            var localVarPath = "/pdf/{name}/appendDocument";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (appendFile != null) localVarQueryParams.Add("appendFile", ApiClient.ParameterToString(appendFile)); // query parameter
            if (startPage != null) localVarQueryParams.Add("startPage", ApiClient.ParameterToString(startPage)); // query parameter
            if (endPage != null) localVarQueryParams.Add("endPage", ApiClient.ParameterToString(endPage)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (appendDocument != null && appendDocument.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(appendDocument); // http body (model) parameter
            }
            else
            {
                localVarPostBody = appendDocument; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostAppendDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentResponse) ApiClient.Deserialize(localVarResponse, typeof(DocumentResponse)));
        }

        /// <summary>
        /// Append document to existing one. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The original document name.</param>
        /// <param name="appendDocument">with the append document data. (optional)</param>
        /// <param name="appendFile">Append file server path. (optional)</param>
        /// <param name="startPage">Appending start page. (optional, default to 0)</param>
        /// <param name="endPage">Appending end page. (optional, default to 0)</param>
        /// <param name="storage">The documents storage. (optional)</param>
        /// <param name="folder">The original document folder. (optional)</param>
        /// <returns>Task of DocumentResponse</returns>
        public async System.Threading.Tasks.Task<DocumentResponse> PostAppendDocumentAsync (string name, AppendDocument appendDocument = null, string appendFile = null, int? startPage = null, int? endPage = null, string storage = null, string folder = null)
        {
             ApiResponse<DocumentResponse> localVarResponse = await PostAppendDocumentAsyncWithHttpInfo(name, appendDocument, appendFile, startPage, endPage, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Append document to existing one. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The original document name.</param>
        /// <param name="appendDocument">with the append document data. (optional)</param>
        /// <param name="appendFile">Append file server path. (optional)</param>
        /// <param name="startPage">Appending start page. (optional, default to 0)</param>
        /// <param name="endPage">Appending end page. (optional, default to 0)</param>
        /// <param name="storage">The documents storage. (optional)</param>
        /// <param name="folder">The original document folder. (optional)</param>
        /// <returns>Task of ApiResponse (DocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentResponse>> PostAppendDocumentAsyncWithHttpInfo (string name, AppendDocument appendDocument = null, string appendFile = null, int? startPage = null, int? endPage = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostAppendDocument");

            var localVarPath = "/pdf/{name}/appendDocument";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (appendFile != null) localVarQueryParams.Add("appendFile", ApiClient.ParameterToString(appendFile)); // query parameter
            if (startPage != null) localVarQueryParams.Add("startPage", ApiClient.ParameterToString(startPage)); // query parameter
            if (endPage != null) localVarQueryParams.Add("endPage", ApiClient.ParameterToString(endPage)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (appendDocument != null && appendDocument.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(appendDocument); // http body (model) parameter
            }
            else
            {
                localVarPostBody = appendDocument; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostAppendDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentResponse) ApiClient.Deserialize(localVarResponse, typeof(DocumentResponse)));
        }

        /// <summary>
        /// Create field. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="page">Document page number.</param>
        /// <param name="field">with the field data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PostCreateField (string name, int? page, Field field = null, string storage = null, string folder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PostCreateFieldWithHttpInfo(name, page, field, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create field. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="page">Document page number.</param>
        /// <param name="field">with the field data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PostCreateFieldWithHttpInfo (string name, int? page, Field field = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostCreateField");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling PdfApi->PostCreateField");

            var localVarPath = "/pdf/{name}/fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (page != null) localVarQueryParams.Add("page", ApiClient.ParameterToString(page)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (field != null && field.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(field); // http body (model) parameter
            }
            else
            {
                localVarPostBody = field; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostCreateField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Create field. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="page">Document page number.</param>
        /// <param name="field">with the field data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PostCreateFieldAsync (string name, int? page, Field field = null, string storage = null, string folder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PostCreateFieldAsyncWithHttpInfo(name, page, field, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create field. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="page">Document page number.</param>
        /// <param name="field">with the field data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PostCreateFieldAsyncWithHttpInfo (string name, int? page, Field field = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostCreateField");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling PdfApi->PostCreateField");

            var localVarPath = "/pdf/{name}/fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (page != null) localVarQueryParams.Add("page", ApiClient.ParameterToString(page)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (field != null && field.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(field); // http body (model) parameter
            }
            else
            {
                localVarPostBody = field; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostCreateField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Document&#39;s replace text method. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="textReplace"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>TextReplaceResponse</returns>
        public TextReplaceResponse PostDocumentTextReplace (string name, TextReplaceListRequest textReplace, string storage = null, string folder = null)
        {
             ApiResponse<TextReplaceResponse> localVarResponse = PostDocumentTextReplaceWithHttpInfo(name, textReplace, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Document&#39;s replace text method. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="textReplace"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of TextReplaceResponse</returns>
        public ApiResponse< TextReplaceResponse > PostDocumentTextReplaceWithHttpInfo (string name, TextReplaceListRequest textReplace, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostDocumentTextReplace");
            // verify the required parameter 'textReplace' is set
            if (textReplace == null)
                throw new ApiException(400, "Missing required parameter 'textReplace' when calling PdfApi->PostDocumentTextReplace");

            var localVarPath = "/pdf/{name}/text/replace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (textReplace != null && textReplace.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(textReplace); // http body (model) parameter
            }
            else
            {
                localVarPostBody = textReplace; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostDocumentTextReplace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextReplaceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TextReplaceResponse) ApiClient.Deserialize(localVarResponse, typeof(TextReplaceResponse)));
        }

        /// <summary>
        /// Document&#39;s replace text method. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="textReplace"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of TextReplaceResponse</returns>
        public async System.Threading.Tasks.Task<TextReplaceResponse> PostDocumentTextReplaceAsync (string name, TextReplaceListRequest textReplace, string storage = null, string folder = null)
        {
             ApiResponse<TextReplaceResponse> localVarResponse = await PostDocumentTextReplaceAsyncWithHttpInfo(name, textReplace, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Document&#39;s replace text method. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="textReplace"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (TextReplaceResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TextReplaceResponse>> PostDocumentTextReplaceAsyncWithHttpInfo (string name, TextReplaceListRequest textReplace, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostDocumentTextReplace");
            // verify the required parameter 'textReplace' is set
            if (textReplace == null)
                throw new ApiException(400, "Missing required parameter 'textReplace' when calling PdfApi->PostDocumentTextReplace");

            var localVarPath = "/pdf/{name}/text/replace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (textReplace != null && textReplace.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(textReplace); // http body (model) parameter
            }
            else
            {
                localVarPostBody = textReplace; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostDocumentTextReplace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextReplaceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TextReplaceResponse) ApiClient.Deserialize(localVarResponse, typeof(TextReplaceResponse)));
        }

        /// <summary>
        /// Insert image to document page. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="llx">Coordinate lower left X.</param>
        /// <param name="lly">Coordinate lower left Y.</param>
        /// <param name="urx">Coordinate upper right X.</param>
        /// <param name="ury">Coordinate upper right Y.</param>
        /// <param name="imageFilePath">Path to image file if specified. Request content is used otherwise. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="image">Image file. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PostInsertImage (string name, int? pageNumber, double? llx, double? lly, double? urx, double? ury, string imageFilePath = null, string storage = null, string folder = null, System.IO.Stream image = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PostInsertImageWithHttpInfo(name, pageNumber, llx, lly, urx, ury, imageFilePath, storage, folder, image);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Insert image to document page. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="llx">Coordinate lower left X.</param>
        /// <param name="lly">Coordinate lower left Y.</param>
        /// <param name="urx">Coordinate upper right X.</param>
        /// <param name="ury">Coordinate upper right Y.</param>
        /// <param name="imageFilePath">Path to image file if specified. Request content is used otherwise. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="image">Image file. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PostInsertImageWithHttpInfo (string name, int? pageNumber, double? llx, double? lly, double? urx, double? ury, string imageFilePath = null, string storage = null, string folder = null, System.IO.Stream image = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostInsertImage");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PostInsertImage");
            // verify the required parameter 'llx' is set
            if (llx == null)
                throw new ApiException(400, "Missing required parameter 'llx' when calling PdfApi->PostInsertImage");
            // verify the required parameter 'lly' is set
            if (lly == null)
                throw new ApiException(400, "Missing required parameter 'lly' when calling PdfApi->PostInsertImage");
            // verify the required parameter 'urx' is set
            if (urx == null)
                throw new ApiException(400, "Missing required parameter 'urx' when calling PdfApi->PostInsertImage");
            // verify the required parameter 'ury' is set
            if (ury == null)
                throw new ApiException(400, "Missing required parameter 'ury' when calling PdfApi->PostInsertImage");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/images";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (llx != null) localVarQueryParams.Add("llx", ApiClient.ParameterToString(llx)); // query parameter
            if (lly != null) localVarQueryParams.Add("lly", ApiClient.ParameterToString(lly)); // query parameter
            if (urx != null) localVarQueryParams.Add("urx", ApiClient.ParameterToString(urx)); // query parameter
            if (ury != null) localVarQueryParams.Add("ury", ApiClient.ParameterToString(ury)); // query parameter
            if (imageFilePath != null) localVarQueryParams.Add("imageFilePath", ApiClient.ParameterToString(imageFilePath)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (image != null) localVarFileParams.Add("image", ApiClient.ParameterToFile("image", image));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostInsertImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Insert image to document page. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="llx">Coordinate lower left X.</param>
        /// <param name="lly">Coordinate lower left Y.</param>
        /// <param name="urx">Coordinate upper right X.</param>
        /// <param name="ury">Coordinate upper right Y.</param>
        /// <param name="imageFilePath">Path to image file if specified. Request content is used otherwise. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="image">Image file. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PostInsertImageAsync (string name, int? pageNumber, double? llx, double? lly, double? urx, double? ury, string imageFilePath = null, string storage = null, string folder = null, System.IO.Stream image = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PostInsertImageAsyncWithHttpInfo(name, pageNumber, llx, lly, urx, ury, imageFilePath, storage, folder, image);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Insert image to document page. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="llx">Coordinate lower left X.</param>
        /// <param name="lly">Coordinate lower left Y.</param>
        /// <param name="urx">Coordinate upper right X.</param>
        /// <param name="ury">Coordinate upper right Y.</param>
        /// <param name="imageFilePath">Path to image file if specified. Request content is used otherwise. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="image">Image file. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PostInsertImageAsyncWithHttpInfo (string name, int? pageNumber, double? llx, double? lly, double? urx, double? ury, string imageFilePath = null, string storage = null, string folder = null, System.IO.Stream image = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostInsertImage");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PostInsertImage");
            // verify the required parameter 'llx' is set
            if (llx == null)
                throw new ApiException(400, "Missing required parameter 'llx' when calling PdfApi->PostInsertImage");
            // verify the required parameter 'lly' is set
            if (lly == null)
                throw new ApiException(400, "Missing required parameter 'lly' when calling PdfApi->PostInsertImage");
            // verify the required parameter 'urx' is set
            if (urx == null)
                throw new ApiException(400, "Missing required parameter 'urx' when calling PdfApi->PostInsertImage");
            // verify the required parameter 'ury' is set
            if (ury == null)
                throw new ApiException(400, "Missing required parameter 'ury' when calling PdfApi->PostInsertImage");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/images";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (llx != null) localVarQueryParams.Add("llx", ApiClient.ParameterToString(llx)); // query parameter
            if (lly != null) localVarQueryParams.Add("lly", ApiClient.ParameterToString(lly)); // query parameter
            if (urx != null) localVarQueryParams.Add("urx", ApiClient.ParameterToString(urx)); // query parameter
            if (ury != null) localVarQueryParams.Add("ury", ApiClient.ParameterToString(ury)); // query parameter
            if (imageFilePath != null) localVarQueryParams.Add("imageFilePath", ApiClient.ParameterToString(imageFilePath)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (image != null) localVarFileParams.Add("image", ApiClient.ParameterToFile("image", image));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostInsertImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Move page to new position. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="newIndex">The new page position/index.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PostMovePage (string name, int? pageNumber, int? newIndex, string storage = null, string folder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PostMovePageWithHttpInfo(name, pageNumber, newIndex, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Move page to new position. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="newIndex">The new page position/index.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PostMovePageWithHttpInfo (string name, int? pageNumber, int? newIndex, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostMovePage");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PostMovePage");
            // verify the required parameter 'newIndex' is set
            if (newIndex == null)
                throw new ApiException(400, "Missing required parameter 'newIndex' when calling PdfApi->PostMovePage");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/movePage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (newIndex != null) localVarQueryParams.Add("newIndex", ApiClient.ParameterToString(newIndex)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostMovePage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Move page to new position. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="newIndex">The new page position/index.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PostMovePageAsync (string name, int? pageNumber, int? newIndex, string storage = null, string folder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PostMovePageAsyncWithHttpInfo(name, pageNumber, newIndex, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Move page to new position. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="newIndex">The new page position/index.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PostMovePageAsyncWithHttpInfo (string name, int? pageNumber, int? newIndex, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostMovePage");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PostMovePage");
            // verify the required parameter 'newIndex' is set
            if (newIndex == null)
                throw new ApiException(400, "Missing required parameter 'newIndex' when calling PdfApi->PostMovePage");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/movePage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (newIndex != null) localVarQueryParams.Add("newIndex", ApiClient.ParameterToString(newIndex)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostMovePage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Optimize document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="options">The optimization options. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PostOptimizeDocument (string name, OptimizeOptions options = null, string storage = null, string folder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PostOptimizeDocumentWithHttpInfo(name, options, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Optimize document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="options">The optimization options. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PostOptimizeDocumentWithHttpInfo (string name, OptimizeOptions options = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostOptimizeDocument");

            var localVarPath = "/pdf/{name}/optimize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostOptimizeDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Optimize document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="options">The optimization options. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PostOptimizeDocumentAsync (string name, OptimizeOptions options = null, string storage = null, string folder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PostOptimizeDocumentAsyncWithHttpInfo(name, options, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Optimize document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="options">The optimization options. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PostOptimizeDocumentAsyncWithHttpInfo (string name, OptimizeOptions options = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostOptimizeDocument");

            var localVarPath = "/pdf/{name}/optimize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostOptimizeDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Add document page circle annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotations">The array of annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PostPageCircleAnnotations (string name, int? pageNumber, List<CircleAnnotation> annotations, string storage = null, string folder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PostPageCircleAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add document page circle annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotations">The array of annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PostPageCircleAnnotationsWithHttpInfo (string name, int? pageNumber, List<CircleAnnotation> annotations, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostPageCircleAnnotations");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PostPageCircleAnnotations");
            // verify the required parameter 'annotations' is set
            if (annotations == null)
                throw new ApiException(400, "Missing required parameter 'annotations' when calling PdfApi->PostPageCircleAnnotations");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/circle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (annotations != null && annotations.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(annotations); // http body (model) parameter
            }
            else
            {
                localVarPostBody = annotations; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostPageCircleAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Add document page circle annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotations">The array of annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PostPageCircleAnnotationsAsync (string name, int? pageNumber, List<CircleAnnotation> annotations, string storage = null, string folder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PostPageCircleAnnotationsAsyncWithHttpInfo(name, pageNumber, annotations, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add document page circle annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotations">The array of annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PostPageCircleAnnotationsAsyncWithHttpInfo (string name, int? pageNumber, List<CircleAnnotation> annotations, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostPageCircleAnnotations");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PostPageCircleAnnotations");
            // verify the required parameter 'annotations' is set
            if (annotations == null)
                throw new ApiException(400, "Missing required parameter 'annotations' when calling PdfApi->PostPageCircleAnnotations");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/circle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (annotations != null && annotations.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(annotations); // http body (model) parameter
            }
            else
            {
                localVarPostBody = annotations; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostPageCircleAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Add document page free text annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotations">The array of annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PostPageFreeTextAnnotations (string name, int? pageNumber, List<FreeTextAnnotation> annotations, string storage = null, string folder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PostPageFreeTextAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add document page free text annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotations">The array of annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PostPageFreeTextAnnotationsWithHttpInfo (string name, int? pageNumber, List<FreeTextAnnotation> annotations, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostPageFreeTextAnnotations");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PostPageFreeTextAnnotations");
            // verify the required parameter 'annotations' is set
            if (annotations == null)
                throw new ApiException(400, "Missing required parameter 'annotations' when calling PdfApi->PostPageFreeTextAnnotations");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/freetext";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (annotations != null && annotations.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(annotations); // http body (model) parameter
            }
            else
            {
                localVarPostBody = annotations; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostPageFreeTextAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Add document page free text annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotations">The array of annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PostPageFreeTextAnnotationsAsync (string name, int? pageNumber, List<FreeTextAnnotation> annotations, string storage = null, string folder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PostPageFreeTextAnnotationsAsyncWithHttpInfo(name, pageNumber, annotations, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add document page free text annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotations">The array of annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PostPageFreeTextAnnotationsAsyncWithHttpInfo (string name, int? pageNumber, List<FreeTextAnnotation> annotations, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostPageFreeTextAnnotations");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PostPageFreeTextAnnotations");
            // verify the required parameter 'annotations' is set
            if (annotations == null)
                throw new ApiException(400, "Missing required parameter 'annotations' when calling PdfApi->PostPageFreeTextAnnotations");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/freetext";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (annotations != null && annotations.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(annotations); // http body (model) parameter
            }
            else
            {
                localVarPostBody = annotations; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostPageFreeTextAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Add document page line annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotations">The array of annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PostPageLineAnnotations (string name, int? pageNumber, List<LineAnnotation> annotations, string storage = null, string folder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PostPageLineAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add document page line annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotations">The array of annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PostPageLineAnnotationsWithHttpInfo (string name, int? pageNumber, List<LineAnnotation> annotations, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostPageLineAnnotations");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PostPageLineAnnotations");
            // verify the required parameter 'annotations' is set
            if (annotations == null)
                throw new ApiException(400, "Missing required parameter 'annotations' when calling PdfApi->PostPageLineAnnotations");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/line";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (annotations != null && annotations.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(annotations); // http body (model) parameter
            }
            else
            {
                localVarPostBody = annotations; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostPageLineAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Add document page line annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotations">The array of annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PostPageLineAnnotationsAsync (string name, int? pageNumber, List<LineAnnotation> annotations, string storage = null, string folder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PostPageLineAnnotationsAsyncWithHttpInfo(name, pageNumber, annotations, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add document page line annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotations">The array of annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PostPageLineAnnotationsAsyncWithHttpInfo (string name, int? pageNumber, List<LineAnnotation> annotations, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostPageLineAnnotations");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PostPageLineAnnotations");
            // verify the required parameter 'annotations' is set
            if (annotations == null)
                throw new ApiException(400, "Missing required parameter 'annotations' when calling PdfApi->PostPageLineAnnotations");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/line";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (annotations != null && annotations.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(annotations); // http body (model) parameter
            }
            else
            {
                localVarPostBody = annotations; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostPageLineAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Add document page link annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="links">Array of link anotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PostPageLinkAnnotations (string name, int? pageNumber, List<LinkAnnotation> links, string storage = null, string folder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PostPageLinkAnnotationsWithHttpInfo(name, pageNumber, links, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add document page link annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="links">Array of link anotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PostPageLinkAnnotationsWithHttpInfo (string name, int? pageNumber, List<LinkAnnotation> links, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostPageLinkAnnotations");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PostPageLinkAnnotations");
            // verify the required parameter 'links' is set
            if (links == null)
                throw new ApiException(400, "Missing required parameter 'links' when calling PdfApi->PostPageLinkAnnotations");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/links";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (links != null && links.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(links); // http body (model) parameter
            }
            else
            {
                localVarPostBody = links; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostPageLinkAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Add document page link annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="links">Array of link anotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PostPageLinkAnnotationsAsync (string name, int? pageNumber, List<LinkAnnotation> links, string storage = null, string folder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PostPageLinkAnnotationsAsyncWithHttpInfo(name, pageNumber, links, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add document page link annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="links">Array of link anotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PostPageLinkAnnotationsAsyncWithHttpInfo (string name, int? pageNumber, List<LinkAnnotation> links, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostPageLinkAnnotations");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PostPageLinkAnnotations");
            // verify the required parameter 'links' is set
            if (links == null)
                throw new ApiException(400, "Missing required parameter 'links' when calling PdfApi->PostPageLinkAnnotations");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/links";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (links != null && links.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(links); // http body (model) parameter
            }
            else
            {
                localVarPostBody = links; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostPageLinkAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Add document page polyline annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotations">The array of annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PostPagePolyLineAnnotations (string name, int? pageNumber, List<PolyLineAnnotation> annotations, string storage = null, string folder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PostPagePolyLineAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add document page polyline annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotations">The array of annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PostPagePolyLineAnnotationsWithHttpInfo (string name, int? pageNumber, List<PolyLineAnnotation> annotations, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostPagePolyLineAnnotations");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PostPagePolyLineAnnotations");
            // verify the required parameter 'annotations' is set
            if (annotations == null)
                throw new ApiException(400, "Missing required parameter 'annotations' when calling PdfApi->PostPagePolyLineAnnotations");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/polyline";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (annotations != null && annotations.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(annotations); // http body (model) parameter
            }
            else
            {
                localVarPostBody = annotations; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostPagePolyLineAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Add document page polyline annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotations">The array of annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PostPagePolyLineAnnotationsAsync (string name, int? pageNumber, List<PolyLineAnnotation> annotations, string storage = null, string folder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PostPagePolyLineAnnotationsAsyncWithHttpInfo(name, pageNumber, annotations, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add document page polyline annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotations">The array of annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PostPagePolyLineAnnotationsAsyncWithHttpInfo (string name, int? pageNumber, List<PolyLineAnnotation> annotations, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostPagePolyLineAnnotations");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PostPagePolyLineAnnotations");
            // verify the required parameter 'annotations' is set
            if (annotations == null)
                throw new ApiException(400, "Missing required parameter 'annotations' when calling PdfApi->PostPagePolyLineAnnotations");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/polyline";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (annotations != null && annotations.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(annotations); // http body (model) parameter
            }
            else
            {
                localVarPostBody = annotations; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostPagePolyLineAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Add document page polygon annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotations">The array of annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PostPagePolygonAnnotations (string name, int? pageNumber, List<PolygonAnnotation> annotations, string storage = null, string folder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PostPagePolygonAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add document page polygon annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotations">The array of annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PostPagePolygonAnnotationsWithHttpInfo (string name, int? pageNumber, List<PolygonAnnotation> annotations, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostPagePolygonAnnotations");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PostPagePolygonAnnotations");
            // verify the required parameter 'annotations' is set
            if (annotations == null)
                throw new ApiException(400, "Missing required parameter 'annotations' when calling PdfApi->PostPagePolygonAnnotations");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/polygon";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (annotations != null && annotations.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(annotations); // http body (model) parameter
            }
            else
            {
                localVarPostBody = annotations; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostPagePolygonAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Add document page polygon annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotations">The array of annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PostPagePolygonAnnotationsAsync (string name, int? pageNumber, List<PolygonAnnotation> annotations, string storage = null, string folder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PostPagePolygonAnnotationsAsyncWithHttpInfo(name, pageNumber, annotations, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add document page polygon annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotations">The array of annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PostPagePolygonAnnotationsAsyncWithHttpInfo (string name, int? pageNumber, List<PolygonAnnotation> annotations, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostPagePolygonAnnotations");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PostPagePolygonAnnotations");
            // verify the required parameter 'annotations' is set
            if (annotations == null)
                throw new ApiException(400, "Missing required parameter 'annotations' when calling PdfApi->PostPagePolygonAnnotations");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/polygon";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (annotations != null && annotations.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(annotations); // http body (model) parameter
            }
            else
            {
                localVarPostBody = annotations; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostPagePolygonAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Add document page square annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotations">The array of annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PostPageSquareAnnotations (string name, int? pageNumber, List<SquareAnnotation> annotations, string storage = null, string folder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PostPageSquareAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add document page square annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotations">The array of annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PostPageSquareAnnotationsWithHttpInfo (string name, int? pageNumber, List<SquareAnnotation> annotations, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostPageSquareAnnotations");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PostPageSquareAnnotations");
            // verify the required parameter 'annotations' is set
            if (annotations == null)
                throw new ApiException(400, "Missing required parameter 'annotations' when calling PdfApi->PostPageSquareAnnotations");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/square";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (annotations != null && annotations.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(annotations); // http body (model) parameter
            }
            else
            {
                localVarPostBody = annotations; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostPageSquareAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Add document page square annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotations">The array of annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PostPageSquareAnnotationsAsync (string name, int? pageNumber, List<SquareAnnotation> annotations, string storage = null, string folder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PostPageSquareAnnotationsAsyncWithHttpInfo(name, pageNumber, annotations, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add document page square annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotations">The array of annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PostPageSquareAnnotationsAsyncWithHttpInfo (string name, int? pageNumber, List<SquareAnnotation> annotations, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostPageSquareAnnotations");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PostPageSquareAnnotations");
            // verify the required parameter 'annotations' is set
            if (annotations == null)
                throw new ApiException(400, "Missing required parameter 'annotations' when calling PdfApi->PostPageSquareAnnotations");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/square";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (annotations != null && annotations.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(annotations); // http body (model) parameter
            }
            else
            {
                localVarPostBody = annotations; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostPageSquareAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Add document page text annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotations">The array of annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PostPageTextAnnotations (string name, int? pageNumber, List<TextAnnotation> annotations, string storage = null, string folder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PostPageTextAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add document page text annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotations">The array of annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PostPageTextAnnotationsWithHttpInfo (string name, int? pageNumber, List<TextAnnotation> annotations, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostPageTextAnnotations");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PostPageTextAnnotations");
            // verify the required parameter 'annotations' is set
            if (annotations == null)
                throw new ApiException(400, "Missing required parameter 'annotations' when calling PdfApi->PostPageTextAnnotations");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/text";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (annotations != null && annotations.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(annotations); // http body (model) parameter
            }
            else
            {
                localVarPostBody = annotations; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostPageTextAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Add document page text annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotations">The array of annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PostPageTextAnnotationsAsync (string name, int? pageNumber, List<TextAnnotation> annotations, string storage = null, string folder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PostPageTextAnnotationsAsyncWithHttpInfo(name, pageNumber, annotations, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add document page text annotations. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="annotations">The array of annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PostPageTextAnnotationsAsyncWithHttpInfo (string name, int? pageNumber, List<TextAnnotation> annotations, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostPageTextAnnotations");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PostPageTextAnnotations");
            // verify the required parameter 'annotations' is set
            if (annotations == null)
                throw new ApiException(400, "Missing required parameter 'annotations' when calling PdfApi->PostPageTextAnnotations");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/text";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (annotations != null && annotations.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(annotations); // http body (model) parameter
            }
            else
            {
                localVarPostBody = annotations; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostPageTextAnnotations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Page&#39;s replace text method. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="textReplaceListRequest"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>TextReplaceResponse</returns>
        public TextReplaceResponse PostPageTextReplace (string name, int? pageNumber, TextReplaceListRequest textReplaceListRequest, string storage = null, string folder = null)
        {
             ApiResponse<TextReplaceResponse> localVarResponse = PostPageTextReplaceWithHttpInfo(name, pageNumber, textReplaceListRequest, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Page&#39;s replace text method. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="textReplaceListRequest"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of TextReplaceResponse</returns>
        public ApiResponse< TextReplaceResponse > PostPageTextReplaceWithHttpInfo (string name, int? pageNumber, TextReplaceListRequest textReplaceListRequest, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostPageTextReplace");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PostPageTextReplace");
            // verify the required parameter 'textReplaceListRequest' is set
            if (textReplaceListRequest == null)
                throw new ApiException(400, "Missing required parameter 'textReplaceListRequest' when calling PdfApi->PostPageTextReplace");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/text/replace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (textReplaceListRequest != null && textReplaceListRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(textReplaceListRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = textReplaceListRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostPageTextReplace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextReplaceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TextReplaceResponse) ApiClient.Deserialize(localVarResponse, typeof(TextReplaceResponse)));
        }

        /// <summary>
        /// Page&#39;s replace text method. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="textReplaceListRequest"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of TextReplaceResponse</returns>
        public async System.Threading.Tasks.Task<TextReplaceResponse> PostPageTextReplaceAsync (string name, int? pageNumber, TextReplaceListRequest textReplaceListRequest, string storage = null, string folder = null)
        {
             ApiResponse<TextReplaceResponse> localVarResponse = await PostPageTextReplaceAsyncWithHttpInfo(name, pageNumber, textReplaceListRequest, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Page&#39;s replace text method. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="pageNumber"></param>
        /// <param name="textReplaceListRequest"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (TextReplaceResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TextReplaceResponse>> PostPageTextReplaceAsyncWithHttpInfo (string name, int? pageNumber, TextReplaceListRequest textReplaceListRequest, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostPageTextReplace");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PostPageTextReplace");
            // verify the required parameter 'textReplaceListRequest' is set
            if (textReplaceListRequest == null)
                throw new ApiException(400, "Missing required parameter 'textReplaceListRequest' when calling PdfApi->PostPageTextReplace");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/text/replace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (textReplaceListRequest != null && textReplaceListRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(textReplaceListRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = textReplaceListRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostPageTextReplace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextReplaceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TextReplaceResponse) ApiClient.Deserialize(localVarResponse, typeof(TextReplaceResponse)));
        }

        /// <summary>
        /// Sign document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="signature">Signature object containing signature data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PostSignDocument (string name, Signature signature = null, string storage = null, string folder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PostSignDocumentWithHttpInfo(name, signature, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sign document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="signature">Signature object containing signature data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PostSignDocumentWithHttpInfo (string name, Signature signature = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostSignDocument");

            var localVarPath = "/pdf/{name}/sign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (signature != null && signature.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(signature); // http body (model) parameter
            }
            else
            {
                localVarPostBody = signature; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSignDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Sign document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="signature">Signature object containing signature data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PostSignDocumentAsync (string name, Signature signature = null, string storage = null, string folder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PostSignDocumentAsyncWithHttpInfo(name, signature, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sign document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="signature">Signature object containing signature data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PostSignDocumentAsyncWithHttpInfo (string name, Signature signature = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostSignDocument");

            var localVarPath = "/pdf/{name}/sign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (signature != null && signature.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(signature); // http body (model) parameter
            }
            else
            {
                localVarPostBody = signature; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSignDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Sign page. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="signature">Signature object containing signature data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PostSignPage (string name, int? pageNumber, Signature signature = null, string storage = null, string folder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PostSignPageWithHttpInfo(name, pageNumber, signature, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sign page. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="signature">Signature object containing signature data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PostSignPageWithHttpInfo (string name, int? pageNumber, Signature signature = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostSignPage");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PostSignPage");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/sign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (signature != null && signature.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(signature); // http body (model) parameter
            }
            else
            {
                localVarPostBody = signature; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSignPage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Sign page. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="signature">Signature object containing signature data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PostSignPageAsync (string name, int? pageNumber, Signature signature = null, string storage = null, string folder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PostSignPageAsyncWithHttpInfo(name, pageNumber, signature, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sign page. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="signature">Signature object containing signature data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PostSignPageAsyncWithHttpInfo (string name, int? pageNumber, Signature signature = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostSignPage");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PostSignPage");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/sign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (signature != null && signature.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(signature); // http body (model) parameter
            }
            else
            {
                localVarPostBody = signature; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSignPage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Split document to parts. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="format">Resulting documents format. (optional)</param>
        /// <param name="from">Start page if defined. (optional)</param>
        /// <param name="to">End page if defined. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SplitResultResponse</returns>
        public SplitResultResponse PostSplitDocument (string name, string format = null, int? from = null, int? to = null, string storage = null, string folder = null)
        {
             ApiResponse<SplitResultResponse> localVarResponse = PostSplitDocumentWithHttpInfo(name, format, from, to, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Split document to parts. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="format">Resulting documents format. (optional)</param>
        /// <param name="from">Start page if defined. (optional)</param>
        /// <param name="to">End page if defined. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SplitResultResponse</returns>
        public ApiResponse< SplitResultResponse > PostSplitDocumentWithHttpInfo (string name, string format = null, int? from = null, int? to = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostSplitDocument");

            var localVarPath = "/pdf/{name}/split";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (format != null) localVarQueryParams.Add("format", ApiClient.ParameterToString(format)); // query parameter
            if (from != null) localVarQueryParams.Add("from", ApiClient.ParameterToString(from)); // query parameter
            if (to != null) localVarQueryParams.Add("to", ApiClient.ParameterToString(to)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSplitDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SplitResultResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SplitResultResponse) ApiClient.Deserialize(localVarResponse, typeof(SplitResultResponse)));
        }

        /// <summary>
        /// Split document to parts. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="format">Resulting documents format. (optional)</param>
        /// <param name="from">Start page if defined. (optional)</param>
        /// <param name="to">End page if defined. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SplitResultResponse</returns>
        public async System.Threading.Tasks.Task<SplitResultResponse> PostSplitDocumentAsync (string name, string format = null, int? from = null, int? to = null, string storage = null, string folder = null)
        {
             ApiResponse<SplitResultResponse> localVarResponse = await PostSplitDocumentAsyncWithHttpInfo(name, format, from, to, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Split document to parts. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="format">Resulting documents format. (optional)</param>
        /// <param name="from">Start page if defined. (optional)</param>
        /// <param name="to">End page if defined. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SplitResultResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SplitResultResponse>> PostSplitDocumentAsyncWithHttpInfo (string name, string format = null, int? from = null, int? to = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PostSplitDocument");

            var localVarPath = "/pdf/{name}/split";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (format != null) localVarQueryParams.Add("format", ApiClient.ParameterToString(format)); // query parameter
            if (from != null) localVarQueryParams.Add("from", ApiClient.ParameterToString(from)); // query parameter
            if (to != null) localVarQueryParams.Add("to", ApiClient.ParameterToString(to)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSplitDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SplitResultResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SplitResultResponse) ApiClient.Deserialize(localVarResponse, typeof(SplitResultResponse)));
        }

        /// <summary>
        /// Add new page to end of the document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>DocumentPagesResponse</returns>
        public DocumentPagesResponse PutAddNewPage (string name, string storage = null, string folder = null)
        {
             ApiResponse<DocumentPagesResponse> localVarResponse = PutAddNewPageWithHttpInfo(name, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add new page to end of the document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of DocumentPagesResponse</returns>
        public ApiResponse< DocumentPagesResponse > PutAddNewPageWithHttpInfo (string name, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutAddNewPage");

            var localVarPath = "/pdf/{name}/pages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutAddNewPage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentPagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentPagesResponse) ApiClient.Deserialize(localVarResponse, typeof(DocumentPagesResponse)));
        }

        /// <summary>
        /// Add new page to end of the document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of DocumentPagesResponse</returns>
        public async System.Threading.Tasks.Task<DocumentPagesResponse> PutAddNewPageAsync (string name, string storage = null, string folder = null)
        {
             ApiResponse<DocumentPagesResponse> localVarResponse = await PutAddNewPageAsyncWithHttpInfo(name, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add new page to end of the document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (DocumentPagesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentPagesResponse>> PutAddNewPageAsyncWithHttpInfo (string name, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutAddNewPage");

            var localVarPath = "/pdf/{name}/pages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutAddNewPage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentPagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentPagesResponse) ApiClient.Deserialize(localVarResponse, typeof(DocumentPagesResponse)));
        }

        /// <summary>
        /// Add text to PDF document page. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">Number of page (starting from 1).</param>
        /// <param name="paragraph">Paragraph data. (optional)</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PutAddText (string name, int? pageNumber, Paragraph paragraph = null, string folder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PutAddTextWithHttpInfo(name, pageNumber, paragraph, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add text to PDF document page. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">Number of page (starting from 1).</param>
        /// <param name="paragraph">Paragraph data. (optional)</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PutAddTextWithHttpInfo (string name, int? pageNumber, Paragraph paragraph = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutAddText");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PutAddText");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/text";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (paragraph != null && paragraph.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(paragraph); // http body (model) parameter
            }
            else
            {
                localVarPostBody = paragraph; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutAddText", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Add text to PDF document page. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">Number of page (starting from 1).</param>
        /// <param name="paragraph">Paragraph data. (optional)</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PutAddTextAsync (string name, int? pageNumber, Paragraph paragraph = null, string folder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PutAddTextAsyncWithHttpInfo(name, pageNumber, paragraph, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add text to PDF document page. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">Number of page (starting from 1).</param>
        /// <param name="paragraph">Paragraph data. (optional)</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutAddTextAsyncWithHttpInfo (string name, int? pageNumber, Paragraph paragraph = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutAddText");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PutAddText");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/text";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (paragraph != null && paragraph.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(paragraph); // http body (model) parameter
            }
            else
            {
                localVarPostBody = paragraph; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutAddText", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Replace document circle annotation 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="annotation">Annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>CircleAnnotationResponse</returns>
        public CircleAnnotationResponse PutCircleAnnotation (string name, string annotationId, CircleAnnotation annotation, string storage = null, string folder = null)
        {
             ApiResponse<CircleAnnotationResponse> localVarResponse = PutCircleAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replace document circle annotation 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="annotation">Annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of CircleAnnotationResponse</returns>
        public ApiResponse< CircleAnnotationResponse > PutCircleAnnotationWithHttpInfo (string name, string annotationId, CircleAnnotation annotation, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutCircleAnnotation");
            // verify the required parameter 'annotationId' is set
            if (annotationId == null)
                throw new ApiException(400, "Missing required parameter 'annotationId' when calling PdfApi->PutCircleAnnotation");
            // verify the required parameter 'annotation' is set
            if (annotation == null)
                throw new ApiException(400, "Missing required parameter 'annotation' when calling PdfApi->PutCircleAnnotation");

            var localVarPath = "/pdf/{name}/annotations/circle/{annotationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (annotationId != null) localVarPathParams.Add("annotationId", ApiClient.ParameterToString(annotationId)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (annotation != null && annotation.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(annotation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = annotation; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutCircleAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CircleAnnotationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CircleAnnotationResponse) ApiClient.Deserialize(localVarResponse, typeof(CircleAnnotationResponse)));
        }

        /// <summary>
        /// Replace document circle annotation 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="annotation">Annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of CircleAnnotationResponse</returns>
        public async System.Threading.Tasks.Task<CircleAnnotationResponse> PutCircleAnnotationAsync (string name, string annotationId, CircleAnnotation annotation, string storage = null, string folder = null)
        {
             ApiResponse<CircleAnnotationResponse> localVarResponse = await PutCircleAnnotationAsyncWithHttpInfo(name, annotationId, annotation, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replace document circle annotation 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="annotation">Annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (CircleAnnotationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CircleAnnotationResponse>> PutCircleAnnotationAsyncWithHttpInfo (string name, string annotationId, CircleAnnotation annotation, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutCircleAnnotation");
            // verify the required parameter 'annotationId' is set
            if (annotationId == null)
                throw new ApiException(400, "Missing required parameter 'annotationId' when calling PdfApi->PutCircleAnnotation");
            // verify the required parameter 'annotation' is set
            if (annotation == null)
                throw new ApiException(400, "Missing required parameter 'annotation' when calling PdfApi->PutCircleAnnotation");

            var localVarPath = "/pdf/{name}/annotations/circle/{annotationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (annotationId != null) localVarPathParams.Add("annotationId", ApiClient.ParameterToString(annotationId)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (annotation != null && annotation.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(annotation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = annotation; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutCircleAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CircleAnnotationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CircleAnnotationResponse) ApiClient.Deserialize(localVarResponse, typeof(CircleAnnotationResponse)));
        }

        /// <summary>
        /// Upload a specific file  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext</param>
        /// <param name="file">File to upload</param>
        /// <param name="versionId">Source file&#39;s version (optional)</param>
        /// <param name="storage">User&#39;s storage name (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PutCreate (string path, System.IO.Stream file, string versionId = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PutCreateWithHttpInfo(path, file, versionId, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload a specific file  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext</param>
        /// <param name="file">File to upload</param>
        /// <param name="versionId">Source file&#39;s version (optional)</param>
        /// <param name="storage">User&#39;s storage name (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PutCreateWithHttpInfo (string path, System.IO.Stream file, string versionId = null, string storage = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling PdfApi->PutCreate");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling PdfApi->PutCreate");

            var localVarPath = "/storage/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarQueryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            if (versionId != null) localVarQueryParams.Add("versionId", ApiClient.ParameterToString(versionId)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (file != null) localVarFileParams.Add("File", ApiClient.ParameterToFile("File", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Upload a specific file  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext</param>
        /// <param name="file">File to upload</param>
        /// <param name="versionId">Source file&#39;s version (optional)</param>
        /// <param name="storage">User&#39;s storage name (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PutCreateAsync (string path, System.IO.Stream file, string versionId = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PutCreateAsyncWithHttpInfo(path, file, versionId, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload a specific file  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext</param>
        /// <param name="file">File to upload</param>
        /// <param name="versionId">Source file&#39;s version (optional)</param>
        /// <param name="storage">User&#39;s storage name (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutCreateAsyncWithHttpInfo (string path, System.IO.Stream file, string versionId = null, string storage = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling PdfApi->PutCreate");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling PdfApi->PutCreate");

            var localVarPath = "/storage/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarQueryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            if (versionId != null) localVarQueryParams.Add("versionId", ApiClient.ParameterToString(versionId)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (file != null) localVarFileParams.Add("File", ApiClient.ParameterToFile("File", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Create empty document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The new document folder. (optional)</param>
        /// <returns>DocumentResponse</returns>
        public DocumentResponse PutCreateDocument (string name, string storage = null, string folder = null)
        {
             ApiResponse<DocumentResponse> localVarResponse = PutCreateDocumentWithHttpInfo(name, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create empty document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The new document folder. (optional)</param>
        /// <returns>ApiResponse of DocumentResponse</returns>
        public ApiResponse< DocumentResponse > PutCreateDocumentWithHttpInfo (string name, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutCreateDocument");

            var localVarPath = "/pdf/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutCreateDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentResponse) ApiClient.Deserialize(localVarResponse, typeof(DocumentResponse)));
        }

        /// <summary>
        /// Create empty document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The new document folder. (optional)</param>
        /// <returns>Task of DocumentResponse</returns>
        public async System.Threading.Tasks.Task<DocumentResponse> PutCreateDocumentAsync (string name, string storage = null, string folder = null)
        {
             ApiResponse<DocumentResponse> localVarResponse = await PutCreateDocumentAsyncWithHttpInfo(name, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create empty document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The new document folder. (optional)</param>
        /// <returns>Task of ApiResponse (DocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentResponse>> PutCreateDocumentAsyncWithHttpInfo (string name, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutCreateDocument");

            var localVarPath = "/pdf/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutCreateDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentResponse) ApiClient.Deserialize(localVarResponse, typeof(DocumentResponse)));
        }

        /// <summary>
        /// Convert EPUB file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.epub)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PutEpubInStorageToPdf (string name, string srcPath, string storage = null, string dstFolder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PutEpubInStorageToPdfWithHttpInfo(name, srcPath, storage, dstFolder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert EPUB file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.epub)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PutEpubInStorageToPdfWithHttpInfo (string name, string srcPath, string storage = null, string dstFolder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutEpubInStorageToPdf");
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->PutEpubInStorageToPdf");

            var localVarPath = "/pdf/{name}/create/epub";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (dstFolder != null) localVarQueryParams.Add("dstFolder", ApiClient.ParameterToString(dstFolder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutEpubInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Convert EPUB file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.epub)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PutEpubInStorageToPdfAsync (string name, string srcPath, string storage = null, string dstFolder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PutEpubInStorageToPdfAsyncWithHttpInfo(name, srcPath, storage, dstFolder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert EPUB file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.epub)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutEpubInStorageToPdfAsyncWithHttpInfo (string name, string srcPath, string storage = null, string dstFolder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutEpubInStorageToPdf");
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->PutEpubInStorageToPdf");

            var localVarPath = "/pdf/{name}/create/epub";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (dstFolder != null) localVarQueryParams.Add("dstFolder", ApiClient.ParameterToString(dstFolder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutEpubInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Flatten form fields in document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PutFieldsFlatten (string name, string storage = null, string folder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PutFieldsFlattenWithHttpInfo(name, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Flatten form fields in document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PutFieldsFlattenWithHttpInfo (string name, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutFieldsFlatten");

            var localVarPath = "/pdf/{name}/fields/flatten";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutFieldsFlatten", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Flatten form fields in document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PutFieldsFlattenAsync (string name, string storage = null, string folder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PutFieldsFlattenAsyncWithHttpInfo(name, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Flatten form fields in document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutFieldsFlattenAsyncWithHttpInfo (string name, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutFieldsFlatten");

            var localVarPath = "/pdf/{name}/fields/flatten";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutFieldsFlatten", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Replace document free text annotation 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="annotation">Annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>FreeTextAnnotationResponse</returns>
        public FreeTextAnnotationResponse PutFreeTextAnnotation (string name, string annotationId, FreeTextAnnotation annotation, string storage = null, string folder = null)
        {
             ApiResponse<FreeTextAnnotationResponse> localVarResponse = PutFreeTextAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replace document free text annotation 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="annotation">Annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of FreeTextAnnotationResponse</returns>
        public ApiResponse< FreeTextAnnotationResponse > PutFreeTextAnnotationWithHttpInfo (string name, string annotationId, FreeTextAnnotation annotation, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutFreeTextAnnotation");
            // verify the required parameter 'annotationId' is set
            if (annotationId == null)
                throw new ApiException(400, "Missing required parameter 'annotationId' when calling PdfApi->PutFreeTextAnnotation");
            // verify the required parameter 'annotation' is set
            if (annotation == null)
                throw new ApiException(400, "Missing required parameter 'annotation' when calling PdfApi->PutFreeTextAnnotation");

            var localVarPath = "/pdf/{name}/annotations/freetext/{annotationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (annotationId != null) localVarPathParams.Add("annotationId", ApiClient.ParameterToString(annotationId)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (annotation != null && annotation.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(annotation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = annotation; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutFreeTextAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FreeTextAnnotationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FreeTextAnnotationResponse) ApiClient.Deserialize(localVarResponse, typeof(FreeTextAnnotationResponse)));
        }

        /// <summary>
        /// Replace document free text annotation 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="annotation">Annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of FreeTextAnnotationResponse</returns>
        public async System.Threading.Tasks.Task<FreeTextAnnotationResponse> PutFreeTextAnnotationAsync (string name, string annotationId, FreeTextAnnotation annotation, string storage = null, string folder = null)
        {
             ApiResponse<FreeTextAnnotationResponse> localVarResponse = await PutFreeTextAnnotationAsyncWithHttpInfo(name, annotationId, annotation, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replace document free text annotation 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="annotation">Annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (FreeTextAnnotationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FreeTextAnnotationResponse>> PutFreeTextAnnotationAsyncWithHttpInfo (string name, string annotationId, FreeTextAnnotation annotation, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutFreeTextAnnotation");
            // verify the required parameter 'annotationId' is set
            if (annotationId == null)
                throw new ApiException(400, "Missing required parameter 'annotationId' when calling PdfApi->PutFreeTextAnnotation");
            // verify the required parameter 'annotation' is set
            if (annotation == null)
                throw new ApiException(400, "Missing required parameter 'annotation' when calling PdfApi->PutFreeTextAnnotation");

            var localVarPath = "/pdf/{name}/annotations/freetext/{annotationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (annotationId != null) localVarPathParams.Add("annotationId", ApiClient.ParameterToString(annotationId)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (annotation != null && annotation.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(annotation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = annotation; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutFreeTextAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FreeTextAnnotationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FreeTextAnnotationResponse) ApiClient.Deserialize(localVarResponse, typeof(FreeTextAnnotationResponse)));
        }

        /// <summary>
        /// Convert HTML file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.zip)</param>
        /// <param name="htmlFileName">Name of HTML file in ZIP.</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PutHtmlInStorageToPdf (string name, string srcPath, string htmlFileName, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string dstFolder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PutHtmlInStorageToPdfWithHttpInfo(name, srcPath, htmlFileName, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, dstFolder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert HTML file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.zip)</param>
        /// <param name="htmlFileName">Name of HTML file in ZIP.</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PutHtmlInStorageToPdfWithHttpInfo (string name, string srcPath, string htmlFileName, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string dstFolder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutHtmlInStorageToPdf");
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->PutHtmlInStorageToPdf");
            // verify the required parameter 'htmlFileName' is set
            if (htmlFileName == null)
                throw new ApiException(400, "Missing required parameter 'htmlFileName' when calling PdfApi->PutHtmlInStorageToPdf");

            var localVarPath = "/pdf/{name}/create/html";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (htmlFileName != null) localVarQueryParams.Add("htmlFileName", ApiClient.ParameterToString(htmlFileName)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (isLandscape != null) localVarQueryParams.Add("isLandscape", ApiClient.ParameterToString(isLandscape)); // query parameter
            if (marginLeft != null) localVarQueryParams.Add("marginLeft", ApiClient.ParameterToString(marginLeft)); // query parameter
            if (marginBottom != null) localVarQueryParams.Add("marginBottom", ApiClient.ParameterToString(marginBottom)); // query parameter
            if (marginRight != null) localVarQueryParams.Add("marginRight", ApiClient.ParameterToString(marginRight)); // query parameter
            if (marginTop != null) localVarQueryParams.Add("marginTop", ApiClient.ParameterToString(marginTop)); // query parameter
            if (dstFolder != null) localVarQueryParams.Add("dstFolder", ApiClient.ParameterToString(dstFolder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutHtmlInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Convert HTML file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.zip)</param>
        /// <param name="htmlFileName">Name of HTML file in ZIP.</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PutHtmlInStorageToPdfAsync (string name, string srcPath, string htmlFileName, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string dstFolder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PutHtmlInStorageToPdfAsyncWithHttpInfo(name, srcPath, htmlFileName, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, dstFolder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert HTML file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.zip)</param>
        /// <param name="htmlFileName">Name of HTML file in ZIP.</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutHtmlInStorageToPdfAsyncWithHttpInfo (string name, string srcPath, string htmlFileName, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string dstFolder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutHtmlInStorageToPdf");
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->PutHtmlInStorageToPdf");
            // verify the required parameter 'htmlFileName' is set
            if (htmlFileName == null)
                throw new ApiException(400, "Missing required parameter 'htmlFileName' when calling PdfApi->PutHtmlInStorageToPdf");

            var localVarPath = "/pdf/{name}/create/html";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (htmlFileName != null) localVarQueryParams.Add("htmlFileName", ApiClient.ParameterToString(htmlFileName)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (isLandscape != null) localVarQueryParams.Add("isLandscape", ApiClient.ParameterToString(isLandscape)); // query parameter
            if (marginLeft != null) localVarQueryParams.Add("marginLeft", ApiClient.ParameterToString(marginLeft)); // query parameter
            if (marginBottom != null) localVarQueryParams.Add("marginBottom", ApiClient.ParameterToString(marginBottom)); // query parameter
            if (marginRight != null) localVarQueryParams.Add("marginRight", ApiClient.ParameterToString(marginRight)); // query parameter
            if (marginTop != null) localVarQueryParams.Add("marginTop", ApiClient.ParameterToString(marginTop)); // query parameter
            if (dstFolder != null) localVarQueryParams.Add("dstFolder", ApiClient.ParameterToString(dstFolder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutHtmlInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Extract document image in GIF format to folder 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PutImageExtractAsGif (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PutImageExtractAsGifWithHttpInfo(name, imageId, width, height, storage, folder, destFolder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Extract document image in GIF format to folder 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PutImageExtractAsGifWithHttpInfo (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutImageExtractAsGif");
            // verify the required parameter 'imageId' is set
            if (imageId == null)
                throw new ApiException(400, "Missing required parameter 'imageId' when calling PdfApi->PutImageExtractAsGif");

            var localVarPath = "/pdf/{name}/images/{imageId}/extract/gif";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (imageId != null) localVarPathParams.Add("imageId", ApiClient.ParameterToString(imageId)); // path parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (destFolder != null) localVarQueryParams.Add("destFolder", ApiClient.ParameterToString(destFolder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutImageExtractAsGif", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Extract document image in GIF format to folder 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PutImageExtractAsGifAsync (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PutImageExtractAsGifAsyncWithHttpInfo(name, imageId, width, height, storage, folder, destFolder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Extract document image in GIF format to folder 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutImageExtractAsGifAsyncWithHttpInfo (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutImageExtractAsGif");
            // verify the required parameter 'imageId' is set
            if (imageId == null)
                throw new ApiException(400, "Missing required parameter 'imageId' when calling PdfApi->PutImageExtractAsGif");

            var localVarPath = "/pdf/{name}/images/{imageId}/extract/gif";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (imageId != null) localVarPathParams.Add("imageId", ApiClient.ParameterToString(imageId)); // path parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (destFolder != null) localVarQueryParams.Add("destFolder", ApiClient.ParameterToString(destFolder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutImageExtractAsGif", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Extract document image in JPEG format to folder 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PutImageExtractAsJpeg (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PutImageExtractAsJpegWithHttpInfo(name, imageId, width, height, storage, folder, destFolder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Extract document image in JPEG format to folder 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PutImageExtractAsJpegWithHttpInfo (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutImageExtractAsJpeg");
            // verify the required parameter 'imageId' is set
            if (imageId == null)
                throw new ApiException(400, "Missing required parameter 'imageId' when calling PdfApi->PutImageExtractAsJpeg");

            var localVarPath = "/pdf/{name}/images/{imageId}/extract/jpeg";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (imageId != null) localVarPathParams.Add("imageId", ApiClient.ParameterToString(imageId)); // path parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (destFolder != null) localVarQueryParams.Add("destFolder", ApiClient.ParameterToString(destFolder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutImageExtractAsJpeg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Extract document image in JPEG format to folder 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PutImageExtractAsJpegAsync (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PutImageExtractAsJpegAsyncWithHttpInfo(name, imageId, width, height, storage, folder, destFolder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Extract document image in JPEG format to folder 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutImageExtractAsJpegAsyncWithHttpInfo (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutImageExtractAsJpeg");
            // verify the required parameter 'imageId' is set
            if (imageId == null)
                throw new ApiException(400, "Missing required parameter 'imageId' when calling PdfApi->PutImageExtractAsJpeg");

            var localVarPath = "/pdf/{name}/images/{imageId}/extract/jpeg";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (imageId != null) localVarPathParams.Add("imageId", ApiClient.ParameterToString(imageId)); // path parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (destFolder != null) localVarQueryParams.Add("destFolder", ApiClient.ParameterToString(destFolder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutImageExtractAsJpeg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Extract document image in PNG format to folder 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PutImageExtractAsPng (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PutImageExtractAsPngWithHttpInfo(name, imageId, width, height, storage, folder, destFolder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Extract document image in PNG format to folder 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PutImageExtractAsPngWithHttpInfo (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutImageExtractAsPng");
            // verify the required parameter 'imageId' is set
            if (imageId == null)
                throw new ApiException(400, "Missing required parameter 'imageId' when calling PdfApi->PutImageExtractAsPng");

            var localVarPath = "/pdf/{name}/images/{imageId}/extract/png";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (imageId != null) localVarPathParams.Add("imageId", ApiClient.ParameterToString(imageId)); // path parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (destFolder != null) localVarQueryParams.Add("destFolder", ApiClient.ParameterToString(destFolder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutImageExtractAsPng", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Extract document image in PNG format to folder 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PutImageExtractAsPngAsync (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PutImageExtractAsPngAsyncWithHttpInfo(name, imageId, width, height, storage, folder, destFolder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Extract document image in PNG format to folder 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutImageExtractAsPngAsyncWithHttpInfo (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutImageExtractAsPng");
            // verify the required parameter 'imageId' is set
            if (imageId == null)
                throw new ApiException(400, "Missing required parameter 'imageId' when calling PdfApi->PutImageExtractAsPng");

            var localVarPath = "/pdf/{name}/images/{imageId}/extract/png";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (imageId != null) localVarPathParams.Add("imageId", ApiClient.ParameterToString(imageId)); // path parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (destFolder != null) localVarQueryParams.Add("destFolder", ApiClient.ParameterToString(destFolder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutImageExtractAsPng", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Extract document image in TIFF format to folder 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PutImageExtractAsTiff (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PutImageExtractAsTiffWithHttpInfo(name, imageId, width, height, storage, folder, destFolder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Extract document image in TIFF format to folder 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PutImageExtractAsTiffWithHttpInfo (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutImageExtractAsTiff");
            // verify the required parameter 'imageId' is set
            if (imageId == null)
                throw new ApiException(400, "Missing required parameter 'imageId' when calling PdfApi->PutImageExtractAsTiff");

            var localVarPath = "/pdf/{name}/images/{imageId}/extract/tiff";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (imageId != null) localVarPathParams.Add("imageId", ApiClient.ParameterToString(imageId)); // path parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (destFolder != null) localVarQueryParams.Add("destFolder", ApiClient.ParameterToString(destFolder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutImageExtractAsTiff", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Extract document image in TIFF format to folder 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PutImageExtractAsTiffAsync (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PutImageExtractAsTiffAsyncWithHttpInfo(name, imageId, width, height, storage, folder, destFolder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Extract document image in TIFF format to folder 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutImageExtractAsTiffAsyncWithHttpInfo (string name, string imageId, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutImageExtractAsTiff");
            // verify the required parameter 'imageId' is set
            if (imageId == null)
                throw new ApiException(400, "Missing required parameter 'imageId' when calling PdfApi->PutImageExtractAsTiff");

            var localVarPath = "/pdf/{name}/images/{imageId}/extract/tiff";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (imageId != null) localVarPathParams.Add("imageId", ApiClient.ParameterToString(imageId)); // path parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (destFolder != null) localVarQueryParams.Add("destFolder", ApiClient.ParameterToString(destFolder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutImageExtractAsTiff", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Convert image file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageTemplates">Image templates</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PutImageInStorageToPdf (string name, ImageTemplatesRequest imageTemplates, string dstFolder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PutImageInStorageToPdfWithHttpInfo(name, imageTemplates, dstFolder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert image file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageTemplates">Image templates</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PutImageInStorageToPdfWithHttpInfo (string name, ImageTemplatesRequest imageTemplates, string dstFolder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutImageInStorageToPdf");
            // verify the required parameter 'imageTemplates' is set
            if (imageTemplates == null)
                throw new ApiException(400, "Missing required parameter 'imageTemplates' when calling PdfApi->PutImageInStorageToPdf");

            var localVarPath = "/pdf/{name}/create/images";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (dstFolder != null) localVarQueryParams.Add("dstFolder", ApiClient.ParameterToString(dstFolder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (imageTemplates != null && imageTemplates.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(imageTemplates); // http body (model) parameter
            }
            else
            {
                localVarPostBody = imageTemplates; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutImageInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Convert image file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageTemplates">Image templates</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PutImageInStorageToPdfAsync (string name, ImageTemplatesRequest imageTemplates, string dstFolder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PutImageInStorageToPdfAsyncWithHttpInfo(name, imageTemplates, dstFolder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert image file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageTemplates">Image templates</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutImageInStorageToPdfAsyncWithHttpInfo (string name, ImageTemplatesRequest imageTemplates, string dstFolder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutImageInStorageToPdf");
            // verify the required parameter 'imageTemplates' is set
            if (imageTemplates == null)
                throw new ApiException(400, "Missing required parameter 'imageTemplates' when calling PdfApi->PutImageInStorageToPdf");

            var localVarPath = "/pdf/{name}/create/images";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (dstFolder != null) localVarQueryParams.Add("dstFolder", ApiClient.ParameterToString(dstFolder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (imageTemplates != null && imageTemplates.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(imageTemplates); // http body (model) parameter
            }
            else
            {
                localVarPostBody = imageTemplates; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutImageInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Extract document images in GIF format to folder. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PutImagesExtractAsGif (string name, int? pageNumber, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PutImagesExtractAsGifWithHttpInfo(name, pageNumber, width, height, storage, folder, destFolder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Extract document images in GIF format to folder. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PutImagesExtractAsGifWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutImagesExtractAsGif");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PutImagesExtractAsGif");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/images/extract/gif";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (destFolder != null) localVarQueryParams.Add("destFolder", ApiClient.ParameterToString(destFolder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutImagesExtractAsGif", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Extract document images in GIF format to folder. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PutImagesExtractAsGifAsync (string name, int? pageNumber, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PutImagesExtractAsGifAsyncWithHttpInfo(name, pageNumber, width, height, storage, folder, destFolder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Extract document images in GIF format to folder. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutImagesExtractAsGifAsyncWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutImagesExtractAsGif");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PutImagesExtractAsGif");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/images/extract/gif";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (destFolder != null) localVarQueryParams.Add("destFolder", ApiClient.ParameterToString(destFolder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutImagesExtractAsGif", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Extract document images in JPEG format to folder. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PutImagesExtractAsJpeg (string name, int? pageNumber, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PutImagesExtractAsJpegWithHttpInfo(name, pageNumber, width, height, storage, folder, destFolder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Extract document images in JPEG format to folder. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PutImagesExtractAsJpegWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutImagesExtractAsJpeg");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PutImagesExtractAsJpeg");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/images/extract/jpeg";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (destFolder != null) localVarQueryParams.Add("destFolder", ApiClient.ParameterToString(destFolder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutImagesExtractAsJpeg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Extract document images in JPEG format to folder. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PutImagesExtractAsJpegAsync (string name, int? pageNumber, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PutImagesExtractAsJpegAsyncWithHttpInfo(name, pageNumber, width, height, storage, folder, destFolder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Extract document images in JPEG format to folder. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutImagesExtractAsJpegAsyncWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutImagesExtractAsJpeg");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PutImagesExtractAsJpeg");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/images/extract/jpeg";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (destFolder != null) localVarQueryParams.Add("destFolder", ApiClient.ParameterToString(destFolder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutImagesExtractAsJpeg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Extract document images in PNG format to folder. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PutImagesExtractAsPng (string name, int? pageNumber, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PutImagesExtractAsPngWithHttpInfo(name, pageNumber, width, height, storage, folder, destFolder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Extract document images in PNG format to folder. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PutImagesExtractAsPngWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutImagesExtractAsPng");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PutImagesExtractAsPng");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/images/extract/png";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (destFolder != null) localVarQueryParams.Add("destFolder", ApiClient.ParameterToString(destFolder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutImagesExtractAsPng", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Extract document images in PNG format to folder. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PutImagesExtractAsPngAsync (string name, int? pageNumber, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PutImagesExtractAsPngAsyncWithHttpInfo(name, pageNumber, width, height, storage, folder, destFolder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Extract document images in PNG format to folder. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutImagesExtractAsPngAsyncWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutImagesExtractAsPng");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PutImagesExtractAsPng");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/images/extract/png";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (destFolder != null) localVarQueryParams.Add("destFolder", ApiClient.ParameterToString(destFolder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutImagesExtractAsPng", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Extract document images in TIFF format to folder. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PutImagesExtractAsTiff (string name, int? pageNumber, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PutImagesExtractAsTiffWithHttpInfo(name, pageNumber, width, height, storage, folder, destFolder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Extract document images in TIFF format to folder. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PutImagesExtractAsTiffWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutImagesExtractAsTiff");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PutImagesExtractAsTiff");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/images/extract/tiff";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (destFolder != null) localVarQueryParams.Add("destFolder", ApiClient.ParameterToString(destFolder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutImagesExtractAsTiff", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Extract document images in TIFF format to folder. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PutImagesExtractAsTiffAsync (string name, int? pageNumber, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PutImagesExtractAsTiffAsyncWithHttpInfo(name, pageNumber, width, height, storage, folder, destFolder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Extract document images in TIFF format to folder. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="destFolder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutImagesExtractAsTiffAsyncWithHttpInfo (string name, int? pageNumber, int? width = null, int? height = null, string storage = null, string folder = null, string destFolder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutImagesExtractAsTiff");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PutImagesExtractAsTiff");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/images/extract/tiff";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (destFolder != null) localVarQueryParams.Add("destFolder", ApiClient.ParameterToString(destFolder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutImagesExtractAsTiff", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Convert LaTeX file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.tex)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PutLaTeXInStorageToPdf (string name, string srcPath, string dstFolder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PutLaTeXInStorageToPdfWithHttpInfo(name, srcPath, dstFolder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert LaTeX file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.tex)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PutLaTeXInStorageToPdfWithHttpInfo (string name, string srcPath, string dstFolder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutLaTeXInStorageToPdf");
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->PutLaTeXInStorageToPdf");

            var localVarPath = "/pdf/{name}/create/latex";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (dstFolder != null) localVarQueryParams.Add("dstFolder", ApiClient.ParameterToString(dstFolder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutLaTeXInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Convert LaTeX file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.tex)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PutLaTeXInStorageToPdfAsync (string name, string srcPath, string dstFolder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PutLaTeXInStorageToPdfAsyncWithHttpInfo(name, srcPath, dstFolder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert LaTeX file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.tex)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutLaTeXInStorageToPdfAsyncWithHttpInfo (string name, string srcPath, string dstFolder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutLaTeXInStorageToPdf");
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->PutLaTeXInStorageToPdf");

            var localVarPath = "/pdf/{name}/create/latex";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (dstFolder != null) localVarQueryParams.Add("dstFolder", ApiClient.ParameterToString(dstFolder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutLaTeXInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Replace document line annotation 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="annotation">Annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>LineAnnotationResponse</returns>
        public LineAnnotationResponse PutLineAnnotation (string name, string annotationId, LineAnnotation annotation, string storage = null, string folder = null)
        {
             ApiResponse<LineAnnotationResponse> localVarResponse = PutLineAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replace document line annotation 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="annotation">Annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of LineAnnotationResponse</returns>
        public ApiResponse< LineAnnotationResponse > PutLineAnnotationWithHttpInfo (string name, string annotationId, LineAnnotation annotation, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutLineAnnotation");
            // verify the required parameter 'annotationId' is set
            if (annotationId == null)
                throw new ApiException(400, "Missing required parameter 'annotationId' when calling PdfApi->PutLineAnnotation");
            // verify the required parameter 'annotation' is set
            if (annotation == null)
                throw new ApiException(400, "Missing required parameter 'annotation' when calling PdfApi->PutLineAnnotation");

            var localVarPath = "/pdf/{name}/annotations/line/{annotationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (annotationId != null) localVarPathParams.Add("annotationId", ApiClient.ParameterToString(annotationId)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (annotation != null && annotation.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(annotation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = annotation; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutLineAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LineAnnotationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LineAnnotationResponse) ApiClient.Deserialize(localVarResponse, typeof(LineAnnotationResponse)));
        }

        /// <summary>
        /// Replace document line annotation 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="annotation">Annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of LineAnnotationResponse</returns>
        public async System.Threading.Tasks.Task<LineAnnotationResponse> PutLineAnnotationAsync (string name, string annotationId, LineAnnotation annotation, string storage = null, string folder = null)
        {
             ApiResponse<LineAnnotationResponse> localVarResponse = await PutLineAnnotationAsyncWithHttpInfo(name, annotationId, annotation, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replace document line annotation 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="annotation">Annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (LineAnnotationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LineAnnotationResponse>> PutLineAnnotationAsyncWithHttpInfo (string name, string annotationId, LineAnnotation annotation, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutLineAnnotation");
            // verify the required parameter 'annotationId' is set
            if (annotationId == null)
                throw new ApiException(400, "Missing required parameter 'annotationId' when calling PdfApi->PutLineAnnotation");
            // verify the required parameter 'annotation' is set
            if (annotation == null)
                throw new ApiException(400, "Missing required parameter 'annotation' when calling PdfApi->PutLineAnnotation");

            var localVarPath = "/pdf/{name}/annotations/line/{annotationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (annotationId != null) localVarPathParams.Add("annotationId", ApiClient.ParameterToString(annotationId)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (annotation != null && annotation.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(annotation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = annotation; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutLineAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LineAnnotationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LineAnnotationResponse) ApiClient.Deserialize(localVarResponse, typeof(LineAnnotationResponse)));
        }

        /// <summary>
        /// Replace document page link annotations 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="linkId">The link ID.</param>
        /// <param name="link">Link anotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>LinkAnnotationResponse</returns>
        public LinkAnnotationResponse PutLinkAnnotation (string name, string linkId, LinkAnnotation link, string storage = null, string folder = null)
        {
             ApiResponse<LinkAnnotationResponse> localVarResponse = PutLinkAnnotationWithHttpInfo(name, linkId, link, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replace document page link annotations 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="linkId">The link ID.</param>
        /// <param name="link">Link anotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of LinkAnnotationResponse</returns>
        public ApiResponse< LinkAnnotationResponse > PutLinkAnnotationWithHttpInfo (string name, string linkId, LinkAnnotation link, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutLinkAnnotation");
            // verify the required parameter 'linkId' is set
            if (linkId == null)
                throw new ApiException(400, "Missing required parameter 'linkId' when calling PdfApi->PutLinkAnnotation");
            // verify the required parameter 'link' is set
            if (link == null)
                throw new ApiException(400, "Missing required parameter 'link' when calling PdfApi->PutLinkAnnotation");

            var localVarPath = "/pdf/{name}/links/{linkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (linkId != null) localVarPathParams.Add("linkId", ApiClient.ParameterToString(linkId)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (link != null && link.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(link); // http body (model) parameter
            }
            else
            {
                localVarPostBody = link; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutLinkAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LinkAnnotationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LinkAnnotationResponse) ApiClient.Deserialize(localVarResponse, typeof(LinkAnnotationResponse)));
        }

        /// <summary>
        /// Replace document page link annotations 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="linkId">The link ID.</param>
        /// <param name="link">Link anotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of LinkAnnotationResponse</returns>
        public async System.Threading.Tasks.Task<LinkAnnotationResponse> PutLinkAnnotationAsync (string name, string linkId, LinkAnnotation link, string storage = null, string folder = null)
        {
             ApiResponse<LinkAnnotationResponse> localVarResponse = await PutLinkAnnotationAsyncWithHttpInfo(name, linkId, link, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replace document page link annotations 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="linkId">The link ID.</param>
        /// <param name="link">Link anotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (LinkAnnotationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LinkAnnotationResponse>> PutLinkAnnotationAsyncWithHttpInfo (string name, string linkId, LinkAnnotation link, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutLinkAnnotation");
            // verify the required parameter 'linkId' is set
            if (linkId == null)
                throw new ApiException(400, "Missing required parameter 'linkId' when calling PdfApi->PutLinkAnnotation");
            // verify the required parameter 'link' is set
            if (link == null)
                throw new ApiException(400, "Missing required parameter 'link' when calling PdfApi->PutLinkAnnotation");

            var localVarPath = "/pdf/{name}/links/{linkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (linkId != null) localVarPathParams.Add("linkId", ApiClient.ParameterToString(linkId)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (link != null && link.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(link); // http body (model) parameter
            }
            else
            {
                localVarPostBody = link; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutLinkAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LinkAnnotationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LinkAnnotationResponse) ApiClient.Deserialize(localVarResponse, typeof(LinkAnnotationResponse)));
        }

        /// <summary>
        /// Merge a list of documents. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Resulting documen name.</param>
        /// <param name="mergeDocuments">with a list of documents. (optional)</param>
        /// <param name="storage">Resulting document storage. (optional)</param>
        /// <param name="folder">Resulting document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream PutMergeDocuments (string name, MergeDocuments mergeDocuments = null, string storage = null, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = PutMergeDocumentsWithHttpInfo(name, mergeDocuments, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Merge a list of documents. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Resulting documen name.</param>
        /// <param name="mergeDocuments">with a list of documents. (optional)</param>
        /// <param name="storage">Resulting document storage. (optional)</param>
        /// <param name="folder">Resulting document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > PutMergeDocumentsWithHttpInfo (string name, MergeDocuments mergeDocuments = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutMergeDocuments");

            var localVarPath = "/pdf/{name}/merge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (mergeDocuments != null && mergeDocuments.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(mergeDocuments); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mergeDocuments; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutMergeDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Merge a list of documents. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Resulting documen name.</param>
        /// <param name="mergeDocuments">with a list of documents. (optional)</param>
        /// <param name="storage">Resulting document storage. (optional)</param>
        /// <param name="folder">Resulting document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> PutMergeDocumentsAsync (string name, MergeDocuments mergeDocuments = null, string storage = null, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await PutMergeDocumentsAsyncWithHttpInfo(name, mergeDocuments, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Merge a list of documents. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Resulting documen name.</param>
        /// <param name="mergeDocuments">with a list of documents. (optional)</param>
        /// <param name="storage">Resulting document storage. (optional)</param>
        /// <param name="folder">Resulting document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> PutMergeDocumentsAsyncWithHttpInfo (string name, MergeDocuments mergeDocuments = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutMergeDocuments");

            var localVarPath = "/pdf/{name}/merge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (mergeDocuments != null && mergeDocuments.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(mergeDocuments); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mergeDocuments; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutMergeDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert MHT file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.mht)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PutMhtInStorageToPdf (string name, string srcPath, string dstFolder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PutMhtInStorageToPdfWithHttpInfo(name, srcPath, dstFolder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert MHT file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.mht)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PutMhtInStorageToPdfWithHttpInfo (string name, string srcPath, string dstFolder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutMhtInStorageToPdf");
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->PutMhtInStorageToPdf");

            var localVarPath = "/pdf/{name}/create/mht";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (dstFolder != null) localVarQueryParams.Add("dstFolder", ApiClient.ParameterToString(dstFolder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutMhtInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Convert MHT file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.mht)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PutMhtInStorageToPdfAsync (string name, string srcPath, string dstFolder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PutMhtInStorageToPdfAsyncWithHttpInfo(name, srcPath, dstFolder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert MHT file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.mht)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutMhtInStorageToPdfAsyncWithHttpInfo (string name, string srcPath, string dstFolder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutMhtInStorageToPdf");
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->PutMhtInStorageToPdf");

            var localVarPath = "/pdf/{name}/create/mht";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (dstFolder != null) localVarQueryParams.Add("dstFolder", ApiClient.ParameterToString(dstFolder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutMhtInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Add page stamp. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="stamp">with data.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PutPageAddStamp (string name, int? pageNumber, Stamp stamp, string storage = null, string folder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PutPageAddStampWithHttpInfo(name, pageNumber, stamp, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add page stamp. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="stamp">with data.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PutPageAddStampWithHttpInfo (string name, int? pageNumber, Stamp stamp, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPageAddStamp");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PutPageAddStamp");
            // verify the required parameter 'stamp' is set
            if (stamp == null)
                throw new ApiException(400, "Missing required parameter 'stamp' when calling PdfApi->PutPageAddStamp");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/stamp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (stamp != null && stamp.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(stamp); // http body (model) parameter
            }
            else
            {
                localVarPostBody = stamp; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPageAddStamp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Add page stamp. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="stamp">with data.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PutPageAddStampAsync (string name, int? pageNumber, Stamp stamp, string storage = null, string folder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PutPageAddStampAsyncWithHttpInfo(name, pageNumber, stamp, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add page stamp. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="stamp">with data.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPageAddStampAsyncWithHttpInfo (string name, int? pageNumber, Stamp stamp, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPageAddStamp");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PutPageAddStamp");
            // verify the required parameter 'stamp' is set
            if (stamp == null)
                throw new ApiException(400, "Missing required parameter 'stamp' when calling PdfApi->PutPageAddStamp");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/stamp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (stamp != null && stamp.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(stamp); // http body (model) parameter
            }
            else
            {
                localVarPostBody = stamp; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPageAddStamp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Convert document page to bmp image and upload resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PutPageConvertToBmp (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PutPageConvertToBmpWithHttpInfo(name, pageNumber, outPath, width, height, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert document page to bmp image and upload resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PutPageConvertToBmpWithHttpInfo (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPageConvertToBmp");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PutPageConvertToBmp");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPageConvertToBmp");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/bmp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPageConvertToBmp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Convert document page to bmp image and upload resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PutPageConvertToBmpAsync (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PutPageConvertToBmpAsyncWithHttpInfo(name, pageNumber, outPath, width, height, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert document page to bmp image and upload resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPageConvertToBmpAsyncWithHttpInfo (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPageConvertToBmp");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PutPageConvertToBmp");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPageConvertToBmp");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/bmp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPageConvertToBmp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Convert document page to emf image and upload resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PutPageConvertToEmf (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PutPageConvertToEmfWithHttpInfo(name, pageNumber, outPath, width, height, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert document page to emf image and upload resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PutPageConvertToEmfWithHttpInfo (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPageConvertToEmf");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PutPageConvertToEmf");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPageConvertToEmf");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/emf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPageConvertToEmf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Convert document page to emf image and upload resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PutPageConvertToEmfAsync (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PutPageConvertToEmfAsyncWithHttpInfo(name, pageNumber, outPath, width, height, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert document page to emf image and upload resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPageConvertToEmfAsyncWithHttpInfo (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPageConvertToEmf");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PutPageConvertToEmf");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPageConvertToEmf");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/emf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPageConvertToEmf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Convert document page to gif image and upload resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PutPageConvertToGif (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PutPageConvertToGifWithHttpInfo(name, pageNumber, outPath, width, height, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert document page to gif image and upload resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PutPageConvertToGifWithHttpInfo (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPageConvertToGif");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PutPageConvertToGif");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPageConvertToGif");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/gif";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPageConvertToGif", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Convert document page to gif image and upload resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PutPageConvertToGifAsync (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PutPageConvertToGifAsyncWithHttpInfo(name, pageNumber, outPath, width, height, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert document page to gif image and upload resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPageConvertToGifAsyncWithHttpInfo (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPageConvertToGif");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PutPageConvertToGif");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPageConvertToGif");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/gif";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPageConvertToGif", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Convert document page to Jpeg image and upload resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PutPageConvertToJpeg (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PutPageConvertToJpegWithHttpInfo(name, pageNumber, outPath, width, height, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert document page to Jpeg image and upload resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PutPageConvertToJpegWithHttpInfo (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPageConvertToJpeg");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PutPageConvertToJpeg");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPageConvertToJpeg");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/jpeg";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPageConvertToJpeg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Convert document page to Jpeg image and upload resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PutPageConvertToJpegAsync (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PutPageConvertToJpegAsyncWithHttpInfo(name, pageNumber, outPath, width, height, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert document page to Jpeg image and upload resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPageConvertToJpegAsyncWithHttpInfo (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPageConvertToJpeg");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PutPageConvertToJpeg");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPageConvertToJpeg");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/jpeg";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPageConvertToJpeg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Convert document page to png image and upload resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PutPageConvertToPng (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PutPageConvertToPngWithHttpInfo(name, pageNumber, outPath, width, height, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert document page to png image and upload resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PutPageConvertToPngWithHttpInfo (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPageConvertToPng");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PutPageConvertToPng");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPageConvertToPng");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/png";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPageConvertToPng", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Convert document page to png image and upload resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PutPageConvertToPngAsync (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PutPageConvertToPngAsyncWithHttpInfo(name, pageNumber, outPath, width, height, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert document page to png image and upload resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPageConvertToPngAsyncWithHttpInfo (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPageConvertToPng");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PutPageConvertToPng");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPageConvertToPng");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/png";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPageConvertToPng", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Convert document page to Tiff image and upload resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PutPageConvertToTiff (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PutPageConvertToTiffWithHttpInfo(name, pageNumber, outPath, width, height, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert document page to Tiff image and upload resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PutPageConvertToTiffWithHttpInfo (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPageConvertToTiff");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PutPageConvertToTiff");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPageConvertToTiff");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/tiff";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPageConvertToTiff", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Convert document page to Tiff image and upload resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PutPageConvertToTiffAsync (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PutPageConvertToTiffAsyncWithHttpInfo(name, pageNumber, outPath, width, height, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert document page to Tiff image and upload resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="outPath">The out path of result image.</param>
        /// <param name="width">The converted image width. (optional)</param>
        /// <param name="height">The converted image height. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPageConvertToTiffAsyncWithHttpInfo (string name, int? pageNumber, string outPath, int? width = null, int? height = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPageConvertToTiff");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling PdfApi->PutPageConvertToTiff");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPageConvertToTiff");

            var localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/tiff";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", ApiClient.ParameterToString(pageNumber)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPageConvertToTiff", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Convert PCL file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.pcl)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PutPclInStorageToPdf (string name, string srcPath, string dstFolder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PutPclInStorageToPdfWithHttpInfo(name, srcPath, dstFolder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert PCL file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.pcl)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PutPclInStorageToPdfWithHttpInfo (string name, string srcPath, string dstFolder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPclInStorageToPdf");
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->PutPclInStorageToPdf");

            var localVarPath = "/pdf/{name}/create/pcl";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (dstFolder != null) localVarQueryParams.Add("dstFolder", ApiClient.ParameterToString(dstFolder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPclInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Convert PCL file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.pcl)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PutPclInStorageToPdfAsync (string name, string srcPath, string dstFolder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PutPclInStorageToPdfAsyncWithHttpInfo(name, srcPath, dstFolder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert PCL file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.pcl)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPclInStorageToPdfAsyncWithHttpInfo (string name, string srcPath, string dstFolder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPclInStorageToPdf");
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->PutPclInStorageToPdf");

            var localVarPath = "/pdf/{name}/create/pcl";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (dstFolder != null) localVarQueryParams.Add("dstFolder", ApiClient.ParameterToString(dstFolder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPclInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (in request content) to DOC format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.doc)</param>
        /// <param name="addReturnToLineEnd">Add return to line end. (optional)</param>
        /// <param name="format">Allows to specify .doc or .docx file format. (optional)</param>
        /// <param name="imageResolutionX">Image resolution X. (optional)</param>
        /// <param name="imageResolutionY">Image resolution Y. (optional)</param>
        /// <param name="maxDistanceBetweenTextLines">Max distance between text lines. (optional)</param>
        /// <param name="mode">Allows to control how a PDF document is converted into a word processing document. (optional)</param>
        /// <param name="recognizeBullets">Recognize bullets. (optional)</param>
        /// <param name="relativeHorizontalProximity">Relative horizontal proximity. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PutPdfInRequestToDoc (string outPath, bool? addReturnToLineEnd = null, string format = null, int? imageResolutionX = null, int? imageResolutionY = null, double? maxDistanceBetweenTextLines = null, string mode = null, bool? recognizeBullets = null, double? relativeHorizontalProximity = null, string storage = null, System.IO.Stream file = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PutPdfInRequestToDocWithHttpInfo(outPath, addReturnToLineEnd, format, imageResolutionX, imageResolutionY, maxDistanceBetweenTextLines, mode, recognizeBullets, relativeHorizontalProximity, storage, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (in request content) to DOC format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.doc)</param>
        /// <param name="addReturnToLineEnd">Add return to line end. (optional)</param>
        /// <param name="format">Allows to specify .doc or .docx file format. (optional)</param>
        /// <param name="imageResolutionX">Image resolution X. (optional)</param>
        /// <param name="imageResolutionY">Image resolution Y. (optional)</param>
        /// <param name="maxDistanceBetweenTextLines">Max distance between text lines. (optional)</param>
        /// <param name="mode">Allows to control how a PDF document is converted into a word processing document. (optional)</param>
        /// <param name="recognizeBullets">Recognize bullets. (optional)</param>
        /// <param name="relativeHorizontalProximity">Relative horizontal proximity. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PutPdfInRequestToDocWithHttpInfo (string outPath, bool? addReturnToLineEnd = null, string format = null, int? imageResolutionX = null, int? imageResolutionY = null, double? maxDistanceBetweenTextLines = null, string mode = null, bool? recognizeBullets = null, double? relativeHorizontalProximity = null, string storage = null, System.IO.Stream file = null)
        {
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInRequestToDoc");

            var localVarPath = "/pdf/convert/doc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (addReturnToLineEnd != null) localVarQueryParams.Add("addReturnToLineEnd", ApiClient.ParameterToString(addReturnToLineEnd)); // query parameter
            if (format != null) localVarQueryParams.Add("format", ApiClient.ParameterToString(format)); // query parameter
            if (imageResolutionX != null) localVarQueryParams.Add("imageResolutionX", ApiClient.ParameterToString(imageResolutionX)); // query parameter
            if (imageResolutionY != null) localVarQueryParams.Add("imageResolutionY", ApiClient.ParameterToString(imageResolutionY)); // query parameter
            if (maxDistanceBetweenTextLines != null) localVarQueryParams.Add("maxDistanceBetweenTextLines", ApiClient.ParameterToString(maxDistanceBetweenTextLines)); // query parameter
            if (mode != null) localVarQueryParams.Add("mode", ApiClient.ParameterToString(mode)); // query parameter
            if (recognizeBullets != null) localVarQueryParams.Add("recognizeBullets", ApiClient.ParameterToString(recognizeBullets)); // query parameter
            if (relativeHorizontalProximity != null) localVarQueryParams.Add("relativeHorizontalProximity", ApiClient.ParameterToString(relativeHorizontalProximity)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (file != null) localVarFileParams.Add("file", ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInRequestToDoc", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (in request content) to DOC format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.doc)</param>
        /// <param name="addReturnToLineEnd">Add return to line end. (optional)</param>
        /// <param name="format">Allows to specify .doc or .docx file format. (optional)</param>
        /// <param name="imageResolutionX">Image resolution X. (optional)</param>
        /// <param name="imageResolutionY">Image resolution Y. (optional)</param>
        /// <param name="maxDistanceBetweenTextLines">Max distance between text lines. (optional)</param>
        /// <param name="mode">Allows to control how a PDF document is converted into a word processing document. (optional)</param>
        /// <param name="recognizeBullets">Recognize bullets. (optional)</param>
        /// <param name="relativeHorizontalProximity">Relative horizontal proximity. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PutPdfInRequestToDocAsync (string outPath, bool? addReturnToLineEnd = null, string format = null, int? imageResolutionX = null, int? imageResolutionY = null, double? maxDistanceBetweenTextLines = null, string mode = null, bool? recognizeBullets = null, double? relativeHorizontalProximity = null, string storage = null, System.IO.Stream file = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PutPdfInRequestToDocAsyncWithHttpInfo(outPath, addReturnToLineEnd, format, imageResolutionX, imageResolutionY, maxDistanceBetweenTextLines, mode, recognizeBullets, relativeHorizontalProximity, storage, file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (in request content) to DOC format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.doc)</param>
        /// <param name="addReturnToLineEnd">Add return to line end. (optional)</param>
        /// <param name="format">Allows to specify .doc or .docx file format. (optional)</param>
        /// <param name="imageResolutionX">Image resolution X. (optional)</param>
        /// <param name="imageResolutionY">Image resolution Y. (optional)</param>
        /// <param name="maxDistanceBetweenTextLines">Max distance between text lines. (optional)</param>
        /// <param name="mode">Allows to control how a PDF document is converted into a word processing document. (optional)</param>
        /// <param name="recognizeBullets">Recognize bullets. (optional)</param>
        /// <param name="relativeHorizontalProximity">Relative horizontal proximity. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPdfInRequestToDocAsyncWithHttpInfo (string outPath, bool? addReturnToLineEnd = null, string format = null, int? imageResolutionX = null, int? imageResolutionY = null, double? maxDistanceBetweenTextLines = null, string mode = null, bool? recognizeBullets = null, double? relativeHorizontalProximity = null, string storage = null, System.IO.Stream file = null)
        {
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInRequestToDoc");

            var localVarPath = "/pdf/convert/doc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (addReturnToLineEnd != null) localVarQueryParams.Add("addReturnToLineEnd", ApiClient.ParameterToString(addReturnToLineEnd)); // query parameter
            if (format != null) localVarQueryParams.Add("format", ApiClient.ParameterToString(format)); // query parameter
            if (imageResolutionX != null) localVarQueryParams.Add("imageResolutionX", ApiClient.ParameterToString(imageResolutionX)); // query parameter
            if (imageResolutionY != null) localVarQueryParams.Add("imageResolutionY", ApiClient.ParameterToString(imageResolutionY)); // query parameter
            if (maxDistanceBetweenTextLines != null) localVarQueryParams.Add("maxDistanceBetweenTextLines", ApiClient.ParameterToString(maxDistanceBetweenTextLines)); // query parameter
            if (mode != null) localVarQueryParams.Add("mode", ApiClient.ParameterToString(mode)); // query parameter
            if (recognizeBullets != null) localVarQueryParams.Add("recognizeBullets", ApiClient.ParameterToString(recognizeBullets)); // query parameter
            if (relativeHorizontalProximity != null) localVarQueryParams.Add("relativeHorizontalProximity", ApiClient.ParameterToString(relativeHorizontalProximity)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (file != null) localVarFileParams.Add("file", ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInRequestToDoc", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (in request content) to EPUB format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.epub)</param>
        /// <param name="contentRecognitionMode">?roperty tunes conversion for this or that desirable method of recognition of content. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PutPdfInRequestToEpub (string outPath, string contentRecognitionMode = null, string storage = null, System.IO.Stream file = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PutPdfInRequestToEpubWithHttpInfo(outPath, contentRecognitionMode, storage, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (in request content) to EPUB format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.epub)</param>
        /// <param name="contentRecognitionMode">?roperty tunes conversion for this or that desirable method of recognition of content. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PutPdfInRequestToEpubWithHttpInfo (string outPath, string contentRecognitionMode = null, string storage = null, System.IO.Stream file = null)
        {
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInRequestToEpub");

            var localVarPath = "/pdf/convert/epub";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (contentRecognitionMode != null) localVarQueryParams.Add("contentRecognitionMode", ApiClient.ParameterToString(contentRecognitionMode)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (file != null) localVarFileParams.Add("file", ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInRequestToEpub", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (in request content) to EPUB format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.epub)</param>
        /// <param name="contentRecognitionMode">?roperty tunes conversion for this or that desirable method of recognition of content. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PutPdfInRequestToEpubAsync (string outPath, string contentRecognitionMode = null, string storage = null, System.IO.Stream file = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PutPdfInRequestToEpubAsyncWithHttpInfo(outPath, contentRecognitionMode, storage, file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (in request content) to EPUB format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.epub)</param>
        /// <param name="contentRecognitionMode">?roperty tunes conversion for this or that desirable method of recognition of content. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPdfInRequestToEpubAsyncWithHttpInfo (string outPath, string contentRecognitionMode = null, string storage = null, System.IO.Stream file = null)
        {
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInRequestToEpub");

            var localVarPath = "/pdf/convert/epub";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (contentRecognitionMode != null) localVarQueryParams.Add("contentRecognitionMode", ApiClient.ParameterToString(contentRecognitionMode)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (file != null) localVarFileParams.Add("file", ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInRequestToEpub", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (in request content) to Html format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.html)</param>
        /// <param name="additionalMarginWidthInPoints">Defines width of margin that will be forcibly left around that output HTML-areas. (optional)</param>
        /// <param name="compressSvgGraphicsIfAny">The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)</param>
        /// <param name="convertMarkedContentToLayers">If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)</param>
        /// <param name="defaultFontName">Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)</param>
        /// <param name="documentType">Result document type. (optional)</param>
        /// <param name="fixedLayout">The value indicating whether that HTML is created as fixed layout. (optional)</param>
        /// <param name="imageResolution">Resolution for image rendering. (optional)</param>
        /// <param name="minimalLineWidth">This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)</param>
        /// <param name="preventGlyphsGrouping">This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)</param>
        /// <param name="splitCssIntoPages">When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)</param>
        /// <param name="splitIntoPages">The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)</param>
        /// <param name="useZOrder">If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)</param>
        /// <param name="antialiasingProcessing">The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)</param>
        /// <param name="cssClassNamesPrefix">When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)</param>
        /// <param name="explicitListOfSavedPages">With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)</param>
        /// <param name="fontEncodingStrategy">Defines encoding special rule to tune PDF decoding for current document. (optional)</param>
        /// <param name="fontSavingMode">Defines font saving mode that will be used during saving of PDF to desirable format. (optional)</param>
        /// <param name="htmlMarkupGenerationMode">Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)</param>
        /// <param name="lettersPositioningMethod">The mode of positioning of letters in words in result HTML. (optional)</param>
        /// <param name="pagesFlowTypeDependsOnViewersScreenSize">If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)</param>
        /// <param name="partsEmbeddingMode">It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)</param>
        /// <param name="rasterImagesSavingMode">Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)</param>
        /// <param name="removeEmptyAreasOnTopAndBottom">Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)</param>
        /// <param name="saveShadowedTextsAsTransparentTexts">Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)</param>
        /// <param name="saveTransparentTexts">Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)</param>
        /// <param name="specialFolderForAllImages">The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="specialFolderForSvgImages">The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="trySaveTextUnderliningAndStrikeoutingInCss">PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PutPdfInRequestToHtml (string outPath, int? additionalMarginWidthInPoints = null, bool? compressSvgGraphicsIfAny = null, bool? convertMarkedContentToLayers = null, string defaultFontName = null, string documentType = null, bool? fixedLayout = null, int? imageResolution = null, int? minimalLineWidth = null, bool? preventGlyphsGrouping = null, bool? splitCssIntoPages = null, bool? splitIntoPages = null, bool? useZOrder = null, string antialiasingProcessing = null, string cssClassNamesPrefix = null, List<int?> explicitListOfSavedPages = null, string fontEncodingStrategy = null, string fontSavingMode = null, string htmlMarkupGenerationMode = null, string lettersPositioningMethod = null, bool? pagesFlowTypeDependsOnViewersScreenSize = null, string partsEmbeddingMode = null, string rasterImagesSavingMode = null, bool? removeEmptyAreasOnTopAndBottom = null, bool? saveShadowedTextsAsTransparentTexts = null, bool? saveTransparentTexts = null, string specialFolderForAllImages = null, string specialFolderForSvgImages = null, bool? trySaveTextUnderliningAndStrikeoutingInCss = null, string storage = null, System.IO.Stream file = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PutPdfInRequestToHtmlWithHttpInfo(outPath, additionalMarginWidthInPoints, compressSvgGraphicsIfAny, convertMarkedContentToLayers, defaultFontName, documentType, fixedLayout, imageResolution, minimalLineWidth, preventGlyphsGrouping, splitCssIntoPages, splitIntoPages, useZOrder, antialiasingProcessing, cssClassNamesPrefix, explicitListOfSavedPages, fontEncodingStrategy, fontSavingMode, htmlMarkupGenerationMode, lettersPositioningMethod, pagesFlowTypeDependsOnViewersScreenSize, partsEmbeddingMode, rasterImagesSavingMode, removeEmptyAreasOnTopAndBottom, saveShadowedTextsAsTransparentTexts, saveTransparentTexts, specialFolderForAllImages, specialFolderForSvgImages, trySaveTextUnderliningAndStrikeoutingInCss, storage, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (in request content) to Html format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.html)</param>
        /// <param name="additionalMarginWidthInPoints">Defines width of margin that will be forcibly left around that output HTML-areas. (optional)</param>
        /// <param name="compressSvgGraphicsIfAny">The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)</param>
        /// <param name="convertMarkedContentToLayers">If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)</param>
        /// <param name="defaultFontName">Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)</param>
        /// <param name="documentType">Result document type. (optional)</param>
        /// <param name="fixedLayout">The value indicating whether that HTML is created as fixed layout. (optional)</param>
        /// <param name="imageResolution">Resolution for image rendering. (optional)</param>
        /// <param name="minimalLineWidth">This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)</param>
        /// <param name="preventGlyphsGrouping">This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)</param>
        /// <param name="splitCssIntoPages">When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)</param>
        /// <param name="splitIntoPages">The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)</param>
        /// <param name="useZOrder">If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)</param>
        /// <param name="antialiasingProcessing">The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)</param>
        /// <param name="cssClassNamesPrefix">When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)</param>
        /// <param name="explicitListOfSavedPages">With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)</param>
        /// <param name="fontEncodingStrategy">Defines encoding special rule to tune PDF decoding for current document. (optional)</param>
        /// <param name="fontSavingMode">Defines font saving mode that will be used during saving of PDF to desirable format. (optional)</param>
        /// <param name="htmlMarkupGenerationMode">Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)</param>
        /// <param name="lettersPositioningMethod">The mode of positioning of letters in words in result HTML. (optional)</param>
        /// <param name="pagesFlowTypeDependsOnViewersScreenSize">If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)</param>
        /// <param name="partsEmbeddingMode">It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)</param>
        /// <param name="rasterImagesSavingMode">Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)</param>
        /// <param name="removeEmptyAreasOnTopAndBottom">Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)</param>
        /// <param name="saveShadowedTextsAsTransparentTexts">Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)</param>
        /// <param name="saveTransparentTexts">Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)</param>
        /// <param name="specialFolderForAllImages">The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="specialFolderForSvgImages">The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="trySaveTextUnderliningAndStrikeoutingInCss">PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PutPdfInRequestToHtmlWithHttpInfo (string outPath, int? additionalMarginWidthInPoints = null, bool? compressSvgGraphicsIfAny = null, bool? convertMarkedContentToLayers = null, string defaultFontName = null, string documentType = null, bool? fixedLayout = null, int? imageResolution = null, int? minimalLineWidth = null, bool? preventGlyphsGrouping = null, bool? splitCssIntoPages = null, bool? splitIntoPages = null, bool? useZOrder = null, string antialiasingProcessing = null, string cssClassNamesPrefix = null, List<int?> explicitListOfSavedPages = null, string fontEncodingStrategy = null, string fontSavingMode = null, string htmlMarkupGenerationMode = null, string lettersPositioningMethod = null, bool? pagesFlowTypeDependsOnViewersScreenSize = null, string partsEmbeddingMode = null, string rasterImagesSavingMode = null, bool? removeEmptyAreasOnTopAndBottom = null, bool? saveShadowedTextsAsTransparentTexts = null, bool? saveTransparentTexts = null, string specialFolderForAllImages = null, string specialFolderForSvgImages = null, bool? trySaveTextUnderliningAndStrikeoutingInCss = null, string storage = null, System.IO.Stream file = null)
        {
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInRequestToHtml");

            var localVarPath = "/pdf/convert/html";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (additionalMarginWidthInPoints != null) localVarQueryParams.Add("additionalMarginWidthInPoints", ApiClient.ParameterToString(additionalMarginWidthInPoints)); // query parameter
            if (compressSvgGraphicsIfAny != null) localVarQueryParams.Add("compressSvgGraphicsIfAny", ApiClient.ParameterToString(compressSvgGraphicsIfAny)); // query parameter
            if (convertMarkedContentToLayers != null) localVarQueryParams.Add("convertMarkedContentToLayers", ApiClient.ParameterToString(convertMarkedContentToLayers)); // query parameter
            if (defaultFontName != null) localVarQueryParams.Add("defaultFontName", ApiClient.ParameterToString(defaultFontName)); // query parameter
            if (documentType != null) localVarQueryParams.Add("documentType", ApiClient.ParameterToString(documentType)); // query parameter
            if (fixedLayout != null) localVarQueryParams.Add("fixedLayout", ApiClient.ParameterToString(fixedLayout)); // query parameter
            if (imageResolution != null) localVarQueryParams.Add("imageResolution", ApiClient.ParameterToString(imageResolution)); // query parameter
            if (minimalLineWidth != null) localVarQueryParams.Add("minimalLineWidth", ApiClient.ParameterToString(minimalLineWidth)); // query parameter
            if (preventGlyphsGrouping != null) localVarQueryParams.Add("preventGlyphsGrouping", ApiClient.ParameterToString(preventGlyphsGrouping)); // query parameter
            if (splitCssIntoPages != null) localVarQueryParams.Add("splitCssIntoPages", ApiClient.ParameterToString(splitCssIntoPages)); // query parameter
            if (splitIntoPages != null) localVarQueryParams.Add("splitIntoPages", ApiClient.ParameterToString(splitIntoPages)); // query parameter
            if (useZOrder != null) localVarQueryParams.Add("useZOrder", ApiClient.ParameterToString(useZOrder)); // query parameter
            if (antialiasingProcessing != null) localVarQueryParams.Add("antialiasingProcessing", ApiClient.ParameterToString(antialiasingProcessing)); // query parameter
            if (cssClassNamesPrefix != null) localVarQueryParams.Add("cssClassNamesPrefix", ApiClient.ParameterToString(cssClassNamesPrefix)); // query parameter
            if (explicitListOfSavedPages != null) localVarQueryParams.Add("explicitListOfSavedPages", ApiClient.ParameterToString(explicitListOfSavedPages)); // query parameter
            if (fontEncodingStrategy != null) localVarQueryParams.Add("fontEncodingStrategy", ApiClient.ParameterToString(fontEncodingStrategy)); // query parameter
            if (fontSavingMode != null) localVarQueryParams.Add("fontSavingMode", ApiClient.ParameterToString(fontSavingMode)); // query parameter
            if (htmlMarkupGenerationMode != null) localVarQueryParams.Add("htmlMarkupGenerationMode", ApiClient.ParameterToString(htmlMarkupGenerationMode)); // query parameter
            if (lettersPositioningMethod != null) localVarQueryParams.Add("lettersPositioningMethod", ApiClient.ParameterToString(lettersPositioningMethod)); // query parameter
            if (pagesFlowTypeDependsOnViewersScreenSize != null) localVarQueryParams.Add("pagesFlowTypeDependsOnViewersScreenSize", ApiClient.ParameterToString(pagesFlowTypeDependsOnViewersScreenSize)); // query parameter
            if (partsEmbeddingMode != null) localVarQueryParams.Add("partsEmbeddingMode", ApiClient.ParameterToString(partsEmbeddingMode)); // query parameter
            if (rasterImagesSavingMode != null) localVarQueryParams.Add("rasterImagesSavingMode", ApiClient.ParameterToString(rasterImagesSavingMode)); // query parameter
            if (removeEmptyAreasOnTopAndBottom != null) localVarQueryParams.Add("removeEmptyAreasOnTopAndBottom", ApiClient.ParameterToString(removeEmptyAreasOnTopAndBottom)); // query parameter
            if (saveShadowedTextsAsTransparentTexts != null) localVarQueryParams.Add("saveShadowedTextsAsTransparentTexts", ApiClient.ParameterToString(saveShadowedTextsAsTransparentTexts)); // query parameter
            if (saveTransparentTexts != null) localVarQueryParams.Add("saveTransparentTexts", ApiClient.ParameterToString(saveTransparentTexts)); // query parameter
            if (specialFolderForAllImages != null) localVarQueryParams.Add("specialFolderForAllImages", ApiClient.ParameterToString(specialFolderForAllImages)); // query parameter
            if (specialFolderForSvgImages != null) localVarQueryParams.Add("specialFolderForSvgImages", ApiClient.ParameterToString(specialFolderForSvgImages)); // query parameter
            if (trySaveTextUnderliningAndStrikeoutingInCss != null) localVarQueryParams.Add("trySaveTextUnderliningAndStrikeoutingInCss", ApiClient.ParameterToString(trySaveTextUnderliningAndStrikeoutingInCss)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (file != null) localVarFileParams.Add("file", ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInRequestToHtml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (in request content) to Html format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.html)</param>
        /// <param name="additionalMarginWidthInPoints">Defines width of margin that will be forcibly left around that output HTML-areas. (optional)</param>
        /// <param name="compressSvgGraphicsIfAny">The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)</param>
        /// <param name="convertMarkedContentToLayers">If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)</param>
        /// <param name="defaultFontName">Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)</param>
        /// <param name="documentType">Result document type. (optional)</param>
        /// <param name="fixedLayout">The value indicating whether that HTML is created as fixed layout. (optional)</param>
        /// <param name="imageResolution">Resolution for image rendering. (optional)</param>
        /// <param name="minimalLineWidth">This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)</param>
        /// <param name="preventGlyphsGrouping">This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)</param>
        /// <param name="splitCssIntoPages">When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)</param>
        /// <param name="splitIntoPages">The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)</param>
        /// <param name="useZOrder">If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)</param>
        /// <param name="antialiasingProcessing">The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)</param>
        /// <param name="cssClassNamesPrefix">When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)</param>
        /// <param name="explicitListOfSavedPages">With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)</param>
        /// <param name="fontEncodingStrategy">Defines encoding special rule to tune PDF decoding for current document. (optional)</param>
        /// <param name="fontSavingMode">Defines font saving mode that will be used during saving of PDF to desirable format. (optional)</param>
        /// <param name="htmlMarkupGenerationMode">Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)</param>
        /// <param name="lettersPositioningMethod">The mode of positioning of letters in words in result HTML. (optional)</param>
        /// <param name="pagesFlowTypeDependsOnViewersScreenSize">If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)</param>
        /// <param name="partsEmbeddingMode">It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)</param>
        /// <param name="rasterImagesSavingMode">Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)</param>
        /// <param name="removeEmptyAreasOnTopAndBottom">Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)</param>
        /// <param name="saveShadowedTextsAsTransparentTexts">Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)</param>
        /// <param name="saveTransparentTexts">Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)</param>
        /// <param name="specialFolderForAllImages">The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="specialFolderForSvgImages">The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="trySaveTextUnderliningAndStrikeoutingInCss">PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PutPdfInRequestToHtmlAsync (string outPath, int? additionalMarginWidthInPoints = null, bool? compressSvgGraphicsIfAny = null, bool? convertMarkedContentToLayers = null, string defaultFontName = null, string documentType = null, bool? fixedLayout = null, int? imageResolution = null, int? minimalLineWidth = null, bool? preventGlyphsGrouping = null, bool? splitCssIntoPages = null, bool? splitIntoPages = null, bool? useZOrder = null, string antialiasingProcessing = null, string cssClassNamesPrefix = null, List<int?> explicitListOfSavedPages = null, string fontEncodingStrategy = null, string fontSavingMode = null, string htmlMarkupGenerationMode = null, string lettersPositioningMethod = null, bool? pagesFlowTypeDependsOnViewersScreenSize = null, string partsEmbeddingMode = null, string rasterImagesSavingMode = null, bool? removeEmptyAreasOnTopAndBottom = null, bool? saveShadowedTextsAsTransparentTexts = null, bool? saveTransparentTexts = null, string specialFolderForAllImages = null, string specialFolderForSvgImages = null, bool? trySaveTextUnderliningAndStrikeoutingInCss = null, string storage = null, System.IO.Stream file = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PutPdfInRequestToHtmlAsyncWithHttpInfo(outPath, additionalMarginWidthInPoints, compressSvgGraphicsIfAny, convertMarkedContentToLayers, defaultFontName, documentType, fixedLayout, imageResolution, minimalLineWidth, preventGlyphsGrouping, splitCssIntoPages, splitIntoPages, useZOrder, antialiasingProcessing, cssClassNamesPrefix, explicitListOfSavedPages, fontEncodingStrategy, fontSavingMode, htmlMarkupGenerationMode, lettersPositioningMethod, pagesFlowTypeDependsOnViewersScreenSize, partsEmbeddingMode, rasterImagesSavingMode, removeEmptyAreasOnTopAndBottom, saveShadowedTextsAsTransparentTexts, saveTransparentTexts, specialFolderForAllImages, specialFolderForSvgImages, trySaveTextUnderliningAndStrikeoutingInCss, storage, file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (in request content) to Html format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.html)</param>
        /// <param name="additionalMarginWidthInPoints">Defines width of margin that will be forcibly left around that output HTML-areas. (optional)</param>
        /// <param name="compressSvgGraphicsIfAny">The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)</param>
        /// <param name="convertMarkedContentToLayers">If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)</param>
        /// <param name="defaultFontName">Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)</param>
        /// <param name="documentType">Result document type. (optional)</param>
        /// <param name="fixedLayout">The value indicating whether that HTML is created as fixed layout. (optional)</param>
        /// <param name="imageResolution">Resolution for image rendering. (optional)</param>
        /// <param name="minimalLineWidth">This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)</param>
        /// <param name="preventGlyphsGrouping">This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)</param>
        /// <param name="splitCssIntoPages">When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)</param>
        /// <param name="splitIntoPages">The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)</param>
        /// <param name="useZOrder">If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)</param>
        /// <param name="antialiasingProcessing">The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)</param>
        /// <param name="cssClassNamesPrefix">When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)</param>
        /// <param name="explicitListOfSavedPages">With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)</param>
        /// <param name="fontEncodingStrategy">Defines encoding special rule to tune PDF decoding for current document. (optional)</param>
        /// <param name="fontSavingMode">Defines font saving mode that will be used during saving of PDF to desirable format. (optional)</param>
        /// <param name="htmlMarkupGenerationMode">Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)</param>
        /// <param name="lettersPositioningMethod">The mode of positioning of letters in words in result HTML. (optional)</param>
        /// <param name="pagesFlowTypeDependsOnViewersScreenSize">If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)</param>
        /// <param name="partsEmbeddingMode">It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)</param>
        /// <param name="rasterImagesSavingMode">Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)</param>
        /// <param name="removeEmptyAreasOnTopAndBottom">Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)</param>
        /// <param name="saveShadowedTextsAsTransparentTexts">Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)</param>
        /// <param name="saveTransparentTexts">Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)</param>
        /// <param name="specialFolderForAllImages">The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="specialFolderForSvgImages">The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="trySaveTextUnderliningAndStrikeoutingInCss">PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPdfInRequestToHtmlAsyncWithHttpInfo (string outPath, int? additionalMarginWidthInPoints = null, bool? compressSvgGraphicsIfAny = null, bool? convertMarkedContentToLayers = null, string defaultFontName = null, string documentType = null, bool? fixedLayout = null, int? imageResolution = null, int? minimalLineWidth = null, bool? preventGlyphsGrouping = null, bool? splitCssIntoPages = null, bool? splitIntoPages = null, bool? useZOrder = null, string antialiasingProcessing = null, string cssClassNamesPrefix = null, List<int?> explicitListOfSavedPages = null, string fontEncodingStrategy = null, string fontSavingMode = null, string htmlMarkupGenerationMode = null, string lettersPositioningMethod = null, bool? pagesFlowTypeDependsOnViewersScreenSize = null, string partsEmbeddingMode = null, string rasterImagesSavingMode = null, bool? removeEmptyAreasOnTopAndBottom = null, bool? saveShadowedTextsAsTransparentTexts = null, bool? saveTransparentTexts = null, string specialFolderForAllImages = null, string specialFolderForSvgImages = null, bool? trySaveTextUnderliningAndStrikeoutingInCss = null, string storage = null, System.IO.Stream file = null)
        {
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInRequestToHtml");

            var localVarPath = "/pdf/convert/html";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (additionalMarginWidthInPoints != null) localVarQueryParams.Add("additionalMarginWidthInPoints", ApiClient.ParameterToString(additionalMarginWidthInPoints)); // query parameter
            if (compressSvgGraphicsIfAny != null) localVarQueryParams.Add("compressSvgGraphicsIfAny", ApiClient.ParameterToString(compressSvgGraphicsIfAny)); // query parameter
            if (convertMarkedContentToLayers != null) localVarQueryParams.Add("convertMarkedContentToLayers", ApiClient.ParameterToString(convertMarkedContentToLayers)); // query parameter
            if (defaultFontName != null) localVarQueryParams.Add("defaultFontName", ApiClient.ParameterToString(defaultFontName)); // query parameter
            if (documentType != null) localVarQueryParams.Add("documentType", ApiClient.ParameterToString(documentType)); // query parameter
            if (fixedLayout != null) localVarQueryParams.Add("fixedLayout", ApiClient.ParameterToString(fixedLayout)); // query parameter
            if (imageResolution != null) localVarQueryParams.Add("imageResolution", ApiClient.ParameterToString(imageResolution)); // query parameter
            if (minimalLineWidth != null) localVarQueryParams.Add("minimalLineWidth", ApiClient.ParameterToString(minimalLineWidth)); // query parameter
            if (preventGlyphsGrouping != null) localVarQueryParams.Add("preventGlyphsGrouping", ApiClient.ParameterToString(preventGlyphsGrouping)); // query parameter
            if (splitCssIntoPages != null) localVarQueryParams.Add("splitCssIntoPages", ApiClient.ParameterToString(splitCssIntoPages)); // query parameter
            if (splitIntoPages != null) localVarQueryParams.Add("splitIntoPages", ApiClient.ParameterToString(splitIntoPages)); // query parameter
            if (useZOrder != null) localVarQueryParams.Add("useZOrder", ApiClient.ParameterToString(useZOrder)); // query parameter
            if (antialiasingProcessing != null) localVarQueryParams.Add("antialiasingProcessing", ApiClient.ParameterToString(antialiasingProcessing)); // query parameter
            if (cssClassNamesPrefix != null) localVarQueryParams.Add("cssClassNamesPrefix", ApiClient.ParameterToString(cssClassNamesPrefix)); // query parameter
            if (explicitListOfSavedPages != null) localVarQueryParams.Add("explicitListOfSavedPages", ApiClient.ParameterToString(explicitListOfSavedPages)); // query parameter
            if (fontEncodingStrategy != null) localVarQueryParams.Add("fontEncodingStrategy", ApiClient.ParameterToString(fontEncodingStrategy)); // query parameter
            if (fontSavingMode != null) localVarQueryParams.Add("fontSavingMode", ApiClient.ParameterToString(fontSavingMode)); // query parameter
            if (htmlMarkupGenerationMode != null) localVarQueryParams.Add("htmlMarkupGenerationMode", ApiClient.ParameterToString(htmlMarkupGenerationMode)); // query parameter
            if (lettersPositioningMethod != null) localVarQueryParams.Add("lettersPositioningMethod", ApiClient.ParameterToString(lettersPositioningMethod)); // query parameter
            if (pagesFlowTypeDependsOnViewersScreenSize != null) localVarQueryParams.Add("pagesFlowTypeDependsOnViewersScreenSize", ApiClient.ParameterToString(pagesFlowTypeDependsOnViewersScreenSize)); // query parameter
            if (partsEmbeddingMode != null) localVarQueryParams.Add("partsEmbeddingMode", ApiClient.ParameterToString(partsEmbeddingMode)); // query parameter
            if (rasterImagesSavingMode != null) localVarQueryParams.Add("rasterImagesSavingMode", ApiClient.ParameterToString(rasterImagesSavingMode)); // query parameter
            if (removeEmptyAreasOnTopAndBottom != null) localVarQueryParams.Add("removeEmptyAreasOnTopAndBottom", ApiClient.ParameterToString(removeEmptyAreasOnTopAndBottom)); // query parameter
            if (saveShadowedTextsAsTransparentTexts != null) localVarQueryParams.Add("saveShadowedTextsAsTransparentTexts", ApiClient.ParameterToString(saveShadowedTextsAsTransparentTexts)); // query parameter
            if (saveTransparentTexts != null) localVarQueryParams.Add("saveTransparentTexts", ApiClient.ParameterToString(saveTransparentTexts)); // query parameter
            if (specialFolderForAllImages != null) localVarQueryParams.Add("specialFolderForAllImages", ApiClient.ParameterToString(specialFolderForAllImages)); // query parameter
            if (specialFolderForSvgImages != null) localVarQueryParams.Add("specialFolderForSvgImages", ApiClient.ParameterToString(specialFolderForSvgImages)); // query parameter
            if (trySaveTextUnderliningAndStrikeoutingInCss != null) localVarQueryParams.Add("trySaveTextUnderliningAndStrikeoutingInCss", ApiClient.ParameterToString(trySaveTextUnderliningAndStrikeoutingInCss)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (file != null) localVarFileParams.Add("file", ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInRequestToHtml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (in request content) to LaTeX format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tex)</param>
        /// <param name="pagesCount">Pages count. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PutPdfInRequestToLaTeX (string outPath, int? pagesCount = null, string storage = null, System.IO.Stream file = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PutPdfInRequestToLaTeXWithHttpInfo(outPath, pagesCount, storage, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (in request content) to LaTeX format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tex)</param>
        /// <param name="pagesCount">Pages count. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PutPdfInRequestToLaTeXWithHttpInfo (string outPath, int? pagesCount = null, string storage = null, System.IO.Stream file = null)
        {
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInRequestToLaTeX");

            var localVarPath = "/pdf/convert/latex";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (pagesCount != null) localVarQueryParams.Add("pagesCount", ApiClient.ParameterToString(pagesCount)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (file != null) localVarFileParams.Add("file", ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInRequestToLaTeX", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (in request content) to LaTeX format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tex)</param>
        /// <param name="pagesCount">Pages count. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PutPdfInRequestToLaTeXAsync (string outPath, int? pagesCount = null, string storage = null, System.IO.Stream file = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PutPdfInRequestToLaTeXAsyncWithHttpInfo(outPath, pagesCount, storage, file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (in request content) to LaTeX format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tex)</param>
        /// <param name="pagesCount">Pages count. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPdfInRequestToLaTeXAsyncWithHttpInfo (string outPath, int? pagesCount = null, string storage = null, System.IO.Stream file = null)
        {
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInRequestToLaTeX");

            var localVarPath = "/pdf/convert/latex";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (pagesCount != null) localVarQueryParams.Add("pagesCount", ApiClient.ParameterToString(pagesCount)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (file != null) localVarFileParams.Add("file", ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInRequestToLaTeX", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (in request content) to MOBIXML format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.mobixml)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PutPdfInRequestToMobiXml (string outPath, string storage = null, System.IO.Stream file = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PutPdfInRequestToMobiXmlWithHttpInfo(outPath, storage, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (in request content) to MOBIXML format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.mobixml)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PutPdfInRequestToMobiXmlWithHttpInfo (string outPath, string storage = null, System.IO.Stream file = null)
        {
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInRequestToMobiXml");

            var localVarPath = "/pdf/convert/mobixml";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (file != null) localVarFileParams.Add("file", ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInRequestToMobiXml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (in request content) to MOBIXML format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.mobixml)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PutPdfInRequestToMobiXmlAsync (string outPath, string storage = null, System.IO.Stream file = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PutPdfInRequestToMobiXmlAsyncWithHttpInfo(outPath, storage, file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (in request content) to MOBIXML format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.mobixml)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPdfInRequestToMobiXmlAsyncWithHttpInfo (string outPath, string storage = null, System.IO.Stream file = null)
        {
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInRequestToMobiXml");

            var localVarPath = "/pdf/convert/mobixml";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (file != null) localVarFileParams.Add("file", ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInRequestToMobiXml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (in request content) to PdfA format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="type">Type of PdfA format.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PutPdfInRequestToPdfA (string outPath, string type, string storage = null, System.IO.Stream file = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PutPdfInRequestToPdfAWithHttpInfo(outPath, type, storage, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (in request content) to PdfA format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="type">Type of PdfA format.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PutPdfInRequestToPdfAWithHttpInfo (string outPath, string type, string storage = null, System.IO.Stream file = null)
        {
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInRequestToPdfA");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling PdfApi->PutPdfInRequestToPdfA");

            var localVarPath = "/pdf/convert/pdfa";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (type != null) localVarQueryParams.Add("type", ApiClient.ParameterToString(type)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (file != null) localVarFileParams.Add("file", ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInRequestToPdfA", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (in request content) to PdfA format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="type">Type of PdfA format.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PutPdfInRequestToPdfAAsync (string outPath, string type, string storage = null, System.IO.Stream file = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PutPdfInRequestToPdfAAsyncWithHttpInfo(outPath, type, storage, file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (in request content) to PdfA format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="type">Type of PdfA format.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPdfInRequestToPdfAAsyncWithHttpInfo (string outPath, string type, string storage = null, System.IO.Stream file = null)
        {
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInRequestToPdfA");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling PdfApi->PutPdfInRequestToPdfA");

            var localVarPath = "/pdf/convert/pdfa";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (type != null) localVarQueryParams.Add("type", ApiClient.ParameterToString(type)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (file != null) localVarFileParams.Add("file", ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInRequestToPdfA", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (in request content) to PPTX format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pptx)</param>
        /// <param name="separateImages">Separate images. (optional)</param>
        /// <param name="slidesAsImages">Slides as images. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PutPdfInRequestToPptx (string outPath, bool? separateImages = null, bool? slidesAsImages = null, string storage = null, System.IO.Stream file = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PutPdfInRequestToPptxWithHttpInfo(outPath, separateImages, slidesAsImages, storage, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (in request content) to PPTX format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pptx)</param>
        /// <param name="separateImages">Separate images. (optional)</param>
        /// <param name="slidesAsImages">Slides as images. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PutPdfInRequestToPptxWithHttpInfo (string outPath, bool? separateImages = null, bool? slidesAsImages = null, string storage = null, System.IO.Stream file = null)
        {
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInRequestToPptx");

            var localVarPath = "/pdf/convert/pptx";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (separateImages != null) localVarQueryParams.Add("separateImages", ApiClient.ParameterToString(separateImages)); // query parameter
            if (slidesAsImages != null) localVarQueryParams.Add("slidesAsImages", ApiClient.ParameterToString(slidesAsImages)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (file != null) localVarFileParams.Add("file", ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInRequestToPptx", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (in request content) to PPTX format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pptx)</param>
        /// <param name="separateImages">Separate images. (optional)</param>
        /// <param name="slidesAsImages">Slides as images. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PutPdfInRequestToPptxAsync (string outPath, bool? separateImages = null, bool? slidesAsImages = null, string storage = null, System.IO.Stream file = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PutPdfInRequestToPptxAsyncWithHttpInfo(outPath, separateImages, slidesAsImages, storage, file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (in request content) to PPTX format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pptx)</param>
        /// <param name="separateImages">Separate images. (optional)</param>
        /// <param name="slidesAsImages">Slides as images. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPdfInRequestToPptxAsyncWithHttpInfo (string outPath, bool? separateImages = null, bool? slidesAsImages = null, string storage = null, System.IO.Stream file = null)
        {
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInRequestToPptx");

            var localVarPath = "/pdf/convert/pptx";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (separateImages != null) localVarQueryParams.Add("separateImages", ApiClient.ParameterToString(separateImages)); // query parameter
            if (slidesAsImages != null) localVarQueryParams.Add("slidesAsImages", ApiClient.ParameterToString(slidesAsImages)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (file != null) localVarFileParams.Add("file", ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInRequestToPptx", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (in request content) to SVG format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.svg)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PutPdfInRequestToSvg (string outPath, string storage = null, System.IO.Stream file = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PutPdfInRequestToSvgWithHttpInfo(outPath, storage, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (in request content) to SVG format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.svg)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PutPdfInRequestToSvgWithHttpInfo (string outPath, string storage = null, System.IO.Stream file = null)
        {
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInRequestToSvg");

            var localVarPath = "/pdf/convert/svg";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (file != null) localVarFileParams.Add("file", ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInRequestToSvg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (in request content) to SVG format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.svg)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PutPdfInRequestToSvgAsync (string outPath, string storage = null, System.IO.Stream file = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PutPdfInRequestToSvgAsyncWithHttpInfo(outPath, storage, file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (in request content) to SVG format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.svg)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPdfInRequestToSvgAsyncWithHttpInfo (string outPath, string storage = null, System.IO.Stream file = null)
        {
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInRequestToSvg");

            var localVarPath = "/pdf/convert/svg";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (file != null) localVarFileParams.Add("file", ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInRequestToSvg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (in request content) to TIFF format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tiff)</param>
        /// <param name="brightness">Image brightness. (optional)</param>
        /// <param name="compression">Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)</param>
        /// <param name="colorDepth">Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)</param>
        /// <param name="leftMargin">Left image margin. (optional)</param>
        /// <param name="rightMargin">Right image margin. (optional)</param>
        /// <param name="topMargin">Top image margin. (optional)</param>
        /// <param name="bottomMargin">Bottom image margin. (optional)</param>
        /// <param name="orientation">Image orientation. Possible values are: None, Landscape, Portait. (optional)</param>
        /// <param name="skipBlankPages">Skip blank pages flag. (optional)</param>
        /// <param name="width">Image width. (optional)</param>
        /// <param name="height">Image height. (optional)</param>
        /// <param name="xResolution">Horizontal resolution. (optional)</param>
        /// <param name="yResolution">Vertical resolution. (optional)</param>
        /// <param name="pageIndex">Start page to export. (optional)</param>
        /// <param name="pageCount">Number of pages to export. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PutPdfInRequestToTiff (string outPath, double? brightness = null, string compression = null, string colorDepth = null, int? leftMargin = null, int? rightMargin = null, int? topMargin = null, int? bottomMargin = null, string orientation = null, bool? skipBlankPages = null, int? width = null, int? height = null, int? xResolution = null, int? yResolution = null, int? pageIndex = null, int? pageCount = null, string storage = null, System.IO.Stream file = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PutPdfInRequestToTiffWithHttpInfo(outPath, brightness, compression, colorDepth, leftMargin, rightMargin, topMargin, bottomMargin, orientation, skipBlankPages, width, height, xResolution, yResolution, pageIndex, pageCount, storage, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (in request content) to TIFF format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tiff)</param>
        /// <param name="brightness">Image brightness. (optional)</param>
        /// <param name="compression">Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)</param>
        /// <param name="colorDepth">Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)</param>
        /// <param name="leftMargin">Left image margin. (optional)</param>
        /// <param name="rightMargin">Right image margin. (optional)</param>
        /// <param name="topMargin">Top image margin. (optional)</param>
        /// <param name="bottomMargin">Bottom image margin. (optional)</param>
        /// <param name="orientation">Image orientation. Possible values are: None, Landscape, Portait. (optional)</param>
        /// <param name="skipBlankPages">Skip blank pages flag. (optional)</param>
        /// <param name="width">Image width. (optional)</param>
        /// <param name="height">Image height. (optional)</param>
        /// <param name="xResolution">Horizontal resolution. (optional)</param>
        /// <param name="yResolution">Vertical resolution. (optional)</param>
        /// <param name="pageIndex">Start page to export. (optional)</param>
        /// <param name="pageCount">Number of pages to export. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PutPdfInRequestToTiffWithHttpInfo (string outPath, double? brightness = null, string compression = null, string colorDepth = null, int? leftMargin = null, int? rightMargin = null, int? topMargin = null, int? bottomMargin = null, string orientation = null, bool? skipBlankPages = null, int? width = null, int? height = null, int? xResolution = null, int? yResolution = null, int? pageIndex = null, int? pageCount = null, string storage = null, System.IO.Stream file = null)
        {
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInRequestToTiff");

            var localVarPath = "/pdf/convert/tiff";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (brightness != null) localVarQueryParams.Add("brightness", ApiClient.ParameterToString(brightness)); // query parameter
            if (compression != null) localVarQueryParams.Add("compression", ApiClient.ParameterToString(compression)); // query parameter
            if (colorDepth != null) localVarQueryParams.Add("colorDepth", ApiClient.ParameterToString(colorDepth)); // query parameter
            if (leftMargin != null) localVarQueryParams.Add("leftMargin", ApiClient.ParameterToString(leftMargin)); // query parameter
            if (rightMargin != null) localVarQueryParams.Add("rightMargin", ApiClient.ParameterToString(rightMargin)); // query parameter
            if (topMargin != null) localVarQueryParams.Add("topMargin", ApiClient.ParameterToString(topMargin)); // query parameter
            if (bottomMargin != null) localVarQueryParams.Add("bottomMargin", ApiClient.ParameterToString(bottomMargin)); // query parameter
            if (orientation != null) localVarQueryParams.Add("orientation", ApiClient.ParameterToString(orientation)); // query parameter
            if (skipBlankPages != null) localVarQueryParams.Add("skipBlankPages", ApiClient.ParameterToString(skipBlankPages)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (xResolution != null) localVarQueryParams.Add("xResolution", ApiClient.ParameterToString(xResolution)); // query parameter
            if (yResolution != null) localVarQueryParams.Add("yResolution", ApiClient.ParameterToString(yResolution)); // query parameter
            if (pageIndex != null) localVarQueryParams.Add("pageIndex", ApiClient.ParameterToString(pageIndex)); // query parameter
            if (pageCount != null) localVarQueryParams.Add("pageCount", ApiClient.ParameterToString(pageCount)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (file != null) localVarFileParams.Add("file", ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInRequestToTiff", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (in request content) to TIFF format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tiff)</param>
        /// <param name="brightness">Image brightness. (optional)</param>
        /// <param name="compression">Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)</param>
        /// <param name="colorDepth">Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)</param>
        /// <param name="leftMargin">Left image margin. (optional)</param>
        /// <param name="rightMargin">Right image margin. (optional)</param>
        /// <param name="topMargin">Top image margin. (optional)</param>
        /// <param name="bottomMargin">Bottom image margin. (optional)</param>
        /// <param name="orientation">Image orientation. Possible values are: None, Landscape, Portait. (optional)</param>
        /// <param name="skipBlankPages">Skip blank pages flag. (optional)</param>
        /// <param name="width">Image width. (optional)</param>
        /// <param name="height">Image height. (optional)</param>
        /// <param name="xResolution">Horizontal resolution. (optional)</param>
        /// <param name="yResolution">Vertical resolution. (optional)</param>
        /// <param name="pageIndex">Start page to export. (optional)</param>
        /// <param name="pageCount">Number of pages to export. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PutPdfInRequestToTiffAsync (string outPath, double? brightness = null, string compression = null, string colorDepth = null, int? leftMargin = null, int? rightMargin = null, int? topMargin = null, int? bottomMargin = null, string orientation = null, bool? skipBlankPages = null, int? width = null, int? height = null, int? xResolution = null, int? yResolution = null, int? pageIndex = null, int? pageCount = null, string storage = null, System.IO.Stream file = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PutPdfInRequestToTiffAsyncWithHttpInfo(outPath, brightness, compression, colorDepth, leftMargin, rightMargin, topMargin, bottomMargin, orientation, skipBlankPages, width, height, xResolution, yResolution, pageIndex, pageCount, storage, file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (in request content) to TIFF format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tiff)</param>
        /// <param name="brightness">Image brightness. (optional)</param>
        /// <param name="compression">Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)</param>
        /// <param name="colorDepth">Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)</param>
        /// <param name="leftMargin">Left image margin. (optional)</param>
        /// <param name="rightMargin">Right image margin. (optional)</param>
        /// <param name="topMargin">Top image margin. (optional)</param>
        /// <param name="bottomMargin">Bottom image margin. (optional)</param>
        /// <param name="orientation">Image orientation. Possible values are: None, Landscape, Portait. (optional)</param>
        /// <param name="skipBlankPages">Skip blank pages flag. (optional)</param>
        /// <param name="width">Image width. (optional)</param>
        /// <param name="height">Image height. (optional)</param>
        /// <param name="xResolution">Horizontal resolution. (optional)</param>
        /// <param name="yResolution">Vertical resolution. (optional)</param>
        /// <param name="pageIndex">Start page to export. (optional)</param>
        /// <param name="pageCount">Number of pages to export. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPdfInRequestToTiffAsyncWithHttpInfo (string outPath, double? brightness = null, string compression = null, string colorDepth = null, int? leftMargin = null, int? rightMargin = null, int? topMargin = null, int? bottomMargin = null, string orientation = null, bool? skipBlankPages = null, int? width = null, int? height = null, int? xResolution = null, int? yResolution = null, int? pageIndex = null, int? pageCount = null, string storage = null, System.IO.Stream file = null)
        {
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInRequestToTiff");

            var localVarPath = "/pdf/convert/tiff";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (brightness != null) localVarQueryParams.Add("brightness", ApiClient.ParameterToString(brightness)); // query parameter
            if (compression != null) localVarQueryParams.Add("compression", ApiClient.ParameterToString(compression)); // query parameter
            if (colorDepth != null) localVarQueryParams.Add("colorDepth", ApiClient.ParameterToString(colorDepth)); // query parameter
            if (leftMargin != null) localVarQueryParams.Add("leftMargin", ApiClient.ParameterToString(leftMargin)); // query parameter
            if (rightMargin != null) localVarQueryParams.Add("rightMargin", ApiClient.ParameterToString(rightMargin)); // query parameter
            if (topMargin != null) localVarQueryParams.Add("topMargin", ApiClient.ParameterToString(topMargin)); // query parameter
            if (bottomMargin != null) localVarQueryParams.Add("bottomMargin", ApiClient.ParameterToString(bottomMargin)); // query parameter
            if (orientation != null) localVarQueryParams.Add("orientation", ApiClient.ParameterToString(orientation)); // query parameter
            if (skipBlankPages != null) localVarQueryParams.Add("skipBlankPages", ApiClient.ParameterToString(skipBlankPages)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (xResolution != null) localVarQueryParams.Add("xResolution", ApiClient.ParameterToString(xResolution)); // query parameter
            if (yResolution != null) localVarQueryParams.Add("yResolution", ApiClient.ParameterToString(yResolution)); // query parameter
            if (pageIndex != null) localVarQueryParams.Add("pageIndex", ApiClient.ParameterToString(pageIndex)); // query parameter
            if (pageCount != null) localVarQueryParams.Add("pageCount", ApiClient.ParameterToString(pageCount)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (file != null) localVarFileParams.Add("file", ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInRequestToTiff", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (in request content) to XLS format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xls)</param>
        /// <param name="insertBlankColumnAtFirst">Insert blank column at first (optional)</param>
        /// <param name="minimizeTheNumberOfWorksheets">Minimize the number of worksheets (optional)</param>
        /// <param name="scaleFactor">Scale factor (optional)</param>
        /// <param name="uniformWorksheets">Uniform worksheets (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PutPdfInRequestToXls (string outPath, bool? insertBlankColumnAtFirst = null, bool? minimizeTheNumberOfWorksheets = null, double? scaleFactor = null, bool? uniformWorksheets = null, string storage = null, System.IO.Stream file = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PutPdfInRequestToXlsWithHttpInfo(outPath, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, storage, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (in request content) to XLS format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xls)</param>
        /// <param name="insertBlankColumnAtFirst">Insert blank column at first (optional)</param>
        /// <param name="minimizeTheNumberOfWorksheets">Minimize the number of worksheets (optional)</param>
        /// <param name="scaleFactor">Scale factor (optional)</param>
        /// <param name="uniformWorksheets">Uniform worksheets (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PutPdfInRequestToXlsWithHttpInfo (string outPath, bool? insertBlankColumnAtFirst = null, bool? minimizeTheNumberOfWorksheets = null, double? scaleFactor = null, bool? uniformWorksheets = null, string storage = null, System.IO.Stream file = null)
        {
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInRequestToXls");

            var localVarPath = "/pdf/convert/xls";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (insertBlankColumnAtFirst != null) localVarQueryParams.Add("insertBlankColumnAtFirst", ApiClient.ParameterToString(insertBlankColumnAtFirst)); // query parameter
            if (minimizeTheNumberOfWorksheets != null) localVarQueryParams.Add("minimizeTheNumberOfWorksheets", ApiClient.ParameterToString(minimizeTheNumberOfWorksheets)); // query parameter
            if (scaleFactor != null) localVarQueryParams.Add("scaleFactor", ApiClient.ParameterToString(scaleFactor)); // query parameter
            if (uniformWorksheets != null) localVarQueryParams.Add("uniformWorksheets", ApiClient.ParameterToString(uniformWorksheets)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (file != null) localVarFileParams.Add("file", ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInRequestToXls", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (in request content) to XLS format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xls)</param>
        /// <param name="insertBlankColumnAtFirst">Insert blank column at first (optional)</param>
        /// <param name="minimizeTheNumberOfWorksheets">Minimize the number of worksheets (optional)</param>
        /// <param name="scaleFactor">Scale factor (optional)</param>
        /// <param name="uniformWorksheets">Uniform worksheets (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PutPdfInRequestToXlsAsync (string outPath, bool? insertBlankColumnAtFirst = null, bool? minimizeTheNumberOfWorksheets = null, double? scaleFactor = null, bool? uniformWorksheets = null, string storage = null, System.IO.Stream file = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PutPdfInRequestToXlsAsyncWithHttpInfo(outPath, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, storage, file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (in request content) to XLS format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xls)</param>
        /// <param name="insertBlankColumnAtFirst">Insert blank column at first (optional)</param>
        /// <param name="minimizeTheNumberOfWorksheets">Minimize the number of worksheets (optional)</param>
        /// <param name="scaleFactor">Scale factor (optional)</param>
        /// <param name="uniformWorksheets">Uniform worksheets (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPdfInRequestToXlsAsyncWithHttpInfo (string outPath, bool? insertBlankColumnAtFirst = null, bool? minimizeTheNumberOfWorksheets = null, double? scaleFactor = null, bool? uniformWorksheets = null, string storage = null, System.IO.Stream file = null)
        {
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInRequestToXls");

            var localVarPath = "/pdf/convert/xls";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (insertBlankColumnAtFirst != null) localVarQueryParams.Add("insertBlankColumnAtFirst", ApiClient.ParameterToString(insertBlankColumnAtFirst)); // query parameter
            if (minimizeTheNumberOfWorksheets != null) localVarQueryParams.Add("minimizeTheNumberOfWorksheets", ApiClient.ParameterToString(minimizeTheNumberOfWorksheets)); // query parameter
            if (scaleFactor != null) localVarQueryParams.Add("scaleFactor", ApiClient.ParameterToString(scaleFactor)); // query parameter
            if (uniformWorksheets != null) localVarQueryParams.Add("uniformWorksheets", ApiClient.ParameterToString(uniformWorksheets)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (file != null) localVarFileParams.Add("file", ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInRequestToXls", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (in request content) to XML format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xml)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PutPdfInRequestToXml (string outPath, string storage = null, System.IO.Stream file = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PutPdfInRequestToXmlWithHttpInfo(outPath, storage, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (in request content) to XML format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xml)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PutPdfInRequestToXmlWithHttpInfo (string outPath, string storage = null, System.IO.Stream file = null)
        {
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInRequestToXml");

            var localVarPath = "/pdf/convert/xml";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (file != null) localVarFileParams.Add("file", ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInRequestToXml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (in request content) to XML format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xml)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PutPdfInRequestToXmlAsync (string outPath, string storage = null, System.IO.Stream file = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PutPdfInRequestToXmlAsyncWithHttpInfo(outPath, storage, file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (in request content) to XML format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xml)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPdfInRequestToXmlAsyncWithHttpInfo (string outPath, string storage = null, System.IO.Stream file = null)
        {
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInRequestToXml");

            var localVarPath = "/pdf/convert/xml";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (file != null) localVarFileParams.Add("file", ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInRequestToXml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (in request content) to XPS format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xps)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PutPdfInRequestToXps (string outPath, string storage = null, System.IO.Stream file = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PutPdfInRequestToXpsWithHttpInfo(outPath, storage, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (in request content) to XPS format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xps)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PutPdfInRequestToXpsWithHttpInfo (string outPath, string storage = null, System.IO.Stream file = null)
        {
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInRequestToXps");

            var localVarPath = "/pdf/convert/xps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (file != null) localVarFileParams.Add("file", ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInRequestToXps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (in request content) to XPS format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xps)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PutPdfInRequestToXpsAsync (string outPath, string storage = null, System.IO.Stream file = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PutPdfInRequestToXpsAsyncWithHttpInfo(outPath, storage, file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (in request content) to XPS format and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xps)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPdfInRequestToXpsAsyncWithHttpInfo (string outPath, string storage = null, System.IO.Stream file = null)
        {
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInRequestToXps");

            var localVarPath = "/pdf/convert/xps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (file != null) localVarFileParams.Add("file", ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInRequestToXps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to DOC format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.doc)</param>
        /// <param name="addReturnToLineEnd">Add return to line end. (optional)</param>
        /// <param name="format">Allows to specify .doc or .docx file format. (optional)</param>
        /// <param name="imageResolutionX">Image resolution X. (optional)</param>
        /// <param name="imageResolutionY">Image resolution Y. (optional)</param>
        /// <param name="maxDistanceBetweenTextLines">Max distance between text lines. (optional)</param>
        /// <param name="mode">Allows to control how a PDF document is converted into a word processing document. (optional)</param>
        /// <param name="recognizeBullets">Recognize bullets. (optional)</param>
        /// <param name="relativeHorizontalProximity">Relative horizontal proximity. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PutPdfInStorageToDoc (string name, string outPath, bool? addReturnToLineEnd = null, string format = null, int? imageResolutionX = null, int? imageResolutionY = null, double? maxDistanceBetweenTextLines = null, string mode = null, bool? recognizeBullets = null, double? relativeHorizontalProximity = null, string folder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PutPdfInStorageToDocWithHttpInfo(name, outPath, addReturnToLineEnd, format, imageResolutionX, imageResolutionY, maxDistanceBetweenTextLines, mode, recognizeBullets, relativeHorizontalProximity, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (located on storage) to DOC format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.doc)</param>
        /// <param name="addReturnToLineEnd">Add return to line end. (optional)</param>
        /// <param name="format">Allows to specify .doc or .docx file format. (optional)</param>
        /// <param name="imageResolutionX">Image resolution X. (optional)</param>
        /// <param name="imageResolutionY">Image resolution Y. (optional)</param>
        /// <param name="maxDistanceBetweenTextLines">Max distance between text lines. (optional)</param>
        /// <param name="mode">Allows to control how a PDF document is converted into a word processing document. (optional)</param>
        /// <param name="recognizeBullets">Recognize bullets. (optional)</param>
        /// <param name="relativeHorizontalProximity">Relative horizontal proximity. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PutPdfInStorageToDocWithHttpInfo (string name, string outPath, bool? addReturnToLineEnd = null, string format = null, int? imageResolutionX = null, int? imageResolutionY = null, double? maxDistanceBetweenTextLines = null, string mode = null, bool? recognizeBullets = null, double? relativeHorizontalProximity = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPdfInStorageToDoc");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInStorageToDoc");

            var localVarPath = "/pdf/{name}/convert/doc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (addReturnToLineEnd != null) localVarQueryParams.Add("addReturnToLineEnd", ApiClient.ParameterToString(addReturnToLineEnd)); // query parameter
            if (format != null) localVarQueryParams.Add("format", ApiClient.ParameterToString(format)); // query parameter
            if (imageResolutionX != null) localVarQueryParams.Add("imageResolutionX", ApiClient.ParameterToString(imageResolutionX)); // query parameter
            if (imageResolutionY != null) localVarQueryParams.Add("imageResolutionY", ApiClient.ParameterToString(imageResolutionY)); // query parameter
            if (maxDistanceBetweenTextLines != null) localVarQueryParams.Add("maxDistanceBetweenTextLines", ApiClient.ParameterToString(maxDistanceBetweenTextLines)); // query parameter
            if (mode != null) localVarQueryParams.Add("mode", ApiClient.ParameterToString(mode)); // query parameter
            if (recognizeBullets != null) localVarQueryParams.Add("recognizeBullets", ApiClient.ParameterToString(recognizeBullets)); // query parameter
            if (relativeHorizontalProximity != null) localVarQueryParams.Add("relativeHorizontalProximity", ApiClient.ParameterToString(relativeHorizontalProximity)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInStorageToDoc", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to DOC format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.doc)</param>
        /// <param name="addReturnToLineEnd">Add return to line end. (optional)</param>
        /// <param name="format">Allows to specify .doc or .docx file format. (optional)</param>
        /// <param name="imageResolutionX">Image resolution X. (optional)</param>
        /// <param name="imageResolutionY">Image resolution Y. (optional)</param>
        /// <param name="maxDistanceBetweenTextLines">Max distance between text lines. (optional)</param>
        /// <param name="mode">Allows to control how a PDF document is converted into a word processing document. (optional)</param>
        /// <param name="recognizeBullets">Recognize bullets. (optional)</param>
        /// <param name="relativeHorizontalProximity">Relative horizontal proximity. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PutPdfInStorageToDocAsync (string name, string outPath, bool? addReturnToLineEnd = null, string format = null, int? imageResolutionX = null, int? imageResolutionY = null, double? maxDistanceBetweenTextLines = null, string mode = null, bool? recognizeBullets = null, double? relativeHorizontalProximity = null, string folder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PutPdfInStorageToDocAsyncWithHttpInfo(name, outPath, addReturnToLineEnd, format, imageResolutionX, imageResolutionY, maxDistanceBetweenTextLines, mode, recognizeBullets, relativeHorizontalProximity, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (located on storage) to DOC format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.doc)</param>
        /// <param name="addReturnToLineEnd">Add return to line end. (optional)</param>
        /// <param name="format">Allows to specify .doc or .docx file format. (optional)</param>
        /// <param name="imageResolutionX">Image resolution X. (optional)</param>
        /// <param name="imageResolutionY">Image resolution Y. (optional)</param>
        /// <param name="maxDistanceBetweenTextLines">Max distance between text lines. (optional)</param>
        /// <param name="mode">Allows to control how a PDF document is converted into a word processing document. (optional)</param>
        /// <param name="recognizeBullets">Recognize bullets. (optional)</param>
        /// <param name="relativeHorizontalProximity">Relative horizontal proximity. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPdfInStorageToDocAsyncWithHttpInfo (string name, string outPath, bool? addReturnToLineEnd = null, string format = null, int? imageResolutionX = null, int? imageResolutionY = null, double? maxDistanceBetweenTextLines = null, string mode = null, bool? recognizeBullets = null, double? relativeHorizontalProximity = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPdfInStorageToDoc");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInStorageToDoc");

            var localVarPath = "/pdf/{name}/convert/doc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (addReturnToLineEnd != null) localVarQueryParams.Add("addReturnToLineEnd", ApiClient.ParameterToString(addReturnToLineEnd)); // query parameter
            if (format != null) localVarQueryParams.Add("format", ApiClient.ParameterToString(format)); // query parameter
            if (imageResolutionX != null) localVarQueryParams.Add("imageResolutionX", ApiClient.ParameterToString(imageResolutionX)); // query parameter
            if (imageResolutionY != null) localVarQueryParams.Add("imageResolutionY", ApiClient.ParameterToString(imageResolutionY)); // query parameter
            if (maxDistanceBetweenTextLines != null) localVarQueryParams.Add("maxDistanceBetweenTextLines", ApiClient.ParameterToString(maxDistanceBetweenTextLines)); // query parameter
            if (mode != null) localVarQueryParams.Add("mode", ApiClient.ParameterToString(mode)); // query parameter
            if (recognizeBullets != null) localVarQueryParams.Add("recognizeBullets", ApiClient.ParameterToString(recognizeBullets)); // query parameter
            if (relativeHorizontalProximity != null) localVarQueryParams.Add("relativeHorizontalProximity", ApiClient.ParameterToString(relativeHorizontalProximity)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInStorageToDoc", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to EPUB format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.epub)</param>
        /// <param name="contentRecognitionMode">?roperty tunes conversion for this or that desirable method of recognition of content. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PutPdfInStorageToEpub (string name, string outPath, string contentRecognitionMode = null, string folder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PutPdfInStorageToEpubWithHttpInfo(name, outPath, contentRecognitionMode, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (located on storage) to EPUB format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.epub)</param>
        /// <param name="contentRecognitionMode">?roperty tunes conversion for this or that desirable method of recognition of content. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PutPdfInStorageToEpubWithHttpInfo (string name, string outPath, string contentRecognitionMode = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPdfInStorageToEpub");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInStorageToEpub");

            var localVarPath = "/pdf/{name}/convert/epub";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (contentRecognitionMode != null) localVarQueryParams.Add("contentRecognitionMode", ApiClient.ParameterToString(contentRecognitionMode)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInStorageToEpub", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to EPUB format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.epub)</param>
        /// <param name="contentRecognitionMode">?roperty tunes conversion for this or that desirable method of recognition of content. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PutPdfInStorageToEpubAsync (string name, string outPath, string contentRecognitionMode = null, string folder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PutPdfInStorageToEpubAsyncWithHttpInfo(name, outPath, contentRecognitionMode, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (located on storage) to EPUB format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.epub)</param>
        /// <param name="contentRecognitionMode">?roperty tunes conversion for this or that desirable method of recognition of content. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPdfInStorageToEpubAsyncWithHttpInfo (string name, string outPath, string contentRecognitionMode = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPdfInStorageToEpub");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInStorageToEpub");

            var localVarPath = "/pdf/{name}/convert/epub";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (contentRecognitionMode != null) localVarQueryParams.Add("contentRecognitionMode", ApiClient.ParameterToString(contentRecognitionMode)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInStorageToEpub", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to Html format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.html)</param>
        /// <param name="additionalMarginWidthInPoints">Defines width of margin that will be forcibly left around that output HTML-areas. (optional)</param>
        /// <param name="compressSvgGraphicsIfAny">The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)</param>
        /// <param name="convertMarkedContentToLayers">If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)</param>
        /// <param name="defaultFontName">Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)</param>
        /// <param name="documentType">Result document type. (optional)</param>
        /// <param name="fixedLayout">The value indicating whether that HTML is created as fixed layout. (optional)</param>
        /// <param name="imageResolution">Resolution for image rendering. (optional)</param>
        /// <param name="minimalLineWidth">This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)</param>
        /// <param name="preventGlyphsGrouping">This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)</param>
        /// <param name="splitCssIntoPages">When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)</param>
        /// <param name="splitIntoPages">The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)</param>
        /// <param name="useZOrder">If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)</param>
        /// <param name="antialiasingProcessing">The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)</param>
        /// <param name="cssClassNamesPrefix">When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)</param>
        /// <param name="explicitListOfSavedPages">With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)</param>
        /// <param name="fontEncodingStrategy">Defines encoding special rule to tune PDF decoding for current document. (optional)</param>
        /// <param name="fontSavingMode">Defines font saving mode that will be used during saving of PDF to desirable format. (optional)</param>
        /// <param name="htmlMarkupGenerationMode">Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)</param>
        /// <param name="lettersPositioningMethod">The mode of positioning of letters in words in result HTML. (optional)</param>
        /// <param name="pagesFlowTypeDependsOnViewersScreenSize">If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)</param>
        /// <param name="partsEmbeddingMode">It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)</param>
        /// <param name="rasterImagesSavingMode">Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)</param>
        /// <param name="removeEmptyAreasOnTopAndBottom">Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)</param>
        /// <param name="saveShadowedTextsAsTransparentTexts">Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)</param>
        /// <param name="saveTransparentTexts">Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)</param>
        /// <param name="specialFolderForAllImages">The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="specialFolderForSvgImages">The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="trySaveTextUnderliningAndStrikeoutingInCss">PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PutPdfInStorageToHtml (string name, string outPath, int? additionalMarginWidthInPoints = null, bool? compressSvgGraphicsIfAny = null, bool? convertMarkedContentToLayers = null, string defaultFontName = null, string documentType = null, bool? fixedLayout = null, int? imageResolution = null, int? minimalLineWidth = null, bool? preventGlyphsGrouping = null, bool? splitCssIntoPages = null, bool? splitIntoPages = null, bool? useZOrder = null, string antialiasingProcessing = null, string cssClassNamesPrefix = null, List<int?> explicitListOfSavedPages = null, string fontEncodingStrategy = null, string fontSavingMode = null, string htmlMarkupGenerationMode = null, string lettersPositioningMethod = null, bool? pagesFlowTypeDependsOnViewersScreenSize = null, string partsEmbeddingMode = null, string rasterImagesSavingMode = null, bool? removeEmptyAreasOnTopAndBottom = null, bool? saveShadowedTextsAsTransparentTexts = null, bool? saveTransparentTexts = null, string specialFolderForAllImages = null, string specialFolderForSvgImages = null, bool? trySaveTextUnderliningAndStrikeoutingInCss = null, string folder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PutPdfInStorageToHtmlWithHttpInfo(name, outPath, additionalMarginWidthInPoints, compressSvgGraphicsIfAny, convertMarkedContentToLayers, defaultFontName, documentType, fixedLayout, imageResolution, minimalLineWidth, preventGlyphsGrouping, splitCssIntoPages, splitIntoPages, useZOrder, antialiasingProcessing, cssClassNamesPrefix, explicitListOfSavedPages, fontEncodingStrategy, fontSavingMode, htmlMarkupGenerationMode, lettersPositioningMethod, pagesFlowTypeDependsOnViewersScreenSize, partsEmbeddingMode, rasterImagesSavingMode, removeEmptyAreasOnTopAndBottom, saveShadowedTextsAsTransparentTexts, saveTransparentTexts, specialFolderForAllImages, specialFolderForSvgImages, trySaveTextUnderliningAndStrikeoutingInCss, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (located on storage) to Html format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.html)</param>
        /// <param name="additionalMarginWidthInPoints">Defines width of margin that will be forcibly left around that output HTML-areas. (optional)</param>
        /// <param name="compressSvgGraphicsIfAny">The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)</param>
        /// <param name="convertMarkedContentToLayers">If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)</param>
        /// <param name="defaultFontName">Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)</param>
        /// <param name="documentType">Result document type. (optional)</param>
        /// <param name="fixedLayout">The value indicating whether that HTML is created as fixed layout. (optional)</param>
        /// <param name="imageResolution">Resolution for image rendering. (optional)</param>
        /// <param name="minimalLineWidth">This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)</param>
        /// <param name="preventGlyphsGrouping">This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)</param>
        /// <param name="splitCssIntoPages">When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)</param>
        /// <param name="splitIntoPages">The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)</param>
        /// <param name="useZOrder">If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)</param>
        /// <param name="antialiasingProcessing">The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)</param>
        /// <param name="cssClassNamesPrefix">When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)</param>
        /// <param name="explicitListOfSavedPages">With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)</param>
        /// <param name="fontEncodingStrategy">Defines encoding special rule to tune PDF decoding for current document. (optional)</param>
        /// <param name="fontSavingMode">Defines font saving mode that will be used during saving of PDF to desirable format. (optional)</param>
        /// <param name="htmlMarkupGenerationMode">Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)</param>
        /// <param name="lettersPositioningMethod">The mode of positioning of letters in words in result HTML. (optional)</param>
        /// <param name="pagesFlowTypeDependsOnViewersScreenSize">If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)</param>
        /// <param name="partsEmbeddingMode">It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)</param>
        /// <param name="rasterImagesSavingMode">Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)</param>
        /// <param name="removeEmptyAreasOnTopAndBottom">Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)</param>
        /// <param name="saveShadowedTextsAsTransparentTexts">Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)</param>
        /// <param name="saveTransparentTexts">Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)</param>
        /// <param name="specialFolderForAllImages">The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="specialFolderForSvgImages">The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="trySaveTextUnderliningAndStrikeoutingInCss">PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PutPdfInStorageToHtmlWithHttpInfo (string name, string outPath, int? additionalMarginWidthInPoints = null, bool? compressSvgGraphicsIfAny = null, bool? convertMarkedContentToLayers = null, string defaultFontName = null, string documentType = null, bool? fixedLayout = null, int? imageResolution = null, int? minimalLineWidth = null, bool? preventGlyphsGrouping = null, bool? splitCssIntoPages = null, bool? splitIntoPages = null, bool? useZOrder = null, string antialiasingProcessing = null, string cssClassNamesPrefix = null, List<int?> explicitListOfSavedPages = null, string fontEncodingStrategy = null, string fontSavingMode = null, string htmlMarkupGenerationMode = null, string lettersPositioningMethod = null, bool? pagesFlowTypeDependsOnViewersScreenSize = null, string partsEmbeddingMode = null, string rasterImagesSavingMode = null, bool? removeEmptyAreasOnTopAndBottom = null, bool? saveShadowedTextsAsTransparentTexts = null, bool? saveTransparentTexts = null, string specialFolderForAllImages = null, string specialFolderForSvgImages = null, bool? trySaveTextUnderliningAndStrikeoutingInCss = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPdfInStorageToHtml");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInStorageToHtml");

            var localVarPath = "/pdf/{name}/convert/html";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (additionalMarginWidthInPoints != null) localVarQueryParams.Add("additionalMarginWidthInPoints", ApiClient.ParameterToString(additionalMarginWidthInPoints)); // query parameter
            if (compressSvgGraphicsIfAny != null) localVarQueryParams.Add("compressSvgGraphicsIfAny", ApiClient.ParameterToString(compressSvgGraphicsIfAny)); // query parameter
            if (convertMarkedContentToLayers != null) localVarQueryParams.Add("convertMarkedContentToLayers", ApiClient.ParameterToString(convertMarkedContentToLayers)); // query parameter
            if (defaultFontName != null) localVarQueryParams.Add("defaultFontName", ApiClient.ParameterToString(defaultFontName)); // query parameter
            if (documentType != null) localVarQueryParams.Add("documentType", ApiClient.ParameterToString(documentType)); // query parameter
            if (fixedLayout != null) localVarQueryParams.Add("fixedLayout", ApiClient.ParameterToString(fixedLayout)); // query parameter
            if (imageResolution != null) localVarQueryParams.Add("imageResolution", ApiClient.ParameterToString(imageResolution)); // query parameter
            if (minimalLineWidth != null) localVarQueryParams.Add("minimalLineWidth", ApiClient.ParameterToString(minimalLineWidth)); // query parameter
            if (preventGlyphsGrouping != null) localVarQueryParams.Add("preventGlyphsGrouping", ApiClient.ParameterToString(preventGlyphsGrouping)); // query parameter
            if (splitCssIntoPages != null) localVarQueryParams.Add("splitCssIntoPages", ApiClient.ParameterToString(splitCssIntoPages)); // query parameter
            if (splitIntoPages != null) localVarQueryParams.Add("splitIntoPages", ApiClient.ParameterToString(splitIntoPages)); // query parameter
            if (useZOrder != null) localVarQueryParams.Add("useZOrder", ApiClient.ParameterToString(useZOrder)); // query parameter
            if (antialiasingProcessing != null) localVarQueryParams.Add("antialiasingProcessing", ApiClient.ParameterToString(antialiasingProcessing)); // query parameter
            if (cssClassNamesPrefix != null) localVarQueryParams.Add("cssClassNamesPrefix", ApiClient.ParameterToString(cssClassNamesPrefix)); // query parameter
            if (explicitListOfSavedPages != null) localVarQueryParams.Add("explicitListOfSavedPages", ApiClient.ParameterToString(explicitListOfSavedPages)); // query parameter
            if (fontEncodingStrategy != null) localVarQueryParams.Add("fontEncodingStrategy", ApiClient.ParameterToString(fontEncodingStrategy)); // query parameter
            if (fontSavingMode != null) localVarQueryParams.Add("fontSavingMode", ApiClient.ParameterToString(fontSavingMode)); // query parameter
            if (htmlMarkupGenerationMode != null) localVarQueryParams.Add("htmlMarkupGenerationMode", ApiClient.ParameterToString(htmlMarkupGenerationMode)); // query parameter
            if (lettersPositioningMethod != null) localVarQueryParams.Add("lettersPositioningMethod", ApiClient.ParameterToString(lettersPositioningMethod)); // query parameter
            if (pagesFlowTypeDependsOnViewersScreenSize != null) localVarQueryParams.Add("pagesFlowTypeDependsOnViewersScreenSize", ApiClient.ParameterToString(pagesFlowTypeDependsOnViewersScreenSize)); // query parameter
            if (partsEmbeddingMode != null) localVarQueryParams.Add("partsEmbeddingMode", ApiClient.ParameterToString(partsEmbeddingMode)); // query parameter
            if (rasterImagesSavingMode != null) localVarQueryParams.Add("rasterImagesSavingMode", ApiClient.ParameterToString(rasterImagesSavingMode)); // query parameter
            if (removeEmptyAreasOnTopAndBottom != null) localVarQueryParams.Add("removeEmptyAreasOnTopAndBottom", ApiClient.ParameterToString(removeEmptyAreasOnTopAndBottom)); // query parameter
            if (saveShadowedTextsAsTransparentTexts != null) localVarQueryParams.Add("saveShadowedTextsAsTransparentTexts", ApiClient.ParameterToString(saveShadowedTextsAsTransparentTexts)); // query parameter
            if (saveTransparentTexts != null) localVarQueryParams.Add("saveTransparentTexts", ApiClient.ParameterToString(saveTransparentTexts)); // query parameter
            if (specialFolderForAllImages != null) localVarQueryParams.Add("specialFolderForAllImages", ApiClient.ParameterToString(specialFolderForAllImages)); // query parameter
            if (specialFolderForSvgImages != null) localVarQueryParams.Add("specialFolderForSvgImages", ApiClient.ParameterToString(specialFolderForSvgImages)); // query parameter
            if (trySaveTextUnderliningAndStrikeoutingInCss != null) localVarQueryParams.Add("trySaveTextUnderliningAndStrikeoutingInCss", ApiClient.ParameterToString(trySaveTextUnderliningAndStrikeoutingInCss)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInStorageToHtml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to Html format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.html)</param>
        /// <param name="additionalMarginWidthInPoints">Defines width of margin that will be forcibly left around that output HTML-areas. (optional)</param>
        /// <param name="compressSvgGraphicsIfAny">The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)</param>
        /// <param name="convertMarkedContentToLayers">If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)</param>
        /// <param name="defaultFontName">Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)</param>
        /// <param name="documentType">Result document type. (optional)</param>
        /// <param name="fixedLayout">The value indicating whether that HTML is created as fixed layout. (optional)</param>
        /// <param name="imageResolution">Resolution for image rendering. (optional)</param>
        /// <param name="minimalLineWidth">This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)</param>
        /// <param name="preventGlyphsGrouping">This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)</param>
        /// <param name="splitCssIntoPages">When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)</param>
        /// <param name="splitIntoPages">The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)</param>
        /// <param name="useZOrder">If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)</param>
        /// <param name="antialiasingProcessing">The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)</param>
        /// <param name="cssClassNamesPrefix">When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)</param>
        /// <param name="explicitListOfSavedPages">With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)</param>
        /// <param name="fontEncodingStrategy">Defines encoding special rule to tune PDF decoding for current document. (optional)</param>
        /// <param name="fontSavingMode">Defines font saving mode that will be used during saving of PDF to desirable format. (optional)</param>
        /// <param name="htmlMarkupGenerationMode">Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)</param>
        /// <param name="lettersPositioningMethod">The mode of positioning of letters in words in result HTML. (optional)</param>
        /// <param name="pagesFlowTypeDependsOnViewersScreenSize">If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)</param>
        /// <param name="partsEmbeddingMode">It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)</param>
        /// <param name="rasterImagesSavingMode">Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)</param>
        /// <param name="removeEmptyAreasOnTopAndBottom">Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)</param>
        /// <param name="saveShadowedTextsAsTransparentTexts">Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)</param>
        /// <param name="saveTransparentTexts">Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)</param>
        /// <param name="specialFolderForAllImages">The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="specialFolderForSvgImages">The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="trySaveTextUnderliningAndStrikeoutingInCss">PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PutPdfInStorageToHtmlAsync (string name, string outPath, int? additionalMarginWidthInPoints = null, bool? compressSvgGraphicsIfAny = null, bool? convertMarkedContentToLayers = null, string defaultFontName = null, string documentType = null, bool? fixedLayout = null, int? imageResolution = null, int? minimalLineWidth = null, bool? preventGlyphsGrouping = null, bool? splitCssIntoPages = null, bool? splitIntoPages = null, bool? useZOrder = null, string antialiasingProcessing = null, string cssClassNamesPrefix = null, List<int?> explicitListOfSavedPages = null, string fontEncodingStrategy = null, string fontSavingMode = null, string htmlMarkupGenerationMode = null, string lettersPositioningMethod = null, bool? pagesFlowTypeDependsOnViewersScreenSize = null, string partsEmbeddingMode = null, string rasterImagesSavingMode = null, bool? removeEmptyAreasOnTopAndBottom = null, bool? saveShadowedTextsAsTransparentTexts = null, bool? saveTransparentTexts = null, string specialFolderForAllImages = null, string specialFolderForSvgImages = null, bool? trySaveTextUnderliningAndStrikeoutingInCss = null, string folder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PutPdfInStorageToHtmlAsyncWithHttpInfo(name, outPath, additionalMarginWidthInPoints, compressSvgGraphicsIfAny, convertMarkedContentToLayers, defaultFontName, documentType, fixedLayout, imageResolution, minimalLineWidth, preventGlyphsGrouping, splitCssIntoPages, splitIntoPages, useZOrder, antialiasingProcessing, cssClassNamesPrefix, explicitListOfSavedPages, fontEncodingStrategy, fontSavingMode, htmlMarkupGenerationMode, lettersPositioningMethod, pagesFlowTypeDependsOnViewersScreenSize, partsEmbeddingMode, rasterImagesSavingMode, removeEmptyAreasOnTopAndBottom, saveShadowedTextsAsTransparentTexts, saveTransparentTexts, specialFolderForAllImages, specialFolderForSvgImages, trySaveTextUnderliningAndStrikeoutingInCss, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (located on storage) to Html format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.html)</param>
        /// <param name="additionalMarginWidthInPoints">Defines width of margin that will be forcibly left around that output HTML-areas. (optional)</param>
        /// <param name="compressSvgGraphicsIfAny">The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)</param>
        /// <param name="convertMarkedContentToLayers">If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)</param>
        /// <param name="defaultFontName">Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)</param>
        /// <param name="documentType">Result document type. (optional)</param>
        /// <param name="fixedLayout">The value indicating whether that HTML is created as fixed layout. (optional)</param>
        /// <param name="imageResolution">Resolution for image rendering. (optional)</param>
        /// <param name="minimalLineWidth">This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)</param>
        /// <param name="preventGlyphsGrouping">This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)</param>
        /// <param name="splitCssIntoPages">When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)</param>
        /// <param name="splitIntoPages">The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)</param>
        /// <param name="useZOrder">If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)</param>
        /// <param name="antialiasingProcessing">The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)</param>
        /// <param name="cssClassNamesPrefix">When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)</param>
        /// <param name="explicitListOfSavedPages">With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)</param>
        /// <param name="fontEncodingStrategy">Defines encoding special rule to tune PDF decoding for current document. (optional)</param>
        /// <param name="fontSavingMode">Defines font saving mode that will be used during saving of PDF to desirable format. (optional)</param>
        /// <param name="htmlMarkupGenerationMode">Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)</param>
        /// <param name="lettersPositioningMethod">The mode of positioning of letters in words in result HTML. (optional)</param>
        /// <param name="pagesFlowTypeDependsOnViewersScreenSize">If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)</param>
        /// <param name="partsEmbeddingMode">It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)</param>
        /// <param name="rasterImagesSavingMode">Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)</param>
        /// <param name="removeEmptyAreasOnTopAndBottom">Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)</param>
        /// <param name="saveShadowedTextsAsTransparentTexts">Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)</param>
        /// <param name="saveTransparentTexts">Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)</param>
        /// <param name="specialFolderForAllImages">The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="specialFolderForSvgImages">The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)</param>
        /// <param name="trySaveTextUnderliningAndStrikeoutingInCss">PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPdfInStorageToHtmlAsyncWithHttpInfo (string name, string outPath, int? additionalMarginWidthInPoints = null, bool? compressSvgGraphicsIfAny = null, bool? convertMarkedContentToLayers = null, string defaultFontName = null, string documentType = null, bool? fixedLayout = null, int? imageResolution = null, int? minimalLineWidth = null, bool? preventGlyphsGrouping = null, bool? splitCssIntoPages = null, bool? splitIntoPages = null, bool? useZOrder = null, string antialiasingProcessing = null, string cssClassNamesPrefix = null, List<int?> explicitListOfSavedPages = null, string fontEncodingStrategy = null, string fontSavingMode = null, string htmlMarkupGenerationMode = null, string lettersPositioningMethod = null, bool? pagesFlowTypeDependsOnViewersScreenSize = null, string partsEmbeddingMode = null, string rasterImagesSavingMode = null, bool? removeEmptyAreasOnTopAndBottom = null, bool? saveShadowedTextsAsTransparentTexts = null, bool? saveTransparentTexts = null, string specialFolderForAllImages = null, string specialFolderForSvgImages = null, bool? trySaveTextUnderliningAndStrikeoutingInCss = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPdfInStorageToHtml");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInStorageToHtml");

            var localVarPath = "/pdf/{name}/convert/html";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (additionalMarginWidthInPoints != null) localVarQueryParams.Add("additionalMarginWidthInPoints", ApiClient.ParameterToString(additionalMarginWidthInPoints)); // query parameter
            if (compressSvgGraphicsIfAny != null) localVarQueryParams.Add("compressSvgGraphicsIfAny", ApiClient.ParameterToString(compressSvgGraphicsIfAny)); // query parameter
            if (convertMarkedContentToLayers != null) localVarQueryParams.Add("convertMarkedContentToLayers", ApiClient.ParameterToString(convertMarkedContentToLayers)); // query parameter
            if (defaultFontName != null) localVarQueryParams.Add("defaultFontName", ApiClient.ParameterToString(defaultFontName)); // query parameter
            if (documentType != null) localVarQueryParams.Add("documentType", ApiClient.ParameterToString(documentType)); // query parameter
            if (fixedLayout != null) localVarQueryParams.Add("fixedLayout", ApiClient.ParameterToString(fixedLayout)); // query parameter
            if (imageResolution != null) localVarQueryParams.Add("imageResolution", ApiClient.ParameterToString(imageResolution)); // query parameter
            if (minimalLineWidth != null) localVarQueryParams.Add("minimalLineWidth", ApiClient.ParameterToString(minimalLineWidth)); // query parameter
            if (preventGlyphsGrouping != null) localVarQueryParams.Add("preventGlyphsGrouping", ApiClient.ParameterToString(preventGlyphsGrouping)); // query parameter
            if (splitCssIntoPages != null) localVarQueryParams.Add("splitCssIntoPages", ApiClient.ParameterToString(splitCssIntoPages)); // query parameter
            if (splitIntoPages != null) localVarQueryParams.Add("splitIntoPages", ApiClient.ParameterToString(splitIntoPages)); // query parameter
            if (useZOrder != null) localVarQueryParams.Add("useZOrder", ApiClient.ParameterToString(useZOrder)); // query parameter
            if (antialiasingProcessing != null) localVarQueryParams.Add("antialiasingProcessing", ApiClient.ParameterToString(antialiasingProcessing)); // query parameter
            if (cssClassNamesPrefix != null) localVarQueryParams.Add("cssClassNamesPrefix", ApiClient.ParameterToString(cssClassNamesPrefix)); // query parameter
            if (explicitListOfSavedPages != null) localVarQueryParams.Add("explicitListOfSavedPages", ApiClient.ParameterToString(explicitListOfSavedPages)); // query parameter
            if (fontEncodingStrategy != null) localVarQueryParams.Add("fontEncodingStrategy", ApiClient.ParameterToString(fontEncodingStrategy)); // query parameter
            if (fontSavingMode != null) localVarQueryParams.Add("fontSavingMode", ApiClient.ParameterToString(fontSavingMode)); // query parameter
            if (htmlMarkupGenerationMode != null) localVarQueryParams.Add("htmlMarkupGenerationMode", ApiClient.ParameterToString(htmlMarkupGenerationMode)); // query parameter
            if (lettersPositioningMethod != null) localVarQueryParams.Add("lettersPositioningMethod", ApiClient.ParameterToString(lettersPositioningMethod)); // query parameter
            if (pagesFlowTypeDependsOnViewersScreenSize != null) localVarQueryParams.Add("pagesFlowTypeDependsOnViewersScreenSize", ApiClient.ParameterToString(pagesFlowTypeDependsOnViewersScreenSize)); // query parameter
            if (partsEmbeddingMode != null) localVarQueryParams.Add("partsEmbeddingMode", ApiClient.ParameterToString(partsEmbeddingMode)); // query parameter
            if (rasterImagesSavingMode != null) localVarQueryParams.Add("rasterImagesSavingMode", ApiClient.ParameterToString(rasterImagesSavingMode)); // query parameter
            if (removeEmptyAreasOnTopAndBottom != null) localVarQueryParams.Add("removeEmptyAreasOnTopAndBottom", ApiClient.ParameterToString(removeEmptyAreasOnTopAndBottom)); // query parameter
            if (saveShadowedTextsAsTransparentTexts != null) localVarQueryParams.Add("saveShadowedTextsAsTransparentTexts", ApiClient.ParameterToString(saveShadowedTextsAsTransparentTexts)); // query parameter
            if (saveTransparentTexts != null) localVarQueryParams.Add("saveTransparentTexts", ApiClient.ParameterToString(saveTransparentTexts)); // query parameter
            if (specialFolderForAllImages != null) localVarQueryParams.Add("specialFolderForAllImages", ApiClient.ParameterToString(specialFolderForAllImages)); // query parameter
            if (specialFolderForSvgImages != null) localVarQueryParams.Add("specialFolderForSvgImages", ApiClient.ParameterToString(specialFolderForSvgImages)); // query parameter
            if (trySaveTextUnderliningAndStrikeoutingInCss != null) localVarQueryParams.Add("trySaveTextUnderliningAndStrikeoutingInCss", ApiClient.ParameterToString(trySaveTextUnderliningAndStrikeoutingInCss)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInStorageToHtml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to LaTeX format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tex)</param>
        /// <param name="pagesCount">Pages count. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PutPdfInStorageToLaTeX (string name, string outPath, int? pagesCount = null, string folder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PutPdfInStorageToLaTeXWithHttpInfo(name, outPath, pagesCount, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (located on storage) to LaTeX format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tex)</param>
        /// <param name="pagesCount">Pages count. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PutPdfInStorageToLaTeXWithHttpInfo (string name, string outPath, int? pagesCount = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPdfInStorageToLaTeX");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInStorageToLaTeX");

            var localVarPath = "/pdf/{name}/convert/latex";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (pagesCount != null) localVarQueryParams.Add("pagesCount", ApiClient.ParameterToString(pagesCount)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInStorageToLaTeX", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to LaTeX format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tex)</param>
        /// <param name="pagesCount">Pages count. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PutPdfInStorageToLaTeXAsync (string name, string outPath, int? pagesCount = null, string folder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PutPdfInStorageToLaTeXAsyncWithHttpInfo(name, outPath, pagesCount, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (located on storage) to LaTeX format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tex)</param>
        /// <param name="pagesCount">Pages count. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPdfInStorageToLaTeXAsyncWithHttpInfo (string name, string outPath, int? pagesCount = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPdfInStorageToLaTeX");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInStorageToLaTeX");

            var localVarPath = "/pdf/{name}/convert/latex";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (pagesCount != null) localVarQueryParams.Add("pagesCount", ApiClient.ParameterToString(pagesCount)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInStorageToLaTeX", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to MOBIXML format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.mobixml)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PutPdfInStorageToMobiXml (string name, string outPath, string folder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PutPdfInStorageToMobiXmlWithHttpInfo(name, outPath, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (located on storage) to MOBIXML format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.mobixml)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PutPdfInStorageToMobiXmlWithHttpInfo (string name, string outPath, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPdfInStorageToMobiXml");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInStorageToMobiXml");

            var localVarPath = "/pdf/{name}/convert/mobixml";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInStorageToMobiXml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to MOBIXML format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.mobixml)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PutPdfInStorageToMobiXmlAsync (string name, string outPath, string folder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PutPdfInStorageToMobiXmlAsyncWithHttpInfo(name, outPath, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (located on storage) to MOBIXML format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.mobixml)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPdfInStorageToMobiXmlAsyncWithHttpInfo (string name, string outPath, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPdfInStorageToMobiXml");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInStorageToMobiXml");

            var localVarPath = "/pdf/{name}/convert/mobixml";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInStorageToMobiXml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to PdfA format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="type">Type of PdfA format.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PutPdfInStorageToPdfA (string name, string outPath, string type, string folder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PutPdfInStorageToPdfAWithHttpInfo(name, outPath, type, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (located on storage) to PdfA format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="type">Type of PdfA format.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PutPdfInStorageToPdfAWithHttpInfo (string name, string outPath, string type, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPdfInStorageToPdfA");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInStorageToPdfA");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling PdfApi->PutPdfInStorageToPdfA");

            var localVarPath = "/pdf/{name}/convert/pdfa";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (type != null) localVarQueryParams.Add("type", ApiClient.ParameterToString(type)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInStorageToPdfA", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to PdfA format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="type">Type of PdfA format.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PutPdfInStorageToPdfAAsync (string name, string outPath, string type, string folder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PutPdfInStorageToPdfAAsyncWithHttpInfo(name, outPath, type, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (located on storage) to PdfA format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="type">Type of PdfA format.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPdfInStorageToPdfAAsyncWithHttpInfo (string name, string outPath, string type, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPdfInStorageToPdfA");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInStorageToPdfA");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling PdfApi->PutPdfInStorageToPdfA");

            var localVarPath = "/pdf/{name}/convert/pdfa";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (type != null) localVarQueryParams.Add("type", ApiClient.ParameterToString(type)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInStorageToPdfA", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to PPTX format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pptx)</param>
        /// <param name="separateImages">Separate images. (optional)</param>
        /// <param name="slidesAsImages">Slides as images. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PutPdfInStorageToPptx (string name, string outPath, bool? separateImages = null, bool? slidesAsImages = null, string folder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PutPdfInStorageToPptxWithHttpInfo(name, outPath, separateImages, slidesAsImages, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (located on storage) to PPTX format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pptx)</param>
        /// <param name="separateImages">Separate images. (optional)</param>
        /// <param name="slidesAsImages">Slides as images. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PutPdfInStorageToPptxWithHttpInfo (string name, string outPath, bool? separateImages = null, bool? slidesAsImages = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPdfInStorageToPptx");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInStorageToPptx");

            var localVarPath = "/pdf/{name}/convert/pptx";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (separateImages != null) localVarQueryParams.Add("separateImages", ApiClient.ParameterToString(separateImages)); // query parameter
            if (slidesAsImages != null) localVarQueryParams.Add("slidesAsImages", ApiClient.ParameterToString(slidesAsImages)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInStorageToPptx", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to PPTX format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pptx)</param>
        /// <param name="separateImages">Separate images. (optional)</param>
        /// <param name="slidesAsImages">Slides as images. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PutPdfInStorageToPptxAsync (string name, string outPath, bool? separateImages = null, bool? slidesAsImages = null, string folder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PutPdfInStorageToPptxAsyncWithHttpInfo(name, outPath, separateImages, slidesAsImages, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (located on storage) to PPTX format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pptx)</param>
        /// <param name="separateImages">Separate images. (optional)</param>
        /// <param name="slidesAsImages">Slides as images. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPdfInStorageToPptxAsyncWithHttpInfo (string name, string outPath, bool? separateImages = null, bool? slidesAsImages = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPdfInStorageToPptx");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInStorageToPptx");

            var localVarPath = "/pdf/{name}/convert/pptx";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (separateImages != null) localVarQueryParams.Add("separateImages", ApiClient.ParameterToString(separateImages)); // query parameter
            if (slidesAsImages != null) localVarQueryParams.Add("slidesAsImages", ApiClient.ParameterToString(slidesAsImages)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInStorageToPptx", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to SVG format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.svg)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PutPdfInStorageToSvg (string name, string outPath, string folder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PutPdfInStorageToSvgWithHttpInfo(name, outPath, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (located on storage) to SVG format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.svg)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PutPdfInStorageToSvgWithHttpInfo (string name, string outPath, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPdfInStorageToSvg");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInStorageToSvg");

            var localVarPath = "/pdf/{name}/convert/svg";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInStorageToSvg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to SVG format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.svg)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PutPdfInStorageToSvgAsync (string name, string outPath, string folder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PutPdfInStorageToSvgAsyncWithHttpInfo(name, outPath, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (located on storage) to SVG format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.svg)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPdfInStorageToSvgAsyncWithHttpInfo (string name, string outPath, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPdfInStorageToSvg");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInStorageToSvg");

            var localVarPath = "/pdf/{name}/convert/svg";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInStorageToSvg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to TIFF format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tiff)</param>
        /// <param name="brightness">Image brightness. (optional)</param>
        /// <param name="compression">Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)</param>
        /// <param name="colorDepth">Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)</param>
        /// <param name="leftMargin">Left image margin. (optional)</param>
        /// <param name="rightMargin">Right image margin. (optional)</param>
        /// <param name="topMargin">Top image margin. (optional)</param>
        /// <param name="bottomMargin">Bottom image margin. (optional)</param>
        /// <param name="orientation">Image orientation. Possible values are: None, Landscape, Portait. (optional)</param>
        /// <param name="skipBlankPages">Skip blank pages flag. (optional)</param>
        /// <param name="width">Image width. (optional)</param>
        /// <param name="height">Image height. (optional)</param>
        /// <param name="xResolution">Horizontal resolution. (optional)</param>
        /// <param name="yResolution">Vertical resolution. (optional)</param>
        /// <param name="pageIndex">Start page to export. (optional)</param>
        /// <param name="pageCount">Number of pages to export. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PutPdfInStorageToTiff (string name, string outPath, double? brightness = null, string compression = null, string colorDepth = null, int? leftMargin = null, int? rightMargin = null, int? topMargin = null, int? bottomMargin = null, string orientation = null, bool? skipBlankPages = null, int? width = null, int? height = null, int? xResolution = null, int? yResolution = null, int? pageIndex = null, int? pageCount = null, string folder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PutPdfInStorageToTiffWithHttpInfo(name, outPath, brightness, compression, colorDepth, leftMargin, rightMargin, topMargin, bottomMargin, orientation, skipBlankPages, width, height, xResolution, yResolution, pageIndex, pageCount, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (located on storage) to TIFF format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tiff)</param>
        /// <param name="brightness">Image brightness. (optional)</param>
        /// <param name="compression">Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)</param>
        /// <param name="colorDepth">Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)</param>
        /// <param name="leftMargin">Left image margin. (optional)</param>
        /// <param name="rightMargin">Right image margin. (optional)</param>
        /// <param name="topMargin">Top image margin. (optional)</param>
        /// <param name="bottomMargin">Bottom image margin. (optional)</param>
        /// <param name="orientation">Image orientation. Possible values are: None, Landscape, Portait. (optional)</param>
        /// <param name="skipBlankPages">Skip blank pages flag. (optional)</param>
        /// <param name="width">Image width. (optional)</param>
        /// <param name="height">Image height. (optional)</param>
        /// <param name="xResolution">Horizontal resolution. (optional)</param>
        /// <param name="yResolution">Vertical resolution. (optional)</param>
        /// <param name="pageIndex">Start page to export. (optional)</param>
        /// <param name="pageCount">Number of pages to export. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PutPdfInStorageToTiffWithHttpInfo (string name, string outPath, double? brightness = null, string compression = null, string colorDepth = null, int? leftMargin = null, int? rightMargin = null, int? topMargin = null, int? bottomMargin = null, string orientation = null, bool? skipBlankPages = null, int? width = null, int? height = null, int? xResolution = null, int? yResolution = null, int? pageIndex = null, int? pageCount = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPdfInStorageToTiff");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInStorageToTiff");

            var localVarPath = "/pdf/{name}/convert/tiff";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (brightness != null) localVarQueryParams.Add("brightness", ApiClient.ParameterToString(brightness)); // query parameter
            if (compression != null) localVarQueryParams.Add("compression", ApiClient.ParameterToString(compression)); // query parameter
            if (colorDepth != null) localVarQueryParams.Add("colorDepth", ApiClient.ParameterToString(colorDepth)); // query parameter
            if (leftMargin != null) localVarQueryParams.Add("leftMargin", ApiClient.ParameterToString(leftMargin)); // query parameter
            if (rightMargin != null) localVarQueryParams.Add("rightMargin", ApiClient.ParameterToString(rightMargin)); // query parameter
            if (topMargin != null) localVarQueryParams.Add("topMargin", ApiClient.ParameterToString(topMargin)); // query parameter
            if (bottomMargin != null) localVarQueryParams.Add("bottomMargin", ApiClient.ParameterToString(bottomMargin)); // query parameter
            if (orientation != null) localVarQueryParams.Add("orientation", ApiClient.ParameterToString(orientation)); // query parameter
            if (skipBlankPages != null) localVarQueryParams.Add("skipBlankPages", ApiClient.ParameterToString(skipBlankPages)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (xResolution != null) localVarQueryParams.Add("xResolution", ApiClient.ParameterToString(xResolution)); // query parameter
            if (yResolution != null) localVarQueryParams.Add("yResolution", ApiClient.ParameterToString(yResolution)); // query parameter
            if (pageIndex != null) localVarQueryParams.Add("pageIndex", ApiClient.ParameterToString(pageIndex)); // query parameter
            if (pageCount != null) localVarQueryParams.Add("pageCount", ApiClient.ParameterToString(pageCount)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInStorageToTiff", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to TIFF format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tiff)</param>
        /// <param name="brightness">Image brightness. (optional)</param>
        /// <param name="compression">Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)</param>
        /// <param name="colorDepth">Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)</param>
        /// <param name="leftMargin">Left image margin. (optional)</param>
        /// <param name="rightMargin">Right image margin. (optional)</param>
        /// <param name="topMargin">Top image margin. (optional)</param>
        /// <param name="bottomMargin">Bottom image margin. (optional)</param>
        /// <param name="orientation">Image orientation. Possible values are: None, Landscape, Portait. (optional)</param>
        /// <param name="skipBlankPages">Skip blank pages flag. (optional)</param>
        /// <param name="width">Image width. (optional)</param>
        /// <param name="height">Image height. (optional)</param>
        /// <param name="xResolution">Horizontal resolution. (optional)</param>
        /// <param name="yResolution">Vertical resolution. (optional)</param>
        /// <param name="pageIndex">Start page to export. (optional)</param>
        /// <param name="pageCount">Number of pages to export. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PutPdfInStorageToTiffAsync (string name, string outPath, double? brightness = null, string compression = null, string colorDepth = null, int? leftMargin = null, int? rightMargin = null, int? topMargin = null, int? bottomMargin = null, string orientation = null, bool? skipBlankPages = null, int? width = null, int? height = null, int? xResolution = null, int? yResolution = null, int? pageIndex = null, int? pageCount = null, string folder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PutPdfInStorageToTiffAsyncWithHttpInfo(name, outPath, brightness, compression, colorDepth, leftMargin, rightMargin, topMargin, bottomMargin, orientation, skipBlankPages, width, height, xResolution, yResolution, pageIndex, pageCount, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (located on storage) to TIFF format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.tiff)</param>
        /// <param name="brightness">Image brightness. (optional)</param>
        /// <param name="compression">Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)</param>
        /// <param name="colorDepth">Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)</param>
        /// <param name="leftMargin">Left image margin. (optional)</param>
        /// <param name="rightMargin">Right image margin. (optional)</param>
        /// <param name="topMargin">Top image margin. (optional)</param>
        /// <param name="bottomMargin">Bottom image margin. (optional)</param>
        /// <param name="orientation">Image orientation. Possible values are: None, Landscape, Portait. (optional)</param>
        /// <param name="skipBlankPages">Skip blank pages flag. (optional)</param>
        /// <param name="width">Image width. (optional)</param>
        /// <param name="height">Image height. (optional)</param>
        /// <param name="xResolution">Horizontal resolution. (optional)</param>
        /// <param name="yResolution">Vertical resolution. (optional)</param>
        /// <param name="pageIndex">Start page to export. (optional)</param>
        /// <param name="pageCount">Number of pages to export. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPdfInStorageToTiffAsyncWithHttpInfo (string name, string outPath, double? brightness = null, string compression = null, string colorDepth = null, int? leftMargin = null, int? rightMargin = null, int? topMargin = null, int? bottomMargin = null, string orientation = null, bool? skipBlankPages = null, int? width = null, int? height = null, int? xResolution = null, int? yResolution = null, int? pageIndex = null, int? pageCount = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPdfInStorageToTiff");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInStorageToTiff");

            var localVarPath = "/pdf/{name}/convert/tiff";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (brightness != null) localVarQueryParams.Add("brightness", ApiClient.ParameterToString(brightness)); // query parameter
            if (compression != null) localVarQueryParams.Add("compression", ApiClient.ParameterToString(compression)); // query parameter
            if (colorDepth != null) localVarQueryParams.Add("colorDepth", ApiClient.ParameterToString(colorDepth)); // query parameter
            if (leftMargin != null) localVarQueryParams.Add("leftMargin", ApiClient.ParameterToString(leftMargin)); // query parameter
            if (rightMargin != null) localVarQueryParams.Add("rightMargin", ApiClient.ParameterToString(rightMargin)); // query parameter
            if (topMargin != null) localVarQueryParams.Add("topMargin", ApiClient.ParameterToString(topMargin)); // query parameter
            if (bottomMargin != null) localVarQueryParams.Add("bottomMargin", ApiClient.ParameterToString(bottomMargin)); // query parameter
            if (orientation != null) localVarQueryParams.Add("orientation", ApiClient.ParameterToString(orientation)); // query parameter
            if (skipBlankPages != null) localVarQueryParams.Add("skipBlankPages", ApiClient.ParameterToString(skipBlankPages)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (xResolution != null) localVarQueryParams.Add("xResolution", ApiClient.ParameterToString(xResolution)); // query parameter
            if (yResolution != null) localVarQueryParams.Add("yResolution", ApiClient.ParameterToString(yResolution)); // query parameter
            if (pageIndex != null) localVarQueryParams.Add("pageIndex", ApiClient.ParameterToString(pageIndex)); // query parameter
            if (pageCount != null) localVarQueryParams.Add("pageCount", ApiClient.ParameterToString(pageCount)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInStorageToTiff", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to XLS format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xls)</param>
        /// <param name="insertBlankColumnAtFirst">Insert blank column at first (optional)</param>
        /// <param name="minimizeTheNumberOfWorksheets">Minimize the number of worksheets (optional)</param>
        /// <param name="scaleFactor">Scale factor (optional)</param>
        /// <param name="uniformWorksheets">Uniform worksheets (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PutPdfInStorageToXls (string name, string outPath, bool? insertBlankColumnAtFirst = null, bool? minimizeTheNumberOfWorksheets = null, double? scaleFactor = null, bool? uniformWorksheets = null, string folder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PutPdfInStorageToXlsWithHttpInfo(name, outPath, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (located on storage) to XLS format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xls)</param>
        /// <param name="insertBlankColumnAtFirst">Insert blank column at first (optional)</param>
        /// <param name="minimizeTheNumberOfWorksheets">Minimize the number of worksheets (optional)</param>
        /// <param name="scaleFactor">Scale factor (optional)</param>
        /// <param name="uniformWorksheets">Uniform worksheets (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PutPdfInStorageToXlsWithHttpInfo (string name, string outPath, bool? insertBlankColumnAtFirst = null, bool? minimizeTheNumberOfWorksheets = null, double? scaleFactor = null, bool? uniformWorksheets = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPdfInStorageToXls");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInStorageToXls");

            var localVarPath = "/pdf/{name}/convert/xls";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (insertBlankColumnAtFirst != null) localVarQueryParams.Add("insertBlankColumnAtFirst", ApiClient.ParameterToString(insertBlankColumnAtFirst)); // query parameter
            if (minimizeTheNumberOfWorksheets != null) localVarQueryParams.Add("minimizeTheNumberOfWorksheets", ApiClient.ParameterToString(minimizeTheNumberOfWorksheets)); // query parameter
            if (scaleFactor != null) localVarQueryParams.Add("scaleFactor", ApiClient.ParameterToString(scaleFactor)); // query parameter
            if (uniformWorksheets != null) localVarQueryParams.Add("uniformWorksheets", ApiClient.ParameterToString(uniformWorksheets)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInStorageToXls", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to XLS format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xls)</param>
        /// <param name="insertBlankColumnAtFirst">Insert blank column at first (optional)</param>
        /// <param name="minimizeTheNumberOfWorksheets">Minimize the number of worksheets (optional)</param>
        /// <param name="scaleFactor">Scale factor (optional)</param>
        /// <param name="uniformWorksheets">Uniform worksheets (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PutPdfInStorageToXlsAsync (string name, string outPath, bool? insertBlankColumnAtFirst = null, bool? minimizeTheNumberOfWorksheets = null, double? scaleFactor = null, bool? uniformWorksheets = null, string folder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PutPdfInStorageToXlsAsyncWithHttpInfo(name, outPath, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (located on storage) to XLS format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xls)</param>
        /// <param name="insertBlankColumnAtFirst">Insert blank column at first (optional)</param>
        /// <param name="minimizeTheNumberOfWorksheets">Minimize the number of worksheets (optional)</param>
        /// <param name="scaleFactor">Scale factor (optional)</param>
        /// <param name="uniformWorksheets">Uniform worksheets (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPdfInStorageToXlsAsyncWithHttpInfo (string name, string outPath, bool? insertBlankColumnAtFirst = null, bool? minimizeTheNumberOfWorksheets = null, double? scaleFactor = null, bool? uniformWorksheets = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPdfInStorageToXls");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInStorageToXls");

            var localVarPath = "/pdf/{name}/convert/xls";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (insertBlankColumnAtFirst != null) localVarQueryParams.Add("insertBlankColumnAtFirst", ApiClient.ParameterToString(insertBlankColumnAtFirst)); // query parameter
            if (minimizeTheNumberOfWorksheets != null) localVarQueryParams.Add("minimizeTheNumberOfWorksheets", ApiClient.ParameterToString(minimizeTheNumberOfWorksheets)); // query parameter
            if (scaleFactor != null) localVarQueryParams.Add("scaleFactor", ApiClient.ParameterToString(scaleFactor)); // query parameter
            if (uniformWorksheets != null) localVarQueryParams.Add("uniformWorksheets", ApiClient.ParameterToString(uniformWorksheets)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInStorageToXls", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to XML format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xml)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PutPdfInStorageToXml (string name, string outPath, string folder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PutPdfInStorageToXmlWithHttpInfo(name, outPath, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (located on storage) to XML format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xml)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PutPdfInStorageToXmlWithHttpInfo (string name, string outPath, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPdfInStorageToXml");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInStorageToXml");

            var localVarPath = "/pdf/{name}/convert/xml";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInStorageToXml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to XML format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xml)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PutPdfInStorageToXmlAsync (string name, string outPath, string folder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PutPdfInStorageToXmlAsyncWithHttpInfo(name, outPath, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (located on storage) to XML format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xml)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPdfInStorageToXmlAsyncWithHttpInfo (string name, string outPath, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPdfInStorageToXml");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInStorageToXml");

            var localVarPath = "/pdf/{name}/convert/xml";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInStorageToXml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to XPS format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xps)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PutPdfInStorageToXps (string name, string outPath, string folder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PutPdfInStorageToXpsWithHttpInfo(name, outPath, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document (located on storage) to XPS format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xps)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PutPdfInStorageToXpsWithHttpInfo (string name, string outPath, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPdfInStorageToXps");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInStorageToXps");

            var localVarPath = "/pdf/{name}/convert/xps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInStorageToXps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Converts PDF document (located on storage) to XPS format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xps)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PutPdfInStorageToXpsAsync (string name, string outPath, string folder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PutPdfInStorageToXpsAsyncWithHttpInfo(name, outPath, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document (located on storage) to XPS format and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.xps)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPdfInStorageToXpsAsyncWithHttpInfo (string name, string outPath, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPdfInStorageToXps");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutPdfInStorageToXps");

            var localVarPath = "/pdf/{name}/convert/xps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPdfInStorageToXps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Replace document polyline annotation 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="annotation">Annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>PolyLineAnnotationResponse</returns>
        public PolyLineAnnotationResponse PutPolyLineAnnotation (string name, string annotationId, PolyLineAnnotation annotation, string storage = null, string folder = null)
        {
             ApiResponse<PolyLineAnnotationResponse> localVarResponse = PutPolyLineAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replace document polyline annotation 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="annotation">Annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of PolyLineAnnotationResponse</returns>
        public ApiResponse< PolyLineAnnotationResponse > PutPolyLineAnnotationWithHttpInfo (string name, string annotationId, PolyLineAnnotation annotation, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPolyLineAnnotation");
            // verify the required parameter 'annotationId' is set
            if (annotationId == null)
                throw new ApiException(400, "Missing required parameter 'annotationId' when calling PdfApi->PutPolyLineAnnotation");
            // verify the required parameter 'annotation' is set
            if (annotation == null)
                throw new ApiException(400, "Missing required parameter 'annotation' when calling PdfApi->PutPolyLineAnnotation");

            var localVarPath = "/pdf/{name}/annotations/polyline/{annotationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (annotationId != null) localVarPathParams.Add("annotationId", ApiClient.ParameterToString(annotationId)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (annotation != null && annotation.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(annotation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = annotation; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPolyLineAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolyLineAnnotationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PolyLineAnnotationResponse) ApiClient.Deserialize(localVarResponse, typeof(PolyLineAnnotationResponse)));
        }

        /// <summary>
        /// Replace document polyline annotation 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="annotation">Annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of PolyLineAnnotationResponse</returns>
        public async System.Threading.Tasks.Task<PolyLineAnnotationResponse> PutPolyLineAnnotationAsync (string name, string annotationId, PolyLineAnnotation annotation, string storage = null, string folder = null)
        {
             ApiResponse<PolyLineAnnotationResponse> localVarResponse = await PutPolyLineAnnotationAsyncWithHttpInfo(name, annotationId, annotation, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replace document polyline annotation 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="annotation">Annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (PolyLineAnnotationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PolyLineAnnotationResponse>> PutPolyLineAnnotationAsyncWithHttpInfo (string name, string annotationId, PolyLineAnnotation annotation, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPolyLineAnnotation");
            // verify the required parameter 'annotationId' is set
            if (annotationId == null)
                throw new ApiException(400, "Missing required parameter 'annotationId' when calling PdfApi->PutPolyLineAnnotation");
            // verify the required parameter 'annotation' is set
            if (annotation == null)
                throw new ApiException(400, "Missing required parameter 'annotation' when calling PdfApi->PutPolyLineAnnotation");

            var localVarPath = "/pdf/{name}/annotations/polyline/{annotationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (annotationId != null) localVarPathParams.Add("annotationId", ApiClient.ParameterToString(annotationId)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (annotation != null && annotation.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(annotation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = annotation; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPolyLineAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolyLineAnnotationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PolyLineAnnotationResponse) ApiClient.Deserialize(localVarResponse, typeof(PolyLineAnnotationResponse)));
        }

        /// <summary>
        /// Replace document polygon annotation 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="annotation">Annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>PolygonAnnotationResponse</returns>
        public PolygonAnnotationResponse PutPolygonAnnotation (string name, string annotationId, PolygonAnnotation annotation, string storage = null, string folder = null)
        {
             ApiResponse<PolygonAnnotationResponse> localVarResponse = PutPolygonAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replace document polygon annotation 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="annotation">Annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of PolygonAnnotationResponse</returns>
        public ApiResponse< PolygonAnnotationResponse > PutPolygonAnnotationWithHttpInfo (string name, string annotationId, PolygonAnnotation annotation, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPolygonAnnotation");
            // verify the required parameter 'annotationId' is set
            if (annotationId == null)
                throw new ApiException(400, "Missing required parameter 'annotationId' when calling PdfApi->PutPolygonAnnotation");
            // verify the required parameter 'annotation' is set
            if (annotation == null)
                throw new ApiException(400, "Missing required parameter 'annotation' when calling PdfApi->PutPolygonAnnotation");

            var localVarPath = "/pdf/{name}/annotations/polygon/{annotationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (annotationId != null) localVarPathParams.Add("annotationId", ApiClient.ParameterToString(annotationId)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (annotation != null && annotation.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(annotation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = annotation; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPolygonAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolygonAnnotationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PolygonAnnotationResponse) ApiClient.Deserialize(localVarResponse, typeof(PolygonAnnotationResponse)));
        }

        /// <summary>
        /// Replace document polygon annotation 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="annotation">Annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of PolygonAnnotationResponse</returns>
        public async System.Threading.Tasks.Task<PolygonAnnotationResponse> PutPolygonAnnotationAsync (string name, string annotationId, PolygonAnnotation annotation, string storage = null, string folder = null)
        {
             ApiResponse<PolygonAnnotationResponse> localVarResponse = await PutPolygonAnnotationAsyncWithHttpInfo(name, annotationId, annotation, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replace document polygon annotation 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="annotation">Annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (PolygonAnnotationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PolygonAnnotationResponse>> PutPolygonAnnotationAsyncWithHttpInfo (string name, string annotationId, PolygonAnnotation annotation, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPolygonAnnotation");
            // verify the required parameter 'annotationId' is set
            if (annotationId == null)
                throw new ApiException(400, "Missing required parameter 'annotationId' when calling PdfApi->PutPolygonAnnotation");
            // verify the required parameter 'annotation' is set
            if (annotation == null)
                throw new ApiException(400, "Missing required parameter 'annotation' when calling PdfApi->PutPolygonAnnotation");

            var localVarPath = "/pdf/{name}/annotations/polygon/{annotationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (annotationId != null) localVarPathParams.Add("annotationId", ApiClient.ParameterToString(annotationId)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (annotation != null && annotation.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(annotation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = annotation; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPolygonAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolygonAnnotationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PolygonAnnotationResponse) ApiClient.Deserialize(localVarResponse, typeof(PolygonAnnotationResponse)));
        }

        /// <summary>
        /// Update privilege document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="privileges">Document privileges.  (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PutPrivileges (string name, DocumentPrivilege privileges = null, string storage = null, string folder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PutPrivilegesWithHttpInfo(name, privileges, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update privilege document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="privileges">Document privileges.  (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PutPrivilegesWithHttpInfo (string name, DocumentPrivilege privileges = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPrivileges");

            var localVarPath = "/pdf/{name}/privileges";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (privileges != null && privileges.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(privileges); // http body (model) parameter
            }
            else
            {
                localVarPostBody = privileges; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPrivileges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Update privilege document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="privileges">Document privileges.  (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PutPrivilegesAsync (string name, DocumentPrivilege privileges = null, string storage = null, string folder = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PutPrivilegesAsyncWithHttpInfo(name, privileges, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update privilege document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="privileges">Document privileges.  (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPrivilegesAsyncWithHttpInfo (string name, DocumentPrivilege privileges = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPrivileges");

            var localVarPath = "/pdf/{name}/privileges";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (privileges != null && privileges.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(privileges); // http body (model) parameter
            }
            else
            {
                localVarPostBody = privileges; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPrivileges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Convert PS file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.ps)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PutPsInStorageToPdf (string name, string srcPath, string dstFolder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PutPsInStorageToPdfWithHttpInfo(name, srcPath, dstFolder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert PS file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.ps)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PutPsInStorageToPdfWithHttpInfo (string name, string srcPath, string dstFolder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPsInStorageToPdf");
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->PutPsInStorageToPdf");

            var localVarPath = "/pdf/{name}/create/ps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (dstFolder != null) localVarQueryParams.Add("dstFolder", ApiClient.ParameterToString(dstFolder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPsInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Convert PS file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.ps)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PutPsInStorageToPdfAsync (string name, string srcPath, string dstFolder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PutPsInStorageToPdfAsyncWithHttpInfo(name, srcPath, dstFolder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert PS file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.ps)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutPsInStorageToPdfAsyncWithHttpInfo (string name, string srcPath, string dstFolder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutPsInStorageToPdf");
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->PutPsInStorageToPdf");

            var localVarPath = "/pdf/{name}/create/ps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (dstFolder != null) localVarQueryParams.Add("dstFolder", ApiClient.ParameterToString(dstFolder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPsInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Replace document image. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">The image ID.</param>
        /// <param name="imageFilePath">Path to image file if specified. Request content is used otherwise. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="image">Image file. (optional)</param>
        /// <returns>ImageResponse</returns>
        public ImageResponse PutReplaceImage (string name, string imageId, string imageFilePath = null, string storage = null, string folder = null, System.IO.Stream image = null)
        {
             ApiResponse<ImageResponse> localVarResponse = PutReplaceImageWithHttpInfo(name, imageId, imageFilePath, storage, folder, image);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replace document image. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">The image ID.</param>
        /// <param name="imageFilePath">Path to image file if specified. Request content is used otherwise. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="image">Image file. (optional)</param>
        /// <returns>ApiResponse of ImageResponse</returns>
        public ApiResponse< ImageResponse > PutReplaceImageWithHttpInfo (string name, string imageId, string imageFilePath = null, string storage = null, string folder = null, System.IO.Stream image = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutReplaceImage");
            // verify the required parameter 'imageId' is set
            if (imageId == null)
                throw new ApiException(400, "Missing required parameter 'imageId' when calling PdfApi->PutReplaceImage");

            var localVarPath = "/pdf/{name}/images/{imageId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (imageId != null) localVarPathParams.Add("imageId", ApiClient.ParameterToString(imageId)); // path parameter
            if (imageFilePath != null) localVarQueryParams.Add("imageFilePath", ApiClient.ParameterToString(imageFilePath)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (image != null) localVarFileParams.Add("image", ApiClient.ParameterToFile("image", image));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutReplaceImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ImageResponse) ApiClient.Deserialize(localVarResponse, typeof(ImageResponse)));
        }

        /// <summary>
        /// Replace document image. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">The image ID.</param>
        /// <param name="imageFilePath">Path to image file if specified. Request content is used otherwise. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="image">Image file. (optional)</param>
        /// <returns>Task of ImageResponse</returns>
        public async System.Threading.Tasks.Task<ImageResponse> PutReplaceImageAsync (string name, string imageId, string imageFilePath = null, string storage = null, string folder = null, System.IO.Stream image = null)
        {
             ApiResponse<ImageResponse> localVarResponse = await PutReplaceImageAsyncWithHttpInfo(name, imageId, imageFilePath, storage, folder, image);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replace document image. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="imageId">The image ID.</param>
        /// <param name="imageFilePath">Path to image file if specified. Request content is used otherwise. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="image">Image file. (optional)</param>
        /// <returns>Task of ApiResponse (ImageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ImageResponse>> PutReplaceImageAsyncWithHttpInfo (string name, string imageId, string imageFilePath = null, string storage = null, string folder = null, System.IO.Stream image = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutReplaceImage");
            // verify the required parameter 'imageId' is set
            if (imageId == null)
                throw new ApiException(400, "Missing required parameter 'imageId' when calling PdfApi->PutReplaceImage");

            var localVarPath = "/pdf/{name}/images/{imageId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (imageId != null) localVarPathParams.Add("imageId", ApiClient.ParameterToString(imageId)); // path parameter
            if (imageFilePath != null) localVarQueryParams.Add("imageFilePath", ApiClient.ParameterToString(imageFilePath)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (image != null) localVarFileParams.Add("image", ApiClient.ParameterToFile("image", image));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutReplaceImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ImageResponse) ApiClient.Deserialize(localVarResponse, typeof(ImageResponse)));
        }

        /// <summary>
        /// Create searchable PDF document. Generate OCR layer for images in input PDF document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="lang">language for OCR engine. Possible values: eng, ara, bel, ben, bul, ces, dan, deu, ell, fin, fra, heb, hin, ind, isl, ita, jpn, kor, nld, nor, pol, por, ron, rus, spa, swe, tha, tur, ukr, vie, chi_sim, chi_tra or thier combination e.g. eng,rus  (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PutSearchableDocument (string name, string storage = null, string folder = null, string lang = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PutSearchableDocumentWithHttpInfo(name, storage, folder, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create searchable PDF document. Generate OCR layer for images in input PDF document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="lang">language for OCR engine. Possible values: eng, ara, bel, ben, bul, ces, dan, deu, ell, fin, fra, heb, hin, ind, isl, ita, jpn, kor, nld, nor, pol, por, ron, rus, spa, swe, tha, tur, ukr, vie, chi_sim, chi_tra or thier combination e.g. eng,rus  (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PutSearchableDocumentWithHttpInfo (string name, string storage = null, string folder = null, string lang = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutSearchableDocument");

            var localVarPath = "/pdf/{name}/ocr";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (lang != null) localVarQueryParams.Add("lang", ApiClient.ParameterToString(lang)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutSearchableDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Create searchable PDF document. Generate OCR layer for images in input PDF document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="lang">language for OCR engine. Possible values: eng, ara, bel, ben, bul, ces, dan, deu, ell, fin, fra, heb, hin, ind, isl, ita, jpn, kor, nld, nor, pol, por, ron, rus, spa, swe, tha, tur, ukr, vie, chi_sim, chi_tra or thier combination e.g. eng,rus  (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PutSearchableDocumentAsync (string name, string storage = null, string folder = null, string lang = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PutSearchableDocumentAsyncWithHttpInfo(name, storage, folder, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create searchable PDF document. Generate OCR layer for images in input PDF document. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="lang">language for OCR engine. Possible values: eng, ara, bel, ben, bul, ces, dan, deu, ell, fin, fra, heb, hin, ind, isl, ita, jpn, kor, nld, nor, pol, por, ron, rus, spa, swe, tha, tur, ukr, vie, chi_sim, chi_tra or thier combination e.g. eng,rus  (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutSearchableDocumentAsyncWithHttpInfo (string name, string storage = null, string folder = null, string lang = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutSearchableDocument");

            var localVarPath = "/pdf/{name}/ocr";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (lang != null) localVarQueryParams.Add("lang", ApiClient.ParameterToString(lang)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutSearchableDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Add/update document property. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="propertyName"></param>
        /// <param name="value"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>DocumentPropertyResponse</returns>
        public DocumentPropertyResponse PutSetProperty (string name, string propertyName, string value, string storage = null, string folder = null)
        {
             ApiResponse<DocumentPropertyResponse> localVarResponse = PutSetPropertyWithHttpInfo(name, propertyName, value, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add/update document property. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="propertyName"></param>
        /// <param name="value"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of DocumentPropertyResponse</returns>
        public ApiResponse< DocumentPropertyResponse > PutSetPropertyWithHttpInfo (string name, string propertyName, string value, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutSetProperty");
            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
                throw new ApiException(400, "Missing required parameter 'propertyName' when calling PdfApi->PutSetProperty");
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling PdfApi->PutSetProperty");

            var localVarPath = "/pdf/{name}/documentproperties/{propertyName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (propertyName != null) localVarPathParams.Add("propertyName", ApiClient.ParameterToString(propertyName)); // path parameter
            if (value != null) localVarQueryParams.Add("value", ApiClient.ParameterToString(value)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutSetProperty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentPropertyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentPropertyResponse) ApiClient.Deserialize(localVarResponse, typeof(DocumentPropertyResponse)));
        }

        /// <summary>
        /// Add/update document property. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="propertyName"></param>
        /// <param name="value"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of DocumentPropertyResponse</returns>
        public async System.Threading.Tasks.Task<DocumentPropertyResponse> PutSetPropertyAsync (string name, string propertyName, string value, string storage = null, string folder = null)
        {
             ApiResponse<DocumentPropertyResponse> localVarResponse = await PutSetPropertyAsyncWithHttpInfo(name, propertyName, value, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add/update document property. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="propertyName"></param>
        /// <param name="value"></param>
        /// <param name="storage"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (DocumentPropertyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentPropertyResponse>> PutSetPropertyAsyncWithHttpInfo (string name, string propertyName, string value, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutSetProperty");
            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
                throw new ApiException(400, "Missing required parameter 'propertyName' when calling PdfApi->PutSetProperty");
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling PdfApi->PutSetProperty");

            var localVarPath = "/pdf/{name}/documentproperties/{propertyName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (propertyName != null) localVarPathParams.Add("propertyName", ApiClient.ParameterToString(propertyName)); // path parameter
            if (value != null) localVarQueryParams.Add("value", ApiClient.ParameterToString(value)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutSetProperty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentPropertyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentPropertyResponse) ApiClient.Deserialize(localVarResponse, typeof(DocumentPropertyResponse)));
        }

        /// <summary>
        /// Replace document square annotation 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="annotation">Annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SquareAnnotationResponse</returns>
        public SquareAnnotationResponse PutSquareAnnotation (string name, string annotationId, SquareAnnotation annotation, string storage = null, string folder = null)
        {
             ApiResponse<SquareAnnotationResponse> localVarResponse = PutSquareAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replace document square annotation 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="annotation">Annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SquareAnnotationResponse</returns>
        public ApiResponse< SquareAnnotationResponse > PutSquareAnnotationWithHttpInfo (string name, string annotationId, SquareAnnotation annotation, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutSquareAnnotation");
            // verify the required parameter 'annotationId' is set
            if (annotationId == null)
                throw new ApiException(400, "Missing required parameter 'annotationId' when calling PdfApi->PutSquareAnnotation");
            // verify the required parameter 'annotation' is set
            if (annotation == null)
                throw new ApiException(400, "Missing required parameter 'annotation' when calling PdfApi->PutSquareAnnotation");

            var localVarPath = "/pdf/{name}/annotations/square/{annotationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (annotationId != null) localVarPathParams.Add("annotationId", ApiClient.ParameterToString(annotationId)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (annotation != null && annotation.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(annotation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = annotation; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutSquareAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SquareAnnotationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SquareAnnotationResponse) ApiClient.Deserialize(localVarResponse, typeof(SquareAnnotationResponse)));
        }

        /// <summary>
        /// Replace document square annotation 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="annotation">Annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SquareAnnotationResponse</returns>
        public async System.Threading.Tasks.Task<SquareAnnotationResponse> PutSquareAnnotationAsync (string name, string annotationId, SquareAnnotation annotation, string storage = null, string folder = null)
        {
             ApiResponse<SquareAnnotationResponse> localVarResponse = await PutSquareAnnotationAsyncWithHttpInfo(name, annotationId, annotation, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replace document square annotation 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="annotation">Annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SquareAnnotationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SquareAnnotationResponse>> PutSquareAnnotationAsyncWithHttpInfo (string name, string annotationId, SquareAnnotation annotation, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutSquareAnnotation");
            // verify the required parameter 'annotationId' is set
            if (annotationId == null)
                throw new ApiException(400, "Missing required parameter 'annotationId' when calling PdfApi->PutSquareAnnotation");
            // verify the required parameter 'annotation' is set
            if (annotation == null)
                throw new ApiException(400, "Missing required parameter 'annotation' when calling PdfApi->PutSquareAnnotation");

            var localVarPath = "/pdf/{name}/annotations/square/{annotationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (annotationId != null) localVarPathParams.Add("annotationId", ApiClient.ParameterToString(annotationId)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (annotation != null && annotation.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(annotation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = annotation; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutSquareAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SquareAnnotationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SquareAnnotationResponse) ApiClient.Deserialize(localVarResponse, typeof(SquareAnnotationResponse)));
        }

        /// <summary>
        /// Convert SVG file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.svg)</param>
        /// <param name="adjustPageSize">Adjust page size (optional)</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PutSvgInStorageToPdf (string name, string srcPath, bool? adjustPageSize = null, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string dstFolder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PutSvgInStorageToPdfWithHttpInfo(name, srcPath, adjustPageSize, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, dstFolder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert SVG file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.svg)</param>
        /// <param name="adjustPageSize">Adjust page size (optional)</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PutSvgInStorageToPdfWithHttpInfo (string name, string srcPath, bool? adjustPageSize = null, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string dstFolder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutSvgInStorageToPdf");
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->PutSvgInStorageToPdf");

            var localVarPath = "/pdf/{name}/create/svg";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (adjustPageSize != null) localVarQueryParams.Add("adjustPageSize", ApiClient.ParameterToString(adjustPageSize)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (isLandscape != null) localVarQueryParams.Add("isLandscape", ApiClient.ParameterToString(isLandscape)); // query parameter
            if (marginLeft != null) localVarQueryParams.Add("marginLeft", ApiClient.ParameterToString(marginLeft)); // query parameter
            if (marginBottom != null) localVarQueryParams.Add("marginBottom", ApiClient.ParameterToString(marginBottom)); // query parameter
            if (marginRight != null) localVarQueryParams.Add("marginRight", ApiClient.ParameterToString(marginRight)); // query parameter
            if (marginTop != null) localVarQueryParams.Add("marginTop", ApiClient.ParameterToString(marginTop)); // query parameter
            if (dstFolder != null) localVarQueryParams.Add("dstFolder", ApiClient.ParameterToString(dstFolder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutSvgInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Convert SVG file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.svg)</param>
        /// <param name="adjustPageSize">Adjust page size (optional)</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PutSvgInStorageToPdfAsync (string name, string srcPath, bool? adjustPageSize = null, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string dstFolder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PutSvgInStorageToPdfAsyncWithHttpInfo(name, srcPath, adjustPageSize, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, dstFolder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert SVG file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.svg)</param>
        /// <param name="adjustPageSize">Adjust page size (optional)</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutSvgInStorageToPdfAsyncWithHttpInfo (string name, string srcPath, bool? adjustPageSize = null, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string dstFolder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutSvgInStorageToPdf");
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->PutSvgInStorageToPdf");

            var localVarPath = "/pdf/{name}/create/svg";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (adjustPageSize != null) localVarQueryParams.Add("adjustPageSize", ApiClient.ParameterToString(adjustPageSize)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (isLandscape != null) localVarQueryParams.Add("isLandscape", ApiClient.ParameterToString(isLandscape)); // query parameter
            if (marginLeft != null) localVarQueryParams.Add("marginLeft", ApiClient.ParameterToString(marginLeft)); // query parameter
            if (marginBottom != null) localVarQueryParams.Add("marginBottom", ApiClient.ParameterToString(marginBottom)); // query parameter
            if (marginRight != null) localVarQueryParams.Add("marginRight", ApiClient.ParameterToString(marginRight)); // query parameter
            if (marginTop != null) localVarQueryParams.Add("marginTop", ApiClient.ParameterToString(marginTop)); // query parameter
            if (dstFolder != null) localVarQueryParams.Add("dstFolder", ApiClient.ParameterToString(dstFolder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutSvgInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Replace document text annotation 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="annotation">Annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>TextAnnotationResponse</returns>
        public TextAnnotationResponse PutTextAnnotation (string name, string annotationId, TextAnnotation annotation, string storage = null, string folder = null)
        {
             ApiResponse<TextAnnotationResponse> localVarResponse = PutTextAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replace document text annotation 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="annotation">Annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of TextAnnotationResponse</returns>
        public ApiResponse< TextAnnotationResponse > PutTextAnnotationWithHttpInfo (string name, string annotationId, TextAnnotation annotation, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutTextAnnotation");
            // verify the required parameter 'annotationId' is set
            if (annotationId == null)
                throw new ApiException(400, "Missing required parameter 'annotationId' when calling PdfApi->PutTextAnnotation");
            // verify the required parameter 'annotation' is set
            if (annotation == null)
                throw new ApiException(400, "Missing required parameter 'annotation' when calling PdfApi->PutTextAnnotation");

            var localVarPath = "/pdf/{name}/annotations/text/{annotationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (annotationId != null) localVarPathParams.Add("annotationId", ApiClient.ParameterToString(annotationId)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (annotation != null && annotation.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(annotation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = annotation; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutTextAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextAnnotationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TextAnnotationResponse) ApiClient.Deserialize(localVarResponse, typeof(TextAnnotationResponse)));
        }

        /// <summary>
        /// Replace document text annotation 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="annotation">Annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of TextAnnotationResponse</returns>
        public async System.Threading.Tasks.Task<TextAnnotationResponse> PutTextAnnotationAsync (string name, string annotationId, TextAnnotation annotation, string storage = null, string folder = null)
        {
             ApiResponse<TextAnnotationResponse> localVarResponse = await PutTextAnnotationAsyncWithHttpInfo(name, annotationId, annotation, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replace document text annotation 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="annotationId">The annotation ID.</param>
        /// <param name="annotation">Annotation.</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (TextAnnotationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TextAnnotationResponse>> PutTextAnnotationAsyncWithHttpInfo (string name, string annotationId, TextAnnotation annotation, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutTextAnnotation");
            // verify the required parameter 'annotationId' is set
            if (annotationId == null)
                throw new ApiException(400, "Missing required parameter 'annotationId' when calling PdfApi->PutTextAnnotation");
            // verify the required parameter 'annotation' is set
            if (annotation == null)
                throw new ApiException(400, "Missing required parameter 'annotation' when calling PdfApi->PutTextAnnotation");

            var localVarPath = "/pdf/{name}/annotations/text/{annotationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (annotationId != null) localVarPathParams.Add("annotationId", ApiClient.ParameterToString(annotationId)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (annotation != null && annotation.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(annotation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = annotation; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutTextAnnotation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextAnnotationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TextAnnotationResponse) ApiClient.Deserialize(localVarResponse, typeof(TextAnnotationResponse)));
        }

        /// <summary>
        /// Update field. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fieldName">The name of a field to be updated.</param>
        /// <param name="field">with the field data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>FieldResponse</returns>
        public FieldResponse PutUpdateField (string name, string fieldName, Field field = null, string storage = null, string folder = null)
        {
             ApiResponse<FieldResponse> localVarResponse = PutUpdateFieldWithHttpInfo(name, fieldName, field, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update field. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fieldName">The name of a field to be updated.</param>
        /// <param name="field">with the field data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of FieldResponse</returns>
        public ApiResponse< FieldResponse > PutUpdateFieldWithHttpInfo (string name, string fieldName, Field field = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutUpdateField");
            // verify the required parameter 'fieldName' is set
            if (fieldName == null)
                throw new ApiException(400, "Missing required parameter 'fieldName' when calling PdfApi->PutUpdateField");

            var localVarPath = "/pdf/{name}/fields/{fieldName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (fieldName != null) localVarPathParams.Add("fieldName", ApiClient.ParameterToString(fieldName)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (field != null && field.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(field); // http body (model) parameter
            }
            else
            {
                localVarPostBody = field; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutUpdateField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldResponse) ApiClient.Deserialize(localVarResponse, typeof(FieldResponse)));
        }

        /// <summary>
        /// Update field. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fieldName">The name of a field to be updated.</param>
        /// <param name="field">with the field data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of FieldResponse</returns>
        public async System.Threading.Tasks.Task<FieldResponse> PutUpdateFieldAsync (string name, string fieldName, Field field = null, string storage = null, string folder = null)
        {
             ApiResponse<FieldResponse> localVarResponse = await PutUpdateFieldAsyncWithHttpInfo(name, fieldName, field, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update field. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fieldName">The name of a field to be updated.</param>
        /// <param name="field">with the field data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (FieldResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FieldResponse>> PutUpdateFieldAsyncWithHttpInfo (string name, string fieldName, Field field = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutUpdateField");
            // verify the required parameter 'fieldName' is set
            if (fieldName == null)
                throw new ApiException(400, "Missing required parameter 'fieldName' when calling PdfApi->PutUpdateField");

            var localVarPath = "/pdf/{name}/fields/{fieldName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (fieldName != null) localVarPathParams.Add("fieldName", ApiClient.ParameterToString(fieldName)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (field != null && field.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(field); // http body (model) parameter
            }
            else
            {
                localVarPostBody = field; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutUpdateField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldResponse) ApiClient.Deserialize(localVarResponse, typeof(FieldResponse)));
        }

        /// <summary>
        /// Update fields. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fields">with the fields data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>FieldsResponse</returns>
        public FieldsResponse PutUpdateFields (string name, Fields fields = null, string storage = null, string folder = null)
        {
             ApiResponse<FieldsResponse> localVarResponse = PutUpdateFieldsWithHttpInfo(name, fields, storage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update fields. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fields">with the fields data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of FieldsResponse</returns>
        public ApiResponse< FieldsResponse > PutUpdateFieldsWithHttpInfo (string name, Fields fields = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutUpdateFields");

            var localVarPath = "/pdf/{name}/fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (fields != null && fields.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(fields); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fields; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutUpdateFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldsResponse) ApiClient.Deserialize(localVarResponse, typeof(FieldsResponse)));
        }

        /// <summary>
        /// Update fields. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fields">with the fields data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of FieldsResponse</returns>
        public async System.Threading.Tasks.Task<FieldsResponse> PutUpdateFieldsAsync (string name, Fields fields = null, string storage = null, string folder = null)
        {
             ApiResponse<FieldsResponse> localVarResponse = await PutUpdateFieldsAsyncWithHttpInfo(name, fields, storage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update fields. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="fields">with the fields data. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (FieldsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FieldsResponse>> PutUpdateFieldsAsyncWithHttpInfo (string name, Fields fields = null, string storage = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutUpdateFields");

            var localVarPath = "/pdf/{name}/fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (fields != null && fields.GetType() != typeof(byte[]))
            {
                localVarPostBody = ApiClient.Serialize(fields); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fields; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutUpdateFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldsResponse) ApiClient.Deserialize(localVarResponse, typeof(FieldsResponse)));
        }

        /// <summary>
        /// Convert web page to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="url">Source url</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PutWebInStorageToPdf (string name, string url, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string dstFolder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PutWebInStorageToPdfWithHttpInfo(name, url, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, dstFolder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert web page to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="url">Source url</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PutWebInStorageToPdfWithHttpInfo (string name, string url, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string dstFolder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutWebInStorageToPdf");
            // verify the required parameter 'url' is set
            if (url == null)
                throw new ApiException(400, "Missing required parameter 'url' when calling PdfApi->PutWebInStorageToPdf");

            var localVarPath = "/pdf/{name}/create/web";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (url != null) localVarQueryParams.Add("url", ApiClient.ParameterToString(url)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (isLandscape != null) localVarQueryParams.Add("isLandscape", ApiClient.ParameterToString(isLandscape)); // query parameter
            if (marginLeft != null) localVarQueryParams.Add("marginLeft", ApiClient.ParameterToString(marginLeft)); // query parameter
            if (marginBottom != null) localVarQueryParams.Add("marginBottom", ApiClient.ParameterToString(marginBottom)); // query parameter
            if (marginRight != null) localVarQueryParams.Add("marginRight", ApiClient.ParameterToString(marginRight)); // query parameter
            if (marginTop != null) localVarQueryParams.Add("marginTop", ApiClient.ParameterToString(marginTop)); // query parameter
            if (dstFolder != null) localVarQueryParams.Add("dstFolder", ApiClient.ParameterToString(dstFolder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutWebInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Convert web page to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="url">Source url</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PutWebInStorageToPdfAsync (string name, string url, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string dstFolder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PutWebInStorageToPdfAsyncWithHttpInfo(name, url, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, dstFolder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert web page to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="url">Source url</param>
        /// <param name="height">Page height (optional)</param>
        /// <param name="width">Page width (optional)</param>
        /// <param name="isLandscape">Is page landscaped (optional)</param>
        /// <param name="marginLeft">Page margin left (optional)</param>
        /// <param name="marginBottom">Page margin bottom (optional)</param>
        /// <param name="marginRight">Page margin right (optional)</param>
        /// <param name="marginTop">Page margin top (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutWebInStorageToPdfAsyncWithHttpInfo (string name, string url, double? height = null, double? width = null, bool? isLandscape = null, double? marginLeft = null, double? marginBottom = null, double? marginRight = null, double? marginTop = null, string dstFolder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutWebInStorageToPdf");
            // verify the required parameter 'url' is set
            if (url == null)
                throw new ApiException(400, "Missing required parameter 'url' when calling PdfApi->PutWebInStorageToPdf");

            var localVarPath = "/pdf/{name}/create/web";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (url != null) localVarQueryParams.Add("url", ApiClient.ParameterToString(url)); // query parameter
            if (height != null) localVarQueryParams.Add("height", ApiClient.ParameterToString(height)); // query parameter
            if (width != null) localVarQueryParams.Add("width", ApiClient.ParameterToString(width)); // query parameter
            if (isLandscape != null) localVarQueryParams.Add("isLandscape", ApiClient.ParameterToString(isLandscape)); // query parameter
            if (marginLeft != null) localVarQueryParams.Add("marginLeft", ApiClient.ParameterToString(marginLeft)); // query parameter
            if (marginBottom != null) localVarQueryParams.Add("marginBottom", ApiClient.ParameterToString(marginBottom)); // query parameter
            if (marginRight != null) localVarQueryParams.Add("marginRight", ApiClient.ParameterToString(marginRight)); // query parameter
            if (marginTop != null) localVarQueryParams.Add("marginTop", ApiClient.ParameterToString(marginTop)); // query parameter
            if (dstFolder != null) localVarQueryParams.Add("dstFolder", ApiClient.ParameterToString(dstFolder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutWebInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Converts PDF document which contatins XFA form (in request content) to PDF with AcroForm and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PutXfaPdfInRequestToAcroForm (string outPath, string storage = null, System.IO.Stream file = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PutXfaPdfInRequestToAcroFormWithHttpInfo(outPath, storage, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document which contatins XFA form (in request content) to PDF with AcroForm and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PutXfaPdfInRequestToAcroFormWithHttpInfo (string outPath, string storage = null, System.IO.Stream file = null)
        {
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutXfaPdfInRequestToAcroForm");

            var localVarPath = "/pdf/convert/xfatoacroform";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (file != null) localVarFileParams.Add("file", ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutXfaPdfInRequestToAcroForm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Converts PDF document which contatins XFA form (in request content) to PDF with AcroForm and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PutXfaPdfInRequestToAcroFormAsync (string outPath, string storage = null, System.IO.Stream file = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PutXfaPdfInRequestToAcroFormAsyncWithHttpInfo(outPath, storage, file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document which contatins XFA form (in request content) to PDF with AcroForm and uploads resulting file to storage. 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <param name="file">A file to be converted. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutXfaPdfInRequestToAcroFormAsyncWithHttpInfo (string outPath, string storage = null, System.IO.Stream file = null)
        {
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutXfaPdfInRequestToAcroForm");

            var localVarPath = "/pdf/convert/xfatoacroform";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
            if (file != null) localVarFileParams.Add("file", ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutXfaPdfInRequestToAcroForm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Converts PDF document which contatins XFA form (located on storage) to PDF with AcroForm and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PutXfaPdfInStorageToAcroForm (string name, string outPath, string folder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PutXfaPdfInStorageToAcroFormWithHttpInfo(name, outPath, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts PDF document which contatins XFA form (located on storage) to PDF with AcroForm and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PutXfaPdfInStorageToAcroFormWithHttpInfo (string name, string outPath, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutXfaPdfInStorageToAcroForm");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutXfaPdfInStorageToAcroForm");

            var localVarPath = "/pdf/{name}/convert/xfatoacroform";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutXfaPdfInStorageToAcroForm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Converts PDF document which contatins XFA form (located on storage) to PDF with AcroForm and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PutXfaPdfInStorageToAcroFormAsync (string name, string outPath, string folder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PutXfaPdfInStorageToAcroFormAsyncWithHttpInfo(name, outPath, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts PDF document which contatins XFA form (located on storage) to PDF with AcroForm and uploads resulting file to storage 
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="outPath">Full resulting filename (ex. /folder1/folder2/result.pdf)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutXfaPdfInStorageToAcroFormAsyncWithHttpInfo (string name, string outPath, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutXfaPdfInStorageToAcroForm");
            // verify the required parameter 'outPath' is set
            if (outPath == null)
                throw new ApiException(400, "Missing required parameter 'outPath' when calling PdfApi->PutXfaPdfInStorageToAcroForm");

            var localVarPath = "/pdf/{name}/convert/xfatoacroform";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (outPath != null) localVarQueryParams.Add("outPath", ApiClient.ParameterToString(outPath)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutXfaPdfInStorageToAcroForm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Convert XML file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xml)</param>
        /// <param name="xslFilePath">Full XSL source filename (ex. /folder1/folder2/template.xsl) (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PutXmlInStorageToPdf (string name, string srcPath, string xslFilePath = null, string dstFolder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PutXmlInStorageToPdfWithHttpInfo(name, srcPath, xslFilePath, dstFolder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert XML file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xml)</param>
        /// <param name="xslFilePath">Full XSL source filename (ex. /folder1/folder2/template.xsl) (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PutXmlInStorageToPdfWithHttpInfo (string name, string srcPath, string xslFilePath = null, string dstFolder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutXmlInStorageToPdf");
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->PutXmlInStorageToPdf");

            var localVarPath = "/pdf/{name}/create/xml";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (xslFilePath != null) localVarQueryParams.Add("xslFilePath", ApiClient.ParameterToString(xslFilePath)); // query parameter
            if (dstFolder != null) localVarQueryParams.Add("dstFolder", ApiClient.ParameterToString(dstFolder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutXmlInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Convert XML file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xml)</param>
        /// <param name="xslFilePath">Full XSL source filename (ex. /folder1/folder2/template.xsl) (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PutXmlInStorageToPdfAsync (string name, string srcPath, string xslFilePath = null, string dstFolder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PutXmlInStorageToPdfAsyncWithHttpInfo(name, srcPath, xslFilePath, dstFolder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert XML file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xml)</param>
        /// <param name="xslFilePath">Full XSL source filename (ex. /folder1/folder2/template.xsl) (optional)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutXmlInStorageToPdfAsyncWithHttpInfo (string name, string srcPath, string xslFilePath = null, string dstFolder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutXmlInStorageToPdf");
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->PutXmlInStorageToPdf");

            var localVarPath = "/pdf/{name}/create/xml";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (xslFilePath != null) localVarQueryParams.Add("xslFilePath", ApiClient.ParameterToString(xslFilePath)); // query parameter
            if (dstFolder != null) localVarQueryParams.Add("dstFolder", ApiClient.ParameterToString(dstFolder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutXmlInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Convert XPS file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xps)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PutXpsInStorageToPdf (string name, string srcPath, string dstFolder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PutXpsInStorageToPdfWithHttpInfo(name, srcPath, dstFolder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert XPS file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xps)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PutXpsInStorageToPdfWithHttpInfo (string name, string srcPath, string dstFolder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutXpsInStorageToPdf");
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->PutXpsInStorageToPdf");

            var localVarPath = "/pdf/{name}/create/xps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (dstFolder != null) localVarQueryParams.Add("dstFolder", ApiClient.ParameterToString(dstFolder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutXpsInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Convert XPS file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xps)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PutXpsInStorageToPdfAsync (string name, string srcPath, string dstFolder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PutXpsInStorageToPdfAsyncWithHttpInfo(name, srcPath, dstFolder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert XPS file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xps)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutXpsInStorageToPdfAsyncWithHttpInfo (string name, string srcPath, string dstFolder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutXpsInStorageToPdf");
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->PutXpsInStorageToPdf");

            var localVarPath = "/pdf/{name}/create/xps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (dstFolder != null) localVarQueryParams.Add("dstFolder", ApiClient.ParameterToString(dstFolder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutXpsInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Convert XslFo file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xpsfo)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>AsposeResponse</returns>
        public AsposeResponse PutXslFoInStorageToPdf (string name, string srcPath, string dstFolder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = PutXslFoInStorageToPdfWithHttpInfo(name, srcPath, dstFolder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert XslFo file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xpsfo)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>ApiResponse of AsposeResponse</returns>
        public ApiResponse< AsposeResponse > PutXslFoInStorageToPdfWithHttpInfo (string name, string srcPath, string dstFolder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutXslFoInStorageToPdf");
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->PutXslFoInStorageToPdf");

            var localVarPath = "/pdf/{name}/create/xslfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (dstFolder != null) localVarQueryParams.Add("dstFolder", ApiClient.ParameterToString(dstFolder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutXslFoInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

        /// <summary>
        /// Convert XslFo file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xpsfo)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of AsposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeResponse> PutXslFoInStorageToPdfAsync (string name, string srcPath, string dstFolder = null, string storage = null)
        {
             ApiResponse<AsposeResponse> localVarResponse = await PutXslFoInStorageToPdfAsyncWithHttpInfo(name, srcPath, dstFolder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert XslFo file (located on storage) to PDF format and upload resulting file to storage.  
        /// </summary>
        /// <exception cref="Aspose.Pdf.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="srcPath">Full source filename (ex. /folder1/folder2/template.xpsfo)</param>
        /// <param name="dstFolder">The destination document folder. (optional)</param>
        /// <param name="storage">The document storage. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeResponse>> PutXslFoInStorageToPdfAsyncWithHttpInfo (string name, string srcPath, string dstFolder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PdfApi->PutXslFoInStorageToPdf");
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling PdfApi->PutXslFoInStorageToPdf");

            var localVarPath = "/pdf/{name}/create/xslfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (srcPath != null) localVarQueryParams.Add("srcPath", ApiClient.ParameterToString(srcPath)); // query parameter
            if (dstFolder != null) localVarQueryParams.Add("dstFolder", ApiClient.ParameterToString(dstFolder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutXslFoInStorageToPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeResponse) ApiClient.Deserialize(localVarResponse, typeof(AsposeResponse)));
        }

    }
}
